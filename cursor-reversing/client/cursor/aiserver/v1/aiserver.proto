syntax = "proto3";

package aiserver.v1;

option go_package = "cursor/gen/aiserver/v1;aiserverv1";


enum SummarizationStrategy { // aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy
        SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED = 0;
        SUMMARIZATION_STRATEGY_SUMMARIZED = 1;
        SUMMARIZATION_STRATEGY_EMBEDDED = 2;
}
enum Intent { // aiserver.v1.ConversationMessage.CodeChunk.Intent
        INTENT_UNSPECIFIED = 0;
        INTENT_COMPOSER_FILE = 1;
}
enum DiagnosticSeverity { // aiserver.v1.Diagnostic.DiagnosticSeverity
        DIAGNOSTIC_SEVERITY_UNSPECIFIED = 0;
        DIAGNOSTIC_SEVERITY_ERROR = 1;
        DIAGNOSTIC_SEVERITY_WARNING = 2;
        DIAGNOSTIC_SEVERITY_INFORMATION = 3;
        DIAGNOSTIC_SEVERITY_HINT = 4;
}
enum ChunkType { // aiserver.v1.ChunkType
        CHUNK_TYPE_UNSPECIFIED = 0;
        CHUNK_TYPE_CODEBASE = 1;
        CHUNK_TYPE_LONG_FILE = 2;
        CHUNK_TYPE_DOCS = 3;
}
message GetChatRequest { // aiserver.v1.GetChatRequest
        CurrentFileInfo current_file = 1;
        repeated ConversationMessage conversation = 2;
        repeated RepositoryInfo repositories = 3;
        ExplicitContext explicit_context = 4;
        optional string workspace_root_path = 5;
        repeated CodeBlock code_blocks = 6;
        ModelDetails model_details = 7;
        repeated string documentation_identifiers = 8;
        string request_id = 9;
        LinterErrors linter_errors = 10;
        optional string summary = 11;
        optional int32 summary_up_until_index = 12;
        optional bool allow_long_file_scan = 13;
        optional bool is_bash = 14;
        string conversation_id = 15;
        optional bool can_handle_filenames_after_language_ids = 16;
        optional string use_web = 17;
        repeated ChatQuote quotes = 18;
        optional DebugInfo debug_info = 19;
        optional string workspace_id = 20;
        repeated ChatExternalLink external_links = 21;
        repeated CommitNote commit_notes = 23;
        optional bool long_context_mode = 22;
        optional bool is_eval = 24;
        optional int32 desired_max_tokens = 26;
        ContextAST context_ast = 25;
        optional bool is_composer = 27;
        optional bool runnable_code_blocks = 28;
}
message CurrentFileInfo { // aiserver.v1.CurrentFileInfo
                message NotebookCell { // aiserver.v1.CurrentFileInfo.NotebookCell
                }
        string relative_workspace_path = 1;
        string contents = 2;
        repeated NotebookCell cells = 16;
        repeated BM25Chunk top_chunks = 10;
        int32 contents_start_at_line = 9;
        CursorPosition cursor_position = 3;
        repeated DataframeInfo dataframes = 4;
        int32 total_number_of_lines = 8;
        string language_id = 5;
        CursorRange selection = 6;
        optional int32 alternative_version_id = 11;
        repeated Diagnostic diagnostics = 7;
        optional int32 file_version = 14;
        repeated int32 cell_start_lines = 15;
}
message BM25Chunk { // aiserver.v1.BM25Chunk
        string content = 1;
        SimplestRange range = 2;
        int32 score = 3;
        string relative_path = 4;
}
message SimplestRange { // aiserver.v1.SimplestRange
        int32 start_line = 1;
        int32 end_line_inclusive = 2;
}
message CursorPosition { // aiserver.v1.CursorPosition
        int32 line = 1;
        int32 column = 2;
}
message DataframeInfo { // aiserver.v1.DataframeInfo
                message Column { // aiserver.v1.DataframeInfo.Column
                        string key = 1;
                        string type = 2;
                }
        string name = 1;
        string shape = 2;
        int32 data_dimensionality = 3;
        repeated Column columns = 6;
        int32 row_count = 7;
        string index_column = 8;
}
message CursorRange { // aiserver.v1.CursorRange
        CursorPosition start_position = 1;
        CursorPosition end_position = 2;
}
message Diagnostic { // aiserver.v1.Diagnostic
                enum DiagnosticSeverity { // aiserver.v1.Diagnostic.DiagnosticSeverity
                        DIAGNOSTIC_SEVERITY_UNSPECIFIED = 0;
                        DIAGNOSTIC_SEVERITY_ERROR = 1;
                        DIAGNOSTIC_SEVERITY_WARNING = 2;
                        DIAGNOSTIC_SEVERITY_INFORMATION = 3;
                        DIAGNOSTIC_SEVERITY_HINT = 4;
                }
                message RelatedInformation { // aiserver.v1.Diagnostic.RelatedInformation
                        string message = 1;
                        CursorRange range = 2;
                }
        string message = 1;
        CursorRange range = 2;
        DiagnosticSeverity severity = 3;
        repeated RelatedInformation related_information = 4;
}
message ConversationMessage { // aiserver.v1.ConversationMessage
                enum MessageType { // aiserver.v1.ConversationMessage.MessageType
                        MESSAGE_TYPE_UNSPECIFIED = 0;
                        MESSAGE_TYPE_HUMAN = 1;
                        MESSAGE_TYPE_AI = 2;
                }
                message CodeChunk { // aiserver.v1.ConversationMessage.CodeChunk
                        string relative_workspace_path = 1;
                        int32 start_line_number = 2;
                        repeated string lines = 3;
                        optional SummarizationStrategy summarization_strategy = 4;
                        string language_identifier = 5;
                        optional Intent intent = 6;
                }
                message ApproximateLintError { // aiserver.v1.ConversationMessage.ApproximateLintError
                        string message = 1;
                        string value = 2;
                        int32 start_line = 3;
                        int32 end_line = 4;
                        int32 start_column = 5;
                        int32 end_column = 6;
                }
                message Lints { // aiserver.v1.ConversationMessage.Lints
                        GetLintsForChangeResponse lints = 1;
                        string chat_codeblock_model_value = 2;
                }
                message ToolResult { // aiserver.v1.ConversationMessage.ToolResult
                        string tool_call_id = 1;
                        string tool_name = 2;
                        uint32 tool_index = 3;
                        string args = 4;
                        string raw_args = 5;
                        repeated CodeChunk attached_code_chunks = 6;
                        optional string content = 7;
                }
        string text = 1;
        MessageType type = 2;
        repeated CodeChunk attached_code_chunks = 3;
        repeated CodeBlock codebase_context_chunks = 4;
        repeated Commit commits = 5;
        repeated PullRequest pull_requests = 6;
        repeated GitDiff git_diffs = 7;
        repeated SimpleFileDiff assistant_suggested_diffs = 8;
        repeated InterpreterResult interpreter_results = 9;
        repeated ImageProto images = 10;
        repeated string attached_folders = 11;
        repeated ApproximateLintError approximate_lint_errors = 12;
        string bubble_id = 13;
        repeated FolderInfo attached_folders_new = 14;
        repeated Lints lints = 15;
        repeated UserResponseToSuggestedCodeBlock user_responses_to_suggested_code_blocks = 16;
        repeated string relevant_files = 17;
        repeated ToolResult tool_results = 18;
}
message CodeBlock { // aiserver.v1.CodeBlock
                message Signatures { // aiserver.v1.CodeBlock.Signatures
                        repeated CursorRange ranges = 1;
                }
        string relative_workspace_path = 1;
        optional string file_contents = 2;
        CursorRange range = 3;
        string contents = 4;
        Signatures signatures = 5;
        optional string override_contents = 6;
        optional string original_contents = 7;
        repeated DetailedLine detailed_lines = 8;
}
message DetailedLine { // aiserver.v1.DetailedLine
        string text = 1;
        float line_number = 2;
        bool is_signature = 3;
}
message Commit { // aiserver.v1.Commit
        string sha = 1;
        string message = 2;
        string description = 3;
        repeated FileDiff diff = 4;
        string author = 5;
        string date = 6;
}
message FileDiff { // aiserver.v1.FileDiff
                message Chunk { // aiserver.v1.FileDiff.Chunk
                        string content = 1;
                        repeated string lines = 2;
                }
        string from = 1;
        string to = 2;
        repeated Chunk chunks = 3;
}
message PullRequest { // aiserver.v1.PullRequest
        string title = 1;
        string body = 2;
        repeated FileDiff diff = 3;
}
message GitDiff { // aiserver.v1.GitDiff
                enum DiffType { // aiserver.v1.GitDiff.DiffType
                        DIFF_TYPE_UNSPECIFIED = 0;
                        DIFF_TYPE_DIFF_TO_HEAD = 1;
                        DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN = 2;
                }
        repeated FileDiff diffs = 1;
        DiffType diff_type = 2;
}
message SimpleFileDiff { // aiserver.v1.SimpleFileDiff
                message Chunk { // aiserver.v1.SimpleFileDiff.Chunk
                        repeated string old_lines = 1;
                        repeated string new_lines = 2;
                        LineRange old_range = 3;
                        LineRange new_range = 4;
                }
        string relative_workspace_path = 1;
        repeated Chunk chunks = 3;
}
message LineRange { // aiserver.v1.LineRange
        int32 start_line_number = 1;
        int32 end_line_number_inclusive = 2;
}
message InterpreterResult { // aiserver.v1.InterpreterResult
        string output = 1;
        bool success = 2;
}
message ImageProto { // aiserver.v1.ImageProto
                message Dimension { // aiserver.v1.ImageProto.Dimension
                        int32 width = 1;
                        int32 height = 2;
                }
        bytes data = 1;
        Dimension dimension = 2;
}
message FolderInfo { // aiserver.v1.FolderInfo
        string relative_path = 1;
        repeated FolderFileInfo files = 2;
}
message FolderFileInfo { // aiserver.v1.FolderFileInfo
        string relative_path = 1;
        string content = 2;
        bool truncated = 3;
        float score = 4;
}
message GetLintsForChangeResponse { // aiserver.v1.GetLintsForChangeResponse
                message Lint { // aiserver.v1.GetLintsForChangeResponse.Lint
                        string message = 1;
                        string severity = 2;
                        string relative_workspace_path = 3;
                        int32 start_line_number_one_indexed = 4;
                        int32 start_column_one_indexed = 5;
                        int32 end_line_number_inclusive_one_indexed = 6;
                        int32 end_column_one_indexed = 7;
                        repeated QuickFix quick_fixes = 9;
                }
        repeated Lint lints = 1;
}
message QuickFix { // aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix
        string message = 1;
        string kind = 2;
        bool is_preferred = 3;
        repeated Edit edits = 4;
}
message Edit { // aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit
        string relative_workspace_path = 1;
        string text = 2;
        int32 start_line_number_one_indexed = 3;
        int32 start_column_one_indexed = 4;
        int32 end_line_number_inclusive_one_indexed = 5;
        int32 end_column_one_indexed = 6;
}
message UserResponseToSuggestedCodeBlock { // aiserver.v1.UserResponseToSuggestedCodeBlock
                enum UserResponseType { // aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
                        USER_RESPONSE_TYPE_UNSPECIFIED = 0;
                        USER_RESPONSE_TYPE_ACCEPT = 1;
                        USER_RESPONSE_TYPE_REJECT = 2;
                        USER_RESPONSE_TYPE_MODIFY = 3;
                }
        UserResponseType user_response_type = 1;
        string file_path = 2;
        optional FileDiff user_modifications_to_suggested_code_blocks = 3;
}
message CodeChunk { // aiserver.v1.ConversationMessage.CodeChunk
        string relative_workspace_path = 1;
        int32 start_line_number = 2;
        repeated string lines = 3;
        optional SummarizationStrategy summarization_strategy = 4;
        string language_identifier = 5;
        optional Intent intent = 6;
}
message RepositoryInfo { // aiserver.v1.RepositoryInfo
        string relative_workspace_path = 1;
        repeated string remote_urls = 2;
        repeated string remote_names = 3;
        string repo_name = 4;
        string repo_owner = 5;
        bool is_tracked = 6;
        bool is_local = 7;
        optional int32 num_files = 8;
        optional double orthogonal_transform_seed = 9;
}
message ExplicitContext { // aiserver.v1.ExplicitContext
        string context = 1;
        optional string repo_context = 2;
}
message ModelDetails { // aiserver.v1.ModelDetails
        optional string model_name = 1;
        optional string api_key = 2;
        optional bool enable_ghost_mode = 3;
        optional AzureState azure_state = 4;
        optional bool enable_slow_pool = 5;
        optional string openai_api_base_url = 6;
}
message AzureState { // aiserver.v1.AzureState
        string api_key = 1;
        string base_url = 2;
        string deployment = 3;
        bool use_azure = 4;
}
message LinterErrors { // aiserver.v1.LinterErrors
        string relative_workspace_path = 1;
        repeated LinterError errors = 2;
        string file_contents = 3;
}
message LinterError { // aiserver.v1.LinterError
        string message = 1;
        CursorRange range = 2;
        optional string source = 3;
        repeated RelatedInformation related_information = 4;
        optional DiagnosticSeverity severity = 5;
}
message RelatedInformation { // aiserver.v1.Diagnostic.RelatedInformation
        string message = 1;
        CursorRange range = 2;
}
message ChatQuote { // aiserver.v1.ChatQuote
        string markdown = 1;
        string bubble_id = 2;
        int32 section_index = 3;
}
message DebugInfo { // aiserver.v1.DebugInfo
                message Breakpoint { // aiserver.v1.DebugInfo.Breakpoint
                        string relative_workspace_path = 1;
                        int32 line_number = 2;
                        repeated string lines_before_breakpoint = 3;
                        repeated string lines_after_breakpoint = 4;
                        optional string exception_info = 5;
                }
                message CallStackFrame { // aiserver.v1.DebugInfo.CallStackFrame
                        string relative_workspace_path = 1;
                        int32 line_number = 2;
                        string function_name = 3;
                        repeated Scope scopes = 4;
                }
        Breakpoint breakpoint = 1;
        repeated CallStackFrame call_stack = 2;
        repeated CodeBlock history = 3;
}
message Scope { // aiserver.v1.DebugInfo.Scope
        string name = 1;
        repeated Variable variables = 2;
}
message Variable { // aiserver.v1.DebugInfo.Variable
        string name = 1;
        string value = 2;
        optional string type = 3;
}
message ChatExternalLink { // aiserver.v1.ChatExternalLink
        string url = 1;
        string uuid = 2;
}
message CommitNote { // aiserver.v1.CommitNote
        string note = 1;
        string commit_hash = 2;
}
message ContextAST { // aiserver.v1.ContextAST
        repeated ContainerTree files = 1;
}
message ContainerTree { // aiserver.v1.ContainerTree
        string relative_workspace_path = 1;
        repeated ContainerTreeNode nodes = 2;
}
message ContainerTreeNode { // aiserver.v1.ContainerTreeNode
                message Container { // aiserver.v1.ContainerTreeNode.Container
                        string doc_string = 1;
                        string header = 2;
                        string trailer = 3;
                        repeated ContainerTreeNode children = 5;
                        repeated Reference references = 6;
                        double score = 7;
                }
                message Blob { // aiserver.v1.ContainerTreeNode.Blob
                        optional string value = 1;
                }
                message Symbol { // aiserver.v1.ContainerTreeNode.Symbol
                        string doc_string = 1;
                        string value = 2;
                        repeated Reference references = 6;
                        double score = 7;
                }
        Container container = 1;
        Blob blob = 2;
        Symbol symbol = 3;
}
message Reference { // aiserver.v1.ContainerTreeNode.Reference
        string value = 1;
        string relative_workspace_path = 2;
}
message StreamChatResponse { // aiserver.v1.StreamChatResponse
                message ChunkIdentity { // aiserver.v1.StreamChatResponse.ChunkIdentity
                        string file_name = 1;
                        int32 start_line = 2;
                        int32 end_line = 3;
                        string text = 4;
                        ChunkType chunk_type = 5;
                }
        string text = 1;
        optional string debugging_only_chat_prompt = 2;
        optional int32 debugging_only_token_count = 3;
        DocumentationCitation document_citation = 4;
        optional string filled_prompt = 5;
        optional bool is_big_file = 6;
        optional string intermediate_text = 7;
        optional bool is_using_slow_request = 10;
        optional ChunkIdentity chunk_identity = 8;
        optional DocsReference docs_reference = 9;
        optional WebCitation web_citation = 11;
        optional StatusUpdates status_updates = 12;
}
message DocumentationCitation { // aiserver.v1.DocumentationCitation
        repeated DocumentationChunk chunks = 1;
}
message DocumentationChunk { // aiserver.v1.DocumentationChunk
        string doc_name = 1;
        string page_url = 2;
        string documentation_chunk = 3;
        float score = 4;
        string page_title = 5;
}
message DocsReference { // aiserver.v1.DocsReference
        string title = 1;
        string url = 2;
}
message WebCitation { // aiserver.v1.WebCitation
        repeated WebReference references = 1;
}
message WebReference { // aiserver.v1.WebReference
        string title = 2;
        string url = 1;
}
message StatusUpdates { // aiserver.v1.StatusUpdates
        repeated StatusUpdate updates = 1;
}
message StatusUpdate { // aiserver.v1.StatusUpdate
        string message = 1;
        optional string metadata = 2;
}


service AiService {
  rpc StreamChat(GetChatRequest) returns (stream StreamChatResponse) {}
}
