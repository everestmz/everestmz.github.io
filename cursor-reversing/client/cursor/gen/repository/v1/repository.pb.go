// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: repository/v1/repository.proto

package repositoryv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkingStrategy int32

const (
	ChunkingStrategy_CHUNKING_STRATEGY_UNSPECIFIED ChunkingStrategy = 0
	ChunkingStrategy_CHUNKING_STRATEGY_DEFAULT     ChunkingStrategy = 1
)

// Enum value maps for ChunkingStrategy.
var (
	ChunkingStrategy_name = map[int32]string{
		0: "CHUNKING_STRATEGY_UNSPECIFIED",
		1: "CHUNKING_STRATEGY_DEFAULT",
	}
	ChunkingStrategy_value = map[string]int32{
		"CHUNKING_STRATEGY_UNSPECIFIED": 0,
		"CHUNKING_STRATEGY_DEFAULT":     1,
	}
)

func (x ChunkingStrategy) Enum() *ChunkingStrategy {
	p := new(ChunkingStrategy)
	*p = x
	return p
}

func (x ChunkingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[0].Descriptor()
}

func (ChunkingStrategy) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[0]
}

func (x ChunkingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkingStrategy.Descriptor instead.
func (ChunkingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{0}
}

type FastRepoInitHandshakeResponse_Status int32

const (
	FastRepoInitHandshakeResponse_STATUS_UNSPECIFIED FastRepoInitHandshakeResponse_Status = 0
	FastRepoInitHandshakeResponse_STATUS_UP_TO_DATE  FastRepoInitHandshakeResponse_Status = 1
	FastRepoInitHandshakeResponse_STATUS_OUT_OF_SYNC FastRepoInitHandshakeResponse_Status = 2
	FastRepoInitHandshakeResponse_STATUS_FAILURE     FastRepoInitHandshakeResponse_Status = 3
	FastRepoInitHandshakeResponse_STATUS_EMPTY       FastRepoInitHandshakeResponse_Status = 4
)

// Enum value maps for FastRepoInitHandshakeResponse_Status.
var (
	FastRepoInitHandshakeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_UP_TO_DATE",
		2: "STATUS_OUT_OF_SYNC",
		3: "STATUS_FAILURE",
		4: "STATUS_EMPTY",
	}
	FastRepoInitHandshakeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_UP_TO_DATE":  1,
		"STATUS_OUT_OF_SYNC": 2,
		"STATUS_FAILURE":     3,
		"STATUS_EMPTY":       4,
	}
)

func (x FastRepoInitHandshakeResponse_Status) Enum() *FastRepoInitHandshakeResponse_Status {
	p := new(FastRepoInitHandshakeResponse_Status)
	*p = x
	return p
}

func (x FastRepoInitHandshakeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastRepoInitHandshakeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[1].Descriptor()
}

func (FastRepoInitHandshakeResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[1]
}

func (x FastRepoInitHandshakeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastRepoInitHandshakeResponse_Status.Descriptor instead.
func (FastRepoInitHandshakeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{2, 0}
}

type FastUpdateFileRequest_UpdateType int32

const (
	FastUpdateFileRequest_UPDATE_TYPE_UNSPECIFIED FastUpdateFileRequest_UpdateType = 0
	FastUpdateFileRequest_UPDATE_TYPE_ADD         FastUpdateFileRequest_UpdateType = 1
	FastUpdateFileRequest_UPDATE_TYPE_DELETE      FastUpdateFileRequest_UpdateType = 2
	FastUpdateFileRequest_UPDATE_TYPE_MODIFY      FastUpdateFileRequest_UpdateType = 3
)

// Enum value maps for FastUpdateFileRequest_UpdateType.
var (
	FastUpdateFileRequest_UpdateType_name = map[int32]string{
		0: "UPDATE_TYPE_UNSPECIFIED",
		1: "UPDATE_TYPE_ADD",
		2: "UPDATE_TYPE_DELETE",
		3: "UPDATE_TYPE_MODIFY",
	}
	FastUpdateFileRequest_UpdateType_value = map[string]int32{
		"UPDATE_TYPE_UNSPECIFIED": 0,
		"UPDATE_TYPE_ADD":         1,
		"UPDATE_TYPE_DELETE":      2,
		"UPDATE_TYPE_MODIFY":      3,
	}
)

func (x FastUpdateFileRequest_UpdateType) Enum() *FastUpdateFileRequest_UpdateType {
	p := new(FastUpdateFileRequest_UpdateType)
	*p = x
	return p
}

func (x FastUpdateFileRequest_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastUpdateFileRequest_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[2].Descriptor()
}

func (FastUpdateFileRequest_UpdateType) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[2]
}

func (x FastUpdateFileRequest_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastUpdateFileRequest_UpdateType.Descriptor instead.
func (FastUpdateFileRequest_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{6, 0}
}

type FastUpdateFileResponse_Status int32

const (
	FastUpdateFileResponse_STATUS_UNSPECIFIED      FastUpdateFileResponse_Status = 0
	FastUpdateFileResponse_STATUS_SUCCESS          FastUpdateFileResponse_Status = 1
	FastUpdateFileResponse_STATUS_FAILURE          FastUpdateFileResponse_Status = 2
	FastUpdateFileResponse_STATUS_EXPECTED_FAILURE FastUpdateFileResponse_Status = 3
)

// Enum value maps for FastUpdateFileResponse_Status.
var (
	FastUpdateFileResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
		3: "STATUS_EXPECTED_FAILURE",
	}
	FastUpdateFileResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_FAILURE":          2,
		"STATUS_EXPECTED_FAILURE": 3,
	}
)

func (x FastUpdateFileResponse_Status) Enum() *FastUpdateFileResponse_Status {
	p := new(FastUpdateFileResponse_Status)
	*p = x
	return p
}

func (x FastUpdateFileResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastUpdateFileResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[3].Descriptor()
}

func (FastUpdateFileResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[3]
}

func (x FastUpdateFileResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastUpdateFileResponse_Status.Descriptor instead.
func (FastUpdateFileResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{8, 0}
}

type RemoveRepositoryResponse_Status int32

const (
	RemoveRepositoryResponse_STATUS_UNSPECIFIED    RemoveRepositoryResponse_Status = 0
	RemoveRepositoryResponse_STATUS_NOT_FOUND      RemoveRepositoryResponse_Status = 1
	RemoveRepositoryResponse_STATUS_NOT_AUTHORIZED RemoveRepositoryResponse_Status = 2
	RemoveRepositoryResponse_STATUS_STARTED        RemoveRepositoryResponse_Status = 3
	RemoveRepositoryResponse_STATUS_SUCCESS        RemoveRepositoryResponse_Status = 4
)

// Enum value maps for RemoveRepositoryResponse_Status.
var (
	RemoveRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_NOT_AUTHORIZED",
		3: "STATUS_STARTED",
		4: "STATUS_SUCCESS",
	}
	RemoveRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_NOT_FOUND":      1,
		"STATUS_NOT_AUTHORIZED": 2,
		"STATUS_STARTED":        3,
		"STATUS_SUCCESS":        4,
	}
)

func (x RemoveRepositoryResponse_Status) Enum() *RemoveRepositoryResponse_Status {
	p := new(RemoveRepositoryResponse_Status)
	*p = x
	return p
}

func (x RemoveRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[4].Descriptor()
}

func (RemoveRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[4]
}

func (x RemoveRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveRepositoryResponse_Status.Descriptor instead.
func (RemoveRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{19, 0}
}

type LogoutResponse_Status int32

const (
	LogoutResponse_STATUS_UNSPECIFIED   LogoutResponse_Status = 0
	LogoutResponse_STATUS_SUCCESS       LogoutResponse_Status = 1
	LogoutResponse_STATUS_FAILURE       LogoutResponse_Status = 2
	LogoutResponse_STATUS_NOT_LOGGED_IN LogoutResponse_Status = 3
)

// Enum value maps for LogoutResponse_Status.
var (
	LogoutResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
		3: "STATUS_NOT_LOGGED_IN",
	}
	LogoutResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":   0,
		"STATUS_SUCCESS":       1,
		"STATUS_FAILURE":       2,
		"STATUS_NOT_LOGGED_IN": 3,
	}
)

func (x LogoutResponse_Status) Enum() *LogoutResponse_Status {
	p := new(LogoutResponse_Status)
	*p = x
	return p
}

func (x LogoutResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogoutResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[5].Descriptor()
}

func (LogoutResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[5]
}

func (x LogoutResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogoutResponse_Status.Descriptor instead.
func (LogoutResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{48, 0}
}

type PollLoginResponse_Status int32

const (
	PollLoginResponse_STATUS_UNSPECIFIED PollLoginResponse_Status = 0
	PollLoginResponse_STATUS_LOGGED_IN   PollLoginResponse_Status = 1
	PollLoginResponse_STATUS_FAILURE     PollLoginResponse_Status = 2
	PollLoginResponse_STATUS_CHECKING    PollLoginResponse_Status = 3
)

// Enum value maps for PollLoginResponse_Status.
var (
	PollLoginResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_LOGGED_IN",
		2: "STATUS_FAILURE",
		3: "STATUS_CHECKING",
	}
	PollLoginResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_LOGGED_IN":   1,
		"STATUS_FAILURE":     2,
		"STATUS_CHECKING":    3,
	}
)

func (x PollLoginResponse_Status) Enum() *PollLoginResponse_Status {
	p := new(PollLoginResponse_Status)
	*p = x
	return p
}

func (x PollLoginResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PollLoginResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[6].Descriptor()
}

func (PollLoginResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[6]
}

func (x PollLoginResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PollLoginResponse_Status.Descriptor instead.
func (PollLoginResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{52, 0}
}

type UpgradeScopeResponse_Status int32

const (
	UpgradeScopeResponse_STATUS_UNSPECIFIED UpgradeScopeResponse_Status = 0
	UpgradeScopeResponse_STATUS_SUCCESS     UpgradeScopeResponse_Status = 1
	UpgradeScopeResponse_STATUS_FAILURE     UpgradeScopeResponse_Status = 2
)

// Enum value maps for UpgradeScopeResponse_Status.
var (
	UpgradeScopeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
	}
	UpgradeScopeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_FAILURE":     2,
	}
)

func (x UpgradeScopeResponse_Status) Enum() *UpgradeScopeResponse_Status {
	p := new(UpgradeScopeResponse_Status)
	*p = x
	return p
}

func (x UpgradeScopeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeScopeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[7].Descriptor()
}

func (UpgradeScopeResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[7]
}

func (x UpgradeScopeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeScopeResponse_Status.Descriptor instead.
func (UpgradeScopeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{54, 0}
}

type UploadRepositoryResponse_Status int32

const (
	UploadRepositoryResponse_STATUS_UNSPECIFIED                UploadRepositoryResponse_Status = 0
	UploadRepositoryResponse_STATUS_SUCCESS                    UploadRepositoryResponse_Status = 1
	UploadRepositoryResponse_STATUS_FAILURE                    UploadRepositoryResponse_Status = 2
	UploadRepositoryResponse_STATUS_AUTH_TOKEN_BAD_PERMISSIONS UploadRepositoryResponse_Status = 3
	UploadRepositoryResponse_STATUS_ALREADY_EXISTS             UploadRepositoryResponse_Status = 4
)

// Enum value maps for UploadRepositoryResponse_Status.
var (
	UploadRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
		3: "STATUS_AUTH_TOKEN_BAD_PERMISSIONS",
		4: "STATUS_ALREADY_EXISTS",
	}
	UploadRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                0,
		"STATUS_SUCCESS":                    1,
		"STATUS_FAILURE":                    2,
		"STATUS_AUTH_TOKEN_BAD_PERMISSIONS": 3,
		"STATUS_ALREADY_EXISTS":             4,
	}
)

func (x UploadRepositoryResponse_Status) Enum() *UploadRepositoryResponse_Status {
	p := new(UploadRepositoryResponse_Status)
	*p = x
	return p
}

func (x UploadRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[8].Descriptor()
}

func (UploadRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[8]
}

func (x UploadRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadRepositoryResponse_Status.Descriptor instead.
func (UploadRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{58, 0}
}

type SubscribeRepositoryResponse_Status int32

const (
	SubscribeRepositoryResponse_STATUS_UNSPECIFIED        SubscribeRepositoryResponse_Status = 0
	SubscribeRepositoryResponse_STATUS_NOT_FOUND          SubscribeRepositoryResponse_Status = 1
	SubscribeRepositoryResponse_STATUS_NOT_AUTHORIZED     SubscribeRepositoryResponse_Status = 2
	SubscribeRepositoryResponse_STATUS_ALREADY_SUBSCRIBED SubscribeRepositoryResponse_Status = 3
	SubscribeRepositoryResponse_STATUS_SUCCESS            SubscribeRepositoryResponse_Status = 4
)

// Enum value maps for SubscribeRepositoryResponse_Status.
var (
	SubscribeRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_NOT_AUTHORIZED",
		3: "STATUS_ALREADY_SUBSCRIBED",
		4: "STATUS_SUCCESS",
	}
	SubscribeRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_NOT_FOUND":          1,
		"STATUS_NOT_AUTHORIZED":     2,
		"STATUS_ALREADY_SUBSCRIBED": 3,
		"STATUS_SUCCESS":            4,
	}
)

func (x SubscribeRepositoryResponse_Status) Enum() *SubscribeRepositoryResponse_Status {
	p := new(SubscribeRepositoryResponse_Status)
	*p = x
	return p
}

func (x SubscribeRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[9].Descriptor()
}

func (SubscribeRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[9]
}

func (x SubscribeRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeRepositoryResponse_Status.Descriptor instead.
func (SubscribeRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{60, 0}
}

type UnsubscribeRepositoryResponse_Status int32

const (
	UnsubscribeRepositoryResponse_STATUS_UNSPECIFIED    UnsubscribeRepositoryResponse_Status = 0
	UnsubscribeRepositoryResponse_STATUS_NOT_FOUND      UnsubscribeRepositoryResponse_Status = 1
	UnsubscribeRepositoryResponse_STATUS_NOT_SUBSCRIBED UnsubscribeRepositoryResponse_Status = 2
	UnsubscribeRepositoryResponse_STATUS_SUCCESS        UnsubscribeRepositoryResponse_Status = 3
)

// Enum value maps for UnsubscribeRepositoryResponse_Status.
var (
	UnsubscribeRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_NOT_SUBSCRIBED",
		3: "STATUS_SUCCESS",
	}
	UnsubscribeRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_NOT_FOUND":      1,
		"STATUS_NOT_SUBSCRIBED": 2,
		"STATUS_SUCCESS":        3,
	}
)

func (x UnsubscribeRepositoryResponse_Status) Enum() *UnsubscribeRepositoryResponse_Status {
	p := new(UnsubscribeRepositoryResponse_Status)
	*p = x
	return p
}

func (x UnsubscribeRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnsubscribeRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_repository_v1_repository_proto_enumTypes[10].Descriptor()
}

func (UnsubscribeRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_repository_v1_repository_proto_enumTypes[10]
}

func (x UnsubscribeRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnsubscribeRepositoryResponse_Status.Descriptor instead.
func (UnsubscribeRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{62, 0}
}

type FastRepoInitHandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository              *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RootHash                string          `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	PotentialLegacyRepoName string          `protobuf:"bytes,3,opt,name=potential_legacy_repo_name,json=potentialLegacyRepoName,proto3" json:"potential_legacy_repo_name,omitempty"`
}

func (x *FastRepoInitHandshakeRequest) Reset() {
	*x = FastRepoInitHandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastRepoInitHandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRepoInitHandshakeRequest) ProtoMessage() {}

func (x *FastRepoInitHandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRepoInitHandshakeRequest.ProtoReflect.Descriptor instead.
func (*FastRepoInitHandshakeRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{0}
}

func (x *FastRepoInitHandshakeRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FastRepoInitHandshakeRequest) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *FastRepoInitHandshakeRequest) GetPotentialLegacyRepoName() string {
	if x != nil {
		return x.PotentialLegacyRepoName
	}
	return ""
}

type RepositoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath   string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RemoteUrls              []string `protobuf:"bytes,2,rep,name=remote_urls,json=remoteUrls,proto3" json:"remote_urls,omitempty"`
	RemoteNames             []string `protobuf:"bytes,3,rep,name=remote_names,json=remoteNames,proto3" json:"remote_names,omitempty"`
	RepoName                string   `protobuf:"bytes,4,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	RepoOwner               string   `protobuf:"bytes,5,opt,name=repo_owner,json=repoOwner,proto3" json:"repo_owner,omitempty"`
	IsTracked               bool     `protobuf:"varint,6,opt,name=is_tracked,json=isTracked,proto3" json:"is_tracked,omitempty"`
	IsLocal                 bool     `protobuf:"varint,7,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	NumFiles                *int32   `protobuf:"varint,8,opt,name=num_files,json=numFiles,proto3,oneof" json:"num_files,omitempty"`
	OrthogonalTransformSeed *float64 `protobuf:"fixed64,9,opt,name=orthogonal_transform_seed,json=orthogonalTransformSeed,proto3,oneof" json:"orthogonal_transform_seed,omitempty"`
}

func (x *RepositoryInfo) Reset() {
	*x = RepositoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryInfo) ProtoMessage() {}

func (x *RepositoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryInfo.ProtoReflect.Descriptor instead.
func (*RepositoryInfo) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{1}
}

func (x *RepositoryInfo) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *RepositoryInfo) GetRemoteUrls() []string {
	if x != nil {
		return x.RemoteUrls
	}
	return nil
}

func (x *RepositoryInfo) GetRemoteNames() []string {
	if x != nil {
		return x.RemoteNames
	}
	return nil
}

func (x *RepositoryInfo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RepositoryInfo) GetRepoOwner() string {
	if x != nil {
		return x.RepoOwner
	}
	return ""
}

func (x *RepositoryInfo) GetIsTracked() bool {
	if x != nil {
		return x.IsTracked
	}
	return false
}

func (x *RepositoryInfo) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *RepositoryInfo) GetNumFiles() int32 {
	if x != nil && x.NumFiles != nil {
		return *x.NumFiles
	}
	return 0
}

func (x *RepositoryInfo) GetOrthogonalTransformSeed() float64 {
	if x != nil && x.OrthogonalTransformSeed != nil {
		return *x.OrthogonalTransformSeed
	}
	return 0
}

type FastRepoInitHandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   FastRepoInitHandshakeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.FastRepoInitHandshakeResponse_Status" json:"status,omitempty"`
	RepoName string                               `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *FastRepoInitHandshakeResponse) Reset() {
	*x = FastRepoInitHandshakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastRepoInitHandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRepoInitHandshakeResponse) ProtoMessage() {}

func (x *FastRepoInitHandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRepoInitHandshakeResponse.ProtoReflect.Descriptor instead.
func (*FastRepoInitHandshakeResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{2}
}

func (x *FastRepoInitHandshakeResponse) GetStatus() FastRepoInitHandshakeResponse_Status {
	if x != nil {
		return x.Status
	}
	return FastRepoInitHandshakeResponse_STATUS_UNSPECIFIED
}

func (x *FastRepoInitHandshakeResponse) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type SyncMerkleSubtreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository       *RepositoryInfo  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LocalPartialPath *PartialPathItem `protobuf:"bytes,2,opt,name=local_partial_path,json=localPartialPath,proto3" json:"local_partial_path,omitempty"`
}

func (x *SyncMerkleSubtreeRequest) Reset() {
	*x = SyncMerkleSubtreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMerkleSubtreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMerkleSubtreeRequest) ProtoMessage() {}

func (x *SyncMerkleSubtreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMerkleSubtreeRequest.ProtoReflect.Descriptor instead.
func (*SyncMerkleSubtreeRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{3}
}

func (x *SyncMerkleSubtreeRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *SyncMerkleSubtreeRequest) GetLocalPartialPath() *PartialPathItem {
	if x != nil {
		return x.LocalPartialPath
	}
	return nil
}

type PartialPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	HashOfNode            string `protobuf:"bytes,2,opt,name=hash_of_node,json=hashOfNode,proto3" json:"hash_of_node,omitempty"`
}

func (x *PartialPathItem) Reset() {
	*x = PartialPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialPathItem) ProtoMessage() {}

func (x *PartialPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialPathItem.ProtoReflect.Descriptor instead.
func (*PartialPathItem) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{4}
}

func (x *PartialPathItem) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *PartialPathItem) GetHashOfNode() string {
	if x != nil {
		return x.HashOfNode
	}
	return ""
}

type SyncMerkleSubtreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match    bool                                `protobuf:"varint,1,opt,name=match,proto3" json:"match,omitempty"`
	Mismatch *SyncMerkleSubtreeResponse_Mismatch `protobuf:"bytes,2,opt,name=mismatch,proto3" json:"mismatch,omitempty"`
}

func (x *SyncMerkleSubtreeResponse) Reset() {
	*x = SyncMerkleSubtreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMerkleSubtreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMerkleSubtreeResponse) ProtoMessage() {}

func (x *SyncMerkleSubtreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMerkleSubtreeResponse.ProtoReflect.Descriptor instead.
func (*SyncMerkleSubtreeResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{5}
}

func (x *SyncMerkleSubtreeResponse) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *SyncMerkleSubtreeResponse) GetMismatch() *SyncMerkleSubtreeResponse_Mismatch {
	if x != nil {
		return x.Mismatch
	}
	return nil
}

type FastUpdateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository     *RepositoryInfo                  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Directory      *PartialPathItem                 `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	LocalFile      *FastUpdateFileRequest_LocalFile `protobuf:"bytes,3,opt,name=local_file,json=localFile,proto3" json:"local_file,omitempty"`
	AncestorSpline []*PartialPathItem               `protobuf:"bytes,4,rep,name=ancestor_spline,json=ancestorSpline,proto3" json:"ancestor_spline,omitempty"`
	UpdateType     FastUpdateFileRequest_UpdateType `protobuf:"varint,5,opt,name=update_type,json=updateType,proto3,enum=repository.v1.FastUpdateFileRequest_UpdateType" json:"update_type,omitempty"`
}

func (x *FastUpdateFileRequest) Reset() {
	*x = FastUpdateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastUpdateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastUpdateFileRequest) ProtoMessage() {}

func (x *FastUpdateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastUpdateFileRequest.ProtoReflect.Descriptor instead.
func (*FastUpdateFileRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{6}
}

func (x *FastUpdateFileRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FastUpdateFileRequest) GetDirectory() *PartialPathItem {
	if x != nil {
		return x.Directory
	}
	return nil
}

func (x *FastUpdateFileRequest) GetLocalFile() *FastUpdateFileRequest_LocalFile {
	if x != nil {
		return x.LocalFile
	}
	return nil
}

func (x *FastUpdateFileRequest) GetAncestorSpline() []*PartialPathItem {
	if x != nil {
		return x.AncestorSpline
	}
	return nil
}

func (x *FastUpdateFileRequest) GetUpdateType() FastUpdateFileRequest_UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return FastUpdateFileRequest_UPDATE_TYPE_UNSPECIFIED
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{7}
}

func (x *File) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *File) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type FastUpdateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status FastUpdateFileResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.FastUpdateFileResponse_Status" json:"status,omitempty"`
}

func (x *FastUpdateFileResponse) Reset() {
	*x = FastUpdateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastUpdateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastUpdateFileResponse) ProtoMessage() {}

func (x *FastUpdateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastUpdateFileResponse.ProtoReflect.Descriptor instead.
func (*FastUpdateFileResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{8}
}

func (x *FastUpdateFileResponse) GetStatus() FastUpdateFileResponse_Status {
	if x != nil {
		return x.Status
	}
	return FastUpdateFileResponse_STATUS_UNSPECIFIED
}

type SearchRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query               string          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Repository          *RepositoryInfo `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	TopK                int32           `protobuf:"varint,3,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	ModelDetails        *ModelDetails   `protobuf:"bytes,4,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	Rerank              bool            `protobuf:"varint,5,opt,name=rerank,proto3" json:"rerank,omitempty"`
	ContextCacheRequest *bool           `protobuf:"varint,6,opt,name=context_cache_request,json=contextCacheRequest,proto3,oneof" json:"context_cache_request,omitempty"`
	GlobFilter          *string         `protobuf:"bytes,7,opt,name=glob_filter,json=globFilter,proto3,oneof" json:"glob_filter,omitempty"`
	NotGlobFilter       *string         `protobuf:"bytes,8,opt,name=not_glob_filter,json=notGlobFilter,proto3,oneof" json:"not_glob_filter,omitempty"`
}

func (x *SearchRepositoryRequest) Reset() {
	*x = SearchRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryRequest) ProtoMessage() {}

func (x *SearchRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryRequest.ProtoReflect.Descriptor instead.
func (*SearchRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{9}
}

func (x *SearchRepositoryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *SearchRepositoryRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchRepositoryRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *SearchRepositoryRequest) GetRerank() bool {
	if x != nil {
		return x.Rerank
	}
	return false
}

func (x *SearchRepositoryRequest) GetContextCacheRequest() bool {
	if x != nil && x.ContextCacheRequest != nil {
		return *x.ContextCacheRequest
	}
	return false
}

func (x *SearchRepositoryRequest) GetGlobFilter() string {
	if x != nil && x.GlobFilter != nil {
		return *x.GlobFilter
	}
	return ""
}

func (x *SearchRepositoryRequest) GetNotGlobFilter() string {
	if x != nil && x.NotGlobFilter != nil {
		return *x.NotGlobFilter
	}
	return ""
}

type ModelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName        *string     `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	ApiKey           *string     `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	EnableGhostMode  *bool       `protobuf:"varint,3,opt,name=enable_ghost_mode,json=enableGhostMode,proto3,oneof" json:"enable_ghost_mode,omitempty"`
	AzureState       *AzureState `protobuf:"bytes,4,opt,name=azure_state,json=azureState,proto3,oneof" json:"azure_state,omitempty"`
	EnableSlowPool   *bool       `protobuf:"varint,5,opt,name=enable_slow_pool,json=enableSlowPool,proto3,oneof" json:"enable_slow_pool,omitempty"`
	OpenaiApiBaseUrl *string     `protobuf:"bytes,6,opt,name=openai_api_base_url,json=openaiApiBaseUrl,proto3,oneof" json:"openai_api_base_url,omitempty"`
}

func (x *ModelDetails) Reset() {
	*x = ModelDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelDetails) ProtoMessage() {}

func (x *ModelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelDetails.ProtoReflect.Descriptor instead.
func (*ModelDetails) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{10}
}

func (x *ModelDetails) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *ModelDetails) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *ModelDetails) GetEnableGhostMode() bool {
	if x != nil && x.EnableGhostMode != nil {
		return *x.EnableGhostMode
	}
	return false
}

func (x *ModelDetails) GetAzureState() *AzureState {
	if x != nil {
		return x.AzureState
	}
	return nil
}

func (x *ModelDetails) GetEnableSlowPool() bool {
	if x != nil && x.EnableSlowPool != nil {
		return *x.EnableSlowPool
	}
	return false
}

func (x *ModelDetails) GetOpenaiApiBaseUrl() string {
	if x != nil && x.OpenaiApiBaseUrl != nil {
		return *x.OpenaiApiBaseUrl
	}
	return ""
}

type AzureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey     string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	BaseUrl    string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	Deployment string `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	UseAzure   bool   `protobuf:"varint,4,opt,name=use_azure,json=useAzure,proto3" json:"use_azure,omitempty"`
}

func (x *AzureState) Reset() {
	*x = AzureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureState) ProtoMessage() {}

func (x *AzureState) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureState.ProtoReflect.Descriptor instead.
func (*AzureState) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{11}
}

func (x *AzureState) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *AzureState) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *AzureState) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *AzureState) GetUseAzure() bool {
	if x != nil {
		return x.UseAzure
	}
	return false
}

type SearchRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeResults []*CodeResult `protobuf:"bytes,1,rep,name=code_results,json=codeResults,proto3" json:"code_results,omitempty"`
}

func (x *SearchRepositoryResponse) Reset() {
	*x = SearchRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryResponse) ProtoMessage() {}

func (x *SearchRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryResponse.ProtoReflect.Descriptor instead.
func (*SearchRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{12}
}

func (x *SearchRepositoryResponse) GetCodeResults() []*CodeResult {
	if x != nil {
		return x.CodeResults
	}
	return nil
}

type CodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeBlock *CodeBlock `protobuf:"bytes,1,opt,name=code_block,json=codeBlock,proto3" json:"code_block,omitempty"`
	Score     float32    `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CodeResult) Reset() {
	*x = CodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeResult) ProtoMessage() {}

func (x *CodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeResult.ProtoReflect.Descriptor instead.
func (*CodeResult) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{13}
}

func (x *CodeResult) GetCodeBlock() *CodeBlock {
	if x != nil {
		return x.CodeBlock
	}
	return nil
}

func (x *CodeResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type CodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	FileContents          *string               `protobuf:"bytes,2,opt,name=file_contents,json=fileContents,proto3,oneof" json:"file_contents,omitempty"`
	Range                 *CursorRange          `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Contents              string                `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
	Signatures            *CodeBlock_Signatures `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
	OverrideContents      *string               `protobuf:"bytes,6,opt,name=override_contents,json=overrideContents,proto3,oneof" json:"override_contents,omitempty"`
	OriginalContents      *string               `protobuf:"bytes,7,opt,name=original_contents,json=originalContents,proto3,oneof" json:"original_contents,omitempty"`
	DetailedLines         []*DetailedLine       `protobuf:"bytes,8,rep,name=detailed_lines,json=detailedLines,proto3" json:"detailed_lines,omitempty"`
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{14}
}

func (x *CodeBlock) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CodeBlock) GetFileContents() string {
	if x != nil && x.FileContents != nil {
		return *x.FileContents
	}
	return ""
}

func (x *CodeBlock) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CodeBlock) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *CodeBlock) GetSignatures() *CodeBlock_Signatures {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *CodeBlock) GetOverrideContents() string {
	if x != nil && x.OverrideContents != nil {
		return *x.OverrideContents
	}
	return ""
}

func (x *CodeBlock) GetOriginalContents() string {
	if x != nil && x.OriginalContents != nil {
		return *x.OriginalContents
	}
	return ""
}

func (x *CodeBlock) GetDetailedLines() []*DetailedLine {
	if x != nil {
		return x.DetailedLines
	}
	return nil
}

type CursorRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *CursorPosition `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *CursorPosition `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
}

func (x *CursorRange) Reset() {
	*x = CursorRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorRange) ProtoMessage() {}

func (x *CursorRange) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorRange.ProtoReflect.Descriptor instead.
func (*CursorRange) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{15}
}

func (x *CursorRange) GetStartPosition() *CursorPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *CursorRange) GetEndPosition() *CursorPosition {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type CursorPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CursorPosition) Reset() {
	*x = CursorPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPosition) ProtoMessage() {}

func (x *CursorPosition) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPosition.ProtoReflect.Descriptor instead.
func (*CursorPosition) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{16}
}

func (x *CursorPosition) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *CursorPosition) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type DetailedLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	LineNumber  float32 `protobuf:"fixed32,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	IsSignature bool    `protobuf:"varint,3,opt,name=is_signature,json=isSignature,proto3" json:"is_signature,omitempty"`
}

func (x *DetailedLine) Reset() {
	*x = DetailedLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedLine) ProtoMessage() {}

func (x *DetailedLine) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedLine.ProtoReflect.Descriptor instead.
func (*DetailedLine) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{17}
}

func (x *DetailedLine) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DetailedLine) GetLineNumber() float32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DetailedLine) GetIsSignature() bool {
	if x != nil {
		return x.IsSignature
	}
	return false
}

type RemoveRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *RemoveRepositoryRequest) Reset() {
	*x = RemoveRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRepositoryRequest) ProtoMessage() {}

func (x *RemoveRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRepositoryRequest.ProtoReflect.Descriptor instead.
func (*RemoveRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RemoveRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.RemoveRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *RemoveRepositoryResponse) Reset() {
	*x = RemoveRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRepositoryResponse) ProtoMessage() {}

func (x *RemoveRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRepositoryResponse.ProtoReflect.Descriptor instead.
func (*RemoveRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveRepositoryResponse) GetStatus() RemoveRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveRepositoryResponse_STATUS_UNSPECIFIED
}

type EnsureIndexCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *EnsureIndexCreatedRequest) Reset() {
	*x = EnsureIndexCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureIndexCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureIndexCreatedRequest) ProtoMessage() {}

func (x *EnsureIndexCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureIndexCreatedRequest.ProtoReflect.Descriptor instead.
func (*EnsureIndexCreatedRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{20}
}

func (x *EnsureIndexCreatedRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type EnsureIndexCreatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnsureIndexCreatedResponse) Reset() {
	*x = EnsureIndexCreatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureIndexCreatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureIndexCreatedResponse) ProtoMessage() {}

func (x *EnsureIndexCreatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureIndexCreatedResponse.ProtoReflect.Descriptor instead.
func (*EnsureIndexCreatedResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{21}
}

type GetHighLevelFolderDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Readmes                        []*GetHighLevelFolderDescriptionRequest_Readme `protobuf:"bytes,1,rep,name=readmes,proto3" json:"readmes,omitempty"`
	TopLevelRelativeWorkspacePaths []string                                       `protobuf:"bytes,2,rep,name=top_level_relative_workspace_paths,json=topLevelRelativeWorkspacePaths,proto3" json:"top_level_relative_workspace_paths,omitempty"`
	WorkspaceRootPath              string                                         `protobuf:"bytes,4,opt,name=workspace_root_path,json=workspaceRootPath,proto3" json:"workspace_root_path,omitempty"`
}

func (x *GetHighLevelFolderDescriptionRequest) Reset() {
	*x = GetHighLevelFolderDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHighLevelFolderDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHighLevelFolderDescriptionRequest) ProtoMessage() {}

func (x *GetHighLevelFolderDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHighLevelFolderDescriptionRequest.ProtoReflect.Descriptor instead.
func (*GetHighLevelFolderDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{22}
}

func (x *GetHighLevelFolderDescriptionRequest) GetReadmes() []*GetHighLevelFolderDescriptionRequest_Readme {
	if x != nil {
		return x.Readmes
	}
	return nil
}

func (x *GetHighLevelFolderDescriptionRequest) GetTopLevelRelativeWorkspacePaths() []string {
	if x != nil {
		return x.TopLevelRelativeWorkspacePaths
	}
	return nil
}

func (x *GetHighLevelFolderDescriptionRequest) GetWorkspaceRootPath() string {
	if x != nil {
		return x.WorkspaceRootPath
	}
	return ""
}

type GetHighLevelFolderDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GetHighLevelFolderDescriptionResponse) Reset() {
	*x = GetHighLevelFolderDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHighLevelFolderDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHighLevelFolderDescriptionResponse) ProtoMessage() {}

func (x *GetHighLevelFolderDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHighLevelFolderDescriptionResponse.ProtoReflect.Descriptor instead.
func (*GetHighLevelFolderDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{23}
}

func (x *GetHighLevelFolderDescriptionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetEmbeddingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Texts []string `protobuf:"bytes,1,rep,name=texts,proto3" json:"texts,omitempty"`
}

func (x *GetEmbeddingsRequest) Reset() {
	*x = GetEmbeddingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmbeddingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsRequest) ProtoMessage() {}

func (x *GetEmbeddingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsRequest.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{24}
}

func (x *GetEmbeddingsRequest) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

type GetEmbeddingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embeddings []*GetEmbeddingsResponse_Embedding `protobuf:"bytes,2,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
}

func (x *GetEmbeddingsResponse) Reset() {
	*x = GetEmbeddingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmbeddingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsResponse) ProtoMessage() {}

func (x *GetEmbeddingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsResponse.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{25}
}

func (x *GetEmbeddingsResponse) GetEmbeddings() []*GetEmbeddingsResponse_Embedding {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

type SearchRepositoryDeepContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query           string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	TopK            int32    `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	TopReflectionsK int32    `protobuf:"varint,3,opt,name=top_reflections_k,json=topReflectionsK,proto3" json:"top_reflections_k,omitempty"`
	IndexIds        []string `protobuf:"bytes,4,rep,name=index_ids,json=indexIds,proto3" json:"index_ids,omitempty"`
	UseModelOnFiles bool     `protobuf:"varint,5,opt,name=use_model_on_files,json=useModelOnFiles,proto3" json:"use_model_on_files,omitempty"`
	UseReflections  bool     `protobuf:"varint,6,opt,name=use_reflections,json=useReflections,proto3" json:"use_reflections,omitempty"`
}

func (x *SearchRepositoryDeepContextRequest) Reset() {
	*x = SearchRepositoryDeepContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryDeepContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryDeepContextRequest) ProtoMessage() {}

func (x *SearchRepositoryDeepContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryDeepContextRequest.ProtoReflect.Descriptor instead.
func (*SearchRepositoryDeepContextRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{26}
}

func (x *SearchRepositoryDeepContextRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRepositoryDeepContextRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchRepositoryDeepContextRequest) GetTopReflectionsK() int32 {
	if x != nil {
		return x.TopReflectionsK
	}
	return 0
}

func (x *SearchRepositoryDeepContextRequest) GetIndexIds() []string {
	if x != nil {
		return x.IndexIds
	}
	return nil
}

func (x *SearchRepositoryDeepContextRequest) GetUseModelOnFiles() bool {
	if x != nil {
		return x.UseModelOnFiles
	}
	return false
}

func (x *SearchRepositoryDeepContextRequest) GetUseReflections() bool {
	if x != nil {
		return x.UseReflections
	}
	return false
}

type SearchRepositoryDeepContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNodes    []*NodeResult       `protobuf:"bytes,1,rep,name=top_nodes,json=topNodes,proto3" json:"top_nodes,omitempty"`
	Reflections []*ReflectionResult `protobuf:"bytes,2,rep,name=reflections,proto3" json:"reflections,omitempty"`
	IndexId     string              `protobuf:"bytes,3,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *SearchRepositoryDeepContextResponse) Reset() {
	*x = SearchRepositoryDeepContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryDeepContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryDeepContextResponse) ProtoMessage() {}

func (x *SearchRepositoryDeepContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryDeepContextResponse.ProtoReflect.Descriptor instead.
func (*SearchRepositoryDeepContextResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{27}
}

func (x *SearchRepositoryDeepContextResponse) GetTopNodes() []*NodeResult {
	if x != nil {
		return x.TopNodes
	}
	return nil
}

func (x *SearchRepositoryDeepContextResponse) GetReflections() []*ReflectionResult {
	if x != nil {
		return x.Reflections
	}
	return nil
}

func (x *SearchRepositoryDeepContextResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

type NodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  *NodeResult_NodeData `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	File  *File                `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Score float32              `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *NodeResult) Reset() {
	*x = NodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResult) ProtoMessage() {}

func (x *NodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResult.ProtoReflect.Descriptor instead.
func (*NodeResult) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{28}
}

func (x *NodeResult) GetNode() *NodeResult_NodeData {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeResult) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *NodeResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ReflectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reflection *ReflectionData `protobuf:"bytes,1,opt,name=reflection,proto3" json:"reflection,omitempty"`
	Score      float32         `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ReflectionResult) Reset() {
	*x = ReflectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectionResult) ProtoMessage() {}

func (x *ReflectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectionResult.ProtoReflect.Descriptor instead.
func (*ReflectionResult) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{29}
}

func (x *ReflectionResult) GetReflection() *ReflectionData {
	if x != nil {
		return x.Reflection
	}
	return nil
}

func (x *ReflectionResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ReflectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ReflectionData) Reset() {
	*x = ReflectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectionData) ProtoMessage() {}

func (x *ReflectionData) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectionData.ProtoReflect.Descriptor instead.
func (*ReflectionData) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{30}
}

func (x *ReflectionData) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ReflectionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReflectionData) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type RepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *RepositoryStatusRequest) Reset() {
	*x = RepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusRequest) ProtoMessage() {}

func (x *RepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*RepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{31}
}

func (x *RepositoryStatusRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RepositoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotFound               *RepositoryStatusResponse_NotFound               `protobuf:"bytes,1,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
	Uploading              *RepositoryStatusResponse_Uploading              `protobuf:"bytes,2,opt,name=uploading,proto3" json:"uploading,omitempty"`
	Syncing                *RepositoryStatusResponse_Syncing                `protobuf:"bytes,3,opt,name=syncing,proto3" json:"syncing,omitempty"`
	Synced                 *RepositoryStatusResponse_Synced                 `protobuf:"bytes,4,opt,name=synced,proto3" json:"synced,omitempty"`
	NotSubscribed          *RepositoryStatusResponse_NotSubscribed          `protobuf:"bytes,5,opt,name=not_subscribed,json=notSubscribed,proto3" json:"not_subscribed,omitempty"`
	TooBig                 *RepositoryStatusResponse_TooBig                 `protobuf:"bytes,6,opt,name=too_big,json=tooBig,proto3" json:"too_big,omitempty"`
	AuthTokenNotFound      *RepositoryStatusResponse_AuthTokenNotFound      `protobuf:"bytes,7,opt,name=auth_token_not_found,json=authTokenNotFound,proto3" json:"auth_token_not_found,omitempty"`
	AuthTokenNotAuthorized *RepositoryStatusResponse_AuthTokenNotAuthorized `protobuf:"bytes,8,opt,name=auth_token_not_authorized,json=authTokenNotAuthorized,proto3" json:"auth_token_not_authorized,omitempty"`
	ErrorUploading         *RepositoryStatusResponse_EmptyMessage           `protobuf:"bytes,10,opt,name=error_uploading,json=errorUploading,proto3" json:"error_uploading,omitempty"`
	ErrorSyncing           *RepositoryStatusResponse_EmptyMessage           `protobuf:"bytes,11,opt,name=error_syncing,json=errorSyncing,proto3" json:"error_syncing,omitempty"`
	IsOwner                *bool                                            `protobuf:"varint,9,opt,name=is_owner,json=isOwner,proto3,oneof" json:"is_owner,omitempty"`
}

func (x *RepositoryStatusResponse) Reset() {
	*x = RepositoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse) ProtoMessage() {}

func (x *RepositoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32}
}

func (x *RepositoryStatusResponse) GetNotFound() *RepositoryStatusResponse_NotFound {
	if x != nil {
		return x.NotFound
	}
	return nil
}

func (x *RepositoryStatusResponse) GetUploading() *RepositoryStatusResponse_Uploading {
	if x != nil {
		return x.Uploading
	}
	return nil
}

func (x *RepositoryStatusResponse) GetSyncing() *RepositoryStatusResponse_Syncing {
	if x != nil {
		return x.Syncing
	}
	return nil
}

func (x *RepositoryStatusResponse) GetSynced() *RepositoryStatusResponse_Synced {
	if x != nil {
		return x.Synced
	}
	return nil
}

func (x *RepositoryStatusResponse) GetNotSubscribed() *RepositoryStatusResponse_NotSubscribed {
	if x != nil {
		return x.NotSubscribed
	}
	return nil
}

func (x *RepositoryStatusResponse) GetTooBig() *RepositoryStatusResponse_TooBig {
	if x != nil {
		return x.TooBig
	}
	return nil
}

func (x *RepositoryStatusResponse) GetAuthTokenNotFound() *RepositoryStatusResponse_AuthTokenNotFound {
	if x != nil {
		return x.AuthTokenNotFound
	}
	return nil
}

func (x *RepositoryStatusResponse) GetAuthTokenNotAuthorized() *RepositoryStatusResponse_AuthTokenNotAuthorized {
	if x != nil {
		return x.AuthTokenNotAuthorized
	}
	return nil
}

func (x *RepositoryStatusResponse) GetErrorUploading() *RepositoryStatusResponse_EmptyMessage {
	if x != nil {
		return x.ErrorUploading
	}
	return nil
}

func (x *RepositoryStatusResponse) GetErrorSyncing() *RepositoryStatusResponse_EmptyMessage {
	if x != nil {
		return x.ErrorSyncing
	}
	return nil
}

func (x *RepositoryStatusResponse) GetIsOwner() bool {
	if x != nil && x.IsOwner != nil {
		return *x.IsOwner
	}
	return false
}

type BatchRepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*RepositoryStatusRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchRepositoryStatusRequest) Reset() {
	*x = BatchRepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRepositoryStatusRequest) ProtoMessage() {}

func (x *BatchRepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchRepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{33}
}

func (x *BatchRepositoryStatusRequest) GetRequests() []*RepositoryStatusRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchRepositoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*RepositoryStatusResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BatchRepositoryStatusResponse) Reset() {
	*x = BatchRepositoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRepositoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRepositoryStatusResponse) ProtoMessage() {}

func (x *BatchRepositoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRepositoryStatusResponse.ProtoReflect.Descriptor instead.
func (*BatchRepositoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{34}
}

func (x *BatchRepositoryStatusResponse) GetResponses() []*RepositoryStatusResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetUploadLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3,oneof" json:"repository,omitempty"`
}

func (x *GetUploadLimitsRequest) Reset() {
	*x = GetUploadLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadLimitsRequest) ProtoMessage() {}

func (x *GetUploadLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetUploadLimitsRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{35}
}

func (x *GetUploadLimitsRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type GetUploadLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftLimit int32 `protobuf:"varint,1,opt,name=soft_limit,json=softLimit,proto3" json:"soft_limit,omitempty"`
	HardLimit int32 `protobuf:"varint,2,opt,name=hard_limit,json=hardLimit,proto3" json:"hard_limit,omitempty"`
}

func (x *GetUploadLimitsResponse) Reset() {
	*x = GetUploadLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadLimitsResponse) ProtoMessage() {}

func (x *GetUploadLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetUploadLimitsResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{36}
}

func (x *GetUploadLimitsResponse) GetSoftLimit() int32 {
	if x != nil {
		return x.SoftLimit
	}
	return 0
}

func (x *GetUploadLimitsResponse) GetHardLimit() int32 {
	if x != nil {
		return x.HardLimit
	}
	return 0
}

type GetNumFilesToSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GetNumFilesToSendRequest) Reset() {
	*x = GetNumFilesToSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNumFilesToSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNumFilesToSendRequest) ProtoMessage() {}

func (x *GetNumFilesToSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNumFilesToSendRequest.ProtoReflect.Descriptor instead.
func (*GetNumFilesToSendRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{37}
}

func (x *GetNumFilesToSendRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type GetNumFilesToSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumFiles int32 `protobuf:"varint,1,opt,name=num_files,json=numFiles,proto3" json:"num_files,omitempty"`
}

func (x *GetNumFilesToSendResponse) Reset() {
	*x = GetNumFilesToSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNumFilesToSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNumFilesToSendResponse) ProtoMessage() {}

func (x *GetNumFilesToSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNumFilesToSendResponse.ProtoReflect.Descriptor instead.
func (*GetNumFilesToSendResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{38}
}

func (x *GetNumFilesToSendResponse) GetNumFiles() int32 {
	if x != nil {
		return x.NumFiles
	}
	return 0
}

type GetAvailableChunkingStrategiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GetAvailableChunkingStrategiesRequest) Reset() {
	*x = GetAvailableChunkingStrategiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableChunkingStrategiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableChunkingStrategiesRequest) ProtoMessage() {}

func (x *GetAvailableChunkingStrategiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableChunkingStrategiesRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableChunkingStrategiesRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{39}
}

func (x *GetAvailableChunkingStrategiesRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type GetAvailableChunkingStrategiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkingStrategies []ChunkingStrategy `protobuf:"varint,1,rep,packed,name=chunking_strategies,json=chunkingStrategies,proto3,enum=repository.v1.ChunkingStrategy" json:"chunking_strategies,omitempty"`
}

func (x *GetAvailableChunkingStrategiesResponse) Reset() {
	*x = GetAvailableChunkingStrategiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableChunkingStrategiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableChunkingStrategiesResponse) ProtoMessage() {}

func (x *GetAvailableChunkingStrategiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableChunkingStrategiesResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableChunkingStrategiesResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{40}
}

func (x *GetAvailableChunkingStrategiesResponse) GetChunkingStrategies() []ChunkingStrategy {
	if x != nil {
		return x.ChunkingStrategies
	}
	return nil
}

type AdminRemoveRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodebaseId int32 `protobuf:"varint,1,opt,name=codebase_id,json=codebaseId,proto3" json:"codebase_id,omitempty"`
}

func (x *AdminRemoveRepositoryRequest) Reset() {
	*x = AdminRemoveRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRemoveRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRemoveRepositoryRequest) ProtoMessage() {}

func (x *AdminRemoveRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRemoveRepositoryRequest.ProtoReflect.Descriptor instead.
func (*AdminRemoveRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{41}
}

func (x *AdminRemoveRepositoryRequest) GetCodebaseId() int32 {
	if x != nil {
		return x.CodebaseId
	}
	return 0
}

type AdminRemoveRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminRemoveRepositoryResponse) Reset() {
	*x = AdminRemoveRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRemoveRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRemoveRepositoryResponse) ProtoMessage() {}

func (x *AdminRemoveRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRemoveRepositoryResponse.ProtoReflect.Descriptor instead.
func (*AdminRemoveRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{42}
}

type RepositoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoriesRequest) Reset() {
	*x = RepositoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoriesRequest) ProtoMessage() {}

func (x *RepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoriesRequest.ProtoReflect.Descriptor instead.
func (*RepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{43}
}

type RepositoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*RepositoryInfo `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *RepositoriesResponse) Reset() {
	*x = RepositoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoriesResponse) ProtoMessage() {}

func (x *RepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoriesResponse.ProtoReflect.Descriptor instead.
func (*RepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{44}
}

func (x *RepositoriesResponse) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{45}
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginUrl string `protobuf:"bytes,1,opt,name=login_url,json=loginUrl,proto3" json:"login_url,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{46}
}

func (x *LoginResponse) GetLoginUrl() string {
	if x != nil {
		return x.LoginUrl
	}
	return ""
}

type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{47}
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LogoutResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.LogoutResponse_Status" json:"status,omitempty"`
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{48}
}

func (x *LogoutResponse) GetStatus() LogoutResponse_Status {
	if x != nil {
		return x.Status
	}
	return LogoutResponse_STATUS_UNSPECIFIED
}

type IsLoggedInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsLoggedInRequest) Reset() {
	*x = IsLoggedInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoggedInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoggedInRequest) ProtoMessage() {}

func (x *IsLoggedInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoggedInRequest.ProtoReflect.Descriptor instead.
func (*IsLoggedInRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{49}
}

type IsLoggedInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggedIn bool `protobuf:"varint,1,opt,name=logged_in,json=loggedIn,proto3" json:"logged_in,omitempty"`
}

func (x *IsLoggedInResponse) Reset() {
	*x = IsLoggedInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoggedInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoggedInResponse) ProtoMessage() {}

func (x *IsLoggedInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoggedInResponse.ProtoReflect.Descriptor instead.
func (*IsLoggedInResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{50}
}

func (x *IsLoggedInResponse) GetLoggedIn() bool {
	if x != nil {
		return x.LoggedIn
	}
	return false
}

type PollLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PollLoginRequest) Reset() {
	*x = PollLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollLoginRequest) ProtoMessage() {}

func (x *PollLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollLoginRequest.ProtoReflect.Descriptor instead.
func (*PollLoginRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{51}
}

type PollLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status PollLoginResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.PollLoginResponse_Status" json:"status,omitempty"`
}

func (x *PollLoginResponse) Reset() {
	*x = PollLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollLoginResponse) ProtoMessage() {}

func (x *PollLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollLoginResponse.ProtoReflect.Descriptor instead.
func (*PollLoginResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{52}
}

func (x *PollLoginResponse) GetStatus() PollLoginResponse_Status {
	if x != nil {
		return x.Status
	}
	return PollLoginResponse_STATUS_UNSPECIFIED
}

type UpgradeScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *UpgradeScopeRequest) Reset() {
	*x = UpgradeScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeScopeRequest) ProtoMessage() {}

func (x *UpgradeScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeScopeRequest.ProtoReflect.Descriptor instead.
func (*UpgradeScopeRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{53}
}

func (x *UpgradeScopeRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type UpgradeScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpgradeScopeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.UpgradeScopeResponse_Status" json:"status,omitempty"`
}

func (x *UpgradeScopeResponse) Reset() {
	*x = UpgradeScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeScopeResponse) ProtoMessage() {}

func (x *UpgradeScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeScopeResponse.ProtoReflect.Descriptor instead.
func (*UpgradeScopeResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{54}
}

func (x *UpgradeScopeResponse) GetStatus() UpgradeScopeResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpgradeScopeResponse_STATUS_UNSPECIFIED
}

type SyncRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodebaseId int32 `protobuf:"varint,1,opt,name=codebase_id,json=codebaseId,proto3" json:"codebase_id,omitempty"`
}

func (x *SyncRepositoryRequest) Reset() {
	*x = SyncRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRepositoryRequest) ProtoMessage() {}

func (x *SyncRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRepositoryRequest.ProtoReflect.Descriptor instead.
func (*SyncRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{55}
}

func (x *SyncRepositoryRequest) GetCodebaseId() int32 {
	if x != nil {
		return x.CodebaseId
	}
	return 0
}

type SyncRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncRepositoryResponse) Reset() {
	*x = SyncRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRepositoryResponse) ProtoMessage() {}

func (x *SyncRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRepositoryResponse.ProtoReflect.Descriptor instead.
func (*SyncRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{56}
}

type UploadRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *UploadRepositoryRequest) Reset() {
	*x = UploadRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRepositoryRequest) ProtoMessage() {}

func (x *UploadRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UploadRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{57}
}

func (x *UploadRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type UploadRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UploadRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.UploadRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *UploadRepositoryResponse) Reset() {
	*x = UploadRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRepositoryResponse) ProtoMessage() {}

func (x *UploadRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRepositoryResponse.ProtoReflect.Descriptor instead.
func (*UploadRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{58}
}

func (x *UploadRepositoryResponse) GetStatus() UploadRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return UploadRepositoryResponse_STATUS_UNSPECIFIED
}

type SubscribeRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *SubscribeRepositoryRequest) Reset() {
	*x = SubscribeRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRepositoryRequest) ProtoMessage() {}

func (x *SubscribeRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRepositoryRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{59}
}

func (x *SubscribeRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type SubscribeRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SubscribeRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.SubscribeRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *SubscribeRepositoryResponse) Reset() {
	*x = SubscribeRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRepositoryResponse) ProtoMessage() {}

func (x *SubscribeRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRepositoryResponse.ProtoReflect.Descriptor instead.
func (*SubscribeRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{60}
}

func (x *SubscribeRepositoryResponse) GetStatus() SubscribeRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return SubscribeRepositoryResponse_STATUS_UNSPECIFIED
}

type UnsubscribeRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *UnsubscribeRepositoryRequest) Reset() {
	*x = UnsubscribeRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRepositoryRequest) ProtoMessage() {}

func (x *UnsubscribeRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{61}
}

func (x *UnsubscribeRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type UnsubscribeRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UnsubscribeRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=repository.v1.UnsubscribeRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *UnsubscribeRepositoryResponse) Reset() {
	*x = UnsubscribeRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRepositoryResponse) ProtoMessage() {}

func (x *UnsubscribeRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRepositoryResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{62}
}

func (x *UnsubscribeRepositoryResponse) GetStatus() UnsubscribeRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return UnsubscribeRepositoryResponse_STATUS_UNSPECIFIED
}

type SyncMerkleSubtreeResponse_Mismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*PartialPathItem `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *SyncMerkleSubtreeResponse_Mismatch) Reset() {
	*x = SyncMerkleSubtreeResponse_Mismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMerkleSubtreeResponse_Mismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMerkleSubtreeResponse_Mismatch) ProtoMessage() {}

func (x *SyncMerkleSubtreeResponse_Mismatch) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMerkleSubtreeResponse_Mismatch.ProtoReflect.Descriptor instead.
func (*SyncMerkleSubtreeResponse_Mismatch) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{5, 0}
}

func (x *SyncMerkleSubtreeResponse_Mismatch) GetChildren() []*PartialPathItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type FastUpdateFileRequest_LocalFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File                             *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Hash                             string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	UnencryptedRelativeWorkspacePath string `protobuf:"bytes,3,opt,name=unencrypted_relative_workspace_path,json=unencryptedRelativeWorkspacePath,proto3" json:"unencrypted_relative_workspace_path,omitempty"`
}

func (x *FastUpdateFileRequest_LocalFile) Reset() {
	*x = FastUpdateFileRequest_LocalFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastUpdateFileRequest_LocalFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastUpdateFileRequest_LocalFile) ProtoMessage() {}

func (x *FastUpdateFileRequest_LocalFile) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastUpdateFileRequest_LocalFile.ProtoReflect.Descriptor instead.
func (*FastUpdateFileRequest_LocalFile) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{6, 0}
}

func (x *FastUpdateFileRequest_LocalFile) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FastUpdateFileRequest_LocalFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FastUpdateFileRequest_LocalFile) GetUnencryptedRelativeWorkspacePath() string {
	if x != nil {
		return x.UnencryptedRelativeWorkspacePath
	}
	return ""
}

type CodeBlock_Signatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranges []*CursorRange `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *CodeBlock_Signatures) Reset() {
	*x = CodeBlock_Signatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock_Signatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock_Signatures) ProtoMessage() {}

func (x *CodeBlock_Signatures) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock_Signatures.ProtoReflect.Descriptor instead.
func (*CodeBlock_Signatures) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{14, 0}
}

func (x *CodeBlock_Signatures) GetRanges() []*CursorRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type GetHighLevelFolderDescriptionRequest_Readme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) Reset() {
	*x = GetHighLevelFolderDescriptionRequest_Readme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHighLevelFolderDescriptionRequest_Readme) ProtoMessage() {}

func (x *GetHighLevelFolderDescriptionRequest_Readme) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHighLevelFolderDescriptionRequest_Readme.ProtoReflect.Descriptor instead.
func (*GetHighLevelFolderDescriptionRequest_Readme) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type GetEmbeddingsResponse_Embedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedding []float32 `protobuf:"fixed32,1,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
}

func (x *GetEmbeddingsResponse_Embedding) Reset() {
	*x = GetEmbeddingsResponse_Embedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmbeddingsResponse_Embedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsResponse_Embedding) ProtoMessage() {}

func (x *GetEmbeddingsResponse_Embedding) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsResponse_Embedding.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsResponse_Embedding) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{25, 0}
}

func (x *GetEmbeddingsResponse_Embedding) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

type NodeResult_NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Stage   string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *NodeResult_NodeData) Reset() {
	*x = NodeResult_NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResult_NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResult_NodeData) ProtoMessage() {}

func (x *NodeResult_NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResult_NodeData.ProtoReflect.Descriptor instead.
func (*NodeResult_NodeData) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{28, 0}
}

func (x *NodeResult_NodeData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeResult_NodeData) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *NodeResult_NodeData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NodeResult_NodeData) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type RepositoryStatusResponse_NotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_NotFound) Reset() {
	*x = RepositoryStatusResponse_NotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_NotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_NotFound) ProtoMessage() {}

func (x *RepositoryStatusResponse_NotFound) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_NotFound.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_NotFound) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 0}
}

type RepositoryStatusResponse_Uploading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float32 `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *RepositoryStatusResponse_Uploading) Reset() {
	*x = RepositoryStatusResponse_Uploading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_Uploading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_Uploading) ProtoMessage() {}

func (x *RepositoryStatusResponse_Uploading) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_Uploading.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_Uploading) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 1}
}

func (x *RepositoryStatusResponse_Uploading) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type RepositoryStatusResponse_Syncing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch    string  `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	OldCommit string  `protobuf:"bytes,2,opt,name=old_commit,json=oldCommit,proto3" json:"old_commit,omitempty"`
	NewCommit string  `protobuf:"bytes,3,opt,name=new_commit,json=newCommit,proto3" json:"new_commit,omitempty"`
	Progress  float32 `protobuf:"fixed32,4,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *RepositoryStatusResponse_Syncing) Reset() {
	*x = RepositoryStatusResponse_Syncing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_Syncing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_Syncing) ProtoMessage() {}

func (x *RepositoryStatusResponse_Syncing) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_Syncing.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_Syncing) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 2}
}

func (x *RepositoryStatusResponse_Syncing) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RepositoryStatusResponse_Syncing) GetOldCommit() string {
	if x != nil {
		return x.OldCommit
	}
	return ""
}

func (x *RepositoryStatusResponse_Syncing) GetNewCommit() string {
	if x != nil {
		return x.NewCommit
	}
	return ""
}

func (x *RepositoryStatusResponse_Syncing) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type RepositoryStatusResponse_Synced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *RepositoryStatusResponse_Synced) Reset() {
	*x = RepositoryStatusResponse_Synced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_Synced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_Synced) ProtoMessage() {}

func (x *RepositoryStatusResponse_Synced) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_Synced.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_Synced) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 3}
}

func (x *RepositoryStatusResponse_Synced) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RepositoryStatusResponse_Synced) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type RepositoryStatusResponse_NotSubscribed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_NotSubscribed) Reset() {
	*x = RepositoryStatusResponse_NotSubscribed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_NotSubscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_NotSubscribed) ProtoMessage() {}

func (x *RepositoryStatusResponse_NotSubscribed) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_NotSubscribed.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_NotSubscribed) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 4}
}

type RepositoryStatusResponse_TooBig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *RepositoryStatusResponse_TooBig) Reset() {
	*x = RepositoryStatusResponse_TooBig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_TooBig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_TooBig) ProtoMessage() {}

func (x *RepositoryStatusResponse_TooBig) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_TooBig.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_TooBig) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 5}
}

func (x *RepositoryStatusResponse_TooBig) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type RepositoryStatusResponse_AuthTokenNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_AuthTokenNotFound) Reset() {
	*x = RepositoryStatusResponse_AuthTokenNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_AuthTokenNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_AuthTokenNotFound) ProtoMessage() {}

func (x *RepositoryStatusResponse_AuthTokenNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_AuthTokenNotFound.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_AuthTokenNotFound) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 6}
}

type RepositoryStatusResponse_AuthTokenNotAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_AuthTokenNotAuthorized) Reset() {
	*x = RepositoryStatusResponse_AuthTokenNotAuthorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_AuthTokenNotAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_AuthTokenNotAuthorized) ProtoMessage() {}

func (x *RepositoryStatusResponse_AuthTokenNotAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_AuthTokenNotAuthorized.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_AuthTokenNotAuthorized) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 7}
}

type RepositoryStatusResponse_EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_EmptyMessage) Reset() {
	*x = RepositoryStatusResponse_EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_repository_v1_repository_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_EmptyMessage) ProtoMessage() {}

func (x *RepositoryStatusResponse_EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_repository_v1_repository_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_EmptyMessage.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_EmptyMessage) Descriptor() ([]byte, []int) {
	return file_repository_v1_repository_proto_rawDescGZIP(), []int{32, 8}
}

var File_repository_v1_repository_proto protoreflect.FileDescriptor

var file_repository_v1_repository_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x22,
	0xb7, 0x01, 0x0a, 0x1c, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x19, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x22, 0x80, 0x02,
	0x0a, 0x1d, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x33, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04,
	0x22, 0xa7, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x12,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6b, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x73,
	0x68, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4d, 0x0a, 0x08, 0x6d,
	0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x08, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x46, 0x0a, 0x08, 0x4d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x22, 0x88, 0x05, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x50, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x97, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x4d,
	0x0a, 0x23, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x75, 0x6e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6e, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x22, 0x5a, 0x0a,
	0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x16, 0x46, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x03, 0x22, 0xa7, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6c,
	0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x47, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6c, 0x6f, 0x62,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x03, 0x0a, 0x0c,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x03, 0x52, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x41, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x22, 0x7d, 0x0a, 0x0a, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x22, 0x58, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x0a, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa8, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x1a, 0x40, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x0e, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x66, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xdd, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x79, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x5a, 0x0a, 0x19, 0x45, 0x6e,
	0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x07, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64,
	0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x1e, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a,
	0x5c, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x49, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4e, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x1a, 0x29, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xee, 0x01, 0x0a, 0x22,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x2a, 0x0a,
	0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x1a, 0x6d, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x67, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xa3, 0x0a, 0x0a, 0x18, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x08, 0x6e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x6e, 0x6f, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x5f, 0x62,
	0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x52, 0x06, 0x74, 0x6f, 0x6f, 0x42, 0x69, 0x67,
	0x12, 0x6a, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x79, 0x0a, 0x19,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x52,
	0x16, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x1a, 0x0a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x27, 0x0a,
	0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x7b, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x38, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a, 0x0f, 0x0a,
	0x0d, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x1a, 0x23,
	0x0a, 0x06, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53,
	0x69, 0x7a, 0x65, 0x1a, 0x13, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x18, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x1a, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22,
	0x62, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x59, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x7a,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x22, 0x3f, 0x0a, 0x1c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x0e,
	0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x0f, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb2, 0x01,
	0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x10, 0x03, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x12, 0x49, 0x73, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x6f,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb5,
	0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x2d, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x15,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x58, 0x0a, 0x17, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8a, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x42, 0x41, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x04, 0x22, 0x5b, 0x0a, 0x1a,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xef, 0x01, 0x0a, 0x1b, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43,
	0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x5d, 0x0a, 0x1c, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x1d, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x2a, 0x54, 0x0a, 0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x32, 0xb2, 0x16, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x15,
	0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x2b, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e,
	0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0e,
	0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x12, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x1b, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2b, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x65, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x34,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a,
	0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x48, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x49, 0x73, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1f, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x24, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xe1, 0x01, 0x0a, 0x11,
	0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x42, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x66, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x76, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6d, 0x7a, 0x2f, 0x65, 0x76, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x6d, 0x7a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52,
	0x58, 0x58, 0xaa, 0x02, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_repository_v1_repository_proto_rawDescOnce sync.Once
	file_repository_v1_repository_proto_rawDescData = file_repository_v1_repository_proto_rawDesc
)

func file_repository_v1_repository_proto_rawDescGZIP() []byte {
	file_repository_v1_repository_proto_rawDescOnce.Do(func() {
		file_repository_v1_repository_proto_rawDescData = protoimpl.X.CompressGZIP(file_repository_v1_repository_proto_rawDescData)
	})
	return file_repository_v1_repository_proto_rawDescData
}

var file_repository_v1_repository_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_repository_v1_repository_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_repository_v1_repository_proto_goTypes = []any{
	(ChunkingStrategy)(0),                                   // 0: repository.v1.ChunkingStrategy
	(FastRepoInitHandshakeResponse_Status)(0),               // 1: repository.v1.FastRepoInitHandshakeResponse.Status
	(FastUpdateFileRequest_UpdateType)(0),                   // 2: repository.v1.FastUpdateFileRequest.UpdateType
	(FastUpdateFileResponse_Status)(0),                      // 3: repository.v1.FastUpdateFileResponse.Status
	(RemoveRepositoryResponse_Status)(0),                    // 4: repository.v1.RemoveRepositoryResponse.Status
	(LogoutResponse_Status)(0),                              // 5: repository.v1.LogoutResponse.Status
	(PollLoginResponse_Status)(0),                           // 6: repository.v1.PollLoginResponse.Status
	(UpgradeScopeResponse_Status)(0),                        // 7: repository.v1.UpgradeScopeResponse.Status
	(UploadRepositoryResponse_Status)(0),                    // 8: repository.v1.UploadRepositoryResponse.Status
	(SubscribeRepositoryResponse_Status)(0),                 // 9: repository.v1.SubscribeRepositoryResponse.Status
	(UnsubscribeRepositoryResponse_Status)(0),               // 10: repository.v1.UnsubscribeRepositoryResponse.Status
	(*FastRepoInitHandshakeRequest)(nil),                    // 11: repository.v1.FastRepoInitHandshakeRequest
	(*RepositoryInfo)(nil),                                  // 12: repository.v1.RepositoryInfo
	(*FastRepoInitHandshakeResponse)(nil),                   // 13: repository.v1.FastRepoInitHandshakeResponse
	(*SyncMerkleSubtreeRequest)(nil),                        // 14: repository.v1.SyncMerkleSubtreeRequest
	(*PartialPathItem)(nil),                                 // 15: repository.v1.PartialPathItem
	(*SyncMerkleSubtreeResponse)(nil),                       // 16: repository.v1.SyncMerkleSubtreeResponse
	(*FastUpdateFileRequest)(nil),                           // 17: repository.v1.FastUpdateFileRequest
	(*File)(nil),                                            // 18: repository.v1.File
	(*FastUpdateFileResponse)(nil),                          // 19: repository.v1.FastUpdateFileResponse
	(*SearchRepositoryRequest)(nil),                         // 20: repository.v1.SearchRepositoryRequest
	(*ModelDetails)(nil),                                    // 21: repository.v1.ModelDetails
	(*AzureState)(nil),                                      // 22: repository.v1.AzureState
	(*SearchRepositoryResponse)(nil),                        // 23: repository.v1.SearchRepositoryResponse
	(*CodeResult)(nil),                                      // 24: repository.v1.CodeResult
	(*CodeBlock)(nil),                                       // 25: repository.v1.CodeBlock
	(*CursorRange)(nil),                                     // 26: repository.v1.CursorRange
	(*CursorPosition)(nil),                                  // 27: repository.v1.CursorPosition
	(*DetailedLine)(nil),                                    // 28: repository.v1.DetailedLine
	(*RemoveRepositoryRequest)(nil),                         // 29: repository.v1.RemoveRepositoryRequest
	(*RemoveRepositoryResponse)(nil),                        // 30: repository.v1.RemoveRepositoryResponse
	(*EnsureIndexCreatedRequest)(nil),                       // 31: repository.v1.EnsureIndexCreatedRequest
	(*EnsureIndexCreatedResponse)(nil),                      // 32: repository.v1.EnsureIndexCreatedResponse
	(*GetHighLevelFolderDescriptionRequest)(nil),            // 33: repository.v1.GetHighLevelFolderDescriptionRequest
	(*GetHighLevelFolderDescriptionResponse)(nil),           // 34: repository.v1.GetHighLevelFolderDescriptionResponse
	(*GetEmbeddingsRequest)(nil),                            // 35: repository.v1.GetEmbeddingsRequest
	(*GetEmbeddingsResponse)(nil),                           // 36: repository.v1.GetEmbeddingsResponse
	(*SearchRepositoryDeepContextRequest)(nil),              // 37: repository.v1.SearchRepositoryDeepContextRequest
	(*SearchRepositoryDeepContextResponse)(nil),             // 38: repository.v1.SearchRepositoryDeepContextResponse
	(*NodeResult)(nil),                                      // 39: repository.v1.NodeResult
	(*ReflectionResult)(nil),                                // 40: repository.v1.ReflectionResult
	(*ReflectionData)(nil),                                  // 41: repository.v1.ReflectionData
	(*RepositoryStatusRequest)(nil),                         // 42: repository.v1.RepositoryStatusRequest
	(*RepositoryStatusResponse)(nil),                        // 43: repository.v1.RepositoryStatusResponse
	(*BatchRepositoryStatusRequest)(nil),                    // 44: repository.v1.BatchRepositoryStatusRequest
	(*BatchRepositoryStatusResponse)(nil),                   // 45: repository.v1.BatchRepositoryStatusResponse
	(*GetUploadLimitsRequest)(nil),                          // 46: repository.v1.GetUploadLimitsRequest
	(*GetUploadLimitsResponse)(nil),                         // 47: repository.v1.GetUploadLimitsResponse
	(*GetNumFilesToSendRequest)(nil),                        // 48: repository.v1.GetNumFilesToSendRequest
	(*GetNumFilesToSendResponse)(nil),                       // 49: repository.v1.GetNumFilesToSendResponse
	(*GetAvailableChunkingStrategiesRequest)(nil),           // 50: repository.v1.GetAvailableChunkingStrategiesRequest
	(*GetAvailableChunkingStrategiesResponse)(nil),          // 51: repository.v1.GetAvailableChunkingStrategiesResponse
	(*AdminRemoveRepositoryRequest)(nil),                    // 52: repository.v1.AdminRemoveRepositoryRequest
	(*AdminRemoveRepositoryResponse)(nil),                   // 53: repository.v1.AdminRemoveRepositoryResponse
	(*RepositoriesRequest)(nil),                             // 54: repository.v1.RepositoriesRequest
	(*RepositoriesResponse)(nil),                            // 55: repository.v1.RepositoriesResponse
	(*LoginRequest)(nil),                                    // 56: repository.v1.LoginRequest
	(*LoginResponse)(nil),                                   // 57: repository.v1.LoginResponse
	(*LogoutRequest)(nil),                                   // 58: repository.v1.LogoutRequest
	(*LogoutResponse)(nil),                                  // 59: repository.v1.LogoutResponse
	(*IsLoggedInRequest)(nil),                               // 60: repository.v1.IsLoggedInRequest
	(*IsLoggedInResponse)(nil),                              // 61: repository.v1.IsLoggedInResponse
	(*PollLoginRequest)(nil),                                // 62: repository.v1.PollLoginRequest
	(*PollLoginResponse)(nil),                               // 63: repository.v1.PollLoginResponse
	(*UpgradeScopeRequest)(nil),                             // 64: repository.v1.UpgradeScopeRequest
	(*UpgradeScopeResponse)(nil),                            // 65: repository.v1.UpgradeScopeResponse
	(*SyncRepositoryRequest)(nil),                           // 66: repository.v1.SyncRepositoryRequest
	(*SyncRepositoryResponse)(nil),                          // 67: repository.v1.SyncRepositoryResponse
	(*UploadRepositoryRequest)(nil),                         // 68: repository.v1.UploadRepositoryRequest
	(*UploadRepositoryResponse)(nil),                        // 69: repository.v1.UploadRepositoryResponse
	(*SubscribeRepositoryRequest)(nil),                      // 70: repository.v1.SubscribeRepositoryRequest
	(*SubscribeRepositoryResponse)(nil),                     // 71: repository.v1.SubscribeRepositoryResponse
	(*UnsubscribeRepositoryRequest)(nil),                    // 72: repository.v1.UnsubscribeRepositoryRequest
	(*UnsubscribeRepositoryResponse)(nil),                   // 73: repository.v1.UnsubscribeRepositoryResponse
	(*SyncMerkleSubtreeResponse_Mismatch)(nil),              // 74: repository.v1.SyncMerkleSubtreeResponse.Mismatch
	(*FastUpdateFileRequest_LocalFile)(nil),                 // 75: repository.v1.FastUpdateFileRequest.LocalFile
	(*CodeBlock_Signatures)(nil),                            // 76: repository.v1.CodeBlock.Signatures
	(*GetHighLevelFolderDescriptionRequest_Readme)(nil),     // 77: repository.v1.GetHighLevelFolderDescriptionRequest.Readme
	(*GetEmbeddingsResponse_Embedding)(nil),                 // 78: repository.v1.GetEmbeddingsResponse.Embedding
	(*NodeResult_NodeData)(nil),                             // 79: repository.v1.NodeResult.NodeData
	(*RepositoryStatusResponse_NotFound)(nil),               // 80: repository.v1.RepositoryStatusResponse.NotFound
	(*RepositoryStatusResponse_Uploading)(nil),              // 81: repository.v1.RepositoryStatusResponse.Uploading
	(*RepositoryStatusResponse_Syncing)(nil),                // 82: repository.v1.RepositoryStatusResponse.Syncing
	(*RepositoryStatusResponse_Synced)(nil),                 // 83: repository.v1.RepositoryStatusResponse.Synced
	(*RepositoryStatusResponse_NotSubscribed)(nil),          // 84: repository.v1.RepositoryStatusResponse.NotSubscribed
	(*RepositoryStatusResponse_TooBig)(nil),                 // 85: repository.v1.RepositoryStatusResponse.TooBig
	(*RepositoryStatusResponse_AuthTokenNotFound)(nil),      // 86: repository.v1.RepositoryStatusResponse.AuthTokenNotFound
	(*RepositoryStatusResponse_AuthTokenNotAuthorized)(nil), // 87: repository.v1.RepositoryStatusResponse.AuthTokenNotAuthorized
	(*RepositoryStatusResponse_EmptyMessage)(nil),           // 88: repository.v1.RepositoryStatusResponse.EmptyMessage
}
var file_repository_v1_repository_proto_depIdxs = []int32{
	12, // 0: repository.v1.FastRepoInitHandshakeRequest.repository:type_name -> repository.v1.RepositoryInfo
	1,  // 1: repository.v1.FastRepoInitHandshakeResponse.status:type_name -> repository.v1.FastRepoInitHandshakeResponse.Status
	12, // 2: repository.v1.SyncMerkleSubtreeRequest.repository:type_name -> repository.v1.RepositoryInfo
	15, // 3: repository.v1.SyncMerkleSubtreeRequest.local_partial_path:type_name -> repository.v1.PartialPathItem
	74, // 4: repository.v1.SyncMerkleSubtreeResponse.mismatch:type_name -> repository.v1.SyncMerkleSubtreeResponse.Mismatch
	12, // 5: repository.v1.FastUpdateFileRequest.repository:type_name -> repository.v1.RepositoryInfo
	15, // 6: repository.v1.FastUpdateFileRequest.directory:type_name -> repository.v1.PartialPathItem
	75, // 7: repository.v1.FastUpdateFileRequest.local_file:type_name -> repository.v1.FastUpdateFileRequest.LocalFile
	15, // 8: repository.v1.FastUpdateFileRequest.ancestor_spline:type_name -> repository.v1.PartialPathItem
	2,  // 9: repository.v1.FastUpdateFileRequest.update_type:type_name -> repository.v1.FastUpdateFileRequest.UpdateType
	3,  // 10: repository.v1.FastUpdateFileResponse.status:type_name -> repository.v1.FastUpdateFileResponse.Status
	12, // 11: repository.v1.SearchRepositoryRequest.repository:type_name -> repository.v1.RepositoryInfo
	21, // 12: repository.v1.SearchRepositoryRequest.model_details:type_name -> repository.v1.ModelDetails
	22, // 13: repository.v1.ModelDetails.azure_state:type_name -> repository.v1.AzureState
	24, // 14: repository.v1.SearchRepositoryResponse.code_results:type_name -> repository.v1.CodeResult
	25, // 15: repository.v1.CodeResult.code_block:type_name -> repository.v1.CodeBlock
	26, // 16: repository.v1.CodeBlock.range:type_name -> repository.v1.CursorRange
	76, // 17: repository.v1.CodeBlock.signatures:type_name -> repository.v1.CodeBlock.Signatures
	28, // 18: repository.v1.CodeBlock.detailed_lines:type_name -> repository.v1.DetailedLine
	27, // 19: repository.v1.CursorRange.start_position:type_name -> repository.v1.CursorPosition
	27, // 20: repository.v1.CursorRange.end_position:type_name -> repository.v1.CursorPosition
	12, // 21: repository.v1.RemoveRepositoryRequest.repository:type_name -> repository.v1.RepositoryInfo
	4,  // 22: repository.v1.RemoveRepositoryResponse.status:type_name -> repository.v1.RemoveRepositoryResponse.Status
	12, // 23: repository.v1.EnsureIndexCreatedRequest.repository:type_name -> repository.v1.RepositoryInfo
	77, // 24: repository.v1.GetHighLevelFolderDescriptionRequest.readmes:type_name -> repository.v1.GetHighLevelFolderDescriptionRequest.Readme
	78, // 25: repository.v1.GetEmbeddingsResponse.embeddings:type_name -> repository.v1.GetEmbeddingsResponse.Embedding
	39, // 26: repository.v1.SearchRepositoryDeepContextResponse.top_nodes:type_name -> repository.v1.NodeResult
	40, // 27: repository.v1.SearchRepositoryDeepContextResponse.reflections:type_name -> repository.v1.ReflectionResult
	79, // 28: repository.v1.NodeResult.node:type_name -> repository.v1.NodeResult.NodeData
	18, // 29: repository.v1.NodeResult.file:type_name -> repository.v1.File
	41, // 30: repository.v1.ReflectionResult.reflection:type_name -> repository.v1.ReflectionData
	12, // 31: repository.v1.RepositoryStatusRequest.repository:type_name -> repository.v1.RepositoryInfo
	80, // 32: repository.v1.RepositoryStatusResponse.not_found:type_name -> repository.v1.RepositoryStatusResponse.NotFound
	81, // 33: repository.v1.RepositoryStatusResponse.uploading:type_name -> repository.v1.RepositoryStatusResponse.Uploading
	82, // 34: repository.v1.RepositoryStatusResponse.syncing:type_name -> repository.v1.RepositoryStatusResponse.Syncing
	83, // 35: repository.v1.RepositoryStatusResponse.synced:type_name -> repository.v1.RepositoryStatusResponse.Synced
	84, // 36: repository.v1.RepositoryStatusResponse.not_subscribed:type_name -> repository.v1.RepositoryStatusResponse.NotSubscribed
	85, // 37: repository.v1.RepositoryStatusResponse.too_big:type_name -> repository.v1.RepositoryStatusResponse.TooBig
	86, // 38: repository.v1.RepositoryStatusResponse.auth_token_not_found:type_name -> repository.v1.RepositoryStatusResponse.AuthTokenNotFound
	87, // 39: repository.v1.RepositoryStatusResponse.auth_token_not_authorized:type_name -> repository.v1.RepositoryStatusResponse.AuthTokenNotAuthorized
	88, // 40: repository.v1.RepositoryStatusResponse.error_uploading:type_name -> repository.v1.RepositoryStatusResponse.EmptyMessage
	88, // 41: repository.v1.RepositoryStatusResponse.error_syncing:type_name -> repository.v1.RepositoryStatusResponse.EmptyMessage
	42, // 42: repository.v1.BatchRepositoryStatusRequest.requests:type_name -> repository.v1.RepositoryStatusRequest
	43, // 43: repository.v1.BatchRepositoryStatusResponse.responses:type_name -> repository.v1.RepositoryStatusResponse
	12, // 44: repository.v1.GetUploadLimitsRequest.repository:type_name -> repository.v1.RepositoryInfo
	12, // 45: repository.v1.GetNumFilesToSendRequest.repository:type_name -> repository.v1.RepositoryInfo
	12, // 46: repository.v1.GetAvailableChunkingStrategiesRequest.repository:type_name -> repository.v1.RepositoryInfo
	0,  // 47: repository.v1.GetAvailableChunkingStrategiesResponse.chunking_strategies:type_name -> repository.v1.ChunkingStrategy
	12, // 48: repository.v1.RepositoriesResponse.repositories:type_name -> repository.v1.RepositoryInfo
	5,  // 49: repository.v1.LogoutResponse.status:type_name -> repository.v1.LogoutResponse.Status
	6,  // 50: repository.v1.PollLoginResponse.status:type_name -> repository.v1.PollLoginResponse.Status
	7,  // 51: repository.v1.UpgradeScopeResponse.status:type_name -> repository.v1.UpgradeScopeResponse.Status
	12, // 52: repository.v1.UploadRepositoryRequest.repository:type_name -> repository.v1.RepositoryInfo
	8,  // 53: repository.v1.UploadRepositoryResponse.status:type_name -> repository.v1.UploadRepositoryResponse.Status
	12, // 54: repository.v1.SubscribeRepositoryRequest.repository:type_name -> repository.v1.RepositoryInfo
	9,  // 55: repository.v1.SubscribeRepositoryResponse.status:type_name -> repository.v1.SubscribeRepositoryResponse.Status
	12, // 56: repository.v1.UnsubscribeRepositoryRequest.repository:type_name -> repository.v1.RepositoryInfo
	10, // 57: repository.v1.UnsubscribeRepositoryResponse.status:type_name -> repository.v1.UnsubscribeRepositoryResponse.Status
	15, // 58: repository.v1.SyncMerkleSubtreeResponse.Mismatch.children:type_name -> repository.v1.PartialPathItem
	18, // 59: repository.v1.FastUpdateFileRequest.LocalFile.file:type_name -> repository.v1.File
	26, // 60: repository.v1.CodeBlock.Signatures.ranges:type_name -> repository.v1.CursorRange
	11, // 61: repository.v1.RepositoryService.FastRepoInitHandshake:input_type -> repository.v1.FastRepoInitHandshakeRequest
	14, // 62: repository.v1.RepositoryService.SyncMerkleSubtree:input_type -> repository.v1.SyncMerkleSubtreeRequest
	17, // 63: repository.v1.RepositoryService.FastUpdateFile:input_type -> repository.v1.FastUpdateFileRequest
	20, // 64: repository.v1.RepositoryService.SearchRepositoryV2:input_type -> repository.v1.SearchRepositoryRequest
	29, // 65: repository.v1.RepositoryService.RemoveRepositoryV2:input_type -> repository.v1.RemoveRepositoryRequest
	31, // 66: repository.v1.RepositoryService.EnsureIndexCreated:input_type -> repository.v1.EnsureIndexCreatedRequest
	33, // 67: repository.v1.RepositoryService.GetHighLevelFolderDescription:input_type -> repository.v1.GetHighLevelFolderDescriptionRequest
	35, // 68: repository.v1.RepositoryService.GetEmbeddings:input_type -> repository.v1.GetEmbeddingsRequest
	37, // 69: repository.v1.RepositoryService.SearchRepositoryDeepContext:input_type -> repository.v1.SearchRepositoryDeepContextRequest
	42, // 70: repository.v1.RepositoryService.RepositoryStatus:input_type -> repository.v1.RepositoryStatusRequest
	44, // 71: repository.v1.RepositoryService.BatchRepositoryStatus:input_type -> repository.v1.BatchRepositoryStatusRequest
	20, // 72: repository.v1.RepositoryService.SearchRepository:input_type -> repository.v1.SearchRepositoryRequest
	29, // 73: repository.v1.RepositoryService.RemoveRepository:input_type -> repository.v1.RemoveRepositoryRequest
	46, // 74: repository.v1.RepositoryService.GetUploadLimits:input_type -> repository.v1.GetUploadLimitsRequest
	48, // 75: repository.v1.RepositoryService.GetNumFilesToSend:input_type -> repository.v1.GetNumFilesToSendRequest
	50, // 76: repository.v1.RepositoryService.GetAvailableChunkingStrategies:input_type -> repository.v1.GetAvailableChunkingStrategiesRequest
	52, // 77: repository.v1.RepositoryService.AdminRemoveRepository:input_type -> repository.v1.AdminRemoveRepositoryRequest
	54, // 78: repository.v1.RepositoryService.GetRepositories:input_type -> repository.v1.RepositoriesRequest
	56, // 79: repository.v1.RepositoryService.LoginUser:input_type -> repository.v1.LoginRequest
	58, // 80: repository.v1.RepositoryService.LogoutUser:input_type -> repository.v1.LogoutRequest
	60, // 81: repository.v1.RepositoryService.IsLoggedIn:input_type -> repository.v1.IsLoggedInRequest
	62, // 82: repository.v1.RepositoryService.PollLoggedIn:input_type -> repository.v1.PollLoginRequest
	64, // 83: repository.v1.RepositoryService.UpgradeScope:input_type -> repository.v1.UpgradeScopeRequest
	66, // 84: repository.v1.RepositoryService.SyncRepository:input_type -> repository.v1.SyncRepositoryRequest
	68, // 85: repository.v1.RepositoryService.UploadRepository:input_type -> repository.v1.UploadRepositoryRequest
	70, // 86: repository.v1.RepositoryService.SubscribeRepository:input_type -> repository.v1.SubscribeRepositoryRequest
	72, // 87: repository.v1.RepositoryService.UnsubscribeRepository:input_type -> repository.v1.UnsubscribeRepositoryRequest
	13, // 88: repository.v1.RepositoryService.FastRepoInitHandshake:output_type -> repository.v1.FastRepoInitHandshakeResponse
	16, // 89: repository.v1.RepositoryService.SyncMerkleSubtree:output_type -> repository.v1.SyncMerkleSubtreeResponse
	19, // 90: repository.v1.RepositoryService.FastUpdateFile:output_type -> repository.v1.FastUpdateFileResponse
	23, // 91: repository.v1.RepositoryService.SearchRepositoryV2:output_type -> repository.v1.SearchRepositoryResponse
	30, // 92: repository.v1.RepositoryService.RemoveRepositoryV2:output_type -> repository.v1.RemoveRepositoryResponse
	32, // 93: repository.v1.RepositoryService.EnsureIndexCreated:output_type -> repository.v1.EnsureIndexCreatedResponse
	34, // 94: repository.v1.RepositoryService.GetHighLevelFolderDescription:output_type -> repository.v1.GetHighLevelFolderDescriptionResponse
	36, // 95: repository.v1.RepositoryService.GetEmbeddings:output_type -> repository.v1.GetEmbeddingsResponse
	38, // 96: repository.v1.RepositoryService.SearchRepositoryDeepContext:output_type -> repository.v1.SearchRepositoryDeepContextResponse
	43, // 97: repository.v1.RepositoryService.RepositoryStatus:output_type -> repository.v1.RepositoryStatusResponse
	45, // 98: repository.v1.RepositoryService.BatchRepositoryStatus:output_type -> repository.v1.BatchRepositoryStatusResponse
	23, // 99: repository.v1.RepositoryService.SearchRepository:output_type -> repository.v1.SearchRepositoryResponse
	30, // 100: repository.v1.RepositoryService.RemoveRepository:output_type -> repository.v1.RemoveRepositoryResponse
	47, // 101: repository.v1.RepositoryService.GetUploadLimits:output_type -> repository.v1.GetUploadLimitsResponse
	49, // 102: repository.v1.RepositoryService.GetNumFilesToSend:output_type -> repository.v1.GetNumFilesToSendResponse
	51, // 103: repository.v1.RepositoryService.GetAvailableChunkingStrategies:output_type -> repository.v1.GetAvailableChunkingStrategiesResponse
	53, // 104: repository.v1.RepositoryService.AdminRemoveRepository:output_type -> repository.v1.AdminRemoveRepositoryResponse
	55, // 105: repository.v1.RepositoryService.GetRepositories:output_type -> repository.v1.RepositoriesResponse
	57, // 106: repository.v1.RepositoryService.LoginUser:output_type -> repository.v1.LoginResponse
	59, // 107: repository.v1.RepositoryService.LogoutUser:output_type -> repository.v1.LogoutResponse
	61, // 108: repository.v1.RepositoryService.IsLoggedIn:output_type -> repository.v1.IsLoggedInResponse
	63, // 109: repository.v1.RepositoryService.PollLoggedIn:output_type -> repository.v1.PollLoginResponse
	65, // 110: repository.v1.RepositoryService.UpgradeScope:output_type -> repository.v1.UpgradeScopeResponse
	67, // 111: repository.v1.RepositoryService.SyncRepository:output_type -> repository.v1.SyncRepositoryResponse
	69, // 112: repository.v1.RepositoryService.UploadRepository:output_type -> repository.v1.UploadRepositoryResponse
	71, // 113: repository.v1.RepositoryService.SubscribeRepository:output_type -> repository.v1.SubscribeRepositoryResponse
	73, // 114: repository.v1.RepositoryService.UnsubscribeRepository:output_type -> repository.v1.UnsubscribeRepositoryResponse
	88, // [88:115] is the sub-list for method output_type
	61, // [61:88] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_repository_v1_repository_proto_init() }
func file_repository_v1_repository_proto_init() {
	if File_repository_v1_repository_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_repository_v1_repository_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FastRepoInitHandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FastRepoInitHandshakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMerkleSubtreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PartialPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMerkleSubtreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FastUpdateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FastUpdateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ModelDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AzureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CursorRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*EnsureIndexCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*EnsureIndexCreatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetHighLevelFolderDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetHighLevelFolderDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetEmbeddingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetEmbeddingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryDeepContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryDeepContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*NodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ReflectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ReflectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*BatchRepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*BatchRepositoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GetUploadLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GetUploadLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GetNumFilesToSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GetNumFilesToSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableChunkingStrategiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableChunkingStrategiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*AdminRemoveRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*AdminRemoveRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*IsLoggedInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*IsLoggedInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*PollLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*PollLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*SyncRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*SyncRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*UnsubscribeRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*UnsubscribeRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMerkleSubtreeResponse_Mismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*FastUpdateFileRequest_LocalFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*CodeBlock_Signatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*GetHighLevelFolderDescriptionRequest_Readme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GetEmbeddingsResponse_Embedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*NodeResult_NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_NotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_Uploading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_Syncing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_Synced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_NotSubscribed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_TooBig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_AuthTokenNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_AuthTokenNotAuthorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_repository_v1_repository_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_repository_v1_repository_proto_msgTypes[1].OneofWrappers = []any{}
	file_repository_v1_repository_proto_msgTypes[9].OneofWrappers = []any{}
	file_repository_v1_repository_proto_msgTypes[10].OneofWrappers = []any{}
	file_repository_v1_repository_proto_msgTypes[14].OneofWrappers = []any{}
	file_repository_v1_repository_proto_msgTypes[32].OneofWrappers = []any{}
	file_repository_v1_repository_proto_msgTypes[35].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_repository_v1_repository_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_repository_v1_repository_proto_goTypes,
		DependencyIndexes: file_repository_v1_repository_proto_depIdxs,
		EnumInfos:         file_repository_v1_repository_proto_enumTypes,
		MessageInfos:      file_repository_v1_repository_proto_msgTypes,
	}.Build()
	File_repository_v1_repository_proto = out.File
	file_repository_v1_repository_proto_rawDesc = nil
	file_repository_v1_repository_proto_goTypes = nil
	file_repository_v1_repository_proto_depIdxs = nil
}
