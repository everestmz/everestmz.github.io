// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: repository/v1/repository.proto

package repositoryv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/everestmz/everestmz.github.io/cursor-reversing/client/cursor/gen/repository/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RepositoryServiceName is the fully-qualified name of the RepositoryService service.
	RepositoryServiceName = "repository.v1.RepositoryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RepositoryServiceFastRepoInitHandshakeProcedure is the fully-qualified name of the
	// RepositoryService's FastRepoInitHandshake RPC.
	RepositoryServiceFastRepoInitHandshakeProcedure = "/repository.v1.RepositoryService/FastRepoInitHandshake"
	// RepositoryServiceSyncMerkleSubtreeProcedure is the fully-qualified name of the
	// RepositoryService's SyncMerkleSubtree RPC.
	RepositoryServiceSyncMerkleSubtreeProcedure = "/repository.v1.RepositoryService/SyncMerkleSubtree"
	// RepositoryServiceFastUpdateFileProcedure is the fully-qualified name of the RepositoryService's
	// FastUpdateFile RPC.
	RepositoryServiceFastUpdateFileProcedure = "/repository.v1.RepositoryService/FastUpdateFile"
	// RepositoryServiceSearchRepositoryV2Procedure is the fully-qualified name of the
	// RepositoryService's SearchRepositoryV2 RPC.
	RepositoryServiceSearchRepositoryV2Procedure = "/repository.v1.RepositoryService/SearchRepositoryV2"
	// RepositoryServiceRemoveRepositoryV2Procedure is the fully-qualified name of the
	// RepositoryService's RemoveRepositoryV2 RPC.
	RepositoryServiceRemoveRepositoryV2Procedure = "/repository.v1.RepositoryService/RemoveRepositoryV2"
	// RepositoryServiceEnsureIndexCreatedProcedure is the fully-qualified name of the
	// RepositoryService's EnsureIndexCreated RPC.
	RepositoryServiceEnsureIndexCreatedProcedure = "/repository.v1.RepositoryService/EnsureIndexCreated"
	// RepositoryServiceGetHighLevelFolderDescriptionProcedure is the fully-qualified name of the
	// RepositoryService's GetHighLevelFolderDescription RPC.
	RepositoryServiceGetHighLevelFolderDescriptionProcedure = "/repository.v1.RepositoryService/GetHighLevelFolderDescription"
	// RepositoryServiceGetEmbeddingsProcedure is the fully-qualified name of the RepositoryService's
	// GetEmbeddings RPC.
	RepositoryServiceGetEmbeddingsProcedure = "/repository.v1.RepositoryService/GetEmbeddings"
	// RepositoryServiceSearchRepositoryDeepContextProcedure is the fully-qualified name of the
	// RepositoryService's SearchRepositoryDeepContext RPC.
	RepositoryServiceSearchRepositoryDeepContextProcedure = "/repository.v1.RepositoryService/SearchRepositoryDeepContext"
	// RepositoryServiceRepositoryStatusProcedure is the fully-qualified name of the RepositoryService's
	// RepositoryStatus RPC.
	RepositoryServiceRepositoryStatusProcedure = "/repository.v1.RepositoryService/RepositoryStatus"
	// RepositoryServiceBatchRepositoryStatusProcedure is the fully-qualified name of the
	// RepositoryService's BatchRepositoryStatus RPC.
	RepositoryServiceBatchRepositoryStatusProcedure = "/repository.v1.RepositoryService/BatchRepositoryStatus"
	// RepositoryServiceSearchRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// SearchRepository RPC.
	RepositoryServiceSearchRepositoryProcedure = "/repository.v1.RepositoryService/SearchRepository"
	// RepositoryServiceRemoveRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// RemoveRepository RPC.
	RepositoryServiceRemoveRepositoryProcedure = "/repository.v1.RepositoryService/RemoveRepository"
	// RepositoryServiceGetUploadLimitsProcedure is the fully-qualified name of the RepositoryService's
	// GetUploadLimits RPC.
	RepositoryServiceGetUploadLimitsProcedure = "/repository.v1.RepositoryService/GetUploadLimits"
	// RepositoryServiceGetNumFilesToSendProcedure is the fully-qualified name of the
	// RepositoryService's GetNumFilesToSend RPC.
	RepositoryServiceGetNumFilesToSendProcedure = "/repository.v1.RepositoryService/GetNumFilesToSend"
	// RepositoryServiceGetAvailableChunkingStrategiesProcedure is the fully-qualified name of the
	// RepositoryService's GetAvailableChunkingStrategies RPC.
	RepositoryServiceGetAvailableChunkingStrategiesProcedure = "/repository.v1.RepositoryService/GetAvailableChunkingStrategies"
	// RepositoryServiceAdminRemoveRepositoryProcedure is the fully-qualified name of the
	// RepositoryService's AdminRemoveRepository RPC.
	RepositoryServiceAdminRemoveRepositoryProcedure = "/repository.v1.RepositoryService/AdminRemoveRepository"
	// RepositoryServiceGetRepositoriesProcedure is the fully-qualified name of the RepositoryService's
	// GetRepositories RPC.
	RepositoryServiceGetRepositoriesProcedure = "/repository.v1.RepositoryService/GetRepositories"
	// RepositoryServiceLoginUserProcedure is the fully-qualified name of the RepositoryService's
	// LoginUser RPC.
	RepositoryServiceLoginUserProcedure = "/repository.v1.RepositoryService/LoginUser"
	// RepositoryServiceLogoutUserProcedure is the fully-qualified name of the RepositoryService's
	// LogoutUser RPC.
	RepositoryServiceLogoutUserProcedure = "/repository.v1.RepositoryService/LogoutUser"
	// RepositoryServiceIsLoggedInProcedure is the fully-qualified name of the RepositoryService's
	// IsLoggedIn RPC.
	RepositoryServiceIsLoggedInProcedure = "/repository.v1.RepositoryService/IsLoggedIn"
	// RepositoryServicePollLoggedInProcedure is the fully-qualified name of the RepositoryService's
	// PollLoggedIn RPC.
	RepositoryServicePollLoggedInProcedure = "/repository.v1.RepositoryService/PollLoggedIn"
	// RepositoryServiceUpgradeScopeProcedure is the fully-qualified name of the RepositoryService's
	// UpgradeScope RPC.
	RepositoryServiceUpgradeScopeProcedure = "/repository.v1.RepositoryService/UpgradeScope"
	// RepositoryServiceSyncRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// SyncRepository RPC.
	RepositoryServiceSyncRepositoryProcedure = "/repository.v1.RepositoryService/SyncRepository"
	// RepositoryServiceUploadRepositoryProcedure is the fully-qualified name of the RepositoryService's
	// UploadRepository RPC.
	RepositoryServiceUploadRepositoryProcedure = "/repository.v1.RepositoryService/UploadRepository"
	// RepositoryServiceSubscribeRepositoryProcedure is the fully-qualified name of the
	// RepositoryService's SubscribeRepository RPC.
	RepositoryServiceSubscribeRepositoryProcedure = "/repository.v1.RepositoryService/SubscribeRepository"
	// RepositoryServiceUnsubscribeRepositoryProcedure is the fully-qualified name of the
	// RepositoryService's UnsubscribeRepository RPC.
	RepositoryServiceUnsubscribeRepositoryProcedure = "/repository.v1.RepositoryService/UnsubscribeRepository"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	repositoryServiceServiceDescriptor                              = v1.File_repository_v1_repository_proto.Services().ByName("RepositoryService")
	repositoryServiceFastRepoInitHandshakeMethodDescriptor          = repositoryServiceServiceDescriptor.Methods().ByName("FastRepoInitHandshake")
	repositoryServiceSyncMerkleSubtreeMethodDescriptor              = repositoryServiceServiceDescriptor.Methods().ByName("SyncMerkleSubtree")
	repositoryServiceFastUpdateFileMethodDescriptor                 = repositoryServiceServiceDescriptor.Methods().ByName("FastUpdateFile")
	repositoryServiceSearchRepositoryV2MethodDescriptor             = repositoryServiceServiceDescriptor.Methods().ByName("SearchRepositoryV2")
	repositoryServiceRemoveRepositoryV2MethodDescriptor             = repositoryServiceServiceDescriptor.Methods().ByName("RemoveRepositoryV2")
	repositoryServiceEnsureIndexCreatedMethodDescriptor             = repositoryServiceServiceDescriptor.Methods().ByName("EnsureIndexCreated")
	repositoryServiceGetHighLevelFolderDescriptionMethodDescriptor  = repositoryServiceServiceDescriptor.Methods().ByName("GetHighLevelFolderDescription")
	repositoryServiceGetEmbeddingsMethodDescriptor                  = repositoryServiceServiceDescriptor.Methods().ByName("GetEmbeddings")
	repositoryServiceSearchRepositoryDeepContextMethodDescriptor    = repositoryServiceServiceDescriptor.Methods().ByName("SearchRepositoryDeepContext")
	repositoryServiceRepositoryStatusMethodDescriptor               = repositoryServiceServiceDescriptor.Methods().ByName("RepositoryStatus")
	repositoryServiceBatchRepositoryStatusMethodDescriptor          = repositoryServiceServiceDescriptor.Methods().ByName("BatchRepositoryStatus")
	repositoryServiceSearchRepositoryMethodDescriptor               = repositoryServiceServiceDescriptor.Methods().ByName("SearchRepository")
	repositoryServiceRemoveRepositoryMethodDescriptor               = repositoryServiceServiceDescriptor.Methods().ByName("RemoveRepository")
	repositoryServiceGetUploadLimitsMethodDescriptor                = repositoryServiceServiceDescriptor.Methods().ByName("GetUploadLimits")
	repositoryServiceGetNumFilesToSendMethodDescriptor              = repositoryServiceServiceDescriptor.Methods().ByName("GetNumFilesToSend")
	repositoryServiceGetAvailableChunkingStrategiesMethodDescriptor = repositoryServiceServiceDescriptor.Methods().ByName("GetAvailableChunkingStrategies")
	repositoryServiceAdminRemoveRepositoryMethodDescriptor          = repositoryServiceServiceDescriptor.Methods().ByName("AdminRemoveRepository")
	repositoryServiceGetRepositoriesMethodDescriptor                = repositoryServiceServiceDescriptor.Methods().ByName("GetRepositories")
	repositoryServiceLoginUserMethodDescriptor                      = repositoryServiceServiceDescriptor.Methods().ByName("LoginUser")
	repositoryServiceLogoutUserMethodDescriptor                     = repositoryServiceServiceDescriptor.Methods().ByName("LogoutUser")
	repositoryServiceIsLoggedInMethodDescriptor                     = repositoryServiceServiceDescriptor.Methods().ByName("IsLoggedIn")
	repositoryServicePollLoggedInMethodDescriptor                   = repositoryServiceServiceDescriptor.Methods().ByName("PollLoggedIn")
	repositoryServiceUpgradeScopeMethodDescriptor                   = repositoryServiceServiceDescriptor.Methods().ByName("UpgradeScope")
	repositoryServiceSyncRepositoryMethodDescriptor                 = repositoryServiceServiceDescriptor.Methods().ByName("SyncRepository")
	repositoryServiceUploadRepositoryMethodDescriptor               = repositoryServiceServiceDescriptor.Methods().ByName("UploadRepository")
	repositoryServiceSubscribeRepositoryMethodDescriptor            = repositoryServiceServiceDescriptor.Methods().ByName("SubscribeRepository")
	repositoryServiceUnsubscribeRepositoryMethodDescriptor          = repositoryServiceServiceDescriptor.Methods().ByName("UnsubscribeRepository")
)

// RepositoryServiceClient is a client for the repository.v1.RepositoryService service.
type RepositoryServiceClient interface {
	FastRepoInitHandshake(context.Context, *connect.Request[v1.FastRepoInitHandshakeRequest]) (*connect.Response[v1.FastRepoInitHandshakeResponse], error)
	SyncMerkleSubtree(context.Context, *connect.Request[v1.SyncMerkleSubtreeRequest]) (*connect.Response[v1.SyncMerkleSubtreeResponse], error)
	FastUpdateFile(context.Context, *connect.Request[v1.FastUpdateFileRequest]) (*connect.Response[v1.FastUpdateFileResponse], error)
	SearchRepositoryV2(context.Context, *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error)
	RemoveRepositoryV2(context.Context, *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error)
	EnsureIndexCreated(context.Context, *connect.Request[v1.EnsureIndexCreatedRequest]) (*connect.Response[v1.EnsureIndexCreatedResponse], error)
	GetHighLevelFolderDescription(context.Context, *connect.Request[v1.GetHighLevelFolderDescriptionRequest]) (*connect.Response[v1.GetHighLevelFolderDescriptionResponse], error)
	GetEmbeddings(context.Context, *connect.Request[v1.GetEmbeddingsRequest]) (*connect.Response[v1.GetEmbeddingsResponse], error)
	SearchRepositoryDeepContext(context.Context, *connect.Request[v1.SearchRepositoryDeepContextRequest]) (*connect.Response[v1.SearchRepositoryDeepContextResponse], error)
	RepositoryStatus(context.Context, *connect.Request[v1.RepositoryStatusRequest]) (*connect.Response[v1.RepositoryStatusResponse], error)
	BatchRepositoryStatus(context.Context, *connect.Request[v1.BatchRepositoryStatusRequest]) (*connect.Response[v1.BatchRepositoryStatusResponse], error)
	SearchRepository(context.Context, *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error)
	RemoveRepository(context.Context, *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error)
	GetUploadLimits(context.Context, *connect.Request[v1.GetUploadLimitsRequest]) (*connect.Response[v1.GetUploadLimitsResponse], error)
	GetNumFilesToSend(context.Context, *connect.Request[v1.GetNumFilesToSendRequest]) (*connect.Response[v1.GetNumFilesToSendResponse], error)
	GetAvailableChunkingStrategies(context.Context, *connect.Request[v1.GetAvailableChunkingStrategiesRequest]) (*connect.Response[v1.GetAvailableChunkingStrategiesResponse], error)
	AdminRemoveRepository(context.Context, *connect.Request[v1.AdminRemoveRepositoryRequest]) (*connect.Response[v1.AdminRemoveRepositoryResponse], error)
	GetRepositories(context.Context, *connect.Request[v1.RepositoriesRequest]) (*connect.Response[v1.RepositoriesResponse], error)
	LoginUser(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	LogoutUser(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	IsLoggedIn(context.Context, *connect.Request[v1.IsLoggedInRequest]) (*connect.Response[v1.IsLoggedInResponse], error)
	PollLoggedIn(context.Context, *connect.Request[v1.PollLoginRequest]) (*connect.Response[v1.PollLoginResponse], error)
	UpgradeScope(context.Context, *connect.Request[v1.UpgradeScopeRequest]) (*connect.Response[v1.UpgradeScopeResponse], error)
	SyncRepository(context.Context, *connect.Request[v1.SyncRepositoryRequest]) (*connect.Response[v1.SyncRepositoryResponse], error)
	UploadRepository(context.Context, *connect.Request[v1.UploadRepositoryRequest]) (*connect.Response[v1.UploadRepositoryResponse], error)
	SubscribeRepository(context.Context, *connect.Request[v1.SubscribeRepositoryRequest]) (*connect.Response[v1.SubscribeRepositoryResponse], error)
	UnsubscribeRepository(context.Context, *connect.Request[v1.UnsubscribeRepositoryRequest]) (*connect.Response[v1.UnsubscribeRepositoryResponse], error)
}

// NewRepositoryServiceClient constructs a client for the repository.v1.RepositoryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRepositoryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RepositoryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &repositoryServiceClient{
		fastRepoInitHandshake: connect.NewClient[v1.FastRepoInitHandshakeRequest, v1.FastRepoInitHandshakeResponse](
			httpClient,
			baseURL+RepositoryServiceFastRepoInitHandshakeProcedure,
			connect.WithSchema(repositoryServiceFastRepoInitHandshakeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		syncMerkleSubtree: connect.NewClient[v1.SyncMerkleSubtreeRequest, v1.SyncMerkleSubtreeResponse](
			httpClient,
			baseURL+RepositoryServiceSyncMerkleSubtreeProcedure,
			connect.WithSchema(repositoryServiceSyncMerkleSubtreeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		fastUpdateFile: connect.NewClient[v1.FastUpdateFileRequest, v1.FastUpdateFileResponse](
			httpClient,
			baseURL+RepositoryServiceFastUpdateFileProcedure,
			connect.WithSchema(repositoryServiceFastUpdateFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchRepositoryV2: connect.NewClient[v1.SearchRepositoryRequest, v1.SearchRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceSearchRepositoryV2Procedure,
			connect.WithSchema(repositoryServiceSearchRepositoryV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeRepositoryV2: connect.NewClient[v1.RemoveRepositoryRequest, v1.RemoveRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceRemoveRepositoryV2Procedure,
			connect.WithSchema(repositoryServiceRemoveRepositoryV2MethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ensureIndexCreated: connect.NewClient[v1.EnsureIndexCreatedRequest, v1.EnsureIndexCreatedResponse](
			httpClient,
			baseURL+RepositoryServiceEnsureIndexCreatedProcedure,
			connect.WithSchema(repositoryServiceEnsureIndexCreatedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHighLevelFolderDescription: connect.NewClient[v1.GetHighLevelFolderDescriptionRequest, v1.GetHighLevelFolderDescriptionResponse](
			httpClient,
			baseURL+RepositoryServiceGetHighLevelFolderDescriptionProcedure,
			connect.WithSchema(repositoryServiceGetHighLevelFolderDescriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEmbeddings: connect.NewClient[v1.GetEmbeddingsRequest, v1.GetEmbeddingsResponse](
			httpClient,
			baseURL+RepositoryServiceGetEmbeddingsProcedure,
			connect.WithSchema(repositoryServiceGetEmbeddingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchRepositoryDeepContext: connect.NewClient[v1.SearchRepositoryDeepContextRequest, v1.SearchRepositoryDeepContextResponse](
			httpClient,
			baseURL+RepositoryServiceSearchRepositoryDeepContextProcedure,
			connect.WithSchema(repositoryServiceSearchRepositoryDeepContextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		repositoryStatus: connect.NewClient[v1.RepositoryStatusRequest, v1.RepositoryStatusResponse](
			httpClient,
			baseURL+RepositoryServiceRepositoryStatusProcedure,
			connect.WithSchema(repositoryServiceRepositoryStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		batchRepositoryStatus: connect.NewClient[v1.BatchRepositoryStatusRequest, v1.BatchRepositoryStatusResponse](
			httpClient,
			baseURL+RepositoryServiceBatchRepositoryStatusProcedure,
			connect.WithSchema(repositoryServiceBatchRepositoryStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		searchRepository: connect.NewClient[v1.SearchRepositoryRequest, v1.SearchRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceSearchRepositoryProcedure,
			connect.WithSchema(repositoryServiceSearchRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeRepository: connect.NewClient[v1.RemoveRepositoryRequest, v1.RemoveRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceRemoveRepositoryProcedure,
			connect.WithSchema(repositoryServiceRemoveRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUploadLimits: connect.NewClient[v1.GetUploadLimitsRequest, v1.GetUploadLimitsResponse](
			httpClient,
			baseURL+RepositoryServiceGetUploadLimitsProcedure,
			connect.WithSchema(repositoryServiceGetUploadLimitsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNumFilesToSend: connect.NewClient[v1.GetNumFilesToSendRequest, v1.GetNumFilesToSendResponse](
			httpClient,
			baseURL+RepositoryServiceGetNumFilesToSendProcedure,
			connect.WithSchema(repositoryServiceGetNumFilesToSendMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAvailableChunkingStrategies: connect.NewClient[v1.GetAvailableChunkingStrategiesRequest, v1.GetAvailableChunkingStrategiesResponse](
			httpClient,
			baseURL+RepositoryServiceGetAvailableChunkingStrategiesProcedure,
			connect.WithSchema(repositoryServiceGetAvailableChunkingStrategiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		adminRemoveRepository: connect.NewClient[v1.AdminRemoveRepositoryRequest, v1.AdminRemoveRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceAdminRemoveRepositoryProcedure,
			connect.WithSchema(repositoryServiceAdminRemoveRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRepositories: connect.NewClient[v1.RepositoriesRequest, v1.RepositoriesResponse](
			httpClient,
			baseURL+RepositoryServiceGetRepositoriesProcedure,
			connect.WithSchema(repositoryServiceGetRepositoriesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		loginUser: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+RepositoryServiceLoginUserProcedure,
			connect.WithSchema(repositoryServiceLoginUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logoutUser: connect.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+RepositoryServiceLogoutUserProcedure,
			connect.WithSchema(repositoryServiceLogoutUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		isLoggedIn: connect.NewClient[v1.IsLoggedInRequest, v1.IsLoggedInResponse](
			httpClient,
			baseURL+RepositoryServiceIsLoggedInProcedure,
			connect.WithSchema(repositoryServiceIsLoggedInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pollLoggedIn: connect.NewClient[v1.PollLoginRequest, v1.PollLoginResponse](
			httpClient,
			baseURL+RepositoryServicePollLoggedInProcedure,
			connect.WithSchema(repositoryServicePollLoggedInMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		upgradeScope: connect.NewClient[v1.UpgradeScopeRequest, v1.UpgradeScopeResponse](
			httpClient,
			baseURL+RepositoryServiceUpgradeScopeProcedure,
			connect.WithSchema(repositoryServiceUpgradeScopeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		syncRepository: connect.NewClient[v1.SyncRepositoryRequest, v1.SyncRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceSyncRepositoryProcedure,
			connect.WithSchema(repositoryServiceSyncRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		uploadRepository: connect.NewClient[v1.UploadRepositoryRequest, v1.UploadRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceUploadRepositoryProcedure,
			connect.WithSchema(repositoryServiceUploadRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeRepository: connect.NewClient[v1.SubscribeRepositoryRequest, v1.SubscribeRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceSubscribeRepositoryProcedure,
			connect.WithSchema(repositoryServiceSubscribeRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		unsubscribeRepository: connect.NewClient[v1.UnsubscribeRepositoryRequest, v1.UnsubscribeRepositoryResponse](
			httpClient,
			baseURL+RepositoryServiceUnsubscribeRepositoryProcedure,
			connect.WithSchema(repositoryServiceUnsubscribeRepositoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// repositoryServiceClient implements RepositoryServiceClient.
type repositoryServiceClient struct {
	fastRepoInitHandshake          *connect.Client[v1.FastRepoInitHandshakeRequest, v1.FastRepoInitHandshakeResponse]
	syncMerkleSubtree              *connect.Client[v1.SyncMerkleSubtreeRequest, v1.SyncMerkleSubtreeResponse]
	fastUpdateFile                 *connect.Client[v1.FastUpdateFileRequest, v1.FastUpdateFileResponse]
	searchRepositoryV2             *connect.Client[v1.SearchRepositoryRequest, v1.SearchRepositoryResponse]
	removeRepositoryV2             *connect.Client[v1.RemoveRepositoryRequest, v1.RemoveRepositoryResponse]
	ensureIndexCreated             *connect.Client[v1.EnsureIndexCreatedRequest, v1.EnsureIndexCreatedResponse]
	getHighLevelFolderDescription  *connect.Client[v1.GetHighLevelFolderDescriptionRequest, v1.GetHighLevelFolderDescriptionResponse]
	getEmbeddings                  *connect.Client[v1.GetEmbeddingsRequest, v1.GetEmbeddingsResponse]
	searchRepositoryDeepContext    *connect.Client[v1.SearchRepositoryDeepContextRequest, v1.SearchRepositoryDeepContextResponse]
	repositoryStatus               *connect.Client[v1.RepositoryStatusRequest, v1.RepositoryStatusResponse]
	batchRepositoryStatus          *connect.Client[v1.BatchRepositoryStatusRequest, v1.BatchRepositoryStatusResponse]
	searchRepository               *connect.Client[v1.SearchRepositoryRequest, v1.SearchRepositoryResponse]
	removeRepository               *connect.Client[v1.RemoveRepositoryRequest, v1.RemoveRepositoryResponse]
	getUploadLimits                *connect.Client[v1.GetUploadLimitsRequest, v1.GetUploadLimitsResponse]
	getNumFilesToSend              *connect.Client[v1.GetNumFilesToSendRequest, v1.GetNumFilesToSendResponse]
	getAvailableChunkingStrategies *connect.Client[v1.GetAvailableChunkingStrategiesRequest, v1.GetAvailableChunkingStrategiesResponse]
	adminRemoveRepository          *connect.Client[v1.AdminRemoveRepositoryRequest, v1.AdminRemoveRepositoryResponse]
	getRepositories                *connect.Client[v1.RepositoriesRequest, v1.RepositoriesResponse]
	loginUser                      *connect.Client[v1.LoginRequest, v1.LoginResponse]
	logoutUser                     *connect.Client[v1.LogoutRequest, v1.LogoutResponse]
	isLoggedIn                     *connect.Client[v1.IsLoggedInRequest, v1.IsLoggedInResponse]
	pollLoggedIn                   *connect.Client[v1.PollLoginRequest, v1.PollLoginResponse]
	upgradeScope                   *connect.Client[v1.UpgradeScopeRequest, v1.UpgradeScopeResponse]
	syncRepository                 *connect.Client[v1.SyncRepositoryRequest, v1.SyncRepositoryResponse]
	uploadRepository               *connect.Client[v1.UploadRepositoryRequest, v1.UploadRepositoryResponse]
	subscribeRepository            *connect.Client[v1.SubscribeRepositoryRequest, v1.SubscribeRepositoryResponse]
	unsubscribeRepository          *connect.Client[v1.UnsubscribeRepositoryRequest, v1.UnsubscribeRepositoryResponse]
}

// FastRepoInitHandshake calls repository.v1.RepositoryService.FastRepoInitHandshake.
func (c *repositoryServiceClient) FastRepoInitHandshake(ctx context.Context, req *connect.Request[v1.FastRepoInitHandshakeRequest]) (*connect.Response[v1.FastRepoInitHandshakeResponse], error) {
	return c.fastRepoInitHandshake.CallUnary(ctx, req)
}

// SyncMerkleSubtree calls repository.v1.RepositoryService.SyncMerkleSubtree.
func (c *repositoryServiceClient) SyncMerkleSubtree(ctx context.Context, req *connect.Request[v1.SyncMerkleSubtreeRequest]) (*connect.Response[v1.SyncMerkleSubtreeResponse], error) {
	return c.syncMerkleSubtree.CallUnary(ctx, req)
}

// FastUpdateFile calls repository.v1.RepositoryService.FastUpdateFile.
func (c *repositoryServiceClient) FastUpdateFile(ctx context.Context, req *connect.Request[v1.FastUpdateFileRequest]) (*connect.Response[v1.FastUpdateFileResponse], error) {
	return c.fastUpdateFile.CallUnary(ctx, req)
}

// SearchRepositoryV2 calls repository.v1.RepositoryService.SearchRepositoryV2.
func (c *repositoryServiceClient) SearchRepositoryV2(ctx context.Context, req *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error) {
	return c.searchRepositoryV2.CallUnary(ctx, req)
}

// RemoveRepositoryV2 calls repository.v1.RepositoryService.RemoveRepositoryV2.
func (c *repositoryServiceClient) RemoveRepositoryV2(ctx context.Context, req *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error) {
	return c.removeRepositoryV2.CallUnary(ctx, req)
}

// EnsureIndexCreated calls repository.v1.RepositoryService.EnsureIndexCreated.
func (c *repositoryServiceClient) EnsureIndexCreated(ctx context.Context, req *connect.Request[v1.EnsureIndexCreatedRequest]) (*connect.Response[v1.EnsureIndexCreatedResponse], error) {
	return c.ensureIndexCreated.CallUnary(ctx, req)
}

// GetHighLevelFolderDescription calls
// repository.v1.RepositoryService.GetHighLevelFolderDescription.
func (c *repositoryServiceClient) GetHighLevelFolderDescription(ctx context.Context, req *connect.Request[v1.GetHighLevelFolderDescriptionRequest]) (*connect.Response[v1.GetHighLevelFolderDescriptionResponse], error) {
	return c.getHighLevelFolderDescription.CallUnary(ctx, req)
}

// GetEmbeddings calls repository.v1.RepositoryService.GetEmbeddings.
func (c *repositoryServiceClient) GetEmbeddings(ctx context.Context, req *connect.Request[v1.GetEmbeddingsRequest]) (*connect.Response[v1.GetEmbeddingsResponse], error) {
	return c.getEmbeddings.CallUnary(ctx, req)
}

// SearchRepositoryDeepContext calls repository.v1.RepositoryService.SearchRepositoryDeepContext.
func (c *repositoryServiceClient) SearchRepositoryDeepContext(ctx context.Context, req *connect.Request[v1.SearchRepositoryDeepContextRequest]) (*connect.Response[v1.SearchRepositoryDeepContextResponse], error) {
	return c.searchRepositoryDeepContext.CallUnary(ctx, req)
}

// RepositoryStatus calls repository.v1.RepositoryService.RepositoryStatus.
func (c *repositoryServiceClient) RepositoryStatus(ctx context.Context, req *connect.Request[v1.RepositoryStatusRequest]) (*connect.Response[v1.RepositoryStatusResponse], error) {
	return c.repositoryStatus.CallUnary(ctx, req)
}

// BatchRepositoryStatus calls repository.v1.RepositoryService.BatchRepositoryStatus.
func (c *repositoryServiceClient) BatchRepositoryStatus(ctx context.Context, req *connect.Request[v1.BatchRepositoryStatusRequest]) (*connect.Response[v1.BatchRepositoryStatusResponse], error) {
	return c.batchRepositoryStatus.CallUnary(ctx, req)
}

// SearchRepository calls repository.v1.RepositoryService.SearchRepository.
func (c *repositoryServiceClient) SearchRepository(ctx context.Context, req *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error) {
	return c.searchRepository.CallUnary(ctx, req)
}

// RemoveRepository calls repository.v1.RepositoryService.RemoveRepository.
func (c *repositoryServiceClient) RemoveRepository(ctx context.Context, req *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error) {
	return c.removeRepository.CallUnary(ctx, req)
}

// GetUploadLimits calls repository.v1.RepositoryService.GetUploadLimits.
func (c *repositoryServiceClient) GetUploadLimits(ctx context.Context, req *connect.Request[v1.GetUploadLimitsRequest]) (*connect.Response[v1.GetUploadLimitsResponse], error) {
	return c.getUploadLimits.CallUnary(ctx, req)
}

// GetNumFilesToSend calls repository.v1.RepositoryService.GetNumFilesToSend.
func (c *repositoryServiceClient) GetNumFilesToSend(ctx context.Context, req *connect.Request[v1.GetNumFilesToSendRequest]) (*connect.Response[v1.GetNumFilesToSendResponse], error) {
	return c.getNumFilesToSend.CallUnary(ctx, req)
}

// GetAvailableChunkingStrategies calls
// repository.v1.RepositoryService.GetAvailableChunkingStrategies.
func (c *repositoryServiceClient) GetAvailableChunkingStrategies(ctx context.Context, req *connect.Request[v1.GetAvailableChunkingStrategiesRequest]) (*connect.Response[v1.GetAvailableChunkingStrategiesResponse], error) {
	return c.getAvailableChunkingStrategies.CallUnary(ctx, req)
}

// AdminRemoveRepository calls repository.v1.RepositoryService.AdminRemoveRepository.
func (c *repositoryServiceClient) AdminRemoveRepository(ctx context.Context, req *connect.Request[v1.AdminRemoveRepositoryRequest]) (*connect.Response[v1.AdminRemoveRepositoryResponse], error) {
	return c.adminRemoveRepository.CallUnary(ctx, req)
}

// GetRepositories calls repository.v1.RepositoryService.GetRepositories.
func (c *repositoryServiceClient) GetRepositories(ctx context.Context, req *connect.Request[v1.RepositoriesRequest]) (*connect.Response[v1.RepositoriesResponse], error) {
	return c.getRepositories.CallUnary(ctx, req)
}

// LoginUser calls repository.v1.RepositoryService.LoginUser.
func (c *repositoryServiceClient) LoginUser(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// LogoutUser calls repository.v1.RepositoryService.LogoutUser.
func (c *repositoryServiceClient) LogoutUser(ctx context.Context, req *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return c.logoutUser.CallUnary(ctx, req)
}

// IsLoggedIn calls repository.v1.RepositoryService.IsLoggedIn.
func (c *repositoryServiceClient) IsLoggedIn(ctx context.Context, req *connect.Request[v1.IsLoggedInRequest]) (*connect.Response[v1.IsLoggedInResponse], error) {
	return c.isLoggedIn.CallUnary(ctx, req)
}

// PollLoggedIn calls repository.v1.RepositoryService.PollLoggedIn.
func (c *repositoryServiceClient) PollLoggedIn(ctx context.Context, req *connect.Request[v1.PollLoginRequest]) (*connect.Response[v1.PollLoginResponse], error) {
	return c.pollLoggedIn.CallUnary(ctx, req)
}

// UpgradeScope calls repository.v1.RepositoryService.UpgradeScope.
func (c *repositoryServiceClient) UpgradeScope(ctx context.Context, req *connect.Request[v1.UpgradeScopeRequest]) (*connect.Response[v1.UpgradeScopeResponse], error) {
	return c.upgradeScope.CallUnary(ctx, req)
}

// SyncRepository calls repository.v1.RepositoryService.SyncRepository.
func (c *repositoryServiceClient) SyncRepository(ctx context.Context, req *connect.Request[v1.SyncRepositoryRequest]) (*connect.Response[v1.SyncRepositoryResponse], error) {
	return c.syncRepository.CallUnary(ctx, req)
}

// UploadRepository calls repository.v1.RepositoryService.UploadRepository.
func (c *repositoryServiceClient) UploadRepository(ctx context.Context, req *connect.Request[v1.UploadRepositoryRequest]) (*connect.Response[v1.UploadRepositoryResponse], error) {
	return c.uploadRepository.CallUnary(ctx, req)
}

// SubscribeRepository calls repository.v1.RepositoryService.SubscribeRepository.
func (c *repositoryServiceClient) SubscribeRepository(ctx context.Context, req *connect.Request[v1.SubscribeRepositoryRequest]) (*connect.Response[v1.SubscribeRepositoryResponse], error) {
	return c.subscribeRepository.CallUnary(ctx, req)
}

// UnsubscribeRepository calls repository.v1.RepositoryService.UnsubscribeRepository.
func (c *repositoryServiceClient) UnsubscribeRepository(ctx context.Context, req *connect.Request[v1.UnsubscribeRepositoryRequest]) (*connect.Response[v1.UnsubscribeRepositoryResponse], error) {
	return c.unsubscribeRepository.CallUnary(ctx, req)
}

// RepositoryServiceHandler is an implementation of the repository.v1.RepositoryService service.
type RepositoryServiceHandler interface {
	FastRepoInitHandshake(context.Context, *connect.Request[v1.FastRepoInitHandshakeRequest]) (*connect.Response[v1.FastRepoInitHandshakeResponse], error)
	SyncMerkleSubtree(context.Context, *connect.Request[v1.SyncMerkleSubtreeRequest]) (*connect.Response[v1.SyncMerkleSubtreeResponse], error)
	FastUpdateFile(context.Context, *connect.Request[v1.FastUpdateFileRequest]) (*connect.Response[v1.FastUpdateFileResponse], error)
	SearchRepositoryV2(context.Context, *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error)
	RemoveRepositoryV2(context.Context, *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error)
	EnsureIndexCreated(context.Context, *connect.Request[v1.EnsureIndexCreatedRequest]) (*connect.Response[v1.EnsureIndexCreatedResponse], error)
	GetHighLevelFolderDescription(context.Context, *connect.Request[v1.GetHighLevelFolderDescriptionRequest]) (*connect.Response[v1.GetHighLevelFolderDescriptionResponse], error)
	GetEmbeddings(context.Context, *connect.Request[v1.GetEmbeddingsRequest]) (*connect.Response[v1.GetEmbeddingsResponse], error)
	SearchRepositoryDeepContext(context.Context, *connect.Request[v1.SearchRepositoryDeepContextRequest]) (*connect.Response[v1.SearchRepositoryDeepContextResponse], error)
	RepositoryStatus(context.Context, *connect.Request[v1.RepositoryStatusRequest]) (*connect.Response[v1.RepositoryStatusResponse], error)
	BatchRepositoryStatus(context.Context, *connect.Request[v1.BatchRepositoryStatusRequest]) (*connect.Response[v1.BatchRepositoryStatusResponse], error)
	SearchRepository(context.Context, *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error)
	RemoveRepository(context.Context, *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error)
	GetUploadLimits(context.Context, *connect.Request[v1.GetUploadLimitsRequest]) (*connect.Response[v1.GetUploadLimitsResponse], error)
	GetNumFilesToSend(context.Context, *connect.Request[v1.GetNumFilesToSendRequest]) (*connect.Response[v1.GetNumFilesToSendResponse], error)
	GetAvailableChunkingStrategies(context.Context, *connect.Request[v1.GetAvailableChunkingStrategiesRequest]) (*connect.Response[v1.GetAvailableChunkingStrategiesResponse], error)
	AdminRemoveRepository(context.Context, *connect.Request[v1.AdminRemoveRepositoryRequest]) (*connect.Response[v1.AdminRemoveRepositoryResponse], error)
	GetRepositories(context.Context, *connect.Request[v1.RepositoriesRequest]) (*connect.Response[v1.RepositoriesResponse], error)
	LoginUser(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	LogoutUser(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error)
	IsLoggedIn(context.Context, *connect.Request[v1.IsLoggedInRequest]) (*connect.Response[v1.IsLoggedInResponse], error)
	PollLoggedIn(context.Context, *connect.Request[v1.PollLoginRequest]) (*connect.Response[v1.PollLoginResponse], error)
	UpgradeScope(context.Context, *connect.Request[v1.UpgradeScopeRequest]) (*connect.Response[v1.UpgradeScopeResponse], error)
	SyncRepository(context.Context, *connect.Request[v1.SyncRepositoryRequest]) (*connect.Response[v1.SyncRepositoryResponse], error)
	UploadRepository(context.Context, *connect.Request[v1.UploadRepositoryRequest]) (*connect.Response[v1.UploadRepositoryResponse], error)
	SubscribeRepository(context.Context, *connect.Request[v1.SubscribeRepositoryRequest]) (*connect.Response[v1.SubscribeRepositoryResponse], error)
	UnsubscribeRepository(context.Context, *connect.Request[v1.UnsubscribeRepositoryRequest]) (*connect.Response[v1.UnsubscribeRepositoryResponse], error)
}

// NewRepositoryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRepositoryServiceHandler(svc RepositoryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	repositoryServiceFastRepoInitHandshakeHandler := connect.NewUnaryHandler(
		RepositoryServiceFastRepoInitHandshakeProcedure,
		svc.FastRepoInitHandshake,
		connect.WithSchema(repositoryServiceFastRepoInitHandshakeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceSyncMerkleSubtreeHandler := connect.NewUnaryHandler(
		RepositoryServiceSyncMerkleSubtreeProcedure,
		svc.SyncMerkleSubtree,
		connect.WithSchema(repositoryServiceSyncMerkleSubtreeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceFastUpdateFileHandler := connect.NewUnaryHandler(
		RepositoryServiceFastUpdateFileProcedure,
		svc.FastUpdateFile,
		connect.WithSchema(repositoryServiceFastUpdateFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceSearchRepositoryV2Handler := connect.NewUnaryHandler(
		RepositoryServiceSearchRepositoryV2Procedure,
		svc.SearchRepositoryV2,
		connect.WithSchema(repositoryServiceSearchRepositoryV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceRemoveRepositoryV2Handler := connect.NewUnaryHandler(
		RepositoryServiceRemoveRepositoryV2Procedure,
		svc.RemoveRepositoryV2,
		connect.WithSchema(repositoryServiceRemoveRepositoryV2MethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceEnsureIndexCreatedHandler := connect.NewUnaryHandler(
		RepositoryServiceEnsureIndexCreatedProcedure,
		svc.EnsureIndexCreated,
		connect.WithSchema(repositoryServiceEnsureIndexCreatedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetHighLevelFolderDescriptionHandler := connect.NewUnaryHandler(
		RepositoryServiceGetHighLevelFolderDescriptionProcedure,
		svc.GetHighLevelFolderDescription,
		connect.WithSchema(repositoryServiceGetHighLevelFolderDescriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetEmbeddingsHandler := connect.NewUnaryHandler(
		RepositoryServiceGetEmbeddingsProcedure,
		svc.GetEmbeddings,
		connect.WithSchema(repositoryServiceGetEmbeddingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceSearchRepositoryDeepContextHandler := connect.NewUnaryHandler(
		RepositoryServiceSearchRepositoryDeepContextProcedure,
		svc.SearchRepositoryDeepContext,
		connect.WithSchema(repositoryServiceSearchRepositoryDeepContextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceRepositoryStatusHandler := connect.NewUnaryHandler(
		RepositoryServiceRepositoryStatusProcedure,
		svc.RepositoryStatus,
		connect.WithSchema(repositoryServiceRepositoryStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceBatchRepositoryStatusHandler := connect.NewUnaryHandler(
		RepositoryServiceBatchRepositoryStatusProcedure,
		svc.BatchRepositoryStatus,
		connect.WithSchema(repositoryServiceBatchRepositoryStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceSearchRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceSearchRepositoryProcedure,
		svc.SearchRepository,
		connect.WithSchema(repositoryServiceSearchRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceRemoveRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceRemoveRepositoryProcedure,
		svc.RemoveRepository,
		connect.WithSchema(repositoryServiceRemoveRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetUploadLimitsHandler := connect.NewUnaryHandler(
		RepositoryServiceGetUploadLimitsProcedure,
		svc.GetUploadLimits,
		connect.WithSchema(repositoryServiceGetUploadLimitsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetNumFilesToSendHandler := connect.NewUnaryHandler(
		RepositoryServiceGetNumFilesToSendProcedure,
		svc.GetNumFilesToSend,
		connect.WithSchema(repositoryServiceGetNumFilesToSendMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetAvailableChunkingStrategiesHandler := connect.NewUnaryHandler(
		RepositoryServiceGetAvailableChunkingStrategiesProcedure,
		svc.GetAvailableChunkingStrategies,
		connect.WithSchema(repositoryServiceGetAvailableChunkingStrategiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceAdminRemoveRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceAdminRemoveRepositoryProcedure,
		svc.AdminRemoveRepository,
		connect.WithSchema(repositoryServiceAdminRemoveRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceGetRepositoriesHandler := connect.NewUnaryHandler(
		RepositoryServiceGetRepositoriesProcedure,
		svc.GetRepositories,
		connect.WithSchema(repositoryServiceGetRepositoriesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceLoginUserHandler := connect.NewUnaryHandler(
		RepositoryServiceLoginUserProcedure,
		svc.LoginUser,
		connect.WithSchema(repositoryServiceLoginUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceLogoutUserHandler := connect.NewUnaryHandler(
		RepositoryServiceLogoutUserProcedure,
		svc.LogoutUser,
		connect.WithSchema(repositoryServiceLogoutUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceIsLoggedInHandler := connect.NewUnaryHandler(
		RepositoryServiceIsLoggedInProcedure,
		svc.IsLoggedIn,
		connect.WithSchema(repositoryServiceIsLoggedInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServicePollLoggedInHandler := connect.NewUnaryHandler(
		RepositoryServicePollLoggedInProcedure,
		svc.PollLoggedIn,
		connect.WithSchema(repositoryServicePollLoggedInMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceUpgradeScopeHandler := connect.NewUnaryHandler(
		RepositoryServiceUpgradeScopeProcedure,
		svc.UpgradeScope,
		connect.WithSchema(repositoryServiceUpgradeScopeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceSyncRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceSyncRepositoryProcedure,
		svc.SyncRepository,
		connect.WithSchema(repositoryServiceSyncRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceUploadRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceUploadRepositoryProcedure,
		svc.UploadRepository,
		connect.WithSchema(repositoryServiceUploadRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceSubscribeRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceSubscribeRepositoryProcedure,
		svc.SubscribeRepository,
		connect.WithSchema(repositoryServiceSubscribeRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	repositoryServiceUnsubscribeRepositoryHandler := connect.NewUnaryHandler(
		RepositoryServiceUnsubscribeRepositoryProcedure,
		svc.UnsubscribeRepository,
		connect.WithSchema(repositoryServiceUnsubscribeRepositoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/repository.v1.RepositoryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RepositoryServiceFastRepoInitHandshakeProcedure:
			repositoryServiceFastRepoInitHandshakeHandler.ServeHTTP(w, r)
		case RepositoryServiceSyncMerkleSubtreeProcedure:
			repositoryServiceSyncMerkleSubtreeHandler.ServeHTTP(w, r)
		case RepositoryServiceFastUpdateFileProcedure:
			repositoryServiceFastUpdateFileHandler.ServeHTTP(w, r)
		case RepositoryServiceSearchRepositoryV2Procedure:
			repositoryServiceSearchRepositoryV2Handler.ServeHTTP(w, r)
		case RepositoryServiceRemoveRepositoryV2Procedure:
			repositoryServiceRemoveRepositoryV2Handler.ServeHTTP(w, r)
		case RepositoryServiceEnsureIndexCreatedProcedure:
			repositoryServiceEnsureIndexCreatedHandler.ServeHTTP(w, r)
		case RepositoryServiceGetHighLevelFolderDescriptionProcedure:
			repositoryServiceGetHighLevelFolderDescriptionHandler.ServeHTTP(w, r)
		case RepositoryServiceGetEmbeddingsProcedure:
			repositoryServiceGetEmbeddingsHandler.ServeHTTP(w, r)
		case RepositoryServiceSearchRepositoryDeepContextProcedure:
			repositoryServiceSearchRepositoryDeepContextHandler.ServeHTTP(w, r)
		case RepositoryServiceRepositoryStatusProcedure:
			repositoryServiceRepositoryStatusHandler.ServeHTTP(w, r)
		case RepositoryServiceBatchRepositoryStatusProcedure:
			repositoryServiceBatchRepositoryStatusHandler.ServeHTTP(w, r)
		case RepositoryServiceSearchRepositoryProcedure:
			repositoryServiceSearchRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceRemoveRepositoryProcedure:
			repositoryServiceRemoveRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceGetUploadLimitsProcedure:
			repositoryServiceGetUploadLimitsHandler.ServeHTTP(w, r)
		case RepositoryServiceGetNumFilesToSendProcedure:
			repositoryServiceGetNumFilesToSendHandler.ServeHTTP(w, r)
		case RepositoryServiceGetAvailableChunkingStrategiesProcedure:
			repositoryServiceGetAvailableChunkingStrategiesHandler.ServeHTTP(w, r)
		case RepositoryServiceAdminRemoveRepositoryProcedure:
			repositoryServiceAdminRemoveRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceGetRepositoriesProcedure:
			repositoryServiceGetRepositoriesHandler.ServeHTTP(w, r)
		case RepositoryServiceLoginUserProcedure:
			repositoryServiceLoginUserHandler.ServeHTTP(w, r)
		case RepositoryServiceLogoutUserProcedure:
			repositoryServiceLogoutUserHandler.ServeHTTP(w, r)
		case RepositoryServiceIsLoggedInProcedure:
			repositoryServiceIsLoggedInHandler.ServeHTTP(w, r)
		case RepositoryServicePollLoggedInProcedure:
			repositoryServicePollLoggedInHandler.ServeHTTP(w, r)
		case RepositoryServiceUpgradeScopeProcedure:
			repositoryServiceUpgradeScopeHandler.ServeHTTP(w, r)
		case RepositoryServiceSyncRepositoryProcedure:
			repositoryServiceSyncRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceUploadRepositoryProcedure:
			repositoryServiceUploadRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceSubscribeRepositoryProcedure:
			repositoryServiceSubscribeRepositoryHandler.ServeHTTP(w, r)
		case RepositoryServiceUnsubscribeRepositoryProcedure:
			repositoryServiceUnsubscribeRepositoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRepositoryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRepositoryServiceHandler struct{}

func (UnimplementedRepositoryServiceHandler) FastRepoInitHandshake(context.Context, *connect.Request[v1.FastRepoInitHandshakeRequest]) (*connect.Response[v1.FastRepoInitHandshakeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.FastRepoInitHandshake is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) SyncMerkleSubtree(context.Context, *connect.Request[v1.SyncMerkleSubtreeRequest]) (*connect.Response[v1.SyncMerkleSubtreeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.SyncMerkleSubtree is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) FastUpdateFile(context.Context, *connect.Request[v1.FastUpdateFileRequest]) (*connect.Response[v1.FastUpdateFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.FastUpdateFile is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) SearchRepositoryV2(context.Context, *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.SearchRepositoryV2 is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) RemoveRepositoryV2(context.Context, *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.RemoveRepositoryV2 is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) EnsureIndexCreated(context.Context, *connect.Request[v1.EnsureIndexCreatedRequest]) (*connect.Response[v1.EnsureIndexCreatedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.EnsureIndexCreated is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetHighLevelFolderDescription(context.Context, *connect.Request[v1.GetHighLevelFolderDescriptionRequest]) (*connect.Response[v1.GetHighLevelFolderDescriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.GetHighLevelFolderDescription is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetEmbeddings(context.Context, *connect.Request[v1.GetEmbeddingsRequest]) (*connect.Response[v1.GetEmbeddingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.GetEmbeddings is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) SearchRepositoryDeepContext(context.Context, *connect.Request[v1.SearchRepositoryDeepContextRequest]) (*connect.Response[v1.SearchRepositoryDeepContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.SearchRepositoryDeepContext is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) RepositoryStatus(context.Context, *connect.Request[v1.RepositoryStatusRequest]) (*connect.Response[v1.RepositoryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.RepositoryStatus is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) BatchRepositoryStatus(context.Context, *connect.Request[v1.BatchRepositoryStatusRequest]) (*connect.Response[v1.BatchRepositoryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.BatchRepositoryStatus is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) SearchRepository(context.Context, *connect.Request[v1.SearchRepositoryRequest]) (*connect.Response[v1.SearchRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.SearchRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) RemoveRepository(context.Context, *connect.Request[v1.RemoveRepositoryRequest]) (*connect.Response[v1.RemoveRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.RemoveRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetUploadLimits(context.Context, *connect.Request[v1.GetUploadLimitsRequest]) (*connect.Response[v1.GetUploadLimitsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.GetUploadLimits is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetNumFilesToSend(context.Context, *connect.Request[v1.GetNumFilesToSendRequest]) (*connect.Response[v1.GetNumFilesToSendResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.GetNumFilesToSend is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetAvailableChunkingStrategies(context.Context, *connect.Request[v1.GetAvailableChunkingStrategiesRequest]) (*connect.Response[v1.GetAvailableChunkingStrategiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.GetAvailableChunkingStrategies is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) AdminRemoveRepository(context.Context, *connect.Request[v1.AdminRemoveRepositoryRequest]) (*connect.Response[v1.AdminRemoveRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.AdminRemoveRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) GetRepositories(context.Context, *connect.Request[v1.RepositoriesRequest]) (*connect.Response[v1.RepositoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.GetRepositories is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) LoginUser(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.LoginUser is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) LogoutUser(context.Context, *connect.Request[v1.LogoutRequest]) (*connect.Response[v1.LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.LogoutUser is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) IsLoggedIn(context.Context, *connect.Request[v1.IsLoggedInRequest]) (*connect.Response[v1.IsLoggedInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.IsLoggedIn is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) PollLoggedIn(context.Context, *connect.Request[v1.PollLoginRequest]) (*connect.Response[v1.PollLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.PollLoggedIn is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) UpgradeScope(context.Context, *connect.Request[v1.UpgradeScopeRequest]) (*connect.Response[v1.UpgradeScopeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.UpgradeScope is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) SyncRepository(context.Context, *connect.Request[v1.SyncRepositoryRequest]) (*connect.Response[v1.SyncRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.SyncRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) UploadRepository(context.Context, *connect.Request[v1.UploadRepositoryRequest]) (*connect.Response[v1.UploadRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.UploadRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) SubscribeRepository(context.Context, *connect.Request[v1.SubscribeRepositoryRequest]) (*connect.Response[v1.SubscribeRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.SubscribeRepository is not implemented"))
}

func (UnimplementedRepositoryServiceHandler) UnsubscribeRepository(context.Context, *connect.Request[v1.UnsubscribeRepositoryRequest]) (*connect.Response[v1.UnsubscribeRepositoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("repository.v1.RepositoryService.UnsubscribeRepository is not implemented"))
}
