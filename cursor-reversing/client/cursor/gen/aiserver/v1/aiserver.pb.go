// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: aiserver/v1/aiserver.proto

package aiserverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SummarizationStrategy int32

const (
	SummarizationStrategy_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED SummarizationStrategy = 0
	SummarizationStrategy_SUMMARIZATION_STRATEGY_SUMMARIZED       SummarizationStrategy = 1
	SummarizationStrategy_SUMMARIZATION_STRATEGY_EMBEDDED         SummarizationStrategy = 2
)

// Enum value maps for SummarizationStrategy.
var (
	SummarizationStrategy_name = map[int32]string{
		0: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED",
		1: "SUMMARIZATION_STRATEGY_SUMMARIZED",
		2: "SUMMARIZATION_STRATEGY_EMBEDDED",
	}
	SummarizationStrategy_value = map[string]int32{
		"SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED": 0,
		"SUMMARIZATION_STRATEGY_SUMMARIZED":       1,
		"SUMMARIZATION_STRATEGY_EMBEDDED":         2,
	}
)

func (x SummarizationStrategy) Enum() *SummarizationStrategy {
	p := new(SummarizationStrategy)
	*p = x
	return p
}

func (x SummarizationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummarizationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[0].Descriptor()
}

func (SummarizationStrategy) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[0]
}

func (x SummarizationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummarizationStrategy.Descriptor instead.
func (SummarizationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{0}
}

type Intent int32

const (
	Intent_INTENT_UNSPECIFIED   Intent = 0
	Intent_INTENT_COMPOSER_FILE Intent = 1
)

// Enum value maps for Intent.
var (
	Intent_name = map[int32]string{
		0: "INTENT_UNSPECIFIED",
		1: "INTENT_COMPOSER_FILE",
	}
	Intent_value = map[string]int32{
		"INTENT_UNSPECIFIED":   0,
		"INTENT_COMPOSER_FILE": 1,
	}
)

func (x Intent) Enum() *Intent {
	p := new(Intent)
	*p = x
	return p
}

func (x Intent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Intent) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[1].Descriptor()
}

func (Intent) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[1]
}

func (x Intent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Intent.Descriptor instead.
func (Intent) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{1}
}

type DiagnosticSeverity int32

const (
	DiagnosticSeverity_DIAGNOSTIC_SEVERITY_UNSPECIFIED DiagnosticSeverity = 0
	DiagnosticSeverity_DIAGNOSTIC_SEVERITY_ERROR       DiagnosticSeverity = 1
	DiagnosticSeverity_DIAGNOSTIC_SEVERITY_WARNING     DiagnosticSeverity = 2
	DiagnosticSeverity_DIAGNOSTIC_SEVERITY_INFORMATION DiagnosticSeverity = 3
	DiagnosticSeverity_DIAGNOSTIC_SEVERITY_HINT        DiagnosticSeverity = 4
)

// Enum value maps for DiagnosticSeverity.
var (
	DiagnosticSeverity_name = map[int32]string{
		0: "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
		1: "DIAGNOSTIC_SEVERITY_ERROR",
		2: "DIAGNOSTIC_SEVERITY_WARNING",
		3: "DIAGNOSTIC_SEVERITY_INFORMATION",
		4: "DIAGNOSTIC_SEVERITY_HINT",
	}
	DiagnosticSeverity_value = map[string]int32{
		"DIAGNOSTIC_SEVERITY_UNSPECIFIED": 0,
		"DIAGNOSTIC_SEVERITY_ERROR":       1,
		"DIAGNOSTIC_SEVERITY_WARNING":     2,
		"DIAGNOSTIC_SEVERITY_INFORMATION": 3,
		"DIAGNOSTIC_SEVERITY_HINT":        4,
	}
)

func (x DiagnosticSeverity) Enum() *DiagnosticSeverity {
	p := new(DiagnosticSeverity)
	*p = x
	return p
}

func (x DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[2].Descriptor()
}

func (DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[2]
}

func (x DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticSeverity.Descriptor instead.
func (DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{2}
}

type ChunkType int32

const (
	ChunkType_CHUNK_TYPE_UNSPECIFIED ChunkType = 0
	ChunkType_CHUNK_TYPE_CODEBASE    ChunkType = 1
	ChunkType_CHUNK_TYPE_LONG_FILE   ChunkType = 2
	ChunkType_CHUNK_TYPE_DOCS        ChunkType = 3
)

// Enum value maps for ChunkType.
var (
	ChunkType_name = map[int32]string{
		0: "CHUNK_TYPE_UNSPECIFIED",
		1: "CHUNK_TYPE_CODEBASE",
		2: "CHUNK_TYPE_LONG_FILE",
		3: "CHUNK_TYPE_DOCS",
	}
	ChunkType_value = map[string]int32{
		"CHUNK_TYPE_UNSPECIFIED": 0,
		"CHUNK_TYPE_CODEBASE":    1,
		"CHUNK_TYPE_LONG_FILE":   2,
		"CHUNK_TYPE_DOCS":        3,
	}
)

func (x ChunkType) Enum() *ChunkType {
	p := new(ChunkType)
	*p = x
	return p
}

func (x ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[3].Descriptor()
}

func (ChunkType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[3]
}

func (x ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkType.Descriptor instead.
func (ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{3}
}

type Diagnostic_DiagnosticSeverity int32

const (
	Diagnostic_DIAGNOSTIC_SEVERITY_UNSPECIFIED Diagnostic_DiagnosticSeverity = 0
	Diagnostic_DIAGNOSTIC_SEVERITY_ERROR       Diagnostic_DiagnosticSeverity = 1
	Diagnostic_DIAGNOSTIC_SEVERITY_WARNING     Diagnostic_DiagnosticSeverity = 2
	Diagnostic_DIAGNOSTIC_SEVERITY_INFORMATION Diagnostic_DiagnosticSeverity = 3
	Diagnostic_DIAGNOSTIC_SEVERITY_HINT        Diagnostic_DiagnosticSeverity = 4
)

// Enum value maps for Diagnostic_DiagnosticSeverity.
var (
	Diagnostic_DiagnosticSeverity_name = map[int32]string{
		0: "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
		1: "DIAGNOSTIC_SEVERITY_ERROR",
		2: "DIAGNOSTIC_SEVERITY_WARNING",
		3: "DIAGNOSTIC_SEVERITY_INFORMATION",
		4: "DIAGNOSTIC_SEVERITY_HINT",
	}
	Diagnostic_DiagnosticSeverity_value = map[string]int32{
		"DIAGNOSTIC_SEVERITY_UNSPECIFIED": 0,
		"DIAGNOSTIC_SEVERITY_ERROR":       1,
		"DIAGNOSTIC_SEVERITY_WARNING":     2,
		"DIAGNOSTIC_SEVERITY_INFORMATION": 3,
		"DIAGNOSTIC_SEVERITY_HINT":        4,
	}
)

func (x Diagnostic_DiagnosticSeverity) Enum() *Diagnostic_DiagnosticSeverity {
	p := new(Diagnostic_DiagnosticSeverity)
	*p = x
	return p
}

func (x Diagnostic_DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diagnostic_DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[4].Descriptor()
}

func (Diagnostic_DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[4]
}

func (x Diagnostic_DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diagnostic_DiagnosticSeverity.Descriptor instead.
func (Diagnostic_DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{7, 0}
}

type ConversationMessage_MessageType int32

const (
	ConversationMessage_MESSAGE_TYPE_UNSPECIFIED ConversationMessage_MessageType = 0
	ConversationMessage_MESSAGE_TYPE_HUMAN       ConversationMessage_MessageType = 1
	ConversationMessage_MESSAGE_TYPE_AI          ConversationMessage_MessageType = 2
)

// Enum value maps for ConversationMessage_MessageType.
var (
	ConversationMessage_MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_HUMAN",
		2: "MESSAGE_TYPE_AI",
	}
	ConversationMessage_MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_HUMAN":       1,
		"MESSAGE_TYPE_AI":          2,
	}
)

func (x ConversationMessage_MessageType) Enum() *ConversationMessage_MessageType {
	p := new(ConversationMessage_MessageType)
	*p = x
	return p
}

func (x ConversationMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[5].Descriptor()
}

func (ConversationMessage_MessageType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[5]
}

func (x ConversationMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMessage_MessageType.Descriptor instead.
func (ConversationMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8, 0}
}

type GitDiff_DiffType int32

const (
	GitDiff_DIFF_TYPE_UNSPECIFIED              GitDiff_DiffType = 0
	GitDiff_DIFF_TYPE_DIFF_TO_HEAD             GitDiff_DiffType = 1
	GitDiff_DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN GitDiff_DiffType = 2
)

// Enum value maps for GitDiff_DiffType.
var (
	GitDiff_DiffType_name = map[int32]string{
		0: "DIFF_TYPE_UNSPECIFIED",
		1: "DIFF_TYPE_DIFF_TO_HEAD",
		2: "DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN",
	}
	GitDiff_DiffType_value = map[string]int32{
		"DIFF_TYPE_UNSPECIFIED":              0,
		"DIFF_TYPE_DIFF_TO_HEAD":             1,
		"DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN": 2,
	}
)

func (x GitDiff_DiffType) Enum() *GitDiff_DiffType {
	p := new(GitDiff_DiffType)
	*p = x
	return p
}

func (x GitDiff_DiffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitDiff_DiffType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[6].Descriptor()
}

func (GitDiff_DiffType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[6]
}

func (x GitDiff_DiffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitDiff_DiffType.Descriptor instead.
func (GitDiff_DiffType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{14, 0}
}

type UserResponseToSuggestedCodeBlock_UserResponseType int32

const (
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_UNSPECIFIED UserResponseToSuggestedCodeBlock_UserResponseType = 0
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_ACCEPT      UserResponseToSuggestedCodeBlock_UserResponseType = 1
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_REJECT      UserResponseToSuggestedCodeBlock_UserResponseType = 2
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_MODIFY      UserResponseToSuggestedCodeBlock_UserResponseType = 3
)

// Enum value maps for UserResponseToSuggestedCodeBlock_UserResponseType.
var (
	UserResponseToSuggestedCodeBlock_UserResponseType_name = map[int32]string{
		0: "USER_RESPONSE_TYPE_UNSPECIFIED",
		1: "USER_RESPONSE_TYPE_ACCEPT",
		2: "USER_RESPONSE_TYPE_REJECT",
		3: "USER_RESPONSE_TYPE_MODIFY",
	}
	UserResponseToSuggestedCodeBlock_UserResponseType_value = map[string]int32{
		"USER_RESPONSE_TYPE_UNSPECIFIED": 0,
		"USER_RESPONSE_TYPE_ACCEPT":      1,
		"USER_RESPONSE_TYPE_REJECT":      2,
		"USER_RESPONSE_TYPE_MODIFY":      3,
	}
)

func (x UserResponseToSuggestedCodeBlock_UserResponseType) Enum() *UserResponseToSuggestedCodeBlock_UserResponseType {
	p := new(UserResponseToSuggestedCodeBlock_UserResponseType)
	*p = x
	return p
}

func (x UserResponseToSuggestedCodeBlock_UserResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserResponseToSuggestedCodeBlock_UserResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[7].Descriptor()
}

func (UserResponseToSuggestedCodeBlock_UserResponseType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[7]
}

func (x UserResponseToSuggestedCodeBlock_UserResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserResponseToSuggestedCodeBlock_UserResponseType.Descriptor instead.
func (UserResponseToSuggestedCodeBlock_UserResponseType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{24, 0}
}

type GetChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile                        *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation                       []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories                       []*RepositoryInfo      `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext                    *ExplicitContext       `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath                  *string                `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	CodeBlocks                         []*CodeBlock           `protobuf:"bytes,6,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails                       *ModelDetails          `protobuf:"bytes,7,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers           []string               `protobuf:"bytes,8,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	RequestId                          string                 `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	LinterErrors                       *LinterErrors          `protobuf:"bytes,10,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	Summary                            *string                `protobuf:"bytes,11,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	SummaryUpUntilIndex                *int32                 `protobuf:"varint,12,opt,name=summary_up_until_index,json=summaryUpUntilIndex,proto3,oneof" json:"summary_up_until_index,omitempty"`
	AllowLongFileScan                  *bool                  `protobuf:"varint,13,opt,name=allow_long_file_scan,json=allowLongFileScan,proto3,oneof" json:"allow_long_file_scan,omitempty"`
	IsBash                             *bool                  `protobuf:"varint,14,opt,name=is_bash,json=isBash,proto3,oneof" json:"is_bash,omitempty"`
	ConversationId                     string                 `protobuf:"bytes,15,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	CanHandleFilenamesAfterLanguageIds *bool                  `protobuf:"varint,16,opt,name=can_handle_filenames_after_language_ids,json=canHandleFilenamesAfterLanguageIds,proto3,oneof" json:"can_handle_filenames_after_language_ids,omitempty"`
	UseWeb                             *string                `protobuf:"bytes,17,opt,name=use_web,json=useWeb,proto3,oneof" json:"use_web,omitempty"`
	Quotes                             []*ChatQuote           `protobuf:"bytes,18,rep,name=quotes,proto3" json:"quotes,omitempty"`
	DebugInfo                          *DebugInfo             `protobuf:"bytes,19,opt,name=debug_info,json=debugInfo,proto3,oneof" json:"debug_info,omitempty"`
	WorkspaceId                        *string                `protobuf:"bytes,20,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
	ExternalLinks                      []*ChatExternalLink    `protobuf:"bytes,21,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	CommitNotes                        []*CommitNote          `protobuf:"bytes,23,rep,name=commit_notes,json=commitNotes,proto3" json:"commit_notes,omitempty"`
	LongContextMode                    *bool                  `protobuf:"varint,22,opt,name=long_context_mode,json=longContextMode,proto3,oneof" json:"long_context_mode,omitempty"`
	IsEval                             *bool                  `protobuf:"varint,24,opt,name=is_eval,json=isEval,proto3,oneof" json:"is_eval,omitempty"`
	DesiredMaxTokens                   *int32                 `protobuf:"varint,26,opt,name=desired_max_tokens,json=desiredMaxTokens,proto3,oneof" json:"desired_max_tokens,omitempty"`
	ContextAst                         *ContextAST            `protobuf:"bytes,25,opt,name=context_ast,json=contextAst,proto3" json:"context_ast,omitempty"`
	IsComposer                         *bool                  `protobuf:"varint,27,opt,name=is_composer,json=isComposer,proto3,oneof" json:"is_composer,omitempty"`
	RunnableCodeBlocks                 *bool                  `protobuf:"varint,28,opt,name=runnable_code_blocks,json=runnableCodeBlocks,proto3,oneof" json:"runnable_code_blocks,omitempty"`
}

func (x *GetChatRequest) Reset() {
	*x = GetChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRequest) ProtoMessage() {}

func (x *GetChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRequest.ProtoReflect.Descriptor instead.
func (*GetChatRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{0}
}

func (x *GetChatRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *GetChatRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *GetChatRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *GetChatRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *GetChatRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *GetChatRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *GetChatRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *GetChatRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *GetChatRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetChatRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *GetChatRequest) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *GetChatRequest) GetSummaryUpUntilIndex() int32 {
	if x != nil && x.SummaryUpUntilIndex != nil {
		return *x.SummaryUpUntilIndex
	}
	return 0
}

func (x *GetChatRequest) GetAllowLongFileScan() bool {
	if x != nil && x.AllowLongFileScan != nil {
		return *x.AllowLongFileScan
	}
	return false
}

func (x *GetChatRequest) GetIsBash() bool {
	if x != nil && x.IsBash != nil {
		return *x.IsBash
	}
	return false
}

func (x *GetChatRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetChatRequest) GetCanHandleFilenamesAfterLanguageIds() bool {
	if x != nil && x.CanHandleFilenamesAfterLanguageIds != nil {
		return *x.CanHandleFilenamesAfterLanguageIds
	}
	return false
}

func (x *GetChatRequest) GetUseWeb() string {
	if x != nil && x.UseWeb != nil {
		return *x.UseWeb
	}
	return ""
}

func (x *GetChatRequest) GetQuotes() []*ChatQuote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *GetChatRequest) GetDebugInfo() *DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *GetChatRequest) GetWorkspaceId() string {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return ""
}

func (x *GetChatRequest) GetExternalLinks() []*ChatExternalLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

func (x *GetChatRequest) GetCommitNotes() []*CommitNote {
	if x != nil {
		return x.CommitNotes
	}
	return nil
}

func (x *GetChatRequest) GetLongContextMode() bool {
	if x != nil && x.LongContextMode != nil {
		return *x.LongContextMode
	}
	return false
}

func (x *GetChatRequest) GetIsEval() bool {
	if x != nil && x.IsEval != nil {
		return *x.IsEval
	}
	return false
}

func (x *GetChatRequest) GetDesiredMaxTokens() int32 {
	if x != nil && x.DesiredMaxTokens != nil {
		return *x.DesiredMaxTokens
	}
	return 0
}

func (x *GetChatRequest) GetContextAst() *ContextAST {
	if x != nil {
		return x.ContextAst
	}
	return nil
}

func (x *GetChatRequest) GetIsComposer() bool {
	if x != nil && x.IsComposer != nil {
		return *x.IsComposer
	}
	return false
}

func (x *GetChatRequest) GetRunnableCodeBlocks() bool {
	if x != nil && x.RunnableCodeBlocks != nil {
		return *x.RunnableCodeBlocks
	}
	return false
}

type CurrentFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                          `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string                          `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	Cells                 []*CurrentFileInfo_NotebookCell `protobuf:"bytes,16,rep,name=cells,proto3" json:"cells,omitempty"`
	TopChunks             []*BM25Chunk                    `protobuf:"bytes,10,rep,name=top_chunks,json=topChunks,proto3" json:"top_chunks,omitempty"`
	ContentsStartAtLine   int32                           `protobuf:"varint,9,opt,name=contents_start_at_line,json=contentsStartAtLine,proto3" json:"contents_start_at_line,omitempty"`
	CursorPosition        *CursorPosition                 `protobuf:"bytes,3,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
	Dataframes            []*DataframeInfo                `protobuf:"bytes,4,rep,name=dataframes,proto3" json:"dataframes,omitempty"`
	TotalNumberOfLines    int32                           `protobuf:"varint,8,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	LanguageId            string                          `protobuf:"bytes,5,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Selection             *CursorRange                    `protobuf:"bytes,6,opt,name=selection,proto3" json:"selection,omitempty"`
	AlternativeVersionId  *int32                          `protobuf:"varint,11,opt,name=alternative_version_id,json=alternativeVersionId,proto3,oneof" json:"alternative_version_id,omitempty"`
	Diagnostics           []*Diagnostic                   `protobuf:"bytes,7,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	FileVersion           *int32                          `protobuf:"varint,14,opt,name=file_version,json=fileVersion,proto3,oneof" json:"file_version,omitempty"`
	CellStartLines        []int32                         `protobuf:"varint,15,rep,packed,name=cell_start_lines,json=cellStartLines,proto3" json:"cell_start_lines,omitempty"`
}

func (x *CurrentFileInfo) Reset() {
	*x = CurrentFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentFileInfo) ProtoMessage() {}

func (x *CurrentFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentFileInfo.ProtoReflect.Descriptor instead.
func (*CurrentFileInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{1}
}

func (x *CurrentFileInfo) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CurrentFileInfo) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *CurrentFileInfo) GetCells() []*CurrentFileInfo_NotebookCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *CurrentFileInfo) GetTopChunks() []*BM25Chunk {
	if x != nil {
		return x.TopChunks
	}
	return nil
}

func (x *CurrentFileInfo) GetContentsStartAtLine() int32 {
	if x != nil {
		return x.ContentsStartAtLine
	}
	return 0
}

func (x *CurrentFileInfo) GetCursorPosition() *CursorPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

func (x *CurrentFileInfo) GetDataframes() []*DataframeInfo {
	if x != nil {
		return x.Dataframes
	}
	return nil
}

func (x *CurrentFileInfo) GetTotalNumberOfLines() int32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *CurrentFileInfo) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *CurrentFileInfo) GetSelection() *CursorRange {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *CurrentFileInfo) GetAlternativeVersionId() int32 {
	if x != nil && x.AlternativeVersionId != nil {
		return *x.AlternativeVersionId
	}
	return 0
}

func (x *CurrentFileInfo) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *CurrentFileInfo) GetFileVersion() int32 {
	if x != nil && x.FileVersion != nil {
		return *x.FileVersion
	}
	return 0
}

func (x *CurrentFileInfo) GetCellStartLines() []int32 {
	if x != nil {
		return x.CellStartLines
	}
	return nil
}

type BM25Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string         `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Range        *SimplestRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Score        int32          `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	RelativePath string         `protobuf:"bytes,4,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
}

func (x *BM25Chunk) Reset() {
	*x = BM25Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BM25Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BM25Chunk) ProtoMessage() {}

func (x *BM25Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BM25Chunk.ProtoReflect.Descriptor instead.
func (*BM25Chunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{2}
}

func (x *BM25Chunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BM25Chunk) GetRange() *SimplestRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *BM25Chunk) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BM25Chunk) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

type SimplestRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine        int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineInclusive int32 `protobuf:"varint,2,opt,name=end_line_inclusive,json=endLineInclusive,proto3" json:"end_line_inclusive,omitempty"`
}

func (x *SimplestRange) Reset() {
	*x = SimplestRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplestRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplestRange) ProtoMessage() {}

func (x *SimplestRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplestRange.ProtoReflect.Descriptor instead.
func (*SimplestRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{3}
}

func (x *SimplestRange) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *SimplestRange) GetEndLineInclusive() int32 {
	if x != nil {
		return x.EndLineInclusive
	}
	return 0
}

type CursorPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CursorPosition) Reset() {
	*x = CursorPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPosition) ProtoMessage() {}

func (x *CursorPosition) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPosition.ProtoReflect.Descriptor instead.
func (*CursorPosition) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{4}
}

func (x *CursorPosition) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *CursorPosition) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type DataframeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shape              string                  `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	DataDimensionality int32                   `protobuf:"varint,3,opt,name=data_dimensionality,json=dataDimensionality,proto3" json:"data_dimensionality,omitempty"`
	Columns            []*DataframeInfo_Column `protobuf:"bytes,6,rep,name=columns,proto3" json:"columns,omitempty"`
	RowCount           int32                   `protobuf:"varint,7,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	IndexColumn        string                  `protobuf:"bytes,8,opt,name=index_column,json=indexColumn,proto3" json:"index_column,omitempty"`
}

func (x *DataframeInfo) Reset() {
	*x = DataframeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataframeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataframeInfo) ProtoMessage() {}

func (x *DataframeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataframeInfo.ProtoReflect.Descriptor instead.
func (*DataframeInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{5}
}

func (x *DataframeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataframeInfo) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *DataframeInfo) GetDataDimensionality() int32 {
	if x != nil {
		return x.DataDimensionality
	}
	return 0
}

func (x *DataframeInfo) GetColumns() []*DataframeInfo_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DataframeInfo) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *DataframeInfo) GetIndexColumn() string {
	if x != nil {
		return x.IndexColumn
	}
	return ""
}

type CursorRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *CursorPosition `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *CursorPosition `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
}

func (x *CursorRange) Reset() {
	*x = CursorRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorRange) ProtoMessage() {}

func (x *CursorRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorRange.ProtoReflect.Descriptor instead.
func (*CursorRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{6}
}

func (x *CursorRange) GetStartPosition() *CursorPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *CursorRange) GetEndPosition() *CursorPosition {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range              *CursorRange                     `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Severity           Diagnostic_DiagnosticSeverity    `protobuf:"varint,3,opt,name=severity,proto3,enum=aiserver.v1.Diagnostic_DiagnosticSeverity" json:"severity,omitempty"`
	RelatedInformation []*Diagnostic_RelatedInformation `protobuf:"bytes,4,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{7}
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Diagnostic) GetSeverity() Diagnostic_DiagnosticSeverity {
	if x != nil {
		return x.Severity
	}
	return Diagnostic_DIAGNOSTIC_SEVERITY_UNSPECIFIED
}

func (x *Diagnostic) GetRelatedInformation() []*Diagnostic_RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

type ConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                               string                                      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type                               ConversationMessage_MessageType             `protobuf:"varint,2,opt,name=type,proto3,enum=aiserver.v1.ConversationMessage_MessageType" json:"type,omitempty"`
	AttachedCodeChunks                 []*ConversationMessage_CodeChunk            `protobuf:"bytes,3,rep,name=attached_code_chunks,json=attachedCodeChunks,proto3" json:"attached_code_chunks,omitempty"`
	CodebaseContextChunks              []*CodeBlock                                `protobuf:"bytes,4,rep,name=codebase_context_chunks,json=codebaseContextChunks,proto3" json:"codebase_context_chunks,omitempty"`
	Commits                            []*Commit                                   `protobuf:"bytes,5,rep,name=commits,proto3" json:"commits,omitempty"`
	PullRequests                       []*PullRequest                              `protobuf:"bytes,6,rep,name=pull_requests,json=pullRequests,proto3" json:"pull_requests,omitempty"`
	GitDiffs                           []*GitDiff                                  `protobuf:"bytes,7,rep,name=git_diffs,json=gitDiffs,proto3" json:"git_diffs,omitempty"`
	AssistantSuggestedDiffs            []*SimpleFileDiff                           `protobuf:"bytes,8,rep,name=assistant_suggested_diffs,json=assistantSuggestedDiffs,proto3" json:"assistant_suggested_diffs,omitempty"`
	InterpreterResults                 []*InterpreterResult                        `protobuf:"bytes,9,rep,name=interpreter_results,json=interpreterResults,proto3" json:"interpreter_results,omitempty"`
	Images                             []*ImageProto                               `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	AttachedFolders                    []string                                    `protobuf:"bytes,11,rep,name=attached_folders,json=attachedFolders,proto3" json:"attached_folders,omitempty"`
	ApproximateLintErrors              []*ConversationMessage_ApproximateLintError `protobuf:"bytes,12,rep,name=approximate_lint_errors,json=approximateLintErrors,proto3" json:"approximate_lint_errors,omitempty"`
	BubbleId                           string                                      `protobuf:"bytes,13,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`
	AttachedFoldersNew                 []*FolderInfo                               `protobuf:"bytes,14,rep,name=attached_folders_new,json=attachedFoldersNew,proto3" json:"attached_folders_new,omitempty"`
	Lints                              []*ConversationMessage_Lints                `protobuf:"bytes,15,rep,name=lints,proto3" json:"lints,omitempty"`
	UserResponsesToSuggestedCodeBlocks []*UserResponseToSuggestedCodeBlock         `protobuf:"bytes,16,rep,name=user_responses_to_suggested_code_blocks,json=userResponsesToSuggestedCodeBlocks,proto3" json:"user_responses_to_suggested_code_blocks,omitempty"`
	RelevantFiles                      []string                                    `protobuf:"bytes,17,rep,name=relevant_files,json=relevantFiles,proto3" json:"relevant_files,omitempty"`
	ToolResults                        []*ConversationMessage_ToolResult           `protobuf:"bytes,18,rep,name=tool_results,json=toolResults,proto3" json:"tool_results,omitempty"`
}

func (x *ConversationMessage) Reset() {
	*x = ConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage) ProtoMessage() {}

func (x *ConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage.ProtoReflect.Descriptor instead.
func (*ConversationMessage) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8}
}

func (x *ConversationMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ConversationMessage) GetType() ConversationMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ConversationMessage_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ConversationMessage) GetAttachedCodeChunks() []*ConversationMessage_CodeChunk {
	if x != nil {
		return x.AttachedCodeChunks
	}
	return nil
}

func (x *ConversationMessage) GetCodebaseContextChunks() []*CodeBlock {
	if x != nil {
		return x.CodebaseContextChunks
	}
	return nil
}

func (x *ConversationMessage) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *ConversationMessage) GetPullRequests() []*PullRequest {
	if x != nil {
		return x.PullRequests
	}
	return nil
}

func (x *ConversationMessage) GetGitDiffs() []*GitDiff {
	if x != nil {
		return x.GitDiffs
	}
	return nil
}

func (x *ConversationMessage) GetAssistantSuggestedDiffs() []*SimpleFileDiff {
	if x != nil {
		return x.AssistantSuggestedDiffs
	}
	return nil
}

func (x *ConversationMessage) GetInterpreterResults() []*InterpreterResult {
	if x != nil {
		return x.InterpreterResults
	}
	return nil
}

func (x *ConversationMessage) GetImages() []*ImageProto {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ConversationMessage) GetAttachedFolders() []string {
	if x != nil {
		return x.AttachedFolders
	}
	return nil
}

func (x *ConversationMessage) GetApproximateLintErrors() []*ConversationMessage_ApproximateLintError {
	if x != nil {
		return x.ApproximateLintErrors
	}
	return nil
}

func (x *ConversationMessage) GetBubbleId() string {
	if x != nil {
		return x.BubbleId
	}
	return ""
}

func (x *ConversationMessage) GetAttachedFoldersNew() []*FolderInfo {
	if x != nil {
		return x.AttachedFoldersNew
	}
	return nil
}

func (x *ConversationMessage) GetLints() []*ConversationMessage_Lints {
	if x != nil {
		return x.Lints
	}
	return nil
}

func (x *ConversationMessage) GetUserResponsesToSuggestedCodeBlocks() []*UserResponseToSuggestedCodeBlock {
	if x != nil {
		return x.UserResponsesToSuggestedCodeBlocks
	}
	return nil
}

func (x *ConversationMessage) GetRelevantFiles() []string {
	if x != nil {
		return x.RelevantFiles
	}
	return nil
}

func (x *ConversationMessage) GetToolResults() []*ConversationMessage_ToolResult {
	if x != nil {
		return x.ToolResults
	}
	return nil
}

type CodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	FileContents          *string               `protobuf:"bytes,2,opt,name=file_contents,json=fileContents,proto3,oneof" json:"file_contents,omitempty"`
	Range                 *CursorRange          `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Contents              string                `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
	Signatures            *CodeBlock_Signatures `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
	OverrideContents      *string               `protobuf:"bytes,6,opt,name=override_contents,json=overrideContents,proto3,oneof" json:"override_contents,omitempty"`
	OriginalContents      *string               `protobuf:"bytes,7,opt,name=original_contents,json=originalContents,proto3,oneof" json:"original_contents,omitempty"`
	DetailedLines         []*DetailedLine       `protobuf:"bytes,8,rep,name=detailed_lines,json=detailedLines,proto3" json:"detailed_lines,omitempty"`
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{9}
}

func (x *CodeBlock) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CodeBlock) GetFileContents() string {
	if x != nil && x.FileContents != nil {
		return *x.FileContents
	}
	return ""
}

func (x *CodeBlock) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CodeBlock) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *CodeBlock) GetSignatures() *CodeBlock_Signatures {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *CodeBlock) GetOverrideContents() string {
	if x != nil && x.OverrideContents != nil {
		return *x.OverrideContents
	}
	return ""
}

func (x *CodeBlock) GetOriginalContents() string {
	if x != nil && x.OriginalContents != nil {
		return *x.OriginalContents
	}
	return ""
}

func (x *CodeBlock) GetDetailedLines() []*DetailedLine {
	if x != nil {
		return x.DetailedLines
	}
	return nil
}

type DetailedLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	LineNumber  float32 `protobuf:"fixed32,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	IsSignature bool    `protobuf:"varint,3,opt,name=is_signature,json=isSignature,proto3" json:"is_signature,omitempty"`
}

func (x *DetailedLine) Reset() {
	*x = DetailedLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedLine) ProtoMessage() {}

func (x *DetailedLine) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedLine.ProtoReflect.Descriptor instead.
func (*DetailedLine) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{10}
}

func (x *DetailedLine) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DetailedLine) GetLineNumber() float32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DetailedLine) GetIsSignature() bool {
	if x != nil {
		return x.IsSignature
	}
	return false
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha         string      `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Message     string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Diff        []*FileDiff `protobuf:"bytes,4,rep,name=diff,proto3" json:"diff,omitempty"`
	Author      string      `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Date        string      `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{11}
}

func (x *Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Commit) GetDiff() []*FileDiff {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type FileDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   string            `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     string            `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Chunks []*FileDiff_Chunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *FileDiff) Reset() {
	*x = FileDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDiff) ProtoMessage() {}

func (x *FileDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDiff.ProtoReflect.Descriptor instead.
func (*FileDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{12}
}

func (x *FileDiff) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *FileDiff) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *FileDiff) GetChunks() []*FileDiff_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body  string      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Diff  []*FileDiff `protobuf:"bytes,3,rep,name=diff,proto3" json:"diff,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{13}
}

func (x *PullRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PullRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PullRequest) GetDiff() []*FileDiff {
	if x != nil {
		return x.Diff
	}
	return nil
}

type GitDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs    []*FileDiff      `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
	DiffType GitDiff_DiffType `protobuf:"varint,2,opt,name=diff_type,json=diffType,proto3,enum=aiserver.v1.GitDiff_DiffType" json:"diff_type,omitempty"`
}

func (x *GitDiff) Reset() {
	*x = GitDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDiff) ProtoMessage() {}

func (x *GitDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDiff.ProtoReflect.Descriptor instead.
func (*GitDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{14}
}

func (x *GitDiff) GetDiffs() []*FileDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *GitDiff) GetDiffType() GitDiff_DiffType {
	if x != nil {
		return x.DiffType
	}
	return GitDiff_DIFF_TYPE_UNSPECIFIED
}

type SimpleFileDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                  `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Chunks                []*SimpleFileDiff_Chunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *SimpleFileDiff) Reset() {
	*x = SimpleFileDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleFileDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleFileDiff) ProtoMessage() {}

func (x *SimpleFileDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleFileDiff.ProtoReflect.Descriptor instead.
func (*SimpleFileDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15}
}

func (x *SimpleFileDiff) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *SimpleFileDiff) GetChunks() []*SimpleFileDiff_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type LineRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber        int32 `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumberInclusive int32 `protobuf:"varint,2,opt,name=end_line_number_inclusive,json=endLineNumberInclusive,proto3" json:"end_line_number_inclusive,omitempty"`
}

func (x *LineRange) Reset() {
	*x = LineRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineRange) ProtoMessage() {}

func (x *LineRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineRange.ProtoReflect.Descriptor instead.
func (*LineRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{16}
}

func (x *LineRange) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *LineRange) GetEndLineNumberInclusive() int32 {
	if x != nil {
		return x.EndLineNumberInclusive
	}
	return 0
}

type InterpreterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *InterpreterResult) Reset() {
	*x = InterpreterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpreterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpreterResult) ProtoMessage() {}

func (x *InterpreterResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpreterResult.ProtoReflect.Descriptor instead.
func (*InterpreterResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{17}
}

func (x *InterpreterResult) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *InterpreterResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ImageProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []byte                `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Dimension *ImageProto_Dimension `protobuf:"bytes,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *ImageProto) Reset() {
	*x = ImageProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProto) ProtoMessage() {}

func (x *ImageProto) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProto.ProtoReflect.Descriptor instead.
func (*ImageProto) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{18}
}

func (x *ImageProto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageProto) GetDimension() *ImageProto_Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

type FolderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativePath string            `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Files        []*FolderFileInfo `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *FolderInfo) Reset() {
	*x = FolderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderInfo) ProtoMessage() {}

func (x *FolderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderInfo.ProtoReflect.Descriptor instead.
func (*FolderInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{19}
}

func (x *FolderInfo) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FolderInfo) GetFiles() []*FolderFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type FolderFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativePath string  `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Content      string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Truncated    bool    `protobuf:"varint,3,opt,name=truncated,proto3" json:"truncated,omitempty"`
	Score        float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *FolderFileInfo) Reset() {
	*x = FolderFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderFileInfo) ProtoMessage() {}

func (x *FolderFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderFileInfo.ProtoReflect.Descriptor instead.
func (*FolderFileInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{20}
}

func (x *FolderFileInfo) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FolderFileInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FolderFileInfo) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *FolderFileInfo) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GetLintsForChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lints []*GetLintsForChangeResponse_Lint `protobuf:"bytes,1,rep,name=lints,proto3" json:"lints,omitempty"`
}

func (x *GetLintsForChangeResponse) Reset() {
	*x = GetLintsForChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLintsForChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLintsForChangeResponse) ProtoMessage() {}

func (x *GetLintsForChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLintsForChangeResponse.ProtoReflect.Descriptor instead.
func (*GetLintsForChangeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{21}
}

func (x *GetLintsForChangeResponse) GetLints() []*GetLintsForChangeResponse_Lint {
	if x != nil {
		return x.Lints
	}
	return nil
}

type QuickFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string  `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	IsPreferred bool    `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	Edits       []*Edit `protobuf:"bytes,4,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *QuickFix) Reset() {
	*x = QuickFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickFix) ProtoMessage() {}

func (x *QuickFix) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickFix.ProtoReflect.Descriptor instead.
func (*QuickFix) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{22}
}

func (x *QuickFix) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuickFix) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *QuickFix) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *QuickFix) GetEdits() []*Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath            string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                             string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	StartLineNumberOneIndexed        int32  `protobuf:"varint,3,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32  `protobuf:"varint,4,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32  `protobuf:"varint,5,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32  `protobuf:"varint,6,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
}

func (x *Edit) Reset() {
	*x = Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edit) ProtoMessage() {}

func (x *Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edit.ProtoReflect.Descriptor instead.
func (*Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{23}
}

func (x *Edit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Edit) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *Edit) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *Edit) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *Edit) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

type UserResponseToSuggestedCodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserResponseType                       UserResponseToSuggestedCodeBlock_UserResponseType `protobuf:"varint,1,opt,name=user_response_type,json=userResponseType,proto3,enum=aiserver.v1.UserResponseToSuggestedCodeBlock_UserResponseType" json:"user_response_type,omitempty"`
	FilePath                               string                                            `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	UserModificationsToSuggestedCodeBlocks *FileDiff                                         `protobuf:"bytes,3,opt,name=user_modifications_to_suggested_code_blocks,json=userModificationsToSuggestedCodeBlocks,proto3,oneof" json:"user_modifications_to_suggested_code_blocks,omitempty"`
}

func (x *UserResponseToSuggestedCodeBlock) Reset() {
	*x = UserResponseToSuggestedCodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponseToSuggestedCodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponseToSuggestedCodeBlock) ProtoMessage() {}

func (x *UserResponseToSuggestedCodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponseToSuggestedCodeBlock.ProtoReflect.Descriptor instead.
func (*UserResponseToSuggestedCodeBlock) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{24}
}

func (x *UserResponseToSuggestedCodeBlock) GetUserResponseType() UserResponseToSuggestedCodeBlock_UserResponseType {
	if x != nil {
		return x.UserResponseType
	}
	return UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_UNSPECIFIED
}

func (x *UserResponseToSuggestedCodeBlock) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UserResponseToSuggestedCodeBlock) GetUserModificationsToSuggestedCodeBlocks() *FileDiff {
	if x != nil {
		return x.UserModificationsToSuggestedCodeBlocks
	}
	return nil
}

type CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                 `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32                  `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string               `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	SummarizationStrategy *SummarizationStrategy `protobuf:"varint,4,opt,name=summarization_strategy,json=summarizationStrategy,proto3,enum=aiserver.v1.SummarizationStrategy,oneof" json:"summarization_strategy,omitempty"`
	LanguageIdentifier    string                 `protobuf:"bytes,5,opt,name=language_identifier,json=languageIdentifier,proto3" json:"language_identifier,omitempty"`
	Intent                *Intent                `protobuf:"varint,6,opt,name=intent,proto3,enum=aiserver.v1.Intent,oneof" json:"intent,omitempty"`
}

func (x *CodeChunk) Reset() {
	*x = CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeChunk) ProtoMessage() {}

func (x *CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeChunk.ProtoReflect.Descriptor instead.
func (*CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{25}
}

func (x *CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *CodeChunk) GetSummarizationStrategy() SummarizationStrategy {
	if x != nil && x.SummarizationStrategy != nil {
		return *x.SummarizationStrategy
	}
	return SummarizationStrategy_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED
}

func (x *CodeChunk) GetLanguageIdentifier() string {
	if x != nil {
		return x.LanguageIdentifier
	}
	return ""
}

func (x *CodeChunk) GetIntent() Intent {
	if x != nil && x.Intent != nil {
		return *x.Intent
	}
	return Intent_INTENT_UNSPECIFIED
}

type RepositoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath   string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RemoteUrls              []string `protobuf:"bytes,2,rep,name=remote_urls,json=remoteUrls,proto3" json:"remote_urls,omitempty"`
	RemoteNames             []string `protobuf:"bytes,3,rep,name=remote_names,json=remoteNames,proto3" json:"remote_names,omitempty"`
	RepoName                string   `protobuf:"bytes,4,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	RepoOwner               string   `protobuf:"bytes,5,opt,name=repo_owner,json=repoOwner,proto3" json:"repo_owner,omitempty"`
	IsTracked               bool     `protobuf:"varint,6,opt,name=is_tracked,json=isTracked,proto3" json:"is_tracked,omitempty"`
	IsLocal                 bool     `protobuf:"varint,7,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	NumFiles                *int32   `protobuf:"varint,8,opt,name=num_files,json=numFiles,proto3,oneof" json:"num_files,omitempty"`
	OrthogonalTransformSeed *float64 `protobuf:"fixed64,9,opt,name=orthogonal_transform_seed,json=orthogonalTransformSeed,proto3,oneof" json:"orthogonal_transform_seed,omitempty"`
}

func (x *RepositoryInfo) Reset() {
	*x = RepositoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryInfo) ProtoMessage() {}

func (x *RepositoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryInfo.ProtoReflect.Descriptor instead.
func (*RepositoryInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{26}
}

func (x *RepositoryInfo) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *RepositoryInfo) GetRemoteUrls() []string {
	if x != nil {
		return x.RemoteUrls
	}
	return nil
}

func (x *RepositoryInfo) GetRemoteNames() []string {
	if x != nil {
		return x.RemoteNames
	}
	return nil
}

func (x *RepositoryInfo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RepositoryInfo) GetRepoOwner() string {
	if x != nil {
		return x.RepoOwner
	}
	return ""
}

func (x *RepositoryInfo) GetIsTracked() bool {
	if x != nil {
		return x.IsTracked
	}
	return false
}

func (x *RepositoryInfo) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *RepositoryInfo) GetNumFiles() int32 {
	if x != nil && x.NumFiles != nil {
		return *x.NumFiles
	}
	return 0
}

func (x *RepositoryInfo) GetOrthogonalTransformSeed() float64 {
	if x != nil && x.OrthogonalTransformSeed != nil {
		return *x.OrthogonalTransformSeed
	}
	return 0
}

type ExplicitContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     string  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	RepoContext *string `protobuf:"bytes,2,opt,name=repo_context,json=repoContext,proto3,oneof" json:"repo_context,omitempty"`
}

func (x *ExplicitContext) Reset() {
	*x = ExplicitContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitContext) ProtoMessage() {}

func (x *ExplicitContext) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitContext.ProtoReflect.Descriptor instead.
func (*ExplicitContext) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{27}
}

func (x *ExplicitContext) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ExplicitContext) GetRepoContext() string {
	if x != nil && x.RepoContext != nil {
		return *x.RepoContext
	}
	return ""
}

type ModelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName        *string     `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	ApiKey           *string     `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	EnableGhostMode  *bool       `protobuf:"varint,3,opt,name=enable_ghost_mode,json=enableGhostMode,proto3,oneof" json:"enable_ghost_mode,omitempty"`
	AzureState       *AzureState `protobuf:"bytes,4,opt,name=azure_state,json=azureState,proto3,oneof" json:"azure_state,omitempty"`
	EnableSlowPool   *bool       `protobuf:"varint,5,opt,name=enable_slow_pool,json=enableSlowPool,proto3,oneof" json:"enable_slow_pool,omitempty"`
	OpenaiApiBaseUrl *string     `protobuf:"bytes,6,opt,name=openai_api_base_url,json=openaiApiBaseUrl,proto3,oneof" json:"openai_api_base_url,omitempty"`
}

func (x *ModelDetails) Reset() {
	*x = ModelDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelDetails) ProtoMessage() {}

func (x *ModelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelDetails.ProtoReflect.Descriptor instead.
func (*ModelDetails) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{28}
}

func (x *ModelDetails) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *ModelDetails) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *ModelDetails) GetEnableGhostMode() bool {
	if x != nil && x.EnableGhostMode != nil {
		return *x.EnableGhostMode
	}
	return false
}

func (x *ModelDetails) GetAzureState() *AzureState {
	if x != nil {
		return x.AzureState
	}
	return nil
}

func (x *ModelDetails) GetEnableSlowPool() bool {
	if x != nil && x.EnableSlowPool != nil {
		return *x.EnableSlowPool
	}
	return false
}

func (x *ModelDetails) GetOpenaiApiBaseUrl() string {
	if x != nil && x.OpenaiApiBaseUrl != nil {
		return *x.OpenaiApiBaseUrl
	}
	return ""
}

type AzureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey     string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	BaseUrl    string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	Deployment string `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	UseAzure   bool   `protobuf:"varint,4,opt,name=use_azure,json=useAzure,proto3" json:"use_azure,omitempty"`
}

func (x *AzureState) Reset() {
	*x = AzureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureState) ProtoMessage() {}

func (x *AzureState) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureState.ProtoReflect.Descriptor instead.
func (*AzureState) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{29}
}

func (x *AzureState) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *AzureState) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *AzureState) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *AzureState) GetUseAzure() bool {
	if x != nil {
		return x.UseAzure
	}
	return false
}

type LinterErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string         `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Errors                []*LinterError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	FileContents          string         `protobuf:"bytes,3,opt,name=file_contents,json=fileContents,proto3" json:"file_contents,omitempty"`
}

func (x *LinterErrors) Reset() {
	*x = LinterErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinterErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinterErrors) ProtoMessage() {}

func (x *LinterErrors) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinterErrors.ProtoReflect.Descriptor instead.
func (*LinterErrors) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{30}
}

func (x *LinterErrors) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *LinterErrors) GetErrors() []*LinterError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *LinterErrors) GetFileContents() string {
	if x != nil {
		return x.FileContents
	}
	return ""
}

type LinterError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range              *CursorRange          `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Source             *string               `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	RelatedInformation []*RelatedInformation `protobuf:"bytes,4,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
	Severity           *DiagnosticSeverity   `protobuf:"varint,5,opt,name=severity,proto3,enum=aiserver.v1.DiagnosticSeverity,oneof" json:"severity,omitempty"`
}

func (x *LinterError) Reset() {
	*x = LinterError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinterError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinterError) ProtoMessage() {}

func (x *LinterError) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinterError.ProtoReflect.Descriptor instead.
func (*LinterError) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{31}
}

func (x *LinterError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LinterError) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *LinterError) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *LinterError) GetRelatedInformation() []*RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

func (x *LinterError) GetSeverity() DiagnosticSeverity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return DiagnosticSeverity_DIAGNOSTIC_SEVERITY_UNSPECIFIED
}

type RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range   *CursorRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *RelatedInformation) Reset() {
	*x = RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedInformation) ProtoMessage() {}

func (x *RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedInformation.ProtoReflect.Descriptor instead.
func (*RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{32}
}

func (x *RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RelatedInformation) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type ChatQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markdown     string `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
	BubbleId     string `protobuf:"bytes,2,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`
	SectionIndex int32  `protobuf:"varint,3,opt,name=section_index,json=sectionIndex,proto3" json:"section_index,omitempty"`
}

func (x *ChatQuote) Reset() {
	*x = ChatQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatQuote) ProtoMessage() {}

func (x *ChatQuote) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatQuote.ProtoReflect.Descriptor instead.
func (*ChatQuote) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{33}
}

func (x *ChatQuote) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

func (x *ChatQuote) GetBubbleId() string {
	if x != nil {
		return x.BubbleId
	}
	return ""
}

func (x *ChatQuote) GetSectionIndex() int32 {
	if x != nil {
		return x.SectionIndex
	}
	return 0
}

type DebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Breakpoint *DebugInfo_Breakpoint       `protobuf:"bytes,1,opt,name=breakpoint,proto3" json:"breakpoint,omitempty"`
	CallStack  []*DebugInfo_CallStackFrame `protobuf:"bytes,2,rep,name=call_stack,json=callStack,proto3" json:"call_stack,omitempty"`
	History    []*CodeBlock                `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *DebugInfo) Reset() {
	*x = DebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo) ProtoMessage() {}

func (x *DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo.ProtoReflect.Descriptor instead.
func (*DebugInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{34}
}

func (x *DebugInfo) GetBreakpoint() *DebugInfo_Breakpoint {
	if x != nil {
		return x.Breakpoint
	}
	return nil
}

func (x *DebugInfo) GetCallStack() []*DebugInfo_CallStackFrame {
	if x != nil {
		return x.CallStack
	}
	return nil
}

func (x *DebugInfo) GetHistory() []*CodeBlock {
	if x != nil {
		return x.History
	}
	return nil
}

type Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Variables []*Variable `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *Scope) Reset() {
	*x = Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{35}
}

func (x *Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scope) GetVariables() []*Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{36}
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Variable) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ChatExternalLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ChatExternalLink) Reset() {
	*x = ChatExternalLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatExternalLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatExternalLink) ProtoMessage() {}

func (x *ChatExternalLink) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatExternalLink.ProtoReflect.Descriptor instead.
func (*ChatExternalLink) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{37}
}

func (x *ChatExternalLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ChatExternalLink) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CommitNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note       string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	CommitHash string `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
}

func (x *CommitNote) Reset() {
	*x = CommitNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitNote) ProtoMessage() {}

func (x *CommitNote) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitNote.ProtoReflect.Descriptor instead.
func (*CommitNote) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{38}
}

func (x *CommitNote) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CommitNote) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type ContextAST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*ContainerTree `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ContextAST) Reset() {
	*x = ContextAST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextAST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextAST) ProtoMessage() {}

func (x *ContextAST) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextAST.ProtoReflect.Descriptor instead.
func (*ContextAST) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{39}
}

func (x *ContextAST) GetFiles() []*ContainerTree {
	if x != nil {
		return x.Files
	}
	return nil
}

type ContainerTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string               `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Nodes                 []*ContainerTreeNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ContainerTree) Reset() {
	*x = ContainerTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTree) ProtoMessage() {}

func (x *ContainerTree) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTree.ProtoReflect.Descriptor instead.
func (*ContainerTree) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{40}
}

func (x *ContainerTree) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ContainerTree) GetNodes() []*ContainerTreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ContainerTreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container *ContainerTreeNode_Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Blob      *ContainerTreeNode_Blob      `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	Symbol    *ContainerTreeNode_Symbol    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *ContainerTreeNode) Reset() {
	*x = ContainerTreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode) ProtoMessage() {}

func (x *ContainerTreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{41}
}

func (x *ContainerTreeNode) GetContainer() *ContainerTreeNode_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ContainerTreeNode) GetBlob() *ContainerTreeNode_Blob {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *ContainerTreeNode) GetSymbol() *ContainerTreeNode_Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                 string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	RelativeWorkspacePath string `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42}
}

func (x *Reference) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Reference) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type StreamChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                    string                            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	DebuggingOnlyChatPrompt *string                           `protobuf:"bytes,2,opt,name=debugging_only_chat_prompt,json=debuggingOnlyChatPrompt,proto3,oneof" json:"debugging_only_chat_prompt,omitempty"`
	DebuggingOnlyTokenCount *int32                            `protobuf:"varint,3,opt,name=debugging_only_token_count,json=debuggingOnlyTokenCount,proto3,oneof" json:"debugging_only_token_count,omitempty"`
	DocumentCitation        *DocumentationCitation            `protobuf:"bytes,4,opt,name=document_citation,json=documentCitation,proto3" json:"document_citation,omitempty"`
	FilledPrompt            *string                           `protobuf:"bytes,5,opt,name=filled_prompt,json=filledPrompt,proto3,oneof" json:"filled_prompt,omitempty"`
	IsBigFile               *bool                             `protobuf:"varint,6,opt,name=is_big_file,json=isBigFile,proto3,oneof" json:"is_big_file,omitempty"`
	IntermediateText        *string                           `protobuf:"bytes,7,opt,name=intermediate_text,json=intermediateText,proto3,oneof" json:"intermediate_text,omitempty"`
	IsUsingSlowRequest      *bool                             `protobuf:"varint,10,opt,name=is_using_slow_request,json=isUsingSlowRequest,proto3,oneof" json:"is_using_slow_request,omitempty"`
	ChunkIdentity           *StreamChatResponse_ChunkIdentity `protobuf:"bytes,8,opt,name=chunk_identity,json=chunkIdentity,proto3,oneof" json:"chunk_identity,omitempty"`
	DocsReference           *DocsReference                    `protobuf:"bytes,9,opt,name=docs_reference,json=docsReference,proto3,oneof" json:"docs_reference,omitempty"`
	WebCitation             *WebCitation                      `protobuf:"bytes,11,opt,name=web_citation,json=webCitation,proto3,oneof" json:"web_citation,omitempty"`
	StatusUpdates           *StatusUpdates                    `protobuf:"bytes,12,opt,name=status_updates,json=statusUpdates,proto3,oneof" json:"status_updates,omitempty"`
}

func (x *StreamChatResponse) Reset() {
	*x = StreamChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatResponse) ProtoMessage() {}

func (x *StreamChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatResponse.ProtoReflect.Descriptor instead.
func (*StreamChatResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{43}
}

func (x *StreamChatResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChatResponse) GetDebuggingOnlyChatPrompt() string {
	if x != nil && x.DebuggingOnlyChatPrompt != nil {
		return *x.DebuggingOnlyChatPrompt
	}
	return ""
}

func (x *StreamChatResponse) GetDebuggingOnlyTokenCount() int32 {
	if x != nil && x.DebuggingOnlyTokenCount != nil {
		return *x.DebuggingOnlyTokenCount
	}
	return 0
}

func (x *StreamChatResponse) GetDocumentCitation() *DocumentationCitation {
	if x != nil {
		return x.DocumentCitation
	}
	return nil
}

func (x *StreamChatResponse) GetFilledPrompt() string {
	if x != nil && x.FilledPrompt != nil {
		return *x.FilledPrompt
	}
	return ""
}

func (x *StreamChatResponse) GetIsBigFile() bool {
	if x != nil && x.IsBigFile != nil {
		return *x.IsBigFile
	}
	return false
}

func (x *StreamChatResponse) GetIntermediateText() string {
	if x != nil && x.IntermediateText != nil {
		return *x.IntermediateText
	}
	return ""
}

func (x *StreamChatResponse) GetIsUsingSlowRequest() bool {
	if x != nil && x.IsUsingSlowRequest != nil {
		return *x.IsUsingSlowRequest
	}
	return false
}

func (x *StreamChatResponse) GetChunkIdentity() *StreamChatResponse_ChunkIdentity {
	if x != nil {
		return x.ChunkIdentity
	}
	return nil
}

func (x *StreamChatResponse) GetDocsReference() *DocsReference {
	if x != nil {
		return x.DocsReference
	}
	return nil
}

func (x *StreamChatResponse) GetWebCitation() *WebCitation {
	if x != nil {
		return x.WebCitation
	}
	return nil
}

func (x *StreamChatResponse) GetStatusUpdates() *StatusUpdates {
	if x != nil {
		return x.StatusUpdates
	}
	return nil
}

type DocumentationCitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*DocumentationChunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *DocumentationCitation) Reset() {
	*x = DocumentationCitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationCitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationCitation) ProtoMessage() {}

func (x *DocumentationCitation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationCitation.ProtoReflect.Descriptor instead.
func (*DocumentationCitation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{44}
}

func (x *DocumentationCitation) GetChunks() []*DocumentationChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type DocumentationChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocName            string  `protobuf:"bytes,1,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	PageUrl            string  `protobuf:"bytes,2,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	DocumentationChunk string  `protobuf:"bytes,3,opt,name=documentation_chunk,json=documentationChunk,proto3" json:"documentation_chunk,omitempty"`
	Score              float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
	PageTitle          string  `protobuf:"bytes,5,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
}

func (x *DocumentationChunk) Reset() {
	*x = DocumentationChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationChunk) ProtoMessage() {}

func (x *DocumentationChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationChunk.ProtoReflect.Descriptor instead.
func (*DocumentationChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{45}
}

func (x *DocumentationChunk) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *DocumentationChunk) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *DocumentationChunk) GetDocumentationChunk() string {
	if x != nil {
		return x.DocumentationChunk
	}
	return ""
}

func (x *DocumentationChunk) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DocumentationChunk) GetPageTitle() string {
	if x != nil {
		return x.PageTitle
	}
	return ""
}

type DocsReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DocsReference) Reset() {
	*x = DocsReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocsReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocsReference) ProtoMessage() {}

func (x *DocsReference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocsReference.ProtoReflect.Descriptor instead.
func (*DocsReference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{46}
}

func (x *DocsReference) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocsReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WebCitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References []*WebReference `protobuf:"bytes,1,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *WebCitation) Reset() {
	*x = WebCitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebCitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebCitation) ProtoMessage() {}

func (x *WebCitation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebCitation.ProtoReflect.Descriptor instead.
func (*WebCitation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{47}
}

func (x *WebCitation) GetReferences() []*WebReference {
	if x != nil {
		return x.References
	}
	return nil
}

type WebReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Url   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WebReference) Reset() {
	*x = WebReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebReference) ProtoMessage() {}

func (x *WebReference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebReference.ProtoReflect.Descriptor instead.
func (*WebReference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{48}
}

func (x *WebReference) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StatusUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*StatusUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *StatusUpdates) Reset() {
	*x = StatusUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdates) ProtoMessage() {}

func (x *StatusUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdates.ProtoReflect.Descriptor instead.
func (*StatusUpdates) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{49}
}

func (x *StatusUpdates) GetUpdates() []*StatusUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Metadata *string `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{50}
}

func (x *StatusUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusUpdate) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

type CurrentFileInfo_NotebookCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrentFileInfo_NotebookCell) Reset() {
	*x = CurrentFileInfo_NotebookCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentFileInfo_NotebookCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentFileInfo_NotebookCell) ProtoMessage() {}

func (x *CurrentFileInfo_NotebookCell) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentFileInfo_NotebookCell.ProtoReflect.Descriptor instead.
func (*CurrentFileInfo_NotebookCell) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{1, 0}
}

type DataframeInfo_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DataframeInfo_Column) Reset() {
	*x = DataframeInfo_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataframeInfo_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataframeInfo_Column) ProtoMessage() {}

func (x *DataframeInfo_Column) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataframeInfo_Column.ProtoReflect.Descriptor instead.
func (*DataframeInfo_Column) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DataframeInfo_Column) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataframeInfo_Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Diagnostic_RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range   *CursorRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Diagnostic_RelatedInformation) Reset() {
	*x = Diagnostic_RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic_RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic_RelatedInformation) ProtoMessage() {}

func (x *Diagnostic_RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic_RelatedInformation.ProtoReflect.Descriptor instead.
func (*Diagnostic_RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Diagnostic_RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic_RelatedInformation) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type ConversationMessage_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                 `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32                  `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string               `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	SummarizationStrategy *SummarizationStrategy `protobuf:"varint,4,opt,name=summarization_strategy,json=summarizationStrategy,proto3,enum=aiserver.v1.SummarizationStrategy,oneof" json:"summarization_strategy,omitempty"`
	LanguageIdentifier    string                 `protobuf:"bytes,5,opt,name=language_identifier,json=languageIdentifier,proto3" json:"language_identifier,omitempty"`
	Intent                *Intent                `protobuf:"varint,6,opt,name=intent,proto3,enum=aiserver.v1.Intent,oneof" json:"intent,omitempty"`
}

func (x *ConversationMessage_CodeChunk) Reset() {
	*x = ConversationMessage_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_CodeChunk) ProtoMessage() {}

func (x *ConversationMessage_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_CodeChunk.ProtoReflect.Descriptor instead.
func (*ConversationMessage_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ConversationMessage_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ConversationMessage_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *ConversationMessage_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *ConversationMessage_CodeChunk) GetSummarizationStrategy() SummarizationStrategy {
	if x != nil && x.SummarizationStrategy != nil {
		return *x.SummarizationStrategy
	}
	return SummarizationStrategy_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED
}

func (x *ConversationMessage_CodeChunk) GetLanguageIdentifier() string {
	if x != nil {
		return x.LanguageIdentifier
	}
	return ""
}

func (x *ConversationMessage_CodeChunk) GetIntent() Intent {
	if x != nil && x.Intent != nil {
		return *x.Intent
	}
	return Intent_INTENT_UNSPECIFIED
}

type ConversationMessage_ApproximateLintError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	StartLine   int32  `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine     int32  `protobuf:"varint,4,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	StartColumn int32  `protobuf:"varint,5,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumn   int32  `protobuf:"varint,6,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *ConversationMessage_ApproximateLintError) Reset() {
	*x = ConversationMessage_ApproximateLintError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_ApproximateLintError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_ApproximateLintError) ProtoMessage() {}

func (x *ConversationMessage_ApproximateLintError) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_ApproximateLintError.ProtoReflect.Descriptor instead.
func (*ConversationMessage_ApproximateLintError) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ConversationMessage_ApproximateLintError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConversationMessage_ApproximateLintError) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConversationMessage_ApproximateLintError) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *ConversationMessage_ApproximateLintError) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *ConversationMessage_ApproximateLintError) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *ConversationMessage_ApproximateLintError) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type ConversationMessage_Lints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lints                   *GetLintsForChangeResponse `protobuf:"bytes,1,opt,name=lints,proto3" json:"lints,omitempty"`
	ChatCodeblockModelValue string                     `protobuf:"bytes,2,opt,name=chat_codeblock_model_value,json=chatCodeblockModelValue,proto3" json:"chat_codeblock_model_value,omitempty"`
}

func (x *ConversationMessage_Lints) Reset() {
	*x = ConversationMessage_Lints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_Lints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_Lints) ProtoMessage() {}

func (x *ConversationMessage_Lints) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_Lints.ProtoReflect.Descriptor instead.
func (*ConversationMessage_Lints) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8, 2}
}

func (x *ConversationMessage_Lints) GetLints() *GetLintsForChangeResponse {
	if x != nil {
		return x.Lints
	}
	return nil
}

func (x *ConversationMessage_Lints) GetChatCodeblockModelValue() string {
	if x != nil {
		return x.ChatCodeblockModelValue
	}
	return ""
}

type ConversationMessage_ToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolCallId         string                           `protobuf:"bytes,1,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
	ToolName           string                           `protobuf:"bytes,2,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	ToolIndex          uint32                           `protobuf:"varint,3,opt,name=tool_index,json=toolIndex,proto3" json:"tool_index,omitempty"`
	Args               string                           `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	RawArgs            string                           `protobuf:"bytes,5,opt,name=raw_args,json=rawArgs,proto3" json:"raw_args,omitempty"`
	AttachedCodeChunks []*ConversationMessage_CodeChunk `protobuf:"bytes,6,rep,name=attached_code_chunks,json=attachedCodeChunks,proto3" json:"attached_code_chunks,omitempty"`
	Content            *string                          `protobuf:"bytes,7,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *ConversationMessage_ToolResult) Reset() {
	*x = ConversationMessage_ToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_ToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_ToolResult) ProtoMessage() {}

func (x *ConversationMessage_ToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_ToolResult.ProtoReflect.Descriptor instead.
func (*ConversationMessage_ToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8, 3}
}

func (x *ConversationMessage_ToolResult) GetToolCallId() string {
	if x != nil {
		return x.ToolCallId
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetToolIndex() uint32 {
	if x != nil {
		return x.ToolIndex
	}
	return 0
}

func (x *ConversationMessage_ToolResult) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetRawArgs() string {
	if x != nil {
		return x.RawArgs
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetAttachedCodeChunks() []*ConversationMessage_CodeChunk {
	if x != nil {
		return x.AttachedCodeChunks
	}
	return nil
}

func (x *ConversationMessage_ToolResult) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type CodeBlock_Signatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranges []*CursorRange `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *CodeBlock_Signatures) Reset() {
	*x = CodeBlock_Signatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock_Signatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock_Signatures) ProtoMessage() {}

func (x *CodeBlock_Signatures) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock_Signatures.ProtoReflect.Descriptor instead.
func (*CodeBlock_Signatures) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CodeBlock_Signatures) GetRanges() []*CursorRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type FileDiff_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Lines   []string `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *FileDiff_Chunk) Reset() {
	*x = FileDiff_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDiff_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDiff_Chunk) ProtoMessage() {}

func (x *FileDiff_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDiff_Chunk.ProtoReflect.Descriptor instead.
func (*FileDiff_Chunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{12, 0}
}

func (x *FileDiff_Chunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FileDiff_Chunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type SimpleFileDiff_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldLines []string   `protobuf:"bytes,1,rep,name=old_lines,json=oldLines,proto3" json:"old_lines,omitempty"`
	NewLines []string   `protobuf:"bytes,2,rep,name=new_lines,json=newLines,proto3" json:"new_lines,omitempty"`
	OldRange *LineRange `protobuf:"bytes,3,opt,name=old_range,json=oldRange,proto3" json:"old_range,omitempty"`
	NewRange *LineRange `protobuf:"bytes,4,opt,name=new_range,json=newRange,proto3" json:"new_range,omitempty"`
}

func (x *SimpleFileDiff_Chunk) Reset() {
	*x = SimpleFileDiff_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleFileDiff_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleFileDiff_Chunk) ProtoMessage() {}

func (x *SimpleFileDiff_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleFileDiff_Chunk.ProtoReflect.Descriptor instead.
func (*SimpleFileDiff_Chunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 0}
}

func (x *SimpleFileDiff_Chunk) GetOldLines() []string {
	if x != nil {
		return x.OldLines
	}
	return nil
}

func (x *SimpleFileDiff_Chunk) GetNewLines() []string {
	if x != nil {
		return x.NewLines
	}
	return nil
}

func (x *SimpleFileDiff_Chunk) GetOldRange() *LineRange {
	if x != nil {
		return x.OldRange
	}
	return nil
}

func (x *SimpleFileDiff_Chunk) GetNewRange() *LineRange {
	if x != nil {
		return x.NewRange
	}
	return nil
}

type ImageProto_Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ImageProto_Dimension) Reset() {
	*x = ImageProto_Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProto_Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProto_Dimension) ProtoMessage() {}

func (x *ImageProto_Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProto_Dimension.ProtoReflect.Descriptor instead.
func (*ImageProto_Dimension) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ImageProto_Dimension) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageProto_Dimension) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetLintsForChangeResponse_Lint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                          string      `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity                         string      `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	RelativeWorkspacePath            string      `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumberOneIndexed        int32       `protobuf:"varint,4,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32       `protobuf:"varint,5,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32       `protobuf:"varint,6,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32       `protobuf:"varint,7,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
	QuickFixes                       []*QuickFix `protobuf:"bytes,9,rep,name=quick_fixes,json=quickFixes,proto3" json:"quick_fixes,omitempty"`
}

func (x *GetLintsForChangeResponse_Lint) Reset() {
	*x = GetLintsForChangeResponse_Lint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLintsForChangeResponse_Lint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLintsForChangeResponse_Lint) ProtoMessage() {}

func (x *GetLintsForChangeResponse_Lint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLintsForChangeResponse_Lint.ProtoReflect.Descriptor instead.
func (*GetLintsForChangeResponse_Lint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{21, 0}
}

func (x *GetLintsForChangeResponse_Lint) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetQuickFixes() []*QuickFix {
	if x != nil {
		return x.QuickFixes
	}
	return nil
}

type DebugInfo_Breakpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineNumber            int32    `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	LinesBeforeBreakpoint []string `protobuf:"bytes,3,rep,name=lines_before_breakpoint,json=linesBeforeBreakpoint,proto3" json:"lines_before_breakpoint,omitempty"`
	LinesAfterBreakpoint  []string `protobuf:"bytes,4,rep,name=lines_after_breakpoint,json=linesAfterBreakpoint,proto3" json:"lines_after_breakpoint,omitempty"`
	ExceptionInfo         *string  `protobuf:"bytes,5,opt,name=exception_info,json=exceptionInfo,proto3,oneof" json:"exception_info,omitempty"`
}

func (x *DebugInfo_Breakpoint) Reset() {
	*x = DebugInfo_Breakpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo_Breakpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo_Breakpoint) ProtoMessage() {}

func (x *DebugInfo_Breakpoint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo_Breakpoint.ProtoReflect.Descriptor instead.
func (*DebugInfo_Breakpoint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{34, 0}
}

func (x *DebugInfo_Breakpoint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *DebugInfo_Breakpoint) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DebugInfo_Breakpoint) GetLinesBeforeBreakpoint() []string {
	if x != nil {
		return x.LinesBeforeBreakpoint
	}
	return nil
}

func (x *DebugInfo_Breakpoint) GetLinesAfterBreakpoint() []string {
	if x != nil {
		return x.LinesAfterBreakpoint
	}
	return nil
}

func (x *DebugInfo_Breakpoint) GetExceptionInfo() string {
	if x != nil && x.ExceptionInfo != nil {
		return *x.ExceptionInfo
	}
	return ""
}

type DebugInfo_CallStackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineNumber            int32    `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	FunctionName          string   `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Scopes                []*Scope `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *DebugInfo_CallStackFrame) Reset() {
	*x = DebugInfo_CallStackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo_CallStackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo_CallStackFrame) ProtoMessage() {}

func (x *DebugInfo_CallStackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo_CallStackFrame.ProtoReflect.Descriptor instead.
func (*DebugInfo_CallStackFrame) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{34, 1}
}

func (x *DebugInfo_CallStackFrame) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *DebugInfo_CallStackFrame) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DebugInfo_CallStackFrame) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *DebugInfo_CallStackFrame) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ContainerTreeNode_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocString  string               `protobuf:"bytes,1,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	Header     string               `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Trailer    string               `protobuf:"bytes,3,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Children   []*ContainerTreeNode `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	References []*Reference         `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
	Score      float64              `protobuf:"fixed64,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ContainerTreeNode_Container) Reset() {
	*x = ContainerTreeNode_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Container) ProtoMessage() {}

func (x *ContainerTreeNode_Container) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Container.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Container) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{41, 0}
}

func (x *ContainerTreeNode_Container) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ContainerTreeNode_Container) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *ContainerTreeNode_Container) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

func (x *ContainerTreeNode_Container) GetChildren() []*ContainerTreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ContainerTreeNode_Container) GetReferences() []*Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ContainerTreeNode_Container) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ContainerTreeNode_Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *ContainerTreeNode_Blob) Reset() {
	*x = ContainerTreeNode_Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Blob) ProtoMessage() {}

func (x *ContainerTreeNode_Blob) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Blob.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Blob) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{41, 1}
}

func (x *ContainerTreeNode_Blob) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ContainerTreeNode_Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocString  string       `protobuf:"bytes,1,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	Value      string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	References []*Reference `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
	Score      float64      `protobuf:"fixed64,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ContainerTreeNode_Symbol) Reset() {
	*x = ContainerTreeNode_Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Symbol) ProtoMessage() {}

func (x *ContainerTreeNode_Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Symbol.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Symbol) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{41, 2}
}

func (x *ContainerTreeNode_Symbol) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ContainerTreeNode_Symbol) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContainerTreeNode_Symbol) GetReferences() []*Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ContainerTreeNode_Symbol) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type StreamChatResponse_ChunkIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string    `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	StartLine int32     `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32     `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	Text      string    `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	ChunkType ChunkType `protobuf:"varint,5,opt,name=chunk_type,json=chunkType,proto3,enum=aiserver.v1.ChunkType" json:"chunk_type,omitempty"`
}

func (x *StreamChatResponse_ChunkIdentity) Reset() {
	*x = StreamChatResponse_ChunkIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatResponse_ChunkIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatResponse_ChunkIdentity) ProtoMessage() {}

func (x *StreamChatResponse_ChunkIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatResponse_ChunkIdentity.ProtoReflect.Descriptor instead.
func (*StreamChatResponse_ChunkIdentity) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{43, 0}
}

func (x *StreamChatResponse_ChunkIdentity) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StreamChatResponse_ChunkIdentity) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *StreamChatResponse_ChunkIdentity) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *StreamChatResponse_ChunkIdentity) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChatResponse_ChunkIdentity) GetChunkType() ChunkType {
	if x != nil {
		return x.ChunkType
	}
	return ChunkType_CHUNK_TYPE_UNSPECIFIED
}

var File_aiserver_v1_aiserver_proto protoreflect.FileDescriptor

var file_aiserver_v1_aiserver_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x86, 0x0e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a,
	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x75, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x55, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x06, 0x69, 0x73, 0x42, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x27, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05,
	0x52, 0x22, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x77,
	0x65, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x75, 0x73, 0x65, 0x57,
	0x65, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x07, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52,
	0x06, 0x69, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x53, 0x54, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x41, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x12, 0x72,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x68, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x63, 0x61, 0x6e,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x75,
	0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0xa4, 0x06, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x4d,
	0x32, 0x35, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x0e, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x42, 0x4d,
	0x32, 0x35, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x5c,
	0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x3c, 0x0a, 0x0e,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x44,
	0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x2e, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x04, 0x0a, 0x0a, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x1f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f,
	0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48,
	0x49, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x8b, 0x12, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x12, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x4e, 0x0a, 0x17, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x15, 0x63, 0x6f, 0x64, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x08, 0x67, 0x69, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x62, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x77, 0x12,
	0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x82, 0x01,
	0x0a, 0x27, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x22,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x54, 0x6f, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xee, 0x02, 0x0a, 0x09, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x5e, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xc2, 0x01, 0x0a, 0x14, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a,
	0x82, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa2, 0x02, 0x0a, 0x0a, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x5c, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x49, 0x10, 0x02, 0x22, 0xa0, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xad,
	0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x04, 0x64, 0x69,
	0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9c,
	0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12,
	0x33, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x37, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x62, 0x0a,
	0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x22, 0xdd, 0x01, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x2b, 0x0a,
	0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x69,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f,
	0x54, 0x4f, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x46,
	0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x02, 0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x06,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x19, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x64, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x8e, 0x04, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xad, 0x03, 0x0a,
	0x04, 0x4c, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4f,
	0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78,
	0x52, 0x0a, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x08, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x05, 0x65, 0x64,
	0x69, 0x74, 0x73, 0x22, 0xd3, 0x02, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x22, 0xec, 0x03, 0x0a, 0x20, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6c,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x77, 0x0a, 0x2b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x26, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x88,
	0x01, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x5e, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x19, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x22, 0x64, 0x0a,
	0x0f, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x68, 0x6f, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x77, 0x50, 0x6f,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x41, 0x70, 0x69, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x7d, 0x0a, 0x0a, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x30, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x48, 0x01, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5e, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x09, 0x43, 0x68, 0x61,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x98, 0x05, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x92, 0x02,
	0x0a, 0x0a, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x1a, 0xba, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0x50, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x22, 0x56, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x41, 0x53, 0x54, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xf7, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x1a, 0xe6, 0x01, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x2b, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x59, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf1, 0x08, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x17, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x69, 0x73, 0x42,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x69,
	0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x12, 0x69, 0x73,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x07, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x43, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x43, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x48, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x1a, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x69,
	0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x6f, 0x63, 0x73,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77,
	0x65, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x50,
	0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x48, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65,
	0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0c, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x44,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x90, 0x01, 0x0a,
	0x15, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x3a, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0xbc, 0x01, 0x0a, 0x12,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f,
	0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x6f, 0x0a, 0x09, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x10, 0x03, 0x32, 0x5b, 0x0a, 0x09, 0x41,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0xd1, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x41, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x62, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x6d, 0x7a, 0x2f, 0x65, 0x76, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6d, 0x7a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2d, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c,
	0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aiserver_v1_aiserver_proto_rawDescOnce sync.Once
	file_aiserver_v1_aiserver_proto_rawDescData = file_aiserver_v1_aiserver_proto_rawDesc
)

func file_aiserver_v1_aiserver_proto_rawDescGZIP() []byte {
	file_aiserver_v1_aiserver_proto_rawDescOnce.Do(func() {
		file_aiserver_v1_aiserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_aiserver_v1_aiserver_proto_rawDescData)
	})
	return file_aiserver_v1_aiserver_proto_rawDescData
}

var file_aiserver_v1_aiserver_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_aiserver_v1_aiserver_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_aiserver_v1_aiserver_proto_goTypes = []any{
	(SummarizationStrategy)(0),                             // 0: aiserver.v1.SummarizationStrategy
	(Intent)(0),                                            // 1: aiserver.v1.Intent
	(DiagnosticSeverity)(0),                                // 2: aiserver.v1.DiagnosticSeverity
	(ChunkType)(0),                                         // 3: aiserver.v1.ChunkType
	(Diagnostic_DiagnosticSeverity)(0),                     // 4: aiserver.v1.Diagnostic.DiagnosticSeverity
	(ConversationMessage_MessageType)(0),                   // 5: aiserver.v1.ConversationMessage.MessageType
	(GitDiff_DiffType)(0),                                  // 6: aiserver.v1.GitDiff.DiffType
	(UserResponseToSuggestedCodeBlock_UserResponseType)(0), // 7: aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
	(*GetChatRequest)(nil),                                 // 8: aiserver.v1.GetChatRequest
	(*CurrentFileInfo)(nil),                                // 9: aiserver.v1.CurrentFileInfo
	(*BM25Chunk)(nil),                                      // 10: aiserver.v1.BM25Chunk
	(*SimplestRange)(nil),                                  // 11: aiserver.v1.SimplestRange
	(*CursorPosition)(nil),                                 // 12: aiserver.v1.CursorPosition
	(*DataframeInfo)(nil),                                  // 13: aiserver.v1.DataframeInfo
	(*CursorRange)(nil),                                    // 14: aiserver.v1.CursorRange
	(*Diagnostic)(nil),                                     // 15: aiserver.v1.Diagnostic
	(*ConversationMessage)(nil),                            // 16: aiserver.v1.ConversationMessage
	(*CodeBlock)(nil),                                      // 17: aiserver.v1.CodeBlock
	(*DetailedLine)(nil),                                   // 18: aiserver.v1.DetailedLine
	(*Commit)(nil),                                         // 19: aiserver.v1.Commit
	(*FileDiff)(nil),                                       // 20: aiserver.v1.FileDiff
	(*PullRequest)(nil),                                    // 21: aiserver.v1.PullRequest
	(*GitDiff)(nil),                                        // 22: aiserver.v1.GitDiff
	(*SimpleFileDiff)(nil),                                 // 23: aiserver.v1.SimpleFileDiff
	(*LineRange)(nil),                                      // 24: aiserver.v1.LineRange
	(*InterpreterResult)(nil),                              // 25: aiserver.v1.InterpreterResult
	(*ImageProto)(nil),                                     // 26: aiserver.v1.ImageProto
	(*FolderInfo)(nil),                                     // 27: aiserver.v1.FolderInfo
	(*FolderFileInfo)(nil),                                 // 28: aiserver.v1.FolderFileInfo
	(*GetLintsForChangeResponse)(nil),                      // 29: aiserver.v1.GetLintsForChangeResponse
	(*QuickFix)(nil),                                       // 30: aiserver.v1.QuickFix
	(*Edit)(nil),                                           // 31: aiserver.v1.Edit
	(*UserResponseToSuggestedCodeBlock)(nil),               // 32: aiserver.v1.UserResponseToSuggestedCodeBlock
	(*CodeChunk)(nil),                                      // 33: aiserver.v1.CodeChunk
	(*RepositoryInfo)(nil),                                 // 34: aiserver.v1.RepositoryInfo
	(*ExplicitContext)(nil),                                // 35: aiserver.v1.ExplicitContext
	(*ModelDetails)(nil),                                   // 36: aiserver.v1.ModelDetails
	(*AzureState)(nil),                                     // 37: aiserver.v1.AzureState
	(*LinterErrors)(nil),                                   // 38: aiserver.v1.LinterErrors
	(*LinterError)(nil),                                    // 39: aiserver.v1.LinterError
	(*RelatedInformation)(nil),                             // 40: aiserver.v1.RelatedInformation
	(*ChatQuote)(nil),                                      // 41: aiserver.v1.ChatQuote
	(*DebugInfo)(nil),                                      // 42: aiserver.v1.DebugInfo
	(*Scope)(nil),                                          // 43: aiserver.v1.Scope
	(*Variable)(nil),                                       // 44: aiserver.v1.Variable
	(*ChatExternalLink)(nil),                               // 45: aiserver.v1.ChatExternalLink
	(*CommitNote)(nil),                                     // 46: aiserver.v1.CommitNote
	(*ContextAST)(nil),                                     // 47: aiserver.v1.ContextAST
	(*ContainerTree)(nil),                                  // 48: aiserver.v1.ContainerTree
	(*ContainerTreeNode)(nil),                              // 49: aiserver.v1.ContainerTreeNode
	(*Reference)(nil),                                      // 50: aiserver.v1.Reference
	(*StreamChatResponse)(nil),                             // 51: aiserver.v1.StreamChatResponse
	(*DocumentationCitation)(nil),                          // 52: aiserver.v1.DocumentationCitation
	(*DocumentationChunk)(nil),                             // 53: aiserver.v1.DocumentationChunk
	(*DocsReference)(nil),                                  // 54: aiserver.v1.DocsReference
	(*WebCitation)(nil),                                    // 55: aiserver.v1.WebCitation
	(*WebReference)(nil),                                   // 56: aiserver.v1.WebReference
	(*StatusUpdates)(nil),                                  // 57: aiserver.v1.StatusUpdates
	(*StatusUpdate)(nil),                                   // 58: aiserver.v1.StatusUpdate
	(*CurrentFileInfo_NotebookCell)(nil),                   // 59: aiserver.v1.CurrentFileInfo.NotebookCell
	(*DataframeInfo_Column)(nil),                           // 60: aiserver.v1.DataframeInfo.Column
	(*Diagnostic_RelatedInformation)(nil),                  // 61: aiserver.v1.Diagnostic.RelatedInformation
	(*ConversationMessage_CodeChunk)(nil),                  // 62: aiserver.v1.ConversationMessage.CodeChunk
	(*ConversationMessage_ApproximateLintError)(nil),       // 63: aiserver.v1.ConversationMessage.ApproximateLintError
	(*ConversationMessage_Lints)(nil),                      // 64: aiserver.v1.ConversationMessage.Lints
	(*ConversationMessage_ToolResult)(nil),                 // 65: aiserver.v1.ConversationMessage.ToolResult
	(*CodeBlock_Signatures)(nil),                           // 66: aiserver.v1.CodeBlock.Signatures
	(*FileDiff_Chunk)(nil),                                 // 67: aiserver.v1.FileDiff.Chunk
	(*SimpleFileDiff_Chunk)(nil),                           // 68: aiserver.v1.SimpleFileDiff.Chunk
	(*ImageProto_Dimension)(nil),                           // 69: aiserver.v1.ImageProto.Dimension
	(*GetLintsForChangeResponse_Lint)(nil),                 // 70: aiserver.v1.GetLintsForChangeResponse.Lint
	(*DebugInfo_Breakpoint)(nil),                           // 71: aiserver.v1.DebugInfo.Breakpoint
	(*DebugInfo_CallStackFrame)(nil),                       // 72: aiserver.v1.DebugInfo.CallStackFrame
	(*ContainerTreeNode_Container)(nil),                    // 73: aiserver.v1.ContainerTreeNode.Container
	(*ContainerTreeNode_Blob)(nil),                         // 74: aiserver.v1.ContainerTreeNode.Blob
	(*ContainerTreeNode_Symbol)(nil),                       // 75: aiserver.v1.ContainerTreeNode.Symbol
	(*StreamChatResponse_ChunkIdentity)(nil),               // 76: aiserver.v1.StreamChatResponse.ChunkIdentity
}
var file_aiserver_v1_aiserver_proto_depIdxs = []int32{
	9,  // 0: aiserver.v1.GetChatRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	16, // 1: aiserver.v1.GetChatRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	34, // 2: aiserver.v1.GetChatRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	35, // 3: aiserver.v1.GetChatRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	17, // 4: aiserver.v1.GetChatRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	36, // 5: aiserver.v1.GetChatRequest.model_details:type_name -> aiserver.v1.ModelDetails
	38, // 6: aiserver.v1.GetChatRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	41, // 7: aiserver.v1.GetChatRequest.quotes:type_name -> aiserver.v1.ChatQuote
	42, // 8: aiserver.v1.GetChatRequest.debug_info:type_name -> aiserver.v1.DebugInfo
	45, // 9: aiserver.v1.GetChatRequest.external_links:type_name -> aiserver.v1.ChatExternalLink
	46, // 10: aiserver.v1.GetChatRequest.commit_notes:type_name -> aiserver.v1.CommitNote
	47, // 11: aiserver.v1.GetChatRequest.context_ast:type_name -> aiserver.v1.ContextAST
	59, // 12: aiserver.v1.CurrentFileInfo.cells:type_name -> aiserver.v1.CurrentFileInfo.NotebookCell
	10, // 13: aiserver.v1.CurrentFileInfo.top_chunks:type_name -> aiserver.v1.BM25Chunk
	12, // 14: aiserver.v1.CurrentFileInfo.cursor_position:type_name -> aiserver.v1.CursorPosition
	13, // 15: aiserver.v1.CurrentFileInfo.dataframes:type_name -> aiserver.v1.DataframeInfo
	14, // 16: aiserver.v1.CurrentFileInfo.selection:type_name -> aiserver.v1.CursorRange
	15, // 17: aiserver.v1.CurrentFileInfo.diagnostics:type_name -> aiserver.v1.Diagnostic
	11, // 18: aiserver.v1.BM25Chunk.range:type_name -> aiserver.v1.SimplestRange
	60, // 19: aiserver.v1.DataframeInfo.columns:type_name -> aiserver.v1.DataframeInfo.Column
	12, // 20: aiserver.v1.CursorRange.start_position:type_name -> aiserver.v1.CursorPosition
	12, // 21: aiserver.v1.CursorRange.end_position:type_name -> aiserver.v1.CursorPosition
	14, // 22: aiserver.v1.Diagnostic.range:type_name -> aiserver.v1.CursorRange
	4,  // 23: aiserver.v1.Diagnostic.severity:type_name -> aiserver.v1.Diagnostic.DiagnosticSeverity
	61, // 24: aiserver.v1.Diagnostic.related_information:type_name -> aiserver.v1.Diagnostic.RelatedInformation
	5,  // 25: aiserver.v1.ConversationMessage.type:type_name -> aiserver.v1.ConversationMessage.MessageType
	62, // 26: aiserver.v1.ConversationMessage.attached_code_chunks:type_name -> aiserver.v1.ConversationMessage.CodeChunk
	17, // 27: aiserver.v1.ConversationMessage.codebase_context_chunks:type_name -> aiserver.v1.CodeBlock
	19, // 28: aiserver.v1.ConversationMessage.commits:type_name -> aiserver.v1.Commit
	21, // 29: aiserver.v1.ConversationMessage.pull_requests:type_name -> aiserver.v1.PullRequest
	22, // 30: aiserver.v1.ConversationMessage.git_diffs:type_name -> aiserver.v1.GitDiff
	23, // 31: aiserver.v1.ConversationMessage.assistant_suggested_diffs:type_name -> aiserver.v1.SimpleFileDiff
	25, // 32: aiserver.v1.ConversationMessage.interpreter_results:type_name -> aiserver.v1.InterpreterResult
	26, // 33: aiserver.v1.ConversationMessage.images:type_name -> aiserver.v1.ImageProto
	63, // 34: aiserver.v1.ConversationMessage.approximate_lint_errors:type_name -> aiserver.v1.ConversationMessage.ApproximateLintError
	27, // 35: aiserver.v1.ConversationMessage.attached_folders_new:type_name -> aiserver.v1.FolderInfo
	64, // 36: aiserver.v1.ConversationMessage.lints:type_name -> aiserver.v1.ConversationMessage.Lints
	32, // 37: aiserver.v1.ConversationMessage.user_responses_to_suggested_code_blocks:type_name -> aiserver.v1.UserResponseToSuggestedCodeBlock
	65, // 38: aiserver.v1.ConversationMessage.tool_results:type_name -> aiserver.v1.ConversationMessage.ToolResult
	14, // 39: aiserver.v1.CodeBlock.range:type_name -> aiserver.v1.CursorRange
	66, // 40: aiserver.v1.CodeBlock.signatures:type_name -> aiserver.v1.CodeBlock.Signatures
	18, // 41: aiserver.v1.CodeBlock.detailed_lines:type_name -> aiserver.v1.DetailedLine
	20, // 42: aiserver.v1.Commit.diff:type_name -> aiserver.v1.FileDiff
	67, // 43: aiserver.v1.FileDiff.chunks:type_name -> aiserver.v1.FileDiff.Chunk
	20, // 44: aiserver.v1.PullRequest.diff:type_name -> aiserver.v1.FileDiff
	20, // 45: aiserver.v1.GitDiff.diffs:type_name -> aiserver.v1.FileDiff
	6,  // 46: aiserver.v1.GitDiff.diff_type:type_name -> aiserver.v1.GitDiff.DiffType
	68, // 47: aiserver.v1.SimpleFileDiff.chunks:type_name -> aiserver.v1.SimpleFileDiff.Chunk
	69, // 48: aiserver.v1.ImageProto.dimension:type_name -> aiserver.v1.ImageProto.Dimension
	28, // 49: aiserver.v1.FolderInfo.files:type_name -> aiserver.v1.FolderFileInfo
	70, // 50: aiserver.v1.GetLintsForChangeResponse.lints:type_name -> aiserver.v1.GetLintsForChangeResponse.Lint
	31, // 51: aiserver.v1.QuickFix.edits:type_name -> aiserver.v1.Edit
	7,  // 52: aiserver.v1.UserResponseToSuggestedCodeBlock.user_response_type:type_name -> aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
	20, // 53: aiserver.v1.UserResponseToSuggestedCodeBlock.user_modifications_to_suggested_code_blocks:type_name -> aiserver.v1.FileDiff
	0,  // 54: aiserver.v1.CodeChunk.summarization_strategy:type_name -> aiserver.v1.SummarizationStrategy
	1,  // 55: aiserver.v1.CodeChunk.intent:type_name -> aiserver.v1.Intent
	37, // 56: aiserver.v1.ModelDetails.azure_state:type_name -> aiserver.v1.AzureState
	39, // 57: aiserver.v1.LinterErrors.errors:type_name -> aiserver.v1.LinterError
	14, // 58: aiserver.v1.LinterError.range:type_name -> aiserver.v1.CursorRange
	40, // 59: aiserver.v1.LinterError.related_information:type_name -> aiserver.v1.RelatedInformation
	2,  // 60: aiserver.v1.LinterError.severity:type_name -> aiserver.v1.DiagnosticSeverity
	14, // 61: aiserver.v1.RelatedInformation.range:type_name -> aiserver.v1.CursorRange
	71, // 62: aiserver.v1.DebugInfo.breakpoint:type_name -> aiserver.v1.DebugInfo.Breakpoint
	72, // 63: aiserver.v1.DebugInfo.call_stack:type_name -> aiserver.v1.DebugInfo.CallStackFrame
	17, // 64: aiserver.v1.DebugInfo.history:type_name -> aiserver.v1.CodeBlock
	44, // 65: aiserver.v1.Scope.variables:type_name -> aiserver.v1.Variable
	48, // 66: aiserver.v1.ContextAST.files:type_name -> aiserver.v1.ContainerTree
	49, // 67: aiserver.v1.ContainerTree.nodes:type_name -> aiserver.v1.ContainerTreeNode
	73, // 68: aiserver.v1.ContainerTreeNode.container:type_name -> aiserver.v1.ContainerTreeNode.Container
	74, // 69: aiserver.v1.ContainerTreeNode.blob:type_name -> aiserver.v1.ContainerTreeNode.Blob
	75, // 70: aiserver.v1.ContainerTreeNode.symbol:type_name -> aiserver.v1.ContainerTreeNode.Symbol
	52, // 71: aiserver.v1.StreamChatResponse.document_citation:type_name -> aiserver.v1.DocumentationCitation
	76, // 72: aiserver.v1.StreamChatResponse.chunk_identity:type_name -> aiserver.v1.StreamChatResponse.ChunkIdentity
	54, // 73: aiserver.v1.StreamChatResponse.docs_reference:type_name -> aiserver.v1.DocsReference
	55, // 74: aiserver.v1.StreamChatResponse.web_citation:type_name -> aiserver.v1.WebCitation
	57, // 75: aiserver.v1.StreamChatResponse.status_updates:type_name -> aiserver.v1.StatusUpdates
	53, // 76: aiserver.v1.DocumentationCitation.chunks:type_name -> aiserver.v1.DocumentationChunk
	56, // 77: aiserver.v1.WebCitation.references:type_name -> aiserver.v1.WebReference
	58, // 78: aiserver.v1.StatusUpdates.updates:type_name -> aiserver.v1.StatusUpdate
	14, // 79: aiserver.v1.Diagnostic.RelatedInformation.range:type_name -> aiserver.v1.CursorRange
	0,  // 80: aiserver.v1.ConversationMessage.CodeChunk.summarization_strategy:type_name -> aiserver.v1.SummarizationStrategy
	1,  // 81: aiserver.v1.ConversationMessage.CodeChunk.intent:type_name -> aiserver.v1.Intent
	29, // 82: aiserver.v1.ConversationMessage.Lints.lints:type_name -> aiserver.v1.GetLintsForChangeResponse
	62, // 83: aiserver.v1.ConversationMessage.ToolResult.attached_code_chunks:type_name -> aiserver.v1.ConversationMessage.CodeChunk
	14, // 84: aiserver.v1.CodeBlock.Signatures.ranges:type_name -> aiserver.v1.CursorRange
	24, // 85: aiserver.v1.SimpleFileDiff.Chunk.old_range:type_name -> aiserver.v1.LineRange
	24, // 86: aiserver.v1.SimpleFileDiff.Chunk.new_range:type_name -> aiserver.v1.LineRange
	30, // 87: aiserver.v1.GetLintsForChangeResponse.Lint.quick_fixes:type_name -> aiserver.v1.QuickFix
	43, // 88: aiserver.v1.DebugInfo.CallStackFrame.scopes:type_name -> aiserver.v1.Scope
	49, // 89: aiserver.v1.ContainerTreeNode.Container.children:type_name -> aiserver.v1.ContainerTreeNode
	50, // 90: aiserver.v1.ContainerTreeNode.Container.references:type_name -> aiserver.v1.Reference
	50, // 91: aiserver.v1.ContainerTreeNode.Symbol.references:type_name -> aiserver.v1.Reference
	3,  // 92: aiserver.v1.StreamChatResponse.ChunkIdentity.chunk_type:type_name -> aiserver.v1.ChunkType
	8,  // 93: aiserver.v1.AiService.StreamChat:input_type -> aiserver.v1.GetChatRequest
	51, // 94: aiserver.v1.AiService.StreamChat:output_type -> aiserver.v1.StreamChatResponse
	94, // [94:95] is the sub-list for method output_type
	93, // [93:94] is the sub-list for method input_type
	93, // [93:93] is the sub-list for extension type_name
	93, // [93:93] is the sub-list for extension extendee
	0,  // [0:93] is the sub-list for field type_name
}

func init() { file_aiserver_v1_aiserver_proto_init() }
func file_aiserver_v1_aiserver_proto_init() {
	if File_aiserver_v1_aiserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aiserver_v1_aiserver_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*BM25Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SimplestRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DataframeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CursorRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FileDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GitDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleFileDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*LineRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*InterpreterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ImageProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FolderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*FolderFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetLintsForChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*QuickFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UserResponseToSuggestedCodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ExplicitContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ModelDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AzureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*LinterErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*LinterError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ChatQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ChatExternalLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CommitNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ContextAST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationCitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*DocsReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*WebCitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*WebReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*StatusUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentFileInfo_NotebookCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*DataframeInfo_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*Diagnostic_RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_ApproximateLintError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_Lints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_ToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CodeBlock_Signatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*FileDiff_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleFileDiff_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*ImageProto_Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*GetLintsForChangeResponse_Lint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo_Breakpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo_CallStackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatResponse_ChunkIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aiserver_v1_aiserver_proto_msgTypes[0].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[1].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[9].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[24].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[25].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[26].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[27].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[28].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[31].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[36].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[43].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[50].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[54].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[57].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[63].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[66].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aiserver_v1_aiserver_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aiserver_v1_aiserver_proto_goTypes,
		DependencyIndexes: file_aiserver_v1_aiserver_proto_depIdxs,
		EnumInfos:         file_aiserver_v1_aiserver_proto_enumTypes,
		MessageInfos:      file_aiserver_v1_aiserver_proto_msgTypes,
	}.Build()
	File_aiserver_v1_aiserver_proto = out.File
	file_aiserver_v1_aiserver_proto_rawDesc = nil
	file_aiserver_v1_aiserver_proto_goTypes = nil
	file_aiserver_v1_aiserver_proto_depIdxs = nil
}
