// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: aiserver/v1/aiserver.proto

package aiserverv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChunkType int32

const (
	ChunkType_CHUNK_TYPE_UNSPECIFIED ChunkType = 0
	ChunkType_CHUNK_TYPE_CODEBASE    ChunkType = 1
	ChunkType_CHUNK_TYPE_LONG_FILE   ChunkType = 2
	ChunkType_CHUNK_TYPE_DOCS        ChunkType = 3
)

// Enum value maps for ChunkType.
var (
	ChunkType_name = map[int32]string{
		0: "CHUNK_TYPE_UNSPECIFIED",
		1: "CHUNK_TYPE_CODEBASE",
		2: "CHUNK_TYPE_LONG_FILE",
		3: "CHUNK_TYPE_DOCS",
	}
	ChunkType_value = map[string]int32{
		"CHUNK_TYPE_UNSPECIFIED": 0,
		"CHUNK_TYPE_CODEBASE":    1,
		"CHUNK_TYPE_LONG_FILE":   2,
		"CHUNK_TYPE_DOCS":        3,
	}
)

func (x ChunkType) Enum() *ChunkType {
	p := new(ChunkType)
	*p = x
	return p
}

func (x ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[0].Descriptor()
}

func (ChunkType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[0]
}

func (x ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkType.Descriptor instead.
func (ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{0}
}

type BuiltinTool int32

const (
	BuiltinTool_BUILTIN_TOOL_UNSPECIFIED           BuiltinTool = 0
	BuiltinTool_BUILTIN_TOOL_SEARCH                BuiltinTool = 1
	BuiltinTool_BUILTIN_TOOL_READ_CHUNK            BuiltinTool = 2
	BuiltinTool_BUILTIN_TOOL_GOTODEF               BuiltinTool = 3
	BuiltinTool_BUILTIN_TOOL_EDIT                  BuiltinTool = 4
	BuiltinTool_BUILTIN_TOOL_UNDO_EDIT             BuiltinTool = 5
	BuiltinTool_BUILTIN_TOOL_END                   BuiltinTool = 6
	BuiltinTool_BUILTIN_TOOL_NEW_FILE              BuiltinTool = 7
	BuiltinTool_BUILTIN_TOOL_ADD_TEST              BuiltinTool = 8
	BuiltinTool_BUILTIN_TOOL_RUN_TEST              BuiltinTool = 9
	BuiltinTool_BUILTIN_TOOL_DELETE_TEST           BuiltinTool = 10
	BuiltinTool_BUILTIN_TOOL_SAVE_FILE             BuiltinTool = 11
	BuiltinTool_BUILTIN_TOOL_GET_TESTS             BuiltinTool = 12
	BuiltinTool_BUILTIN_TOOL_GET_SYMBOLS           BuiltinTool = 13
	BuiltinTool_BUILTIN_TOOL_SEMANTIC_SEARCH       BuiltinTool = 14
	BuiltinTool_BUILTIN_TOOL_GET_PROJECT_STRUCTURE BuiltinTool = 15
	BuiltinTool_BUILTIN_TOOL_CREATE_RM_FILES       BuiltinTool = 16
	BuiltinTool_BUILTIN_TOOL_RUN_TERMINAL_COMMANDS BuiltinTool = 17
	BuiltinTool_BUILTIN_TOOL_NEW_EDIT              BuiltinTool = 18
	BuiltinTool_BUILTIN_TOOL_READ_WITH_LINTER      BuiltinTool = 19
)

// Enum value maps for BuiltinTool.
var (
	BuiltinTool_name = map[int32]string{
		0:  "BUILTIN_TOOL_UNSPECIFIED",
		1:  "BUILTIN_TOOL_SEARCH",
		2:  "BUILTIN_TOOL_READ_CHUNK",
		3:  "BUILTIN_TOOL_GOTODEF",
		4:  "BUILTIN_TOOL_EDIT",
		5:  "BUILTIN_TOOL_UNDO_EDIT",
		6:  "BUILTIN_TOOL_END",
		7:  "BUILTIN_TOOL_NEW_FILE",
		8:  "BUILTIN_TOOL_ADD_TEST",
		9:  "BUILTIN_TOOL_RUN_TEST",
		10: "BUILTIN_TOOL_DELETE_TEST",
		11: "BUILTIN_TOOL_SAVE_FILE",
		12: "BUILTIN_TOOL_GET_TESTS",
		13: "BUILTIN_TOOL_GET_SYMBOLS",
		14: "BUILTIN_TOOL_SEMANTIC_SEARCH",
		15: "BUILTIN_TOOL_GET_PROJECT_STRUCTURE",
		16: "BUILTIN_TOOL_CREATE_RM_FILES",
		17: "BUILTIN_TOOL_RUN_TERMINAL_COMMANDS",
		18: "BUILTIN_TOOL_NEW_EDIT",
		19: "BUILTIN_TOOL_READ_WITH_LINTER",
	}
	BuiltinTool_value = map[string]int32{
		"BUILTIN_TOOL_UNSPECIFIED":           0,
		"BUILTIN_TOOL_SEARCH":                1,
		"BUILTIN_TOOL_READ_CHUNK":            2,
		"BUILTIN_TOOL_GOTODEF":               3,
		"BUILTIN_TOOL_EDIT":                  4,
		"BUILTIN_TOOL_UNDO_EDIT":             5,
		"BUILTIN_TOOL_END":                   6,
		"BUILTIN_TOOL_NEW_FILE":              7,
		"BUILTIN_TOOL_ADD_TEST":              8,
		"BUILTIN_TOOL_RUN_TEST":              9,
		"BUILTIN_TOOL_DELETE_TEST":           10,
		"BUILTIN_TOOL_SAVE_FILE":             11,
		"BUILTIN_TOOL_GET_TESTS":             12,
		"BUILTIN_TOOL_GET_SYMBOLS":           13,
		"BUILTIN_TOOL_SEMANTIC_SEARCH":       14,
		"BUILTIN_TOOL_GET_PROJECT_STRUCTURE": 15,
		"BUILTIN_TOOL_CREATE_RM_FILES":       16,
		"BUILTIN_TOOL_RUN_TERMINAL_COMMANDS": 17,
		"BUILTIN_TOOL_NEW_EDIT":              18,
		"BUILTIN_TOOL_READ_WITH_LINTER":      19,
	}
)

func (x BuiltinTool) Enum() *BuiltinTool {
	p := new(BuiltinTool)
	*p = x
	return p
}

func (x BuiltinTool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinTool) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[1].Descriptor()
}

func (BuiltinTool) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[1]
}

func (x BuiltinTool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinTool.Descriptor instead.
func (BuiltinTool) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{1}
}

type FeatureType int32

const (
	FeatureType_FEATURE_TYPE_UNSPECIFIED            FeatureType = 0
	FeatureType_FEATURE_TYPE_EDIT                   FeatureType = 1
	FeatureType_FEATURE_TYPE_GENERATE               FeatureType = 2
	FeatureType_FEATURE_TYPE_INLINE_LONG_COMPLETION FeatureType = 3
)

// Enum value maps for FeatureType.
var (
	FeatureType_name = map[int32]string{
		0: "FEATURE_TYPE_UNSPECIFIED",
		1: "FEATURE_TYPE_EDIT",
		2: "FEATURE_TYPE_GENERATE",
		3: "FEATURE_TYPE_INLINE_LONG_COMPLETION",
	}
	FeatureType_value = map[string]int32{
		"FEATURE_TYPE_UNSPECIFIED":            0,
		"FEATURE_TYPE_EDIT":                   1,
		"FEATURE_TYPE_GENERATE":               2,
		"FEATURE_TYPE_INLINE_LONG_COMPLETION": 3,
	}
)

func (x FeatureType) Enum() *FeatureType {
	p := new(FeatureType)
	*p = x
	return p
}

func (x FeatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[2].Descriptor()
}

func (FeatureType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[2]
}

func (x FeatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureType.Descriptor instead.
func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{2}
}

type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNSPECIFIED TaskStatus = 0
	TaskStatus_TASK_STATUS_RUNNING     TaskStatus = 1
	TaskStatus_TASK_STATUS_PAUSED      TaskStatus = 2
	TaskStatus_TASK_STATUS_DONE        TaskStatus = 3
	TaskStatus_TASK_STATUS_NOT_STARTED TaskStatus = 4
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNSPECIFIED",
		1: "TASK_STATUS_RUNNING",
		2: "TASK_STATUS_PAUSED",
		3: "TASK_STATUS_DONE",
		4: "TASK_STATUS_NOT_STARTED",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNSPECIFIED": 0,
		"TASK_STATUS_RUNNING":     1,
		"TASK_STATUS_PAUSED":      2,
		"TASK_STATUS_DONE":        3,
		"TASK_STATUS_NOT_STARTED": 4,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[3].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[3]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{3}
}

type RerankerAlgorithm int32

const (
	RerankerAlgorithm_RERANKER_ALGORITHM_UNSPECIFIED      RerankerAlgorithm = 0
	RerankerAlgorithm_RERANKER_ALGORITHM_LULEA            RerankerAlgorithm = 1
	RerankerAlgorithm_RERANKER_ALGORITHM_UMEA             RerankerAlgorithm = 2
	RerankerAlgorithm_RERANKER_ALGORITHM_NONE             RerankerAlgorithm = 3
	RerankerAlgorithm_RERANKER_ALGORITHM_LLAMA            RerankerAlgorithm = 4
	RerankerAlgorithm_RERANKER_ALGORITHM_STARCODER_V1     RerankerAlgorithm = 5
	RerankerAlgorithm_RERANKER_ALGORITHM_GPT_3_5_LOGPROBS RerankerAlgorithm = 6
	RerankerAlgorithm_RERANKER_ALGORITHM_LULEA_HAIKU      RerankerAlgorithm = 7
	RerankerAlgorithm_RERANKER_ALGORITHM_COHERE           RerankerAlgorithm = 8
	RerankerAlgorithm_RERANKER_ALGORITHM_VOYAGE           RerankerAlgorithm = 9
	RerankerAlgorithm_RERANKER_ALGORITHM_VOYAGE_EMBEDS    RerankerAlgorithm = 10
	RerankerAlgorithm_RERANKER_ALGORITHM_IDENTITY         RerankerAlgorithm = 11
	RerankerAlgorithm_RERANKER_ALGORITHM_ADA_EMBEDS       RerankerAlgorithm = 12
)

// Enum value maps for RerankerAlgorithm.
var (
	RerankerAlgorithm_name = map[int32]string{
		0:  "RERANKER_ALGORITHM_UNSPECIFIED",
		1:  "RERANKER_ALGORITHM_LULEA",
		2:  "RERANKER_ALGORITHM_UMEA",
		3:  "RERANKER_ALGORITHM_NONE",
		4:  "RERANKER_ALGORITHM_LLAMA",
		5:  "RERANKER_ALGORITHM_STARCODER_V1",
		6:  "RERANKER_ALGORITHM_GPT_3_5_LOGPROBS",
		7:  "RERANKER_ALGORITHM_LULEA_HAIKU",
		8:  "RERANKER_ALGORITHM_COHERE",
		9:  "RERANKER_ALGORITHM_VOYAGE",
		10: "RERANKER_ALGORITHM_VOYAGE_EMBEDS",
		11: "RERANKER_ALGORITHM_IDENTITY",
		12: "RERANKER_ALGORITHM_ADA_EMBEDS",
	}
	RerankerAlgorithm_value = map[string]int32{
		"RERANKER_ALGORITHM_UNSPECIFIED":      0,
		"RERANKER_ALGORITHM_LULEA":            1,
		"RERANKER_ALGORITHM_UMEA":             2,
		"RERANKER_ALGORITHM_NONE":             3,
		"RERANKER_ALGORITHM_LLAMA":            4,
		"RERANKER_ALGORITHM_STARCODER_V1":     5,
		"RERANKER_ALGORITHM_GPT_3_5_LOGPROBS": 6,
		"RERANKER_ALGORITHM_LULEA_HAIKU":      7,
		"RERANKER_ALGORITHM_COHERE":           8,
		"RERANKER_ALGORITHM_VOYAGE":           9,
		"RERANKER_ALGORITHM_VOYAGE_EMBEDS":    10,
		"RERANKER_ALGORITHM_IDENTITY":         11,
		"RERANKER_ALGORITHM_ADA_EMBEDS":       12,
	}
)

func (x RerankerAlgorithm) Enum() *RerankerAlgorithm {
	p := new(RerankerAlgorithm)
	*p = x
	return p
}

func (x RerankerAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RerankerAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[4].Descriptor()
}

func (RerankerAlgorithm) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[4]
}

func (x RerankerAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RerankerAlgorithm.Descriptor instead.
func (RerankerAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{4}
}

type RechunkerChoice int32

const (
	RechunkerChoice_RECHUNKER_CHOICE_UNSPECIFIED RechunkerChoice = 0
	RechunkerChoice_RECHUNKER_CHOICE_IDENTITY    RechunkerChoice = 1
	RechunkerChoice_RECHUNKER_CHOICE_600_TOKS    RechunkerChoice = 2
	RechunkerChoice_RECHUNKER_CHOICE_2400_TOKS   RechunkerChoice = 3
	RechunkerChoice_RECHUNKER_CHOICE_4000_TOKS   RechunkerChoice = 4
)

// Enum value maps for RechunkerChoice.
var (
	RechunkerChoice_name = map[int32]string{
		0: "RECHUNKER_CHOICE_UNSPECIFIED",
		1: "RECHUNKER_CHOICE_IDENTITY",
		2: "RECHUNKER_CHOICE_600_TOKS",
		3: "RECHUNKER_CHOICE_2400_TOKS",
		4: "RECHUNKER_CHOICE_4000_TOKS",
	}
	RechunkerChoice_value = map[string]int32{
		"RECHUNKER_CHOICE_UNSPECIFIED": 0,
		"RECHUNKER_CHOICE_IDENTITY":    1,
		"RECHUNKER_CHOICE_600_TOKS":    2,
		"RECHUNKER_CHOICE_2400_TOKS":   3,
		"RECHUNKER_CHOICE_4000_TOKS":   4,
	}
)

func (x RechunkerChoice) Enum() *RechunkerChoice {
	p := new(RechunkerChoice)
	*p = x
	return p
}

func (x RechunkerChoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RechunkerChoice) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[5].Descriptor()
}

func (RechunkerChoice) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[5]
}

func (x RechunkerChoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RechunkerChoice.Descriptor instead.
func (RechunkerChoice) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{5}
}

type LintGenerator int32

const (
	LintGenerator_LINT_GENERATOR_UNSPECIFIED       LintGenerator = 0
	LintGenerator_LINT_GENERATOR_NAIVE             LintGenerator = 1
	LintGenerator_LINT_GENERATOR_COMMENT_PIPELINE  LintGenerator = 2
	LintGenerator_LINT_GENERATOR_SIMPLE_BUG        LintGenerator = 3
	LintGenerator_LINT_GENERATOR_SIMPLE_LINT_RULES LintGenerator = 4
)

// Enum value maps for LintGenerator.
var (
	LintGenerator_name = map[int32]string{
		0: "LINT_GENERATOR_UNSPECIFIED",
		1: "LINT_GENERATOR_NAIVE",
		2: "LINT_GENERATOR_COMMENT_PIPELINE",
		3: "LINT_GENERATOR_SIMPLE_BUG",
		4: "LINT_GENERATOR_SIMPLE_LINT_RULES",
	}
	LintGenerator_value = map[string]int32{
		"LINT_GENERATOR_UNSPECIFIED":       0,
		"LINT_GENERATOR_NAIVE":             1,
		"LINT_GENERATOR_COMMENT_PIPELINE":  2,
		"LINT_GENERATOR_SIMPLE_BUG":        3,
		"LINT_GENERATOR_SIMPLE_LINT_RULES": 4,
	}
)

func (x LintGenerator) Enum() *LintGenerator {
	p := new(LintGenerator)
	*p = x
	return p
}

func (x LintGenerator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LintGenerator) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[6].Descriptor()
}

func (LintGenerator) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[6]
}

func (x LintGenerator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LintGenerator.Descriptor instead.
func (LintGenerator) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{6}
}

type LintDiscriminator int32

const (
	LintDiscriminator_LINT_DISCRIMINATOR_UNSPECIFIED     LintDiscriminator = 0
	LintDiscriminator_LINT_DISCRIMINATOR_SPECIFIC_RULES  LintDiscriminator = 1
	LintDiscriminator_LINT_DISCRIMINATOR_COMPILE_ERRORS  LintDiscriminator = 2
	LintDiscriminator_LINT_DISCRIMINATOR_CHANGE_BEHAVIOR LintDiscriminator = 3
	LintDiscriminator_LINT_DISCRIMINATOR_RELEVANCE       LintDiscriminator = 4
	LintDiscriminator_LINT_DISCRIMINATOR_USER_AWARENESS  LintDiscriminator = 5
	LintDiscriminator_LINT_DISCRIMINATOR_CORRECTNESS     LintDiscriminator = 6
	LintDiscriminator_LINT_DISCRIMINATOR_CHUNKING        LintDiscriminator = 7
	LintDiscriminator_LINT_DISCRIMINATOR_TYPO            LintDiscriminator = 8
	LintDiscriminator_LINT_DISCRIMINATOR_CONFIDENCE      LintDiscriminator = 9
	LintDiscriminator_LINT_DISCRIMINATOR_DISMISSED_BUGS  LintDiscriminator = 10
)

// Enum value maps for LintDiscriminator.
var (
	LintDiscriminator_name = map[int32]string{
		0:  "LINT_DISCRIMINATOR_UNSPECIFIED",
		1:  "LINT_DISCRIMINATOR_SPECIFIC_RULES",
		2:  "LINT_DISCRIMINATOR_COMPILE_ERRORS",
		3:  "LINT_DISCRIMINATOR_CHANGE_BEHAVIOR",
		4:  "LINT_DISCRIMINATOR_RELEVANCE",
		5:  "LINT_DISCRIMINATOR_USER_AWARENESS",
		6:  "LINT_DISCRIMINATOR_CORRECTNESS",
		7:  "LINT_DISCRIMINATOR_CHUNKING",
		8:  "LINT_DISCRIMINATOR_TYPO",
		9:  "LINT_DISCRIMINATOR_CONFIDENCE",
		10: "LINT_DISCRIMINATOR_DISMISSED_BUGS",
	}
	LintDiscriminator_value = map[string]int32{
		"LINT_DISCRIMINATOR_UNSPECIFIED":     0,
		"LINT_DISCRIMINATOR_SPECIFIC_RULES":  1,
		"LINT_DISCRIMINATOR_COMPILE_ERRORS":  2,
		"LINT_DISCRIMINATOR_CHANGE_BEHAVIOR": 3,
		"LINT_DISCRIMINATOR_RELEVANCE":       4,
		"LINT_DISCRIMINATOR_USER_AWARENESS":  5,
		"LINT_DISCRIMINATOR_CORRECTNESS":     6,
		"LINT_DISCRIMINATOR_CHUNKING":        7,
		"LINT_DISCRIMINATOR_TYPO":            8,
		"LINT_DISCRIMINATOR_CONFIDENCE":      9,
		"LINT_DISCRIMINATOR_DISMISSED_BUGS":  10,
	}
)

func (x LintDiscriminator) Enum() *LintDiscriminator {
	p := new(LintDiscriminator)
	*p = x
	return p
}

func (x LintDiscriminator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LintDiscriminator) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[7].Descriptor()
}

func (LintDiscriminator) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[7]
}

func (x LintDiscriminator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LintDiscriminator.Descriptor instead.
func (LintDiscriminator) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{7}
}

type ChunkingStrategy int32

const (
	ChunkingStrategy_CHUNKING_STRATEGY_UNSPECIFIED ChunkingStrategy = 0
	ChunkingStrategy_CHUNKING_STRATEGY_DEFAULT     ChunkingStrategy = 1
)

// Enum value maps for ChunkingStrategy.
var (
	ChunkingStrategy_name = map[int32]string{
		0: "CHUNKING_STRATEGY_UNSPECIFIED",
		1: "CHUNKING_STRATEGY_DEFAULT",
	}
	ChunkingStrategy_value = map[string]int32{
		"CHUNKING_STRATEGY_UNSPECIFIED": 0,
		"CHUNKING_STRATEGY_DEFAULT":     1,
	}
)

func (x ChunkingStrategy) Enum() *ChunkingStrategy {
	p := new(ChunkingStrategy)
	*p = x
	return p
}

func (x ChunkingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[8].Descriptor()
}

func (ChunkingStrategy) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[8]
}

func (x ChunkingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkingStrategy.Descriptor instead.
func (ChunkingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8}
}

type HealthCheckResponse_Status int32

const (
	HealthCheckResponse_STATUS_UNSPECIFIED HealthCheckResponse_Status = 0
	HealthCheckResponse_STATUS_HEALTHY     HealthCheckResponse_Status = 1
)

// Enum value maps for HealthCheckResponse_Status.
var (
	HealthCheckResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_HEALTHY",
	}
	HealthCheckResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_HEALTHY":     1,
	}
)

func (x HealthCheckResponse_Status) Enum() *HealthCheckResponse_Status {
	p := new(HealthCheckResponse_Status)
	*p = x
	return p
}

func (x HealthCheckResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheckResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[9].Descriptor()
}

func (HealthCheckResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[9]
}

func (x HealthCheckResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthCheckResponse_Status.Descriptor instead.
func (HealthCheckResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{1, 0}
}

type ThrowErrorCheckRequest_Error int32

const (
	ThrowErrorCheckRequest_ERROR_UNSPECIFIED                     ThrowErrorCheckRequest_Error = 0
	ThrowErrorCheckRequest_ERROR_BAD_API_KEY                     ThrowErrorCheckRequest_Error = 1
	ThrowErrorCheckRequest_ERROR_NOT_LOGGED_IN                   ThrowErrorCheckRequest_Error = 2
	ThrowErrorCheckRequest_ERROR_INVALID_AUTH_ID                 ThrowErrorCheckRequest_Error = 3
	ThrowErrorCheckRequest_ERROR_NOT_HIGH_ENOUGH_PERMISSIONS     ThrowErrorCheckRequest_Error = 4
	ThrowErrorCheckRequest_ERROR_AGENT_REQUIRES_LOGIN            ThrowErrorCheckRequest_Error = 5
	ThrowErrorCheckRequest_ERROR_BAD_MODEL_NAME                  ThrowErrorCheckRequest_Error = 6
	ThrowErrorCheckRequest_ERROR_USER_NOT_FOUND                  ThrowErrorCheckRequest_Error = 7
	ThrowErrorCheckRequest_ERROR_FREE_USER_RATE_LIMIT_EXCEEDED   ThrowErrorCheckRequest_Error = 8
	ThrowErrorCheckRequest_ERROR_PRO_USER_RATE_LIMIT_EXCEEDED    ThrowErrorCheckRequest_Error = 9
	ThrowErrorCheckRequest_ERROR_FREE_USER_USAGE_LIMIT           ThrowErrorCheckRequest_Error = 10
	ThrowErrorCheckRequest_ERROR_PRO_USER_USAGE_LIMIT            ThrowErrorCheckRequest_Error = 11
	ThrowErrorCheckRequest_ERROR_AUTH_TOKEN_NOT_FOUND            ThrowErrorCheckRequest_Error = 12
	ThrowErrorCheckRequest_ERROR_AUTH_TOKEN_EXPIRED              ThrowErrorCheckRequest_Error = 13
	ThrowErrorCheckRequest_ERROR_OPENAI                          ThrowErrorCheckRequest_Error = 14
	ThrowErrorCheckRequest_ERROR_OPENAI_RATE_LIMIT_EXCEEDED      ThrowErrorCheckRequest_Error = 15
	ThrowErrorCheckRequest_ERROR_OPENAI_ACCOUNT_LIMIT_EXCEEDED   ThrowErrorCheckRequest_Error = 16
	ThrowErrorCheckRequest_ERROR_TASK_UUID_NOT_FOUND             ThrowErrorCheckRequest_Error = 17
	ThrowErrorCheckRequest_ERROR_TASK_NO_PERMISSIONS             ThrowErrorCheckRequest_Error = 18
	ThrowErrorCheckRequest_ERROR_AGENT_ENGINE_NOT_FOUND          ThrowErrorCheckRequest_Error = 19
	ThrowErrorCheckRequest_ERROR_MAX_TOKENS                      ThrowErrorCheckRequest_Error = 20
	ThrowErrorCheckRequest_ERROR_PRO_USER_ONLY                   ThrowErrorCheckRequest_Error = 21
	ThrowErrorCheckRequest_ERROR_API_KEY_NOT_SUPPORTED           ThrowErrorCheckRequest_Error = 22
	ThrowErrorCheckRequest_ERROR_USER_ABORTED_REQUEST            ThrowErrorCheckRequest_Error = 23
	ThrowErrorCheckRequest_ERROR_GENERIC_RATE_LIMIT_EXCEEDED     ThrowErrorCheckRequest_Error = 24
	ThrowErrorCheckRequest_ERROR_SLASH_EDIT_FILE_TOO_LONG        ThrowErrorCheckRequest_Error = 25
	ThrowErrorCheckRequest_ERROR_FILE_UNSUPPORTED                ThrowErrorCheckRequest_Error = 26
	ThrowErrorCheckRequest_ERROR_GPT_4_VISION_PREVIEW_RATE_LIMIT ThrowErrorCheckRequest_Error = 27
	ThrowErrorCheckRequest_ERROR_CUSTOM_MESSAGE                  ThrowErrorCheckRequest_Error = 28
	ThrowErrorCheckRequest_ERROR_OUTDATED_CLIENT                 ThrowErrorCheckRequest_Error = 29
	ThrowErrorCheckRequest_ERROR_CLAUDE_IMAGE_TOO_LARGE          ThrowErrorCheckRequest_Error = 30
	ThrowErrorCheckRequest_ERROR_GITGRAPH_NOT_FOUND              ThrowErrorCheckRequest_Error = 31
)

// Enum value maps for ThrowErrorCheckRequest_Error.
var (
	ThrowErrorCheckRequest_Error_name = map[int32]string{
		0:  "ERROR_UNSPECIFIED",
		1:  "ERROR_BAD_API_KEY",
		2:  "ERROR_NOT_LOGGED_IN",
		3:  "ERROR_INVALID_AUTH_ID",
		4:  "ERROR_NOT_HIGH_ENOUGH_PERMISSIONS",
		5:  "ERROR_AGENT_REQUIRES_LOGIN",
		6:  "ERROR_BAD_MODEL_NAME",
		7:  "ERROR_USER_NOT_FOUND",
		8:  "ERROR_FREE_USER_RATE_LIMIT_EXCEEDED",
		9:  "ERROR_PRO_USER_RATE_LIMIT_EXCEEDED",
		10: "ERROR_FREE_USER_USAGE_LIMIT",
		11: "ERROR_PRO_USER_USAGE_LIMIT",
		12: "ERROR_AUTH_TOKEN_NOT_FOUND",
		13: "ERROR_AUTH_TOKEN_EXPIRED",
		14: "ERROR_OPENAI",
		15: "ERROR_OPENAI_RATE_LIMIT_EXCEEDED",
		16: "ERROR_OPENAI_ACCOUNT_LIMIT_EXCEEDED",
		17: "ERROR_TASK_UUID_NOT_FOUND",
		18: "ERROR_TASK_NO_PERMISSIONS",
		19: "ERROR_AGENT_ENGINE_NOT_FOUND",
		20: "ERROR_MAX_TOKENS",
		21: "ERROR_PRO_USER_ONLY",
		22: "ERROR_API_KEY_NOT_SUPPORTED",
		23: "ERROR_USER_ABORTED_REQUEST",
		24: "ERROR_GENERIC_RATE_LIMIT_EXCEEDED",
		25: "ERROR_SLASH_EDIT_FILE_TOO_LONG",
		26: "ERROR_FILE_UNSUPPORTED",
		27: "ERROR_GPT_4_VISION_PREVIEW_RATE_LIMIT",
		28: "ERROR_CUSTOM_MESSAGE",
		29: "ERROR_OUTDATED_CLIENT",
		30: "ERROR_CLAUDE_IMAGE_TOO_LARGE",
		31: "ERROR_GITGRAPH_NOT_FOUND",
	}
	ThrowErrorCheckRequest_Error_value = map[string]int32{
		"ERROR_UNSPECIFIED":                     0,
		"ERROR_BAD_API_KEY":                     1,
		"ERROR_NOT_LOGGED_IN":                   2,
		"ERROR_INVALID_AUTH_ID":                 3,
		"ERROR_NOT_HIGH_ENOUGH_PERMISSIONS":     4,
		"ERROR_AGENT_REQUIRES_LOGIN":            5,
		"ERROR_BAD_MODEL_NAME":                  6,
		"ERROR_USER_NOT_FOUND":                  7,
		"ERROR_FREE_USER_RATE_LIMIT_EXCEEDED":   8,
		"ERROR_PRO_USER_RATE_LIMIT_EXCEEDED":    9,
		"ERROR_FREE_USER_USAGE_LIMIT":           10,
		"ERROR_PRO_USER_USAGE_LIMIT":            11,
		"ERROR_AUTH_TOKEN_NOT_FOUND":            12,
		"ERROR_AUTH_TOKEN_EXPIRED":              13,
		"ERROR_OPENAI":                          14,
		"ERROR_OPENAI_RATE_LIMIT_EXCEEDED":      15,
		"ERROR_OPENAI_ACCOUNT_LIMIT_EXCEEDED":   16,
		"ERROR_TASK_UUID_NOT_FOUND":             17,
		"ERROR_TASK_NO_PERMISSIONS":             18,
		"ERROR_AGENT_ENGINE_NOT_FOUND":          19,
		"ERROR_MAX_TOKENS":                      20,
		"ERROR_PRO_USER_ONLY":                   21,
		"ERROR_API_KEY_NOT_SUPPORTED":           22,
		"ERROR_USER_ABORTED_REQUEST":            23,
		"ERROR_GENERIC_RATE_LIMIT_EXCEEDED":     24,
		"ERROR_SLASH_EDIT_FILE_TOO_LONG":        25,
		"ERROR_FILE_UNSUPPORTED":                26,
		"ERROR_GPT_4_VISION_PREVIEW_RATE_LIMIT": 27,
		"ERROR_CUSTOM_MESSAGE":                  28,
		"ERROR_OUTDATED_CLIENT":                 29,
		"ERROR_CLAUDE_IMAGE_TOO_LARGE":          30,
		"ERROR_GITGRAPH_NOT_FOUND":              31,
	}
)

func (x ThrowErrorCheckRequest_Error) Enum() *ThrowErrorCheckRequest_Error {
	p := new(ThrowErrorCheckRequest_Error)
	*p = x
	return p
}

func (x ThrowErrorCheckRequest_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThrowErrorCheckRequest_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[10].Descriptor()
}

func (ThrowErrorCheckRequest_Error) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[10]
}

func (x ThrowErrorCheckRequest_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThrowErrorCheckRequest_Error.Descriptor instead.
func (ThrowErrorCheckRequest_Error) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{3, 0}
}

type Diagnostic_DiagnosticSeverity int32

const (
	Diagnostic_DIAGNOSTIC_SEVERITY_UNSPECIFIED Diagnostic_DiagnosticSeverity = 0
	Diagnostic_DIAGNOSTIC_SEVERITY_ERROR       Diagnostic_DiagnosticSeverity = 1
	Diagnostic_DIAGNOSTIC_SEVERITY_WARNING     Diagnostic_DiagnosticSeverity = 2
	Diagnostic_DIAGNOSTIC_SEVERITY_INFORMATION Diagnostic_DiagnosticSeverity = 3
	Diagnostic_DIAGNOSTIC_SEVERITY_HINT        Diagnostic_DiagnosticSeverity = 4
)

// Enum value maps for Diagnostic_DiagnosticSeverity.
var (
	Diagnostic_DiagnosticSeverity_name = map[int32]string{
		0: "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
		1: "DIAGNOSTIC_SEVERITY_ERROR",
		2: "DIAGNOSTIC_SEVERITY_WARNING",
		3: "DIAGNOSTIC_SEVERITY_INFORMATION",
		4: "DIAGNOSTIC_SEVERITY_HINT",
	}
	Diagnostic_DiagnosticSeverity_value = map[string]int32{
		"DIAGNOSTIC_SEVERITY_UNSPECIFIED": 0,
		"DIAGNOSTIC_SEVERITY_ERROR":       1,
		"DIAGNOSTIC_SEVERITY_WARNING":     2,
		"DIAGNOSTIC_SEVERITY_INFORMATION": 3,
		"DIAGNOSTIC_SEVERITY_HINT":        4,
	}
)

func (x Diagnostic_DiagnosticSeverity) Enum() *Diagnostic_DiagnosticSeverity {
	p := new(Diagnostic_DiagnosticSeverity)
	*p = x
	return p
}

func (x Diagnostic_DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Diagnostic_DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[11].Descriptor()
}

func (Diagnostic_DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[11]
}

func (x Diagnostic_DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Diagnostic_DiagnosticSeverity.Descriptor instead.
func (Diagnostic_DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{14, 0}
}

type ConversationMessage_MessageType int32

const (
	ConversationMessage_MESSAGE_TYPE_UNSPECIFIED ConversationMessage_MessageType = 0
	ConversationMessage_MESSAGE_TYPE_HUMAN       ConversationMessage_MessageType = 1
	ConversationMessage_MESSAGE_TYPE_AI          ConversationMessage_MessageType = 2
)

// Enum value maps for ConversationMessage_MessageType.
var (
	ConversationMessage_MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_HUMAN",
		2: "MESSAGE_TYPE_AI",
	}
	ConversationMessage_MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_HUMAN":       1,
		"MESSAGE_TYPE_AI":          2,
	}
)

func (x ConversationMessage_MessageType) Enum() *ConversationMessage_MessageType {
	p := new(ConversationMessage_MessageType)
	*p = x
	return p
}

func (x ConversationMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[12].Descriptor()
}

func (ConversationMessage_MessageType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[12]
}

func (x ConversationMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMessage_MessageType.Descriptor instead.
func (ConversationMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 0}
}

type ConversationMessage_CodeChunk_SummarizationStrategy int32

const (
	ConversationMessage_CodeChunk_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED ConversationMessage_CodeChunk_SummarizationStrategy = 0
	ConversationMessage_CodeChunk_SUMMARIZATION_STRATEGY_SUMMARIZED       ConversationMessage_CodeChunk_SummarizationStrategy = 1
	ConversationMessage_CodeChunk_SUMMARIZATION_STRATEGY_EMBEDDED         ConversationMessage_CodeChunk_SummarizationStrategy = 2
)

// Enum value maps for ConversationMessage_CodeChunk_SummarizationStrategy.
var (
	ConversationMessage_CodeChunk_SummarizationStrategy_name = map[int32]string{
		0: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED",
		1: "SUMMARIZATION_STRATEGY_SUMMARIZED",
		2: "SUMMARIZATION_STRATEGY_EMBEDDED",
	}
	ConversationMessage_CodeChunk_SummarizationStrategy_value = map[string]int32{
		"SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED": 0,
		"SUMMARIZATION_STRATEGY_SUMMARIZED":       1,
		"SUMMARIZATION_STRATEGY_EMBEDDED":         2,
	}
)

func (x ConversationMessage_CodeChunk_SummarizationStrategy) Enum() *ConversationMessage_CodeChunk_SummarizationStrategy {
	p := new(ConversationMessage_CodeChunk_SummarizationStrategy)
	*p = x
	return p
}

func (x ConversationMessage_CodeChunk_SummarizationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMessage_CodeChunk_SummarizationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[13].Descriptor()
}

func (ConversationMessage_CodeChunk_SummarizationStrategy) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[13]
}

func (x ConversationMessage_CodeChunk_SummarizationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMessage_CodeChunk_SummarizationStrategy.Descriptor instead.
func (ConversationMessage_CodeChunk_SummarizationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 0, 0}
}

type ConversationMessage_CodeChunk_Intent int32

const (
	ConversationMessage_CodeChunk_INTENT_UNSPECIFIED   ConversationMessage_CodeChunk_Intent = 0
	ConversationMessage_CodeChunk_INTENT_COMPOSER_FILE ConversationMessage_CodeChunk_Intent = 1
)

// Enum value maps for ConversationMessage_CodeChunk_Intent.
var (
	ConversationMessage_CodeChunk_Intent_name = map[int32]string{
		0: "INTENT_UNSPECIFIED",
		1: "INTENT_COMPOSER_FILE",
	}
	ConversationMessage_CodeChunk_Intent_value = map[string]int32{
		"INTENT_UNSPECIFIED":   0,
		"INTENT_COMPOSER_FILE": 1,
	}
)

func (x ConversationMessage_CodeChunk_Intent) Enum() *ConversationMessage_CodeChunk_Intent {
	p := new(ConversationMessage_CodeChunk_Intent)
	*p = x
	return p
}

func (x ConversationMessage_CodeChunk_Intent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMessage_CodeChunk_Intent) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[14].Descriptor()
}

func (ConversationMessage_CodeChunk_Intent) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[14]
}

func (x ConversationMessage_CodeChunk_Intent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMessage_CodeChunk_Intent.Descriptor instead.
func (ConversationMessage_CodeChunk_Intent) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 0, 1}
}

type ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy int32

const (
	ConversationMessage_ToolResult_CodeChunk_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy = 0
	ConversationMessage_ToolResult_CodeChunk_SUMMARIZATION_STRATEGY_SUMMARIZED       ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy = 1
	ConversationMessage_ToolResult_CodeChunk_SUMMARIZATION_STRATEGY_EMBEDDED         ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy = 2
)

// Enum value maps for ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy.
var (
	ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy_name = map[int32]string{
		0: "SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED",
		1: "SUMMARIZATION_STRATEGY_SUMMARIZED",
		2: "SUMMARIZATION_STRATEGY_EMBEDDED",
	}
	ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy_value = map[string]int32{
		"SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED": 0,
		"SUMMARIZATION_STRATEGY_SUMMARIZED":       1,
		"SUMMARIZATION_STRATEGY_EMBEDDED":         2,
	}
)

func (x ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy) Enum() *ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy {
	p := new(ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy)
	*p = x
	return p
}

func (x ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[15].Descriptor()
}

func (ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[15]
}

func (x ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy.Descriptor instead.
func (ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 3, 0, 0}
}

type ConversationMessage_ToolResult_CodeChunk_Intent int32

const (
	ConversationMessage_ToolResult_CodeChunk_INTENT_UNSPECIFIED   ConversationMessage_ToolResult_CodeChunk_Intent = 0
	ConversationMessage_ToolResult_CodeChunk_INTENT_COMPOSER_FILE ConversationMessage_ToolResult_CodeChunk_Intent = 1
)

// Enum value maps for ConversationMessage_ToolResult_CodeChunk_Intent.
var (
	ConversationMessage_ToolResult_CodeChunk_Intent_name = map[int32]string{
		0: "INTENT_UNSPECIFIED",
		1: "INTENT_COMPOSER_FILE",
	}
	ConversationMessage_ToolResult_CodeChunk_Intent_value = map[string]int32{
		"INTENT_UNSPECIFIED":   0,
		"INTENT_COMPOSER_FILE": 1,
	}
)

func (x ConversationMessage_ToolResult_CodeChunk_Intent) Enum() *ConversationMessage_ToolResult_CodeChunk_Intent {
	p := new(ConversationMessage_ToolResult_CodeChunk_Intent)
	*p = x
	return p
}

func (x ConversationMessage_ToolResult_CodeChunk_Intent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationMessage_ToolResult_CodeChunk_Intent) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[16].Descriptor()
}

func (ConversationMessage_ToolResult_CodeChunk_Intent) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[16]
}

func (x ConversationMessage_ToolResult_CodeChunk_Intent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationMessage_ToolResult_CodeChunk_Intent.Descriptor instead.
func (ConversationMessage_ToolResult_CodeChunk_Intent) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 3, 0, 1}
}

type GitDiff_DiffType int32

const (
	GitDiff_DIFF_TYPE_UNSPECIFIED              GitDiff_DiffType = 0
	GitDiff_DIFF_TYPE_DIFF_TO_HEAD             GitDiff_DiffType = 1
	GitDiff_DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN GitDiff_DiffType = 2
)

// Enum value maps for GitDiff_DiffType.
var (
	GitDiff_DiffType_name = map[int32]string{
		0: "DIFF_TYPE_UNSPECIFIED",
		1: "DIFF_TYPE_DIFF_TO_HEAD",
		2: "DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN",
	}
	GitDiff_DiffType_value = map[string]int32{
		"DIFF_TYPE_UNSPECIFIED":              0,
		"DIFF_TYPE_DIFF_TO_HEAD":             1,
		"DIFF_TYPE_DIFF_FROM_BRANCH_TO_MAIN": 2,
	}
)

func (x GitDiff_DiffType) Enum() *GitDiff_DiffType {
	p := new(GitDiff_DiffType)
	*p = x
	return p
}

func (x GitDiff_DiffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitDiff_DiffType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[17].Descriptor()
}

func (GitDiff_DiffType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[17]
}

func (x GitDiff_DiffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitDiff_DiffType.Descriptor instead.
func (GitDiff_DiffType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{21, 0}
}

type UserResponseToSuggestedCodeBlock_UserResponseType int32

const (
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_UNSPECIFIED UserResponseToSuggestedCodeBlock_UserResponseType = 0
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_ACCEPT      UserResponseToSuggestedCodeBlock_UserResponseType = 1
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_REJECT      UserResponseToSuggestedCodeBlock_UserResponseType = 2
	UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_MODIFY      UserResponseToSuggestedCodeBlock_UserResponseType = 3
)

// Enum value maps for UserResponseToSuggestedCodeBlock_UserResponseType.
var (
	UserResponseToSuggestedCodeBlock_UserResponseType_name = map[int32]string{
		0: "USER_RESPONSE_TYPE_UNSPECIFIED",
		1: "USER_RESPONSE_TYPE_ACCEPT",
		2: "USER_RESPONSE_TYPE_REJECT",
		3: "USER_RESPONSE_TYPE_MODIFY",
	}
	UserResponseToSuggestedCodeBlock_UserResponseType_value = map[string]int32{
		"USER_RESPONSE_TYPE_UNSPECIFIED": 0,
		"USER_RESPONSE_TYPE_ACCEPT":      1,
		"USER_RESPONSE_TYPE_REJECT":      2,
		"USER_RESPONSE_TYPE_MODIFY":      3,
	}
)

func (x UserResponseToSuggestedCodeBlock_UserResponseType) Enum() *UserResponseToSuggestedCodeBlock_UserResponseType {
	p := new(UserResponseToSuggestedCodeBlock_UserResponseType)
	*p = x
	return p
}

func (x UserResponseToSuggestedCodeBlock_UserResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserResponseToSuggestedCodeBlock_UserResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[18].Descriptor()
}

func (UserResponseToSuggestedCodeBlock_UserResponseType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[18]
}

func (x UserResponseToSuggestedCodeBlock_UserResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserResponseToSuggestedCodeBlock_UserResponseType.Descriptor instead.
func (UserResponseToSuggestedCodeBlock_UserResponseType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{29, 0}
}

type LinterError_DiagnosticSeverity int32

const (
	LinterError_DIAGNOSTIC_SEVERITY_UNSPECIFIED LinterError_DiagnosticSeverity = 0
	LinterError_DIAGNOSTIC_SEVERITY_ERROR       LinterError_DiagnosticSeverity = 1
	LinterError_DIAGNOSTIC_SEVERITY_WARNING     LinterError_DiagnosticSeverity = 2
	LinterError_DIAGNOSTIC_SEVERITY_INFORMATION LinterError_DiagnosticSeverity = 3
	LinterError_DIAGNOSTIC_SEVERITY_HINT        LinterError_DiagnosticSeverity = 4
)

// Enum value maps for LinterError_DiagnosticSeverity.
var (
	LinterError_DiagnosticSeverity_name = map[int32]string{
		0: "DIAGNOSTIC_SEVERITY_UNSPECIFIED",
		1: "DIAGNOSTIC_SEVERITY_ERROR",
		2: "DIAGNOSTIC_SEVERITY_WARNING",
		3: "DIAGNOSTIC_SEVERITY_INFORMATION",
		4: "DIAGNOSTIC_SEVERITY_HINT",
	}
	LinterError_DiagnosticSeverity_value = map[string]int32{
		"DIAGNOSTIC_SEVERITY_UNSPECIFIED": 0,
		"DIAGNOSTIC_SEVERITY_ERROR":       1,
		"DIAGNOSTIC_SEVERITY_WARNING":     2,
		"DIAGNOSTIC_SEVERITY_INFORMATION": 3,
		"DIAGNOSTIC_SEVERITY_HINT":        4,
	}
)

func (x LinterError_DiagnosticSeverity) Enum() *LinterError_DiagnosticSeverity {
	p := new(LinterError_DiagnosticSeverity)
	*p = x
	return p
}

func (x LinterError_DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinterError_DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[19].Descriptor()
}

func (LinterError_DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[19]
}

func (x LinterError_DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinterError_DiagnosticSeverity.Descriptor instead.
func (LinterError_DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{35, 0}
}

type GetEvaluationPromptRequest_EvaluationPromptType int32

const (
	GetEvaluationPromptRequest_EVALUATION_PROMPT_TYPE_UNSPECIFIED GetEvaluationPromptRequest_EvaluationPromptType = 0
	GetEvaluationPromptRequest_EVALUATION_PROMPT_TYPE_GENERATE    GetEvaluationPromptRequest_EvaluationPromptType = 1
	GetEvaluationPromptRequest_EVALUATION_PROMPT_TYPE_CHAT        GetEvaluationPromptRequest_EvaluationPromptType = 2
)

// Enum value maps for GetEvaluationPromptRequest_EvaluationPromptType.
var (
	GetEvaluationPromptRequest_EvaluationPromptType_name = map[int32]string{
		0: "EVALUATION_PROMPT_TYPE_UNSPECIFIED",
		1: "EVALUATION_PROMPT_TYPE_GENERATE",
		2: "EVALUATION_PROMPT_TYPE_CHAT",
	}
	GetEvaluationPromptRequest_EvaluationPromptType_value = map[string]int32{
		"EVALUATION_PROMPT_TYPE_UNSPECIFIED": 0,
		"EVALUATION_PROMPT_TYPE_GENERATE":    1,
		"EVALUATION_PROMPT_TYPE_CHAT":        2,
	}
)

func (x GetEvaluationPromptRequest_EvaluationPromptType) Enum() *GetEvaluationPromptRequest_EvaluationPromptType {
	p := new(GetEvaluationPromptRequest_EvaluationPromptType)
	*p = x
	return p
}

func (x GetEvaluationPromptRequest_EvaluationPromptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEvaluationPromptRequest_EvaluationPromptType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[20].Descriptor()
}

func (GetEvaluationPromptRequest_EvaluationPromptType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[20]
}

func (x GetEvaluationPromptRequest_EvaluationPromptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEvaluationPromptRequest_EvaluationPromptType.Descriptor instead.
func (GetEvaluationPromptRequest_EvaluationPromptType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{82, 0}
}

type GetEvaluationPromptRequest_RerankingStrategy int32

const (
	GetEvaluationPromptRequest_RERANKING_STRATEGY_UNSPECIFIED    GetEvaluationPromptRequest_RerankingStrategy = 0
	GetEvaluationPromptRequest_RERANKING_STRATEGY_DISTANCE_ONLY  GetEvaluationPromptRequest_RerankingStrategy = 1
	GetEvaluationPromptRequest_RERANKING_STRATEGY_GPT4_RELEVANCE GetEvaluationPromptRequest_RerankingStrategy = 2
)

// Enum value maps for GetEvaluationPromptRequest_RerankingStrategy.
var (
	GetEvaluationPromptRequest_RerankingStrategy_name = map[int32]string{
		0: "RERANKING_STRATEGY_UNSPECIFIED",
		1: "RERANKING_STRATEGY_DISTANCE_ONLY",
		2: "RERANKING_STRATEGY_GPT4_RELEVANCE",
	}
	GetEvaluationPromptRequest_RerankingStrategy_value = map[string]int32{
		"RERANKING_STRATEGY_UNSPECIFIED":    0,
		"RERANKING_STRATEGY_DISTANCE_ONLY":  1,
		"RERANKING_STRATEGY_GPT4_RELEVANCE": 2,
	}
)

func (x GetEvaluationPromptRequest_RerankingStrategy) Enum() *GetEvaluationPromptRequest_RerankingStrategy {
	p := new(GetEvaluationPromptRequest_RerankingStrategy)
	*p = x
	return p
}

func (x GetEvaluationPromptRequest_RerankingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetEvaluationPromptRequest_RerankingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[21].Descriptor()
}

func (GetEvaluationPromptRequest_RerankingStrategy) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[21]
}

func (x GetEvaluationPromptRequest_RerankingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetEvaluationPromptRequest_RerankingStrategy.Descriptor instead.
func (GetEvaluationPromptRequest_RerankingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{82, 1}
}

type StreamInlineLongCompletionRequest_ContextBlock_ContextType int32

const (
	StreamInlineLongCompletionRequest_ContextBlock_CONTEXT_TYPE_UNSPECIFIED      StreamInlineLongCompletionRequest_ContextBlock_ContextType = 0
	StreamInlineLongCompletionRequest_ContextBlock_CONTEXT_TYPE_RECENT_LOCATIONS StreamInlineLongCompletionRequest_ContextBlock_ContextType = 1
)

// Enum value maps for StreamInlineLongCompletionRequest_ContextBlock_ContextType.
var (
	StreamInlineLongCompletionRequest_ContextBlock_ContextType_name = map[int32]string{
		0: "CONTEXT_TYPE_UNSPECIFIED",
		1: "CONTEXT_TYPE_RECENT_LOCATIONS",
	}
	StreamInlineLongCompletionRequest_ContextBlock_ContextType_value = map[string]int32{
		"CONTEXT_TYPE_UNSPECIFIED":      0,
		"CONTEXT_TYPE_RECENT_LOCATIONS": 1,
	}
)

func (x StreamInlineLongCompletionRequest_ContextBlock_ContextType) Enum() *StreamInlineLongCompletionRequest_ContextBlock_ContextType {
	p := new(StreamInlineLongCompletionRequest_ContextBlock_ContextType)
	*p = x
	return p
}

func (x StreamInlineLongCompletionRequest_ContextBlock_ContextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamInlineLongCompletionRequest_ContextBlock_ContextType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[22].Descriptor()
}

func (StreamInlineLongCompletionRequest_ContextBlock_ContextType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[22]
}

func (x StreamInlineLongCompletionRequest_ContextBlock_ContextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamInlineLongCompletionRequest_ContextBlock_ContextType.Descriptor instead.
func (StreamInlineLongCompletionRequest_ContextBlock_ContextType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{103, 0, 0}
}

type SlashEditRequest_FastApplyModelType int32

const (
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_UNSPECIFIED            SlashEditRequest_FastApplyModelType = 0
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_DEFAULT                SlashEditRequest_FastApplyModelType = 1
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_DEEPSEEK               SlashEditRequest_FastApplyModelType = 2
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_SONNET                 SlashEditRequest_FastApplyModelType = 3
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_OPUS_DIFF              SlashEditRequest_FastApplyModelType = 4
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_SMART_REWRITE          SlashEditRequest_FastApplyModelType = 5
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_GPT4                   SlashEditRequest_FastApplyModelType = 6
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_GPT4_NOSPEC            SlashEditRequest_FastApplyModelType = 7
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_SMART_REWRITE_NOSPEC   SlashEditRequest_FastApplyModelType = 8
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_OPUS                   SlashEditRequest_FastApplyModelType = 9
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_HAIKU                  SlashEditRequest_FastApplyModelType = 10
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_GPT4O_NOSPEC           SlashEditRequest_FastApplyModelType = 11
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_GPT4O_DIFF             SlashEditRequest_FastApplyModelType = 12
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE      SlashEditRequest_FastApplyModelType = 13
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B           SlashEditRequest_FastApplyModelType = 14
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_SONNET_35_DIFF         SlashEditRequest_FastApplyModelType = 15
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_SONNET_35_REWRITE      SlashEditRequest_FastApplyModelType = 16
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_PROMPTED_DEEPSEEK_V2   SlashEditRequest_FastApplyModelType = 17
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_OLD  SlashEditRequest_FastApplyModelType = 18
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_FP16 SlashEditRequest_FastApplyModelType = 19
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B_V2        SlashEditRequest_FastApplyModelType = 20
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_V4           SlashEditRequest_FastApplyModelType = 21
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_V5           SlashEditRequest_FastApplyModelType = 22
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_V6           SlashEditRequest_FastApplyModelType = 23
	SlashEditRequest_FAST_APPLY_MODEL_TYPE_CODESTRAL_V7           SlashEditRequest_FastApplyModelType = 24
)

// Enum value maps for SlashEditRequest_FastApplyModelType.
var (
	SlashEditRequest_FastApplyModelType_name = map[int32]string{
		0:  "FAST_APPLY_MODEL_TYPE_UNSPECIFIED",
		1:  "FAST_APPLY_MODEL_TYPE_DEFAULT",
		2:  "FAST_APPLY_MODEL_TYPE_DEEPSEEK",
		3:  "FAST_APPLY_MODEL_TYPE_SONNET",
		4:  "FAST_APPLY_MODEL_TYPE_OPUS_DIFF",
		5:  "FAST_APPLY_MODEL_TYPE_SMART_REWRITE",
		6:  "FAST_APPLY_MODEL_TYPE_GPT4",
		7:  "FAST_APPLY_MODEL_TYPE_GPT4_NOSPEC",
		8:  "FAST_APPLY_MODEL_TYPE_SMART_REWRITE_NOSPEC",
		9:  "FAST_APPLY_MODEL_TYPE_OPUS",
		10: "FAST_APPLY_MODEL_TYPE_HAIKU",
		11: "FAST_APPLY_MODEL_TYPE_GPT4O_NOSPEC",
		12: "FAST_APPLY_MODEL_TYPE_GPT4O_DIFF",
		13: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE",
		14: "FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B",
		15: "FAST_APPLY_MODEL_TYPE_SONNET_35_DIFF",
		16: "FAST_APPLY_MODEL_TYPE_SONNET_35_REWRITE",
		17: "FAST_APPLY_MODEL_TYPE_PROMPTED_DEEPSEEK_V2",
		18: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_OLD",
		19: "FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_FP16",
		20: "FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B_V2",
		21: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V4",
		22: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V5",
		23: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V6",
		24: "FAST_APPLY_MODEL_TYPE_CODESTRAL_V7",
	}
	SlashEditRequest_FastApplyModelType_value = map[string]int32{
		"FAST_APPLY_MODEL_TYPE_UNSPECIFIED":            0,
		"FAST_APPLY_MODEL_TYPE_DEFAULT":                1,
		"FAST_APPLY_MODEL_TYPE_DEEPSEEK":               2,
		"FAST_APPLY_MODEL_TYPE_SONNET":                 3,
		"FAST_APPLY_MODEL_TYPE_OPUS_DIFF":              4,
		"FAST_APPLY_MODEL_TYPE_SMART_REWRITE":          5,
		"FAST_APPLY_MODEL_TYPE_GPT4":                   6,
		"FAST_APPLY_MODEL_TYPE_GPT4_NOSPEC":            7,
		"FAST_APPLY_MODEL_TYPE_SMART_REWRITE_NOSPEC":   8,
		"FAST_APPLY_MODEL_TYPE_OPUS":                   9,
		"FAST_APPLY_MODEL_TYPE_HAIKU":                  10,
		"FAST_APPLY_MODEL_TYPE_GPT4O_NOSPEC":           11,
		"FAST_APPLY_MODEL_TYPE_GPT4O_DIFF":             12,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE":      13,
		"FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B":           14,
		"FAST_APPLY_MODEL_TYPE_SONNET_35_DIFF":         15,
		"FAST_APPLY_MODEL_TYPE_SONNET_35_REWRITE":      16,
		"FAST_APPLY_MODEL_TYPE_PROMPTED_DEEPSEEK_V2":   17,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_OLD":  18,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_REWRITE_FP16": 19,
		"FAST_APPLY_MODEL_TYPE_DEEPSEEK_33B_V2":        20,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_V4":           21,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_V5":           22,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_V6":           23,
		"FAST_APPLY_MODEL_TYPE_CODESTRAL_V7":           24,
	}
)

func (x SlashEditRequest_FastApplyModelType) Enum() *SlashEditRequest_FastApplyModelType {
	p := new(SlashEditRequest_FastApplyModelType)
	*p = x
	return p
}

func (x SlashEditRequest_FastApplyModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlashEditRequest_FastApplyModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[23].Descriptor()
}

func (SlashEditRequest_FastApplyModelType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[23]
}

func (x SlashEditRequest_FastApplyModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlashEditRequest_FastApplyModelType.Descriptor instead.
func (SlashEditRequest_FastApplyModelType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{104, 0}
}

type DocumentSymbol_SymbolKind int32

const (
	DocumentSymbol_SYMBOL_KIND_UNSPECIFIED    DocumentSymbol_SymbolKind = 0
	DocumentSymbol_SYMBOL_KIND_FILE           DocumentSymbol_SymbolKind = 1
	DocumentSymbol_SYMBOL_KIND_MODULE         DocumentSymbol_SymbolKind = 2
	DocumentSymbol_SYMBOL_KIND_NAMESPACE      DocumentSymbol_SymbolKind = 3
	DocumentSymbol_SYMBOL_KIND_PACKAGE        DocumentSymbol_SymbolKind = 4
	DocumentSymbol_SYMBOL_KIND_CLASS          DocumentSymbol_SymbolKind = 5
	DocumentSymbol_SYMBOL_KIND_METHOD         DocumentSymbol_SymbolKind = 6
	DocumentSymbol_SYMBOL_KIND_PROPERTY       DocumentSymbol_SymbolKind = 7
	DocumentSymbol_SYMBOL_KIND_FIELD          DocumentSymbol_SymbolKind = 8
	DocumentSymbol_SYMBOL_KIND_CONSTRUCTOR    DocumentSymbol_SymbolKind = 9
	DocumentSymbol_SYMBOL_KIND_ENUM           DocumentSymbol_SymbolKind = 10
	DocumentSymbol_SYMBOL_KIND_INTERFACE      DocumentSymbol_SymbolKind = 11
	DocumentSymbol_SYMBOL_KIND_FUNCTION       DocumentSymbol_SymbolKind = 12
	DocumentSymbol_SYMBOL_KIND_VARIABLE       DocumentSymbol_SymbolKind = 13
	DocumentSymbol_SYMBOL_KIND_CONSTANT       DocumentSymbol_SymbolKind = 14
	DocumentSymbol_SYMBOL_KIND_STRING         DocumentSymbol_SymbolKind = 15
	DocumentSymbol_SYMBOL_KIND_NUMBER         DocumentSymbol_SymbolKind = 16
	DocumentSymbol_SYMBOL_KIND_BOOLEAN        DocumentSymbol_SymbolKind = 17
	DocumentSymbol_SYMBOL_KIND_ARRAY          DocumentSymbol_SymbolKind = 18
	DocumentSymbol_SYMBOL_KIND_OBJECT         DocumentSymbol_SymbolKind = 19
	DocumentSymbol_SYMBOL_KIND_KEY            DocumentSymbol_SymbolKind = 20
	DocumentSymbol_SYMBOL_KIND_NULL           DocumentSymbol_SymbolKind = 21
	DocumentSymbol_SYMBOL_KIND_ENUM_MEMBER    DocumentSymbol_SymbolKind = 22
	DocumentSymbol_SYMBOL_KIND_STRUCT         DocumentSymbol_SymbolKind = 23
	DocumentSymbol_SYMBOL_KIND_EVENT          DocumentSymbol_SymbolKind = 24
	DocumentSymbol_SYMBOL_KIND_OPERATOR       DocumentSymbol_SymbolKind = 25
	DocumentSymbol_SYMBOL_KIND_TYPE_PARAMETER DocumentSymbol_SymbolKind = 26
)

// Enum value maps for DocumentSymbol_SymbolKind.
var (
	DocumentSymbol_SymbolKind_name = map[int32]string{
		0:  "SYMBOL_KIND_UNSPECIFIED",
		1:  "SYMBOL_KIND_FILE",
		2:  "SYMBOL_KIND_MODULE",
		3:  "SYMBOL_KIND_NAMESPACE",
		4:  "SYMBOL_KIND_PACKAGE",
		5:  "SYMBOL_KIND_CLASS",
		6:  "SYMBOL_KIND_METHOD",
		7:  "SYMBOL_KIND_PROPERTY",
		8:  "SYMBOL_KIND_FIELD",
		9:  "SYMBOL_KIND_CONSTRUCTOR",
		10: "SYMBOL_KIND_ENUM",
		11: "SYMBOL_KIND_INTERFACE",
		12: "SYMBOL_KIND_FUNCTION",
		13: "SYMBOL_KIND_VARIABLE",
		14: "SYMBOL_KIND_CONSTANT",
		15: "SYMBOL_KIND_STRING",
		16: "SYMBOL_KIND_NUMBER",
		17: "SYMBOL_KIND_BOOLEAN",
		18: "SYMBOL_KIND_ARRAY",
		19: "SYMBOL_KIND_OBJECT",
		20: "SYMBOL_KIND_KEY",
		21: "SYMBOL_KIND_NULL",
		22: "SYMBOL_KIND_ENUM_MEMBER",
		23: "SYMBOL_KIND_STRUCT",
		24: "SYMBOL_KIND_EVENT",
		25: "SYMBOL_KIND_OPERATOR",
		26: "SYMBOL_KIND_TYPE_PARAMETER",
	}
	DocumentSymbol_SymbolKind_value = map[string]int32{
		"SYMBOL_KIND_UNSPECIFIED":    0,
		"SYMBOL_KIND_FILE":           1,
		"SYMBOL_KIND_MODULE":         2,
		"SYMBOL_KIND_NAMESPACE":      3,
		"SYMBOL_KIND_PACKAGE":        4,
		"SYMBOL_KIND_CLASS":          5,
		"SYMBOL_KIND_METHOD":         6,
		"SYMBOL_KIND_PROPERTY":       7,
		"SYMBOL_KIND_FIELD":          8,
		"SYMBOL_KIND_CONSTRUCTOR":    9,
		"SYMBOL_KIND_ENUM":           10,
		"SYMBOL_KIND_INTERFACE":      11,
		"SYMBOL_KIND_FUNCTION":       12,
		"SYMBOL_KIND_VARIABLE":       13,
		"SYMBOL_KIND_CONSTANT":       14,
		"SYMBOL_KIND_STRING":         15,
		"SYMBOL_KIND_NUMBER":         16,
		"SYMBOL_KIND_BOOLEAN":        17,
		"SYMBOL_KIND_ARRAY":          18,
		"SYMBOL_KIND_OBJECT":         19,
		"SYMBOL_KIND_KEY":            20,
		"SYMBOL_KIND_NULL":           21,
		"SYMBOL_KIND_ENUM_MEMBER":    22,
		"SYMBOL_KIND_STRUCT":         23,
		"SYMBOL_KIND_EVENT":          24,
		"SYMBOL_KIND_OPERATOR":       25,
		"SYMBOL_KIND_TYPE_PARAMETER": 26,
	}
)

func (x DocumentSymbol_SymbolKind) Enum() *DocumentSymbol_SymbolKind {
	p := new(DocumentSymbol_SymbolKind)
	*p = x
	return p
}

func (x DocumentSymbol_SymbolKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentSymbol_SymbolKind) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[24].Descriptor()
}

func (DocumentSymbol_SymbolKind) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[24]
}

func (x DocumentSymbol_SymbolKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentSymbol_SymbolKind.Descriptor instead.
func (DocumentSymbol_SymbolKind) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{113, 0}
}

type ReviewChatMessage_ReviewChatMessageType int32

const (
	ReviewChatMessage_REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED ReviewChatMessage_ReviewChatMessageType = 0
	ReviewChatMessage_REVIEW_CHAT_MESSAGE_TYPE_HUMAN       ReviewChatMessage_ReviewChatMessageType = 1
	ReviewChatMessage_REVIEW_CHAT_MESSAGE_TYPE_AI          ReviewChatMessage_ReviewChatMessageType = 2
)

// Enum value maps for ReviewChatMessage_ReviewChatMessageType.
var (
	ReviewChatMessage_ReviewChatMessageType_name = map[int32]string{
		0: "REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED",
		1: "REVIEW_CHAT_MESSAGE_TYPE_HUMAN",
		2: "REVIEW_CHAT_MESSAGE_TYPE_AI",
	}
	ReviewChatMessage_ReviewChatMessageType_value = map[string]int32{
		"REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED": 0,
		"REVIEW_CHAT_MESSAGE_TYPE_HUMAN":       1,
		"REVIEW_CHAT_MESSAGE_TYPE_AI":          2,
	}
)

func (x ReviewChatMessage_ReviewChatMessageType) Enum() *ReviewChatMessage_ReviewChatMessageType {
	p := new(ReviewChatMessage_ReviewChatMessageType)
	*p = x
	return p
}

func (x ReviewChatMessage_ReviewChatMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewChatMessage_ReviewChatMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[25].Descriptor()
}

func (ReviewChatMessage_ReviewChatMessageType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[25]
}

func (x ReviewChatMessage_ReviewChatMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewChatMessage_ReviewChatMessageType.Descriptor instead.
func (ReviewChatMessage_ReviewChatMessageType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{123, 0}
}

type EditParams_FrontendEditType int32

const (
	EditParams_FRONTEND_EDIT_TYPE_UNSPECIFIED  EditParams_FrontendEditType = 0
	EditParams_FRONTEND_EDIT_TYPE_INLINE_DIFFS EditParams_FrontendEditType = 1
	EditParams_FRONTEND_EDIT_TYPE_SIMPLE       EditParams_FrontendEditType = 2
)

// Enum value maps for EditParams_FrontendEditType.
var (
	EditParams_FrontendEditType_name = map[int32]string{
		0: "FRONTEND_EDIT_TYPE_UNSPECIFIED",
		1: "FRONTEND_EDIT_TYPE_INLINE_DIFFS",
		2: "FRONTEND_EDIT_TYPE_SIMPLE",
	}
	EditParams_FrontendEditType_value = map[string]int32{
		"FRONTEND_EDIT_TYPE_UNSPECIFIED":  0,
		"FRONTEND_EDIT_TYPE_INLINE_DIFFS": 1,
		"FRONTEND_EDIT_TYPE_SIMPLE":       2,
	}
)

func (x EditParams_FrontendEditType) Enum() *EditParams_FrontendEditType {
	p := new(EditParams_FrontendEditType)
	*p = x
	return p
}

func (x EditParams_FrontendEditType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditParams_FrontendEditType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[26].Descriptor()
}

func (EditParams_FrontendEditType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[26]
}

func (x EditParams_FrontendEditType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditParams_FrontendEditType.Descriptor instead.
func (EditParams_FrontendEditType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{141, 0}
}

type ReportCmdKFateRequest_Fate int32

const (
	ReportCmdKFateRequest_FATE_UNSPECIFIED ReportCmdKFateRequest_Fate = 0
	ReportCmdKFateRequest_FATE_CANCELLED   ReportCmdKFateRequest_Fate = 1
	ReportCmdKFateRequest_FATE_ACCEPTED    ReportCmdKFateRequest_Fate = 2
	ReportCmdKFateRequest_FATE_REJECTED    ReportCmdKFateRequest_Fate = 3
	ReportCmdKFateRequest_FATE_FOLLOWED_UP ReportCmdKFateRequest_Fate = 4
	ReportCmdKFateRequest_FATE_REPROMPTED  ReportCmdKFateRequest_Fate = 5
)

// Enum value maps for ReportCmdKFateRequest_Fate.
var (
	ReportCmdKFateRequest_Fate_name = map[int32]string{
		0: "FATE_UNSPECIFIED",
		1: "FATE_CANCELLED",
		2: "FATE_ACCEPTED",
		3: "FATE_REJECTED",
		4: "FATE_FOLLOWED_UP",
		5: "FATE_REPROMPTED",
	}
	ReportCmdKFateRequest_Fate_value = map[string]int32{
		"FATE_UNSPECIFIED": 0,
		"FATE_CANCELLED":   1,
		"FATE_ACCEPTED":    2,
		"FATE_REJECTED":    3,
		"FATE_FOLLOWED_UP": 4,
		"FATE_REPROMPTED":  5,
	}
)

func (x ReportCmdKFateRequest_Fate) Enum() *ReportCmdKFateRequest_Fate {
	p := new(ReportCmdKFateRequest_Fate)
	*p = x
	return p
}

func (x ReportCmdKFateRequest_Fate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportCmdKFateRequest_Fate) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[27].Descriptor()
}

func (ReportCmdKFateRequest_Fate) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[27]
}

func (x ReportCmdKFateRequest_Fate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportCmdKFateRequest_Fate.Descriptor instead.
func (ReportCmdKFateRequest_Fate) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{191, 0}
}

type InterfaceAgentStatus_Status int32

const (
	InterfaceAgentStatus_STATUS_UNSPECIFIED InterfaceAgentStatus_Status = 0
	InterfaceAgentStatus_STATUS_WAITING     InterfaceAgentStatus_Status = 1
	InterfaceAgentStatus_STATUS_RUNNING     InterfaceAgentStatus_Status = 2
	InterfaceAgentStatus_STATUS_SUCCESS     InterfaceAgentStatus_Status = 3
	InterfaceAgentStatus_STATUS_FAILURE     InterfaceAgentStatus_Status = 4
)

// Enum value maps for InterfaceAgentStatus_Status.
var (
	InterfaceAgentStatus_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_WAITING",
		2: "STATUS_RUNNING",
		3: "STATUS_SUCCESS",
		4: "STATUS_FAILURE",
	}
	InterfaceAgentStatus_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_WAITING":     1,
		"STATUS_RUNNING":     2,
		"STATUS_SUCCESS":     3,
		"STATUS_FAILURE":     4,
	}
)

func (x InterfaceAgentStatus_Status) Enum() *InterfaceAgentStatus_Status {
	p := new(InterfaceAgentStatus_Status)
	*p = x
	return p
}

func (x InterfaceAgentStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceAgentStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[28].Descriptor()
}

func (InterfaceAgentStatus_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[28]
}

func (x InterfaceAgentStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceAgentStatus_Status.Descriptor instead.
func (InterfaceAgentStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{200, 0}
}

type CodeSymbolWithAction_CodeSymbolAction int32

const (
	CodeSymbolWithAction_CODE_SYMBOL_ACTION_UNSPECIFIED          CodeSymbolWithAction_CodeSymbolAction = 0
	CodeSymbolWithAction_CODE_SYMBOL_ACTION_GO_TO_DEFINITION     CodeSymbolWithAction_CodeSymbolAction = 1
	CodeSymbolWithAction_CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION CodeSymbolWithAction_CodeSymbolAction = 2
	CodeSymbolWithAction_CODE_SYMBOL_ACTION_REFERENCES           CodeSymbolWithAction_CodeSymbolAction = 3
)

// Enum value maps for CodeSymbolWithAction_CodeSymbolAction.
var (
	CodeSymbolWithAction_CodeSymbolAction_name = map[int32]string{
		0: "CODE_SYMBOL_ACTION_UNSPECIFIED",
		1: "CODE_SYMBOL_ACTION_GO_TO_DEFINITION",
		2: "CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION",
		3: "CODE_SYMBOL_ACTION_REFERENCES",
	}
	CodeSymbolWithAction_CodeSymbolAction_value = map[string]int32{
		"CODE_SYMBOL_ACTION_UNSPECIFIED":          0,
		"CODE_SYMBOL_ACTION_GO_TO_DEFINITION":     1,
		"CODE_SYMBOL_ACTION_GO_TO_IMPLEMENTATION": 2,
		"CODE_SYMBOL_ACTION_REFERENCES":           3,
	}
)

func (x CodeSymbolWithAction_CodeSymbolAction) Enum() *CodeSymbolWithAction_CodeSymbolAction {
	p := new(CodeSymbolWithAction_CodeSymbolAction)
	*p = x
	return p
}

func (x CodeSymbolWithAction_CodeSymbolAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSymbolWithAction_CodeSymbolAction) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[29].Descriptor()
}

func (CodeSymbolWithAction_CodeSymbolAction) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[29]
}

func (x CodeSymbolWithAction_CodeSymbolAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSymbolWithAction_CodeSymbolAction.Descriptor instead.
func (CodeSymbolWithAction_CodeSymbolAction) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{232, 0}
}

type DocumentationQueryResponse_Status int32

const (
	DocumentationQueryResponse_STATUS_UNSPECIFIED DocumentationQueryResponse_Status = 0
	DocumentationQueryResponse_STATUS_NOT_FOUND   DocumentationQueryResponse_Status = 1
	DocumentationQueryResponse_STATUS_SUCCESS     DocumentationQueryResponse_Status = 2
	DocumentationQueryResponse_STATUS_FAILURE     DocumentationQueryResponse_Status = 3
)

// Enum value maps for DocumentationQueryResponse_Status.
var (
	DocumentationQueryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_SUCCESS",
		3: "STATUS_FAILURE",
	}
	DocumentationQueryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_NOT_FOUND":   1,
		"STATUS_SUCCESS":     2,
		"STATUS_FAILURE":     3,
	}
)

func (x DocumentationQueryResponse_Status) Enum() *DocumentationQueryResponse_Status {
	p := new(DocumentationQueryResponse_Status)
	*p = x
	return p
}

func (x DocumentationQueryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentationQueryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[30].Descriptor()
}

func (DocumentationQueryResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[30]
}

func (x DocumentationQueryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentationQueryResponse_Status.Descriptor instead.
func (DocumentationQueryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{260, 0}
}

type ReportFeedbackRequest_FeedbackType int32

const (
	ReportFeedbackRequest_FEEDBACK_TYPE_UNSPECIFIED   ReportFeedbackRequest_FeedbackType = 0
	ReportFeedbackRequest_FEEDBACK_TYPE_LOW_PRIORITY  ReportFeedbackRequest_FeedbackType = 1
	ReportFeedbackRequest_FEEDBACK_TYPE_HIGH_PRIORITY ReportFeedbackRequest_FeedbackType = 2
)

// Enum value maps for ReportFeedbackRequest_FeedbackType.
var (
	ReportFeedbackRequest_FeedbackType_name = map[int32]string{
		0: "FEEDBACK_TYPE_UNSPECIFIED",
		1: "FEEDBACK_TYPE_LOW_PRIORITY",
		2: "FEEDBACK_TYPE_HIGH_PRIORITY",
	}
	ReportFeedbackRequest_FeedbackType_value = map[string]int32{
		"FEEDBACK_TYPE_UNSPECIFIED":   0,
		"FEEDBACK_TYPE_LOW_PRIORITY":  1,
		"FEEDBACK_TYPE_HIGH_PRIORITY": 2,
	}
)

func (x ReportFeedbackRequest_FeedbackType) Enum() *ReportFeedbackRequest_FeedbackType {
	p := new(ReportFeedbackRequest_FeedbackType)
	*p = x
	return p
}

func (x ReportFeedbackRequest_FeedbackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportFeedbackRequest_FeedbackType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[31].Descriptor()
}

func (ReportFeedbackRequest_FeedbackType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[31]
}

func (x ReportFeedbackRequest_FeedbackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportFeedbackRequest_FeedbackType.Descriptor instead.
func (ReportFeedbackRequest_FeedbackType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{265, 0}
}

type ReportBugRequest_BugType int32

const (
	ReportBugRequest_BUG_TYPE_UNSPECIFIED      ReportBugRequest_BugType = 0
	ReportBugRequest_BUG_TYPE_LOW              ReportBugRequest_BugType = 1
	ReportBugRequest_BUG_TYPE_MEDIUM           ReportBugRequest_BugType = 2
	ReportBugRequest_BUG_TYPE_URGENT           ReportBugRequest_BugType = 3
	ReportBugRequest_BUG_TYPE_CRASH            ReportBugRequest_BugType = 4
	ReportBugRequest_BUG_TYPE_CONNECTION_ERROR ReportBugRequest_BugType = 5
	ReportBugRequest_BUG_TYPE_IDEA             ReportBugRequest_BugType = 6
)

// Enum value maps for ReportBugRequest_BugType.
var (
	ReportBugRequest_BugType_name = map[int32]string{
		0: "BUG_TYPE_UNSPECIFIED",
		1: "BUG_TYPE_LOW",
		2: "BUG_TYPE_MEDIUM",
		3: "BUG_TYPE_URGENT",
		4: "BUG_TYPE_CRASH",
		5: "BUG_TYPE_CONNECTION_ERROR",
		6: "BUG_TYPE_IDEA",
	}
	ReportBugRequest_BugType_value = map[string]int32{
		"BUG_TYPE_UNSPECIFIED":      0,
		"BUG_TYPE_LOW":              1,
		"BUG_TYPE_MEDIUM":           2,
		"BUG_TYPE_URGENT":           3,
		"BUG_TYPE_CRASH":            4,
		"BUG_TYPE_CONNECTION_ERROR": 5,
		"BUG_TYPE_IDEA":             6,
	}
)

func (x ReportBugRequest_BugType) Enum() *ReportBugRequest_BugType {
	p := new(ReportBugRequest_BugType)
	*p = x
	return p
}

func (x ReportBugRequest_BugType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportBugRequest_BugType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[32].Descriptor()
}

func (ReportBugRequest_BugType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[32]
}

func (x ReportBugRequest_BugType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportBugRequest_BugType.Descriptor instead.
func (ReportBugRequest_BugType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{267, 0}
}

type ModelQueryRequest_QueryType int32

const (
	ModelQueryRequest_QUERY_TYPE_UNSPECIFIED ModelQueryRequest_QueryType = 0
	ModelQueryRequest_QUERY_TYPE_KEYWORDS    ModelQueryRequest_QueryType = 1
	ModelQueryRequest_QUERY_TYPE_EMBEDDINGS  ModelQueryRequest_QueryType = 2
)

// Enum value maps for ModelQueryRequest_QueryType.
var (
	ModelQueryRequest_QueryType_name = map[int32]string{
		0: "QUERY_TYPE_UNSPECIFIED",
		1: "QUERY_TYPE_KEYWORDS",
		2: "QUERY_TYPE_EMBEDDINGS",
	}
	ModelQueryRequest_QueryType_value = map[string]int32{
		"QUERY_TYPE_UNSPECIFIED": 0,
		"QUERY_TYPE_KEYWORDS":    1,
		"QUERY_TYPE_EMBEDDINGS":  2,
	}
)

func (x ModelQueryRequest_QueryType) Enum() *ModelQueryRequest_QueryType {
	p := new(ModelQueryRequest_QueryType)
	*p = x
	return p
}

func (x ModelQueryRequest_QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelQueryRequest_QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[33].Descriptor()
}

func (ModelQueryRequest_QueryType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[33]
}

func (x ModelQueryRequest_QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelQueryRequest_QueryType.Descriptor instead.
func (ModelQueryRequest_QueryType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{280, 0}
}

type StreamCppRequest_ControlToken int32

const (
	StreamCppRequest_CONTROL_TOKEN_UNSPECIFIED StreamCppRequest_ControlToken = 0
	StreamCppRequest_CONTROL_TOKEN_QUIET       StreamCppRequest_ControlToken = 1
	StreamCppRequest_CONTROL_TOKEN_LOUD        StreamCppRequest_ControlToken = 2
	StreamCppRequest_CONTROL_TOKEN_OP          StreamCppRequest_ControlToken = 3
)

// Enum value maps for StreamCppRequest_ControlToken.
var (
	StreamCppRequest_ControlToken_name = map[int32]string{
		0: "CONTROL_TOKEN_UNSPECIFIED",
		1: "CONTROL_TOKEN_QUIET",
		2: "CONTROL_TOKEN_LOUD",
		3: "CONTROL_TOKEN_OP",
	}
	StreamCppRequest_ControlToken_value = map[string]int32{
		"CONTROL_TOKEN_UNSPECIFIED": 0,
		"CONTROL_TOKEN_QUIET":       1,
		"CONTROL_TOKEN_LOUD":        2,
		"CONTROL_TOKEN_OP":          3,
	}
)

func (x StreamCppRequest_ControlToken) Enum() *StreamCppRequest_ControlToken {
	p := new(StreamCppRequest_ControlToken)
	*p = x
	return p
}

func (x StreamCppRequest_ControlToken) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCppRequest_ControlToken) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[34].Descriptor()
}

func (StreamCppRequest_ControlToken) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[34]
}

func (x StreamCppRequest_ControlToken) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCppRequest_ControlToken.Descriptor instead.
func (StreamCppRequest_ControlToken) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{294, 0}
}

type CppConfigResponse_Heuristic int32

const (
	CppConfigResponse_HEURISTIC_UNSPECIFIED                                 CppConfigResponse_Heuristic = 0
	CppConfigResponse_HEURISTIC_LOTS_OF_ADDED_TEXT                          CppConfigResponse_Heuristic = 1
	CppConfigResponse_HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION           CppConfigResponse_Heuristic = 2
	CppConfigResponse_HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION CppConfigResponse_Heuristic = 3
	CppConfigResponse_HEURISTIC_REVERTING_USER_CHANGE                       CppConfigResponse_Heuristic = 4
	CppConfigResponse_HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED CppConfigResponse_Heuristic = 5
)

// Enum value maps for CppConfigResponse_Heuristic.
var (
	CppConfigResponse_Heuristic_name = map[int32]string{
		0: "HEURISTIC_UNSPECIFIED",
		1: "HEURISTIC_LOTS_OF_ADDED_TEXT",
		2: "HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION",
		3: "HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION",
		4: "HEURISTIC_REVERTING_USER_CHANGE",
		5: "HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED",
	}
	CppConfigResponse_Heuristic_value = map[string]int32{
		"HEURISTIC_UNSPECIFIED":                                 0,
		"HEURISTIC_LOTS_OF_ADDED_TEXT":                          1,
		"HEURISTIC_DUPLICATING_LINE_AFTER_SUGGESTION":           2,
		"HEURISTIC_DUPLICATING_MULTIPLE_LINES_AFTER_SUGGESTION": 3,
		"HEURISTIC_REVERTING_USER_CHANGE":                       4,
		"HEURISTIC_OUTPUT_EXTENDS_BEYOND_RANGE_AND_IS_REPEATED": 5,
	}
)

func (x CppConfigResponse_Heuristic) Enum() *CppConfigResponse_Heuristic {
	p := new(CppConfigResponse_Heuristic)
	*p = x
	return p
}

func (x CppConfigResponse_Heuristic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CppConfigResponse_Heuristic) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[35].Descriptor()
}

func (CppConfigResponse_Heuristic) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[35]
}

func (x CppConfigResponse_Heuristic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CppConfigResponse_Heuristic.Descriptor instead.
func (CppConfigResponse_Heuristic) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{310, 0}
}

type LogLinterExplicitUserFeedbackRequest_LinterUserFeedback int32

const (
	LogLinterExplicitUserFeedbackRequest_LINTER_USER_FEEDBACK_UNSPECIFIED LogLinterExplicitUserFeedbackRequest_LinterUserFeedback = 0
	LogLinterExplicitUserFeedbackRequest_LINTER_USER_FEEDBACK_CORRECT     LogLinterExplicitUserFeedbackRequest_LinterUserFeedback = 1
	LogLinterExplicitUserFeedbackRequest_LINTER_USER_FEEDBACK_INCORRECT   LogLinterExplicitUserFeedbackRequest_LinterUserFeedback = 2
	LogLinterExplicitUserFeedbackRequest_LINTER_USER_FEEDBACK_OTHER       LogLinterExplicitUserFeedbackRequest_LinterUserFeedback = 3
)

// Enum value maps for LogLinterExplicitUserFeedbackRequest_LinterUserFeedback.
var (
	LogLinterExplicitUserFeedbackRequest_LinterUserFeedback_name = map[int32]string{
		0: "LINTER_USER_FEEDBACK_UNSPECIFIED",
		1: "LINTER_USER_FEEDBACK_CORRECT",
		2: "LINTER_USER_FEEDBACK_INCORRECT",
		3: "LINTER_USER_FEEDBACK_OTHER",
	}
	LogLinterExplicitUserFeedbackRequest_LinterUserFeedback_value = map[string]int32{
		"LINTER_USER_FEEDBACK_UNSPECIFIED": 0,
		"LINTER_USER_FEEDBACK_CORRECT":     1,
		"LINTER_USER_FEEDBACK_INCORRECT":   2,
		"LINTER_USER_FEEDBACK_OTHER":       3,
	}
)

func (x LogLinterExplicitUserFeedbackRequest_LinterUserFeedback) Enum() *LogLinterExplicitUserFeedbackRequest_LinterUserFeedback {
	p := new(LogLinterExplicitUserFeedbackRequest_LinterUserFeedback)
	*p = x
	return p
}

func (x LogLinterExplicitUserFeedbackRequest_LinterUserFeedback) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLinterExplicitUserFeedbackRequest_LinterUserFeedback) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[36].Descriptor()
}

func (LogLinterExplicitUserFeedbackRequest_LinterUserFeedback) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[36]
}

func (x LogLinterExplicitUserFeedbackRequest_LinterUserFeedback) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLinterExplicitUserFeedbackRequest_LinterUserFeedback.Descriptor instead.
func (LogLinterExplicitUserFeedbackRequest_LinterUserFeedback) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{335, 0}
}

type ReportGenerationFeedbackRequest_FeedbackType int32

const (
	ReportGenerationFeedbackRequest_FEEDBACK_TYPE_UNSPECIFIED ReportGenerationFeedbackRequest_FeedbackType = 0
	ReportGenerationFeedbackRequest_FEEDBACK_TYPE_THUMBS_UP   ReportGenerationFeedbackRequest_FeedbackType = 1
	ReportGenerationFeedbackRequest_FEEDBACK_TYPE_THUMBS_DOWN ReportGenerationFeedbackRequest_FeedbackType = 2
	ReportGenerationFeedbackRequest_FEEDBACK_TYPE_NEUTRAL     ReportGenerationFeedbackRequest_FeedbackType = 3
)

// Enum value maps for ReportGenerationFeedbackRequest_FeedbackType.
var (
	ReportGenerationFeedbackRequest_FeedbackType_name = map[int32]string{
		0: "FEEDBACK_TYPE_UNSPECIFIED",
		1: "FEEDBACK_TYPE_THUMBS_UP",
		2: "FEEDBACK_TYPE_THUMBS_DOWN",
		3: "FEEDBACK_TYPE_NEUTRAL",
	}
	ReportGenerationFeedbackRequest_FeedbackType_value = map[string]int32{
		"FEEDBACK_TYPE_UNSPECIFIED": 0,
		"FEEDBACK_TYPE_THUMBS_UP":   1,
		"FEEDBACK_TYPE_THUMBS_DOWN": 2,
		"FEEDBACK_TYPE_NEUTRAL":     3,
	}
)

func (x ReportGenerationFeedbackRequest_FeedbackType) Enum() *ReportGenerationFeedbackRequest_FeedbackType {
	p := new(ReportGenerationFeedbackRequest_FeedbackType)
	*p = x
	return p
}

func (x ReportGenerationFeedbackRequest_FeedbackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportGenerationFeedbackRequest_FeedbackType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[37].Descriptor()
}

func (ReportGenerationFeedbackRequest_FeedbackType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[37]
}

func (x ReportGenerationFeedbackRequest_FeedbackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportGenerationFeedbackRequest_FeedbackType.Descriptor instead.
func (ReportGenerationFeedbackRequest_FeedbackType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{349, 0}
}

type BackgroundCmdKEvalRequest_Experiment int32

const (
	BackgroundCmdKEvalRequest_EXPERIMENT_UNSPECIFIED           BackgroundCmdKEvalRequest_Experiment = 0
	BackgroundCmdKEvalRequest_EXPERIMENT_REFLECT               BackgroundCmdKEvalRequest_Experiment = 1
	BackgroundCmdKEvalRequest_EXPERIMENT_CMD_K_ORIGINAL_RADIUS BackgroundCmdKEvalRequest_Experiment = 2
	BackgroundCmdKEvalRequest_EXPERIMENT_LOOP_ON_LINTS         BackgroundCmdKEvalRequest_Experiment = 3
	BackgroundCmdKEvalRequest_EXPERIMENT_CHAT_AND_APPLY        BackgroundCmdKEvalRequest_Experiment = 4
	BackgroundCmdKEvalRequest_EXPERIMENT_COMMIT_NOTES          BackgroundCmdKEvalRequest_Experiment = 5
	BackgroundCmdKEvalRequest_EXPERIMENT_COALESCE_GENERATIONS  BackgroundCmdKEvalRequest_Experiment = 6
	BackgroundCmdKEvalRequest_EXPERIMENT_REWORD_INSTRUCTIONS   BackgroundCmdKEvalRequest_Experiment = 7
	BackgroundCmdKEvalRequest_EXPERIMENT_CODEBASE_CHUNKS       BackgroundCmdKEvalRequest_Experiment = 8
	BackgroundCmdKEvalRequest_EXPERIMENT_SPEC_AND_APPLY        BackgroundCmdKEvalRequest_Experiment = 9
	BackgroundCmdKEvalRequest_EXPERIMENT_ASK_CODEBASE          BackgroundCmdKEvalRequest_Experiment = 10
)

// Enum value maps for BackgroundCmdKEvalRequest_Experiment.
var (
	BackgroundCmdKEvalRequest_Experiment_name = map[int32]string{
		0:  "EXPERIMENT_UNSPECIFIED",
		1:  "EXPERIMENT_REFLECT",
		2:  "EXPERIMENT_CMD_K_ORIGINAL_RADIUS",
		3:  "EXPERIMENT_LOOP_ON_LINTS",
		4:  "EXPERIMENT_CHAT_AND_APPLY",
		5:  "EXPERIMENT_COMMIT_NOTES",
		6:  "EXPERIMENT_COALESCE_GENERATIONS",
		7:  "EXPERIMENT_REWORD_INSTRUCTIONS",
		8:  "EXPERIMENT_CODEBASE_CHUNKS",
		9:  "EXPERIMENT_SPEC_AND_APPLY",
		10: "EXPERIMENT_ASK_CODEBASE",
	}
	BackgroundCmdKEvalRequest_Experiment_value = map[string]int32{
		"EXPERIMENT_UNSPECIFIED":           0,
		"EXPERIMENT_REFLECT":               1,
		"EXPERIMENT_CMD_K_ORIGINAL_RADIUS": 2,
		"EXPERIMENT_LOOP_ON_LINTS":         3,
		"EXPERIMENT_CHAT_AND_APPLY":        4,
		"EXPERIMENT_COMMIT_NOTES":          5,
		"EXPERIMENT_COALESCE_GENERATIONS":  6,
		"EXPERIMENT_REWORD_INSTRUCTIONS":   7,
		"EXPERIMENT_CODEBASE_CHUNKS":       8,
		"EXPERIMENT_SPEC_AND_APPLY":        9,
		"EXPERIMENT_ASK_CODEBASE":          10,
	}
)

func (x BackgroundCmdKEvalRequest_Experiment) Enum() *BackgroundCmdKEvalRequest_Experiment {
	p := new(BackgroundCmdKEvalRequest_Experiment)
	*p = x
	return p
}

func (x BackgroundCmdKEvalRequest_Experiment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundCmdKEvalRequest_Experiment) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[38].Descriptor()
}

func (BackgroundCmdKEvalRequest_Experiment) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[38]
}

func (x BackgroundCmdKEvalRequest_Experiment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackgroundCmdKEvalRequest_Experiment.Descriptor instead.
func (BackgroundCmdKEvalRequest_Experiment) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{376, 0}
}

type BackgroundCmdKRequest_Type int32

const (
	BackgroundCmdKRequest_TYPE_UNSPECIFIED                   BackgroundCmdKRequest_Type = 0
	BackgroundCmdKRequest_TYPE_REFLECT                       BackgroundCmdKRequest_Type = 1
	BackgroundCmdKRequest_TYPE_LOOP_ON_LINTS                 BackgroundCmdKRequest_Type = 2
	BackgroundCmdKRequest_TYPE_CHAT_AND_APPLY                BackgroundCmdKRequest_Type = 3
	BackgroundCmdKRequest_TYPE_COALESCE_GENERATIONS          BackgroundCmdKRequest_Type = 4
	BackgroundCmdKRequest_TYPE_CODEBASE_CHUNKS               BackgroundCmdKRequest_Type = 5
	BackgroundCmdKRequest_TYPE_SPEC_AND_APPLY                BackgroundCmdKRequest_Type = 6
	BackgroundCmdKRequest_TYPE_ASK_CODEBASE                  BackgroundCmdKRequest_Type = 7
	BackgroundCmdKRequest_TYPE_FINETUNED_INSTRUCTIONS        BackgroundCmdKRequest_Type = 8
	BackgroundCmdKRequest_TYPE_USEFUL_TYPES                  BackgroundCmdKRequest_Type = 9
	BackgroundCmdKRequest_TYPE_CHAT_AND_APPLY_UNDERSPECIFIED BackgroundCmdKRequest_Type = 10
)

// Enum value maps for BackgroundCmdKRequest_Type.
var (
	BackgroundCmdKRequest_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_REFLECT",
		2:  "TYPE_LOOP_ON_LINTS",
		3:  "TYPE_CHAT_AND_APPLY",
		4:  "TYPE_COALESCE_GENERATIONS",
		5:  "TYPE_CODEBASE_CHUNKS",
		6:  "TYPE_SPEC_AND_APPLY",
		7:  "TYPE_ASK_CODEBASE",
		8:  "TYPE_FINETUNED_INSTRUCTIONS",
		9:  "TYPE_USEFUL_TYPES",
		10: "TYPE_CHAT_AND_APPLY_UNDERSPECIFIED",
	}
	BackgroundCmdKRequest_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                   0,
		"TYPE_REFLECT":                       1,
		"TYPE_LOOP_ON_LINTS":                 2,
		"TYPE_CHAT_AND_APPLY":                3,
		"TYPE_COALESCE_GENERATIONS":          4,
		"TYPE_CODEBASE_CHUNKS":               5,
		"TYPE_SPEC_AND_APPLY":                6,
		"TYPE_ASK_CODEBASE":                  7,
		"TYPE_FINETUNED_INSTRUCTIONS":        8,
		"TYPE_USEFUL_TYPES":                  9,
		"TYPE_CHAT_AND_APPLY_UNDERSPECIFIED": 10,
	}
)

func (x BackgroundCmdKRequest_Type) Enum() *BackgroundCmdKRequest_Type {
	p := new(BackgroundCmdKRequest_Type)
	*p = x
	return p
}

func (x BackgroundCmdKRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundCmdKRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[39].Descriptor()
}

func (BackgroundCmdKRequest_Type) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[39]
}

func (x BackgroundCmdKRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackgroundCmdKRequest_Type.Descriptor instead.
func (BackgroundCmdKRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 0}
}

type HeuristicsSelection_HeuristicsSelectionType int32

const (
	HeuristicsSelection_HEURISTICS_SELECTION_TYPE_UNSPECIFIED HeuristicsSelection_HeuristicsSelectionType = 0
	HeuristicsSelection_HEURISTICS_SELECTION_TYPE_GROUP       HeuristicsSelection_HeuristicsSelectionType = 1
	HeuristicsSelection_HEURISTICS_SELECTION_TYPE_LINE        HeuristicsSelection_HeuristicsSelectionType = 2
	HeuristicsSelection_HEURISTICS_SELECTION_TYPE_FOLDING     HeuristicsSelection_HeuristicsSelectionType = 3
)

// Enum value maps for HeuristicsSelection_HeuristicsSelectionType.
var (
	HeuristicsSelection_HeuristicsSelectionType_name = map[int32]string{
		0: "HEURISTICS_SELECTION_TYPE_UNSPECIFIED",
		1: "HEURISTICS_SELECTION_TYPE_GROUP",
		2: "HEURISTICS_SELECTION_TYPE_LINE",
		3: "HEURISTICS_SELECTION_TYPE_FOLDING",
	}
	HeuristicsSelection_HeuristicsSelectionType_value = map[string]int32{
		"HEURISTICS_SELECTION_TYPE_UNSPECIFIED": 0,
		"HEURISTICS_SELECTION_TYPE_GROUP":       1,
		"HEURISTICS_SELECTION_TYPE_LINE":        2,
		"HEURISTICS_SELECTION_TYPE_FOLDING":     3,
	}
)

func (x HeuristicsSelection_HeuristicsSelectionType) Enum() *HeuristicsSelection_HeuristicsSelectionType {
	p := new(HeuristicsSelection_HeuristicsSelectionType)
	*p = x
	return p
}

func (x HeuristicsSelection_HeuristicsSelectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeuristicsSelection_HeuristicsSelectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[40].Descriptor()
}

func (HeuristicsSelection_HeuristicsSelectionType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[40]
}

func (x HeuristicsSelection_HeuristicsSelectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeuristicsSelection_HeuristicsSelectionType.Descriptor instead.
func (HeuristicsSelection_HeuristicsSelectionType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{383, 0}
}

type GetRankedContextFromContextBankRequest_RankWithOption int32

const (
	GetRankedContextFromContextBankRequest_RANK_WITH_OPTION_UNSPECIFIED GetRankedContextFromContextBankRequest_RankWithOption = 0
	GetRankedContextFromContextBankRequest_RANK_WITH_OPTION_LLM         GetRankedContextFromContextBankRequest_RankWithOption = 1
	GetRankedContextFromContextBankRequest_RANK_WITH_OPTION_EMBEDDINGS  GetRankedContextFromContextBankRequest_RankWithOption = 2
)

// Enum value maps for GetRankedContextFromContextBankRequest_RankWithOption.
var (
	GetRankedContextFromContextBankRequest_RankWithOption_name = map[int32]string{
		0: "RANK_WITH_OPTION_UNSPECIFIED",
		1: "RANK_WITH_OPTION_LLM",
		2: "RANK_WITH_OPTION_EMBEDDINGS",
	}
	GetRankedContextFromContextBankRequest_RankWithOption_value = map[string]int32{
		"RANK_WITH_OPTION_UNSPECIFIED": 0,
		"RANK_WITH_OPTION_LLM":         1,
		"RANK_WITH_OPTION_EMBEDDINGS":  2,
	}
)

func (x GetRankedContextFromContextBankRequest_RankWithOption) Enum() *GetRankedContextFromContextBankRequest_RankWithOption {
	p := new(GetRankedContextFromContextBankRequest_RankWithOption)
	*p = x
	return p
}

func (x GetRankedContextFromContextBankRequest_RankWithOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRankedContextFromContextBankRequest_RankWithOption) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[41].Descriptor()
}

func (GetRankedContextFromContextBankRequest_RankWithOption) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[41]
}

func (x GetRankedContextFromContextBankRequest_RankWithOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRankedContextFromContextBankRequest_RankWithOption.Descriptor instead.
func (GetRankedContextFromContextBankRequest_RankWithOption) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{392, 0}
}

type EditHistoryAppendChangesRequest_PrivacyModeStatus int32

const (
	EditHistoryAppendChangesRequest_PRIVACY_MODE_STATUS_UNSPECIFIED         EditHistoryAppendChangesRequest_PrivacyModeStatus = 0
	EditHistoryAppendChangesRequest_PRIVACY_MODE_STATUS_PRIVACY_ENABLED     EditHistoryAppendChangesRequest_PrivacyModeStatus = 1
	EditHistoryAppendChangesRequest_PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY EditHistoryAppendChangesRequest_PrivacyModeStatus = 2
	EditHistoryAppendChangesRequest_PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY EditHistoryAppendChangesRequest_PrivacyModeStatus = 3
)

// Enum value maps for EditHistoryAppendChangesRequest_PrivacyModeStatus.
var (
	EditHistoryAppendChangesRequest_PrivacyModeStatus_name = map[int32]string{
		0: "PRIVACY_MODE_STATUS_UNSPECIFIED",
		1: "PRIVACY_MODE_STATUS_PRIVACY_ENABLED",
		2: "PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY",
		3: "PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY",
	}
	EditHistoryAppendChangesRequest_PrivacyModeStatus_value = map[string]int32{
		"PRIVACY_MODE_STATUS_UNSPECIFIED":         0,
		"PRIVACY_MODE_STATUS_PRIVACY_ENABLED":     1,
		"PRIVACY_MODE_STATUS_IMPLICIT_NO_PRIVACY": 2,
		"PRIVACY_MODE_STATUS_EXPLICIT_NO_PRIVACY": 3,
	}
)

func (x EditHistoryAppendChangesRequest_PrivacyModeStatus) Enum() *EditHistoryAppendChangesRequest_PrivacyModeStatus {
	p := new(EditHistoryAppendChangesRequest_PrivacyModeStatus)
	*p = x
	return p
}

func (x EditHistoryAppendChangesRequest_PrivacyModeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditHistoryAppendChangesRequest_PrivacyModeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[42].Descriptor()
}

func (EditHistoryAppendChangesRequest_PrivacyModeStatus) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[42]
}

func (x EditHistoryAppendChangesRequest_PrivacyModeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditHistoryAppendChangesRequest_PrivacyModeStatus.Descriptor instead.
func (EditHistoryAppendChangesRequest_PrivacyModeStatus) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{395, 0}
}

type CppStoppedTrackingModelEvent_StoppedTrackingModelReason int32

const (
	CppStoppedTrackingModelEvent_STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED    CppStoppedTrackingModelEvent_StoppedTrackingModelReason = 0
	CppStoppedTrackingModelEvent_STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG   CppStoppedTrackingModelEvent_StoppedTrackingModelReason = 1
	CppStoppedTrackingModelEvent_STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED  CppStoppedTrackingModelEvent_StoppedTrackingModelReason = 2
	CppStoppedTrackingModelEvent_STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG CppStoppedTrackingModelEvent_StoppedTrackingModelReason = 3
)

// Enum value maps for CppStoppedTrackingModelEvent_StoppedTrackingModelReason.
var (
	CppStoppedTrackingModelEvent_StoppedTrackingModelReason_name = map[int32]string{
		0: "STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED",
		1: "STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG",
		2: "STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED",
		3: "STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG",
	}
	CppStoppedTrackingModelEvent_StoppedTrackingModelReason_value = map[string]int32{
		"STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED":    0,
		"STOPPED_TRACKING_MODEL_REASON_FILE_TOO_BIG":   1,
		"STOPPED_TRACKING_MODEL_REASON_FILE_DISPOSED":  2,
		"STOPPED_TRACKING_MODEL_REASON_CHANGE_TOO_BIG": 3,
	}
)

func (x CppStoppedTrackingModelEvent_StoppedTrackingModelReason) Enum() *CppStoppedTrackingModelEvent_StoppedTrackingModelReason {
	p := new(CppStoppedTrackingModelEvent_StoppedTrackingModelReason)
	*p = x
	return p
}

func (x CppStoppedTrackingModelEvent_StoppedTrackingModelReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CppStoppedTrackingModelEvent_StoppedTrackingModelReason) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[43].Descriptor()
}

func (CppStoppedTrackingModelEvent_StoppedTrackingModelReason) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[43]
}

func (x CppStoppedTrackingModelEvent_StoppedTrackingModelReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CppStoppedTrackingModelEvent_StoppedTrackingModelReason.Descriptor instead.
func (CppStoppedTrackingModelEvent_StoppedTrackingModelReason) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{404, 0}
}

type AiRequestEvent_RequestType int32

const (
	AiRequestEvent_REQUEST_TYPE_UNSPECIFIED AiRequestEvent_RequestType = 0
	AiRequestEvent_REQUEST_TYPE_START       AiRequestEvent_RequestType = 1
	AiRequestEvent_REQUEST_TYPE_END         AiRequestEvent_RequestType = 2
)

// Enum value maps for AiRequestEvent_RequestType.
var (
	AiRequestEvent_RequestType_name = map[int32]string{
		0: "REQUEST_TYPE_UNSPECIFIED",
		1: "REQUEST_TYPE_START",
		2: "REQUEST_TYPE_END",
	}
	AiRequestEvent_RequestType_value = map[string]int32{
		"REQUEST_TYPE_UNSPECIFIED": 0,
		"REQUEST_TYPE_START":       1,
		"REQUEST_TYPE_END":         2,
	}
)

func (x AiRequestEvent_RequestType) Enum() *AiRequestEvent_RequestType {
	p := new(AiRequestEvent_RequestType)
	*p = x
	return p
}

func (x AiRequestEvent_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AiRequestEvent_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[44].Descriptor()
}

func (AiRequestEvent_RequestType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[44]
}

func (x AiRequestEvent_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AiRequestEvent_RequestType.Descriptor instead.
func (AiRequestEvent_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{419, 0}
}

type CursorPrediction_CursorPredictionSource int32

const (
	CursorPrediction_CURSOR_PREDICTION_SOURCE_UNSPECIFIED   CursorPrediction_CursorPredictionSource = 0
	CursorPrediction_CURSOR_PREDICTION_SOURCE_ALWAYS_ON     CursorPrediction_CursorPredictionSource = 1
	CursorPrediction_CURSOR_PREDICTION_SOURCE_ACCEPT        CursorPrediction_CursorPredictionSource = 2
	CursorPrediction_CURSOR_PREDICTION_SOURCE_UNDO          CursorPrediction_CursorPredictionSource = 3
	CursorPrediction_CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE CursorPrediction_CursorPredictionSource = 4
)

// Enum value maps for CursorPrediction_CursorPredictionSource.
var (
	CursorPrediction_CursorPredictionSource_name = map[int32]string{
		0: "CURSOR_PREDICTION_SOURCE_UNSPECIFIED",
		1: "CURSOR_PREDICTION_SOURCE_ALWAYS_ON",
		2: "CURSOR_PREDICTION_SOURCE_ACCEPT",
		3: "CURSOR_PREDICTION_SOURCE_UNDO",
		4: "CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE",
	}
	CursorPrediction_CursorPredictionSource_value = map[string]int32{
		"CURSOR_PREDICTION_SOURCE_UNSPECIFIED":   0,
		"CURSOR_PREDICTION_SOURCE_ALWAYS_ON":     1,
		"CURSOR_PREDICTION_SOURCE_ACCEPT":        2,
		"CURSOR_PREDICTION_SOURCE_UNDO":          3,
		"CURSOR_PREDICTION_SOURCE_EDITOR_CHANGE": 4,
	}
)

func (x CursorPrediction_CursorPredictionSource) Enum() *CursorPrediction_CursorPredictionSource {
	p := new(CursorPrediction_CursorPredictionSource)
	*p = x
	return p
}

func (x CursorPrediction_CursorPredictionSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CursorPrediction_CursorPredictionSource) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[45].Descriptor()
}

func (CursorPrediction_CursorPredictionSource) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[45]
}

func (x CursorPrediction_CursorPredictionSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CursorPrediction_CursorPredictionSource.Descriptor instead.
func (CursorPrediction_CursorPredictionSource) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{427, 0}
}

type FastRepoInitHandshakeResponse_Status int32

const (
	FastRepoInitHandshakeResponse_STATUS_UNSPECIFIED FastRepoInitHandshakeResponse_Status = 0
	FastRepoInitHandshakeResponse_STATUS_UP_TO_DATE  FastRepoInitHandshakeResponse_Status = 1
	FastRepoInitHandshakeResponse_STATUS_OUT_OF_SYNC FastRepoInitHandshakeResponse_Status = 2
	FastRepoInitHandshakeResponse_STATUS_FAILURE     FastRepoInitHandshakeResponse_Status = 3
	FastRepoInitHandshakeResponse_STATUS_EMPTY       FastRepoInitHandshakeResponse_Status = 4
)

// Enum value maps for FastRepoInitHandshakeResponse_Status.
var (
	FastRepoInitHandshakeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_UP_TO_DATE",
		2: "STATUS_OUT_OF_SYNC",
		3: "STATUS_FAILURE",
		4: "STATUS_EMPTY",
	}
	FastRepoInitHandshakeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_UP_TO_DATE":  1,
		"STATUS_OUT_OF_SYNC": 2,
		"STATUS_FAILURE":     3,
		"STATUS_EMPTY":       4,
	}
)

func (x FastRepoInitHandshakeResponse_Status) Enum() *FastRepoInitHandshakeResponse_Status {
	p := new(FastRepoInitHandshakeResponse_Status)
	*p = x
	return p
}

func (x FastRepoInitHandshakeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastRepoInitHandshakeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[46].Descriptor()
}

func (FastRepoInitHandshakeResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[46]
}

func (x FastRepoInitHandshakeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastRepoInitHandshakeResponse_Status.Descriptor instead.
func (FastRepoInitHandshakeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{454, 0}
}

type FastUpdateFileRequest_UpdateType int32

const (
	FastUpdateFileRequest_UPDATE_TYPE_UNSPECIFIED FastUpdateFileRequest_UpdateType = 0
	FastUpdateFileRequest_UPDATE_TYPE_ADD         FastUpdateFileRequest_UpdateType = 1
	FastUpdateFileRequest_UPDATE_TYPE_DELETE      FastUpdateFileRequest_UpdateType = 2
	FastUpdateFileRequest_UPDATE_TYPE_MODIFY      FastUpdateFileRequest_UpdateType = 3
)

// Enum value maps for FastUpdateFileRequest_UpdateType.
var (
	FastUpdateFileRequest_UpdateType_name = map[int32]string{
		0: "UPDATE_TYPE_UNSPECIFIED",
		1: "UPDATE_TYPE_ADD",
		2: "UPDATE_TYPE_DELETE",
		3: "UPDATE_TYPE_MODIFY",
	}
	FastUpdateFileRequest_UpdateType_value = map[string]int32{
		"UPDATE_TYPE_UNSPECIFIED": 0,
		"UPDATE_TYPE_ADD":         1,
		"UPDATE_TYPE_DELETE":      2,
		"UPDATE_TYPE_MODIFY":      3,
	}
)

func (x FastUpdateFileRequest_UpdateType) Enum() *FastUpdateFileRequest_UpdateType {
	p := new(FastUpdateFileRequest_UpdateType)
	*p = x
	return p
}

func (x FastUpdateFileRequest_UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastUpdateFileRequest_UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[47].Descriptor()
}

func (FastUpdateFileRequest_UpdateType) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[47]
}

func (x FastUpdateFileRequest_UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastUpdateFileRequest_UpdateType.Descriptor instead.
func (FastUpdateFileRequest_UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{458, 0}
}

type FastUpdateFileResponse_Status int32

const (
	FastUpdateFileResponse_STATUS_UNSPECIFIED      FastUpdateFileResponse_Status = 0
	FastUpdateFileResponse_STATUS_SUCCESS          FastUpdateFileResponse_Status = 1
	FastUpdateFileResponse_STATUS_FAILURE          FastUpdateFileResponse_Status = 2
	FastUpdateFileResponse_STATUS_EXPECTED_FAILURE FastUpdateFileResponse_Status = 3
)

// Enum value maps for FastUpdateFileResponse_Status.
var (
	FastUpdateFileResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
		3: "STATUS_EXPECTED_FAILURE",
	}
	FastUpdateFileResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":      0,
		"STATUS_SUCCESS":          1,
		"STATUS_FAILURE":          2,
		"STATUS_EXPECTED_FAILURE": 3,
	}
)

func (x FastUpdateFileResponse_Status) Enum() *FastUpdateFileResponse_Status {
	p := new(FastUpdateFileResponse_Status)
	*p = x
	return p
}

func (x FastUpdateFileResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FastUpdateFileResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[48].Descriptor()
}

func (FastUpdateFileResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[48]
}

func (x FastUpdateFileResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FastUpdateFileResponse_Status.Descriptor instead.
func (FastUpdateFileResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{459, 0}
}

type RemoveRepositoryResponse_Status int32

const (
	RemoveRepositoryResponse_STATUS_UNSPECIFIED    RemoveRepositoryResponse_Status = 0
	RemoveRepositoryResponse_STATUS_NOT_FOUND      RemoveRepositoryResponse_Status = 1
	RemoveRepositoryResponse_STATUS_NOT_AUTHORIZED RemoveRepositoryResponse_Status = 2
	RemoveRepositoryResponse_STATUS_STARTED        RemoveRepositoryResponse_Status = 3
	RemoveRepositoryResponse_STATUS_SUCCESS        RemoveRepositoryResponse_Status = 4
)

// Enum value maps for RemoveRepositoryResponse_Status.
var (
	RemoveRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_NOT_AUTHORIZED",
		3: "STATUS_STARTED",
		4: "STATUS_SUCCESS",
	}
	RemoveRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_NOT_FOUND":      1,
		"STATUS_NOT_AUTHORIZED": 2,
		"STATUS_STARTED":        3,
		"STATUS_SUCCESS":        4,
	}
)

func (x RemoveRepositoryResponse_Status) Enum() *RemoveRepositoryResponse_Status {
	p := new(RemoveRepositoryResponse_Status)
	*p = x
	return p
}

func (x RemoveRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoveRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[49].Descriptor()
}

func (RemoveRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[49]
}

func (x RemoveRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemoveRepositoryResponse_Status.Descriptor instead.
func (RemoveRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{463, 0}
}

type LogoutResponse_Status int32

const (
	LogoutResponse_STATUS_UNSPECIFIED   LogoutResponse_Status = 0
	LogoutResponse_STATUS_SUCCESS       LogoutResponse_Status = 1
	LogoutResponse_STATUS_FAILURE       LogoutResponse_Status = 2
	LogoutResponse_STATUS_NOT_LOGGED_IN LogoutResponse_Status = 3
)

// Enum value maps for LogoutResponse_Status.
var (
	LogoutResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
		3: "STATUS_NOT_LOGGED_IN",
	}
	LogoutResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":   0,
		"STATUS_SUCCESS":       1,
		"STATUS_FAILURE":       2,
		"STATUS_NOT_LOGGED_IN": 3,
	}
)

func (x LogoutResponse_Status) Enum() *LogoutResponse_Status {
	p := new(LogoutResponse_Status)
	*p = x
	return p
}

func (x LogoutResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogoutResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[50].Descriptor()
}

func (LogoutResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[50]
}

func (x LogoutResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogoutResponse_Status.Descriptor instead.
func (LogoutResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{488, 0}
}

type PollLoginResponse_Status int32

const (
	PollLoginResponse_STATUS_UNSPECIFIED PollLoginResponse_Status = 0
	PollLoginResponse_STATUS_LOGGED_IN   PollLoginResponse_Status = 1
	PollLoginResponse_STATUS_FAILURE     PollLoginResponse_Status = 2
	PollLoginResponse_STATUS_CHECKING    PollLoginResponse_Status = 3
)

// Enum value maps for PollLoginResponse_Status.
var (
	PollLoginResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_LOGGED_IN",
		2: "STATUS_FAILURE",
		3: "STATUS_CHECKING",
	}
	PollLoginResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_LOGGED_IN":   1,
		"STATUS_FAILURE":     2,
		"STATUS_CHECKING":    3,
	}
)

func (x PollLoginResponse_Status) Enum() *PollLoginResponse_Status {
	p := new(PollLoginResponse_Status)
	*p = x
	return p
}

func (x PollLoginResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PollLoginResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[51].Descriptor()
}

func (PollLoginResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[51]
}

func (x PollLoginResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PollLoginResponse_Status.Descriptor instead.
func (PollLoginResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{492, 0}
}

type UpgradeScopeResponse_Status int32

const (
	UpgradeScopeResponse_STATUS_UNSPECIFIED UpgradeScopeResponse_Status = 0
	UpgradeScopeResponse_STATUS_SUCCESS     UpgradeScopeResponse_Status = 1
	UpgradeScopeResponse_STATUS_FAILURE     UpgradeScopeResponse_Status = 2
)

// Enum value maps for UpgradeScopeResponse_Status.
var (
	UpgradeScopeResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
	}
	UpgradeScopeResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_FAILURE":     2,
	}
)

func (x UpgradeScopeResponse_Status) Enum() *UpgradeScopeResponse_Status {
	p := new(UpgradeScopeResponse_Status)
	*p = x
	return p
}

func (x UpgradeScopeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpgradeScopeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[52].Descriptor()
}

func (UpgradeScopeResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[52]
}

func (x UpgradeScopeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpgradeScopeResponse_Status.Descriptor instead.
func (UpgradeScopeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{494, 0}
}

type UploadRepositoryResponse_Status int32

const (
	UploadRepositoryResponse_STATUS_UNSPECIFIED                UploadRepositoryResponse_Status = 0
	UploadRepositoryResponse_STATUS_SUCCESS                    UploadRepositoryResponse_Status = 1
	UploadRepositoryResponse_STATUS_FAILURE                    UploadRepositoryResponse_Status = 2
	UploadRepositoryResponse_STATUS_AUTH_TOKEN_BAD_PERMISSIONS UploadRepositoryResponse_Status = 3
	UploadRepositoryResponse_STATUS_ALREADY_EXISTS             UploadRepositoryResponse_Status = 4
)

// Enum value maps for UploadRepositoryResponse_Status.
var (
	UploadRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_FAILURE",
		3: "STATUS_AUTH_TOKEN_BAD_PERMISSIONS",
		4: "STATUS_ALREADY_EXISTS",
	}
	UploadRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":                0,
		"STATUS_SUCCESS":                    1,
		"STATUS_FAILURE":                    2,
		"STATUS_AUTH_TOKEN_BAD_PERMISSIONS": 3,
		"STATUS_ALREADY_EXISTS":             4,
	}
)

func (x UploadRepositoryResponse_Status) Enum() *UploadRepositoryResponse_Status {
	p := new(UploadRepositoryResponse_Status)
	*p = x
	return p
}

func (x UploadRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[53].Descriptor()
}

func (UploadRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[53]
}

func (x UploadRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadRepositoryResponse_Status.Descriptor instead.
func (UploadRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{498, 0}
}

type SubscribeRepositoryResponse_Status int32

const (
	SubscribeRepositoryResponse_STATUS_UNSPECIFIED        SubscribeRepositoryResponse_Status = 0
	SubscribeRepositoryResponse_STATUS_NOT_FOUND          SubscribeRepositoryResponse_Status = 1
	SubscribeRepositoryResponse_STATUS_NOT_AUTHORIZED     SubscribeRepositoryResponse_Status = 2
	SubscribeRepositoryResponse_STATUS_ALREADY_SUBSCRIBED SubscribeRepositoryResponse_Status = 3
	SubscribeRepositoryResponse_STATUS_SUCCESS            SubscribeRepositoryResponse_Status = 4
)

// Enum value maps for SubscribeRepositoryResponse_Status.
var (
	SubscribeRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_NOT_AUTHORIZED",
		3: "STATUS_ALREADY_SUBSCRIBED",
		4: "STATUS_SUCCESS",
	}
	SubscribeRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":        0,
		"STATUS_NOT_FOUND":          1,
		"STATUS_NOT_AUTHORIZED":     2,
		"STATUS_ALREADY_SUBSCRIBED": 3,
		"STATUS_SUCCESS":            4,
	}
)

func (x SubscribeRepositoryResponse_Status) Enum() *SubscribeRepositoryResponse_Status {
	p := new(SubscribeRepositoryResponse_Status)
	*p = x
	return p
}

func (x SubscribeRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[54].Descriptor()
}

func (SubscribeRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[54]
}

func (x SubscribeRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeRepositoryResponse_Status.Descriptor instead.
func (SubscribeRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{500, 0}
}

type UnsubscribeRepositoryResponse_Status int32

const (
	UnsubscribeRepositoryResponse_STATUS_UNSPECIFIED    UnsubscribeRepositoryResponse_Status = 0
	UnsubscribeRepositoryResponse_STATUS_NOT_FOUND      UnsubscribeRepositoryResponse_Status = 1
	UnsubscribeRepositoryResponse_STATUS_NOT_SUBSCRIBED UnsubscribeRepositoryResponse_Status = 2
	UnsubscribeRepositoryResponse_STATUS_SUCCESS        UnsubscribeRepositoryResponse_Status = 3
)

// Enum value maps for UnsubscribeRepositoryResponse_Status.
var (
	UnsubscribeRepositoryResponse_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_NOT_FOUND",
		2: "STATUS_NOT_SUBSCRIBED",
		3: "STATUS_SUCCESS",
	}
	UnsubscribeRepositoryResponse_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":    0,
		"STATUS_NOT_FOUND":      1,
		"STATUS_NOT_SUBSCRIBED": 2,
		"STATUS_SUCCESS":        3,
	}
)

func (x UnsubscribeRepositoryResponse_Status) Enum() *UnsubscribeRepositoryResponse_Status {
	p := new(UnsubscribeRepositoryResponse_Status)
	*p = x
	return p
}

func (x UnsubscribeRepositoryResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnsubscribeRepositoryResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aiserver_v1_aiserver_proto_enumTypes[55].Descriptor()
}

func (UnsubscribeRepositoryResponse_Status) Type() protoreflect.EnumType {
	return &file_aiserver_v1_aiserver_proto_enumTypes[55]
}

func (x UnsubscribeRepositoryResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnsubscribeRepositoryResponse_Status.Descriptor instead.
func (UnsubscribeRepositoryResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{502, 0}
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HealthCheckResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.HealthCheckResponse_Status" json:"status,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetStatus() HealthCheckResponse_Status {
	if x != nil {
		return x.Status
	}
	return HealthCheckResponse_STATUS_UNSPECIFIED
}

type TimeLeftHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeLeft string `protobuf:"bytes,1,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`
}

func (x *TimeLeftHealthCheckResponse) Reset() {
	*x = TimeLeftHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLeftHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLeftHealthCheckResponse) ProtoMessage() {}

func (x *TimeLeftHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLeftHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*TimeLeftHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{2}
}

func (x *TimeLeftHealthCheckResponse) GetTimeLeft() string {
	if x != nil {
		return x.TimeLeft
	}
	return ""
}

type ThrowErrorCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error ThrowErrorCheckRequest_Error `protobuf:"varint,1,opt,name=error,proto3,enum=aiserver.v1.ThrowErrorCheckRequest_Error" json:"error,omitempty"`
}

func (x *ThrowErrorCheckRequest) Reset() {
	*x = ThrowErrorCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrowErrorCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrowErrorCheckRequest) ProtoMessage() {}

func (x *ThrowErrorCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrowErrorCheckRequest.ProtoReflect.Descriptor instead.
func (*ThrowErrorCheckRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{3}
}

func (x *ThrowErrorCheckRequest) GetError() ThrowErrorCheckRequest_Error {
	if x != nil {
		return x.Error
	}
	return ThrowErrorCheckRequest_ERROR_UNSPECIFIED
}

type ThrowErrorCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ThrowErrorCheckResponse) Reset() {
	*x = ThrowErrorCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThrowErrorCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThrowErrorCheckResponse) ProtoMessage() {}

func (x *ThrowErrorCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThrowErrorCheckResponse.ProtoReflect.Descriptor instead.
func (*ThrowErrorCheckResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{4}
}

type AvailableModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNightly                bool `protobuf:"varint,1,opt,name=is_nightly,json=isNightly,proto3" json:"is_nightly,omitempty"`
	IncludeLongContextModels bool `protobuf:"varint,2,opt,name=include_long_context_models,json=includeLongContextModels,proto3" json:"include_long_context_models,omitempty"`
}

func (x *AvailableModelsRequest) Reset() {
	*x = AvailableModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableModelsRequest) ProtoMessage() {}

func (x *AvailableModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableModelsRequest.ProtoReflect.Descriptor instead.
func (*AvailableModelsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{5}
}

func (x *AvailableModelsRequest) GetIsNightly() bool {
	if x != nil {
		return x.IsNightly
	}
	return false
}

func (x *AvailableModelsRequest) GetIncludeLongContextModels() bool {
	if x != nil {
		return x.IncludeLongContextModels
	}
	return false
}

type AvailableModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models     []*AvailableModelsResponse_AvailableModel `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	ModelNames []string                                  `protobuf:"bytes,1,rep,name=model_names,json=modelNames,proto3" json:"model_names,omitempty"`
}

func (x *AvailableModelsResponse) Reset() {
	*x = AvailableModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableModelsResponse) ProtoMessage() {}

func (x *AvailableModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableModelsResponse.ProtoReflect.Descriptor instead.
func (*AvailableModelsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{6}
}

func (x *AvailableModelsResponse) GetModels() []*AvailableModelsResponse_AvailableModel {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *AvailableModelsResponse) GetModelNames() []string {
	if x != nil {
		return x.ModelNames
	}
	return nil
}

type GetChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile                        *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation                       []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories                       []*RepositoryInfo      `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext                    *ExplicitContext       `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath                  *string                `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	CodeBlocks                         []*CodeBlock           `protobuf:"bytes,6,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails                       *ModelDetails          `protobuf:"bytes,7,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers           []string               `protobuf:"bytes,8,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	RequestId                          string                 `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	LinterErrors                       *LinterErrors          `protobuf:"bytes,10,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	Summary                            *string                `protobuf:"bytes,11,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	SummaryUpUntilIndex                *int32                 `protobuf:"varint,12,opt,name=summary_up_until_index,json=summaryUpUntilIndex,proto3,oneof" json:"summary_up_until_index,omitempty"`
	AllowLongFileScan                  *bool                  `protobuf:"varint,13,opt,name=allow_long_file_scan,json=allowLongFileScan,proto3,oneof" json:"allow_long_file_scan,omitempty"`
	IsBash                             *bool                  `protobuf:"varint,14,opt,name=is_bash,json=isBash,proto3,oneof" json:"is_bash,omitempty"`
	ConversationId                     string                 `protobuf:"bytes,15,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	CanHandleFilenamesAfterLanguageIds *bool                  `protobuf:"varint,16,opt,name=can_handle_filenames_after_language_ids,json=canHandleFilenamesAfterLanguageIds,proto3,oneof" json:"can_handle_filenames_after_language_ids,omitempty"`
	UseWeb                             *string                `protobuf:"bytes,17,opt,name=use_web,json=useWeb,proto3,oneof" json:"use_web,omitempty"`
	Quotes                             []*ChatQuote           `protobuf:"bytes,18,rep,name=quotes,proto3" json:"quotes,omitempty"`
	DebugInfo                          *DebugInfo             `protobuf:"bytes,19,opt,name=debug_info,json=debugInfo,proto3,oneof" json:"debug_info,omitempty"`
	WorkspaceId                        *string                `protobuf:"bytes,20,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
	ExternalLinks                      []*ChatExternalLink    `protobuf:"bytes,21,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	CommitNotes                        []*CommitNote          `protobuf:"bytes,23,rep,name=commit_notes,json=commitNotes,proto3" json:"commit_notes,omitempty"`
	LongContextMode                    *bool                  `protobuf:"varint,22,opt,name=long_context_mode,json=longContextMode,proto3,oneof" json:"long_context_mode,omitempty"`
	IsEval                             *bool                  `protobuf:"varint,24,opt,name=is_eval,json=isEval,proto3,oneof" json:"is_eval,omitempty"`
	DesiredMaxTokens                   *int32                 `protobuf:"varint,26,opt,name=desired_max_tokens,json=desiredMaxTokens,proto3,oneof" json:"desired_max_tokens,omitempty"`
	ContextAst                         *ContextAST            `protobuf:"bytes,25,opt,name=context_ast,json=contextAst,proto3" json:"context_ast,omitempty"`
	IsComposer                         *bool                  `protobuf:"varint,27,opt,name=is_composer,json=isComposer,proto3,oneof" json:"is_composer,omitempty"`
	RunnableCodeBlocks                 *bool                  `protobuf:"varint,28,opt,name=runnable_code_blocks,json=runnableCodeBlocks,proto3,oneof" json:"runnable_code_blocks,omitempty"`
}

func (x *GetChatRequest) Reset() {
	*x = GetChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatRequest) ProtoMessage() {}

func (x *GetChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatRequest.ProtoReflect.Descriptor instead.
func (*GetChatRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{7}
}

func (x *GetChatRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *GetChatRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *GetChatRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *GetChatRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *GetChatRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *GetChatRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *GetChatRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *GetChatRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *GetChatRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *GetChatRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *GetChatRequest) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *GetChatRequest) GetSummaryUpUntilIndex() int32 {
	if x != nil && x.SummaryUpUntilIndex != nil {
		return *x.SummaryUpUntilIndex
	}
	return 0
}

func (x *GetChatRequest) GetAllowLongFileScan() bool {
	if x != nil && x.AllowLongFileScan != nil {
		return *x.AllowLongFileScan
	}
	return false
}

func (x *GetChatRequest) GetIsBash() bool {
	if x != nil && x.IsBash != nil {
		return *x.IsBash
	}
	return false
}

func (x *GetChatRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetChatRequest) GetCanHandleFilenamesAfterLanguageIds() bool {
	if x != nil && x.CanHandleFilenamesAfterLanguageIds != nil {
		return *x.CanHandleFilenamesAfterLanguageIds
	}
	return false
}

func (x *GetChatRequest) GetUseWeb() string {
	if x != nil && x.UseWeb != nil {
		return *x.UseWeb
	}
	return ""
}

func (x *GetChatRequest) GetQuotes() []*ChatQuote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

func (x *GetChatRequest) GetDebugInfo() *DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *GetChatRequest) GetWorkspaceId() string {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return ""
}

func (x *GetChatRequest) GetExternalLinks() []*ChatExternalLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

func (x *GetChatRequest) GetCommitNotes() []*CommitNote {
	if x != nil {
		return x.CommitNotes
	}
	return nil
}

func (x *GetChatRequest) GetLongContextMode() bool {
	if x != nil && x.LongContextMode != nil {
		return *x.LongContextMode
	}
	return false
}

func (x *GetChatRequest) GetIsEval() bool {
	if x != nil && x.IsEval != nil {
		return *x.IsEval
	}
	return false
}

func (x *GetChatRequest) GetDesiredMaxTokens() int32 {
	if x != nil && x.DesiredMaxTokens != nil {
		return *x.DesiredMaxTokens
	}
	return 0
}

func (x *GetChatRequest) GetContextAst() *ContextAST {
	if x != nil {
		return x.ContextAst
	}
	return nil
}

func (x *GetChatRequest) GetIsComposer() bool {
	if x != nil && x.IsComposer != nil {
		return *x.IsComposer
	}
	return false
}

func (x *GetChatRequest) GetRunnableCodeBlocks() bool {
	if x != nil && x.RunnableCodeBlocks != nil {
		return *x.RunnableCodeBlocks
	}
	return false
}

type CurrentFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                          `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string                          `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	Cells                 []*CurrentFileInfo_NotebookCell `protobuf:"bytes,16,rep,name=cells,proto3" json:"cells,omitempty"`
	TopChunks             []*BM25Chunk                    `protobuf:"bytes,10,rep,name=top_chunks,json=topChunks,proto3" json:"top_chunks,omitempty"`
	ContentsStartAtLine   int32                           `protobuf:"varint,9,opt,name=contents_start_at_line,json=contentsStartAtLine,proto3" json:"contents_start_at_line,omitempty"`
	CursorPosition        *CursorPosition                 `protobuf:"bytes,3,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
	Dataframes            []*DataframeInfo                `protobuf:"bytes,4,rep,name=dataframes,proto3" json:"dataframes,omitempty"`
	TotalNumberOfLines    int32                           `protobuf:"varint,8,opt,name=total_number_of_lines,json=totalNumberOfLines,proto3" json:"total_number_of_lines,omitempty"`
	LanguageId            string                          `protobuf:"bytes,5,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Selection             *CursorRange                    `protobuf:"bytes,6,opt,name=selection,proto3" json:"selection,omitempty"`
	AlternativeVersionId  *int32                          `protobuf:"varint,11,opt,name=alternative_version_id,json=alternativeVersionId,proto3,oneof" json:"alternative_version_id,omitempty"`
	Diagnostics           []*Diagnostic                   `protobuf:"bytes,7,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	FileVersion           *int32                          `protobuf:"varint,14,opt,name=file_version,json=fileVersion,proto3,oneof" json:"file_version,omitempty"`
	CellStartLines        []int32                         `protobuf:"varint,15,rep,packed,name=cell_start_lines,json=cellStartLines,proto3" json:"cell_start_lines,omitempty"`
}

func (x *CurrentFileInfo) Reset() {
	*x = CurrentFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentFileInfo) ProtoMessage() {}

func (x *CurrentFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentFileInfo.ProtoReflect.Descriptor instead.
func (*CurrentFileInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8}
}

func (x *CurrentFileInfo) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CurrentFileInfo) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *CurrentFileInfo) GetCells() []*CurrentFileInfo_NotebookCell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *CurrentFileInfo) GetTopChunks() []*BM25Chunk {
	if x != nil {
		return x.TopChunks
	}
	return nil
}

func (x *CurrentFileInfo) GetContentsStartAtLine() int32 {
	if x != nil {
		return x.ContentsStartAtLine
	}
	return 0
}

func (x *CurrentFileInfo) GetCursorPosition() *CursorPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

func (x *CurrentFileInfo) GetDataframes() []*DataframeInfo {
	if x != nil {
		return x.Dataframes
	}
	return nil
}

func (x *CurrentFileInfo) GetTotalNumberOfLines() int32 {
	if x != nil {
		return x.TotalNumberOfLines
	}
	return 0
}

func (x *CurrentFileInfo) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *CurrentFileInfo) GetSelection() *CursorRange {
	if x != nil {
		return x.Selection
	}
	return nil
}

func (x *CurrentFileInfo) GetAlternativeVersionId() int32 {
	if x != nil && x.AlternativeVersionId != nil {
		return *x.AlternativeVersionId
	}
	return 0
}

func (x *CurrentFileInfo) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *CurrentFileInfo) GetFileVersion() int32 {
	if x != nil && x.FileVersion != nil {
		return *x.FileVersion
	}
	return 0
}

func (x *CurrentFileInfo) GetCellStartLines() []int32 {
	if x != nil {
		return x.CellStartLines
	}
	return nil
}

type BM25Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string         `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Range        *SimplestRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Score        int32          `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	RelativePath string         `protobuf:"bytes,4,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
}

func (x *BM25Chunk) Reset() {
	*x = BM25Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BM25Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BM25Chunk) ProtoMessage() {}

func (x *BM25Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BM25Chunk.ProtoReflect.Descriptor instead.
func (*BM25Chunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{9}
}

func (x *BM25Chunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *BM25Chunk) GetRange() *SimplestRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *BM25Chunk) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BM25Chunk) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

type SimplestRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine        int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineInclusive int32 `protobuf:"varint,2,opt,name=end_line_inclusive,json=endLineInclusive,proto3" json:"end_line_inclusive,omitempty"`
}

func (x *SimplestRange) Reset() {
	*x = SimplestRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimplestRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplestRange) ProtoMessage() {}

func (x *SimplestRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplestRange.ProtoReflect.Descriptor instead.
func (*SimplestRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{10}
}

func (x *SimplestRange) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *SimplestRange) GetEndLineInclusive() int32 {
	if x != nil {
		return x.EndLineInclusive
	}
	return 0
}

type CursorPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CursorPosition) Reset() {
	*x = CursorPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPosition) ProtoMessage() {}

func (x *CursorPosition) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPosition.ProtoReflect.Descriptor instead.
func (*CursorPosition) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{11}
}

func (x *CursorPosition) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *CursorPosition) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type DataframeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Shape              string                  `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	DataDimensionality int32                   `protobuf:"varint,3,opt,name=data_dimensionality,json=dataDimensionality,proto3" json:"data_dimensionality,omitempty"`
	Columns            []*DataframeInfo_Column `protobuf:"bytes,6,rep,name=columns,proto3" json:"columns,omitempty"`
	RowCount           int32                   `protobuf:"varint,7,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	IndexColumn        string                  `protobuf:"bytes,8,opt,name=index_column,json=indexColumn,proto3" json:"index_column,omitempty"`
}

func (x *DataframeInfo) Reset() {
	*x = DataframeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataframeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataframeInfo) ProtoMessage() {}

func (x *DataframeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataframeInfo.ProtoReflect.Descriptor instead.
func (*DataframeInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{12}
}

func (x *DataframeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataframeInfo) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *DataframeInfo) GetDataDimensionality() int32 {
	if x != nil {
		return x.DataDimensionality
	}
	return 0
}

func (x *DataframeInfo) GetColumns() []*DataframeInfo_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *DataframeInfo) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *DataframeInfo) GetIndexColumn() string {
	if x != nil {
		return x.IndexColumn
	}
	return ""
}

type CursorRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition *CursorPosition `protobuf:"bytes,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *CursorPosition `protobuf:"bytes,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
}

func (x *CursorRange) Reset() {
	*x = CursorRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorRange) ProtoMessage() {}

func (x *CursorRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorRange.ProtoReflect.Descriptor instead.
func (*CursorRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{13}
}

func (x *CursorRange) GetStartPosition() *CursorPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *CursorRange) GetEndPosition() *CursorPosition {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                           `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range              *CursorRange                     `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Severity           Diagnostic_DiagnosticSeverity    `protobuf:"varint,3,opt,name=severity,proto3,enum=aiserver.v1.Diagnostic_DiagnosticSeverity" json:"severity,omitempty"`
	RelatedInformation []*Diagnostic_RelatedInformation `protobuf:"bytes,4,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage() {}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{14}
}

func (x *Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Diagnostic) GetSeverity() Diagnostic_DiagnosticSeverity {
	if x != nil {
		return x.Severity
	}
	return Diagnostic_DIAGNOSTIC_SEVERITY_UNSPECIFIED
}

func (x *Diagnostic) GetRelatedInformation() []*Diagnostic_RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

type ConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                               string                                      `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type                               ConversationMessage_MessageType             `protobuf:"varint,2,opt,name=type,proto3,enum=aiserver.v1.ConversationMessage_MessageType" json:"type,omitempty"`
	AttachedCodeChunks                 []*ConversationMessage_CodeChunk            `protobuf:"bytes,3,rep,name=attached_code_chunks,json=attachedCodeChunks,proto3" json:"attached_code_chunks,omitempty"`
	CodebaseContextChunks              []*CodeBlock                                `protobuf:"bytes,4,rep,name=codebase_context_chunks,json=codebaseContextChunks,proto3" json:"codebase_context_chunks,omitempty"`
	Commits                            []*Commit                                   `protobuf:"bytes,5,rep,name=commits,proto3" json:"commits,omitempty"`
	PullRequests                       []*PullRequest                              `protobuf:"bytes,6,rep,name=pull_requests,json=pullRequests,proto3" json:"pull_requests,omitempty"`
	GitDiffs                           []*GitDiff                                  `protobuf:"bytes,7,rep,name=git_diffs,json=gitDiffs,proto3" json:"git_diffs,omitempty"`
	AssistantSuggestedDiffs            []*SimpleFileDiff                           `protobuf:"bytes,8,rep,name=assistant_suggested_diffs,json=assistantSuggestedDiffs,proto3" json:"assistant_suggested_diffs,omitempty"`
	InterpreterResults                 []*InterpreterResult                        `protobuf:"bytes,9,rep,name=interpreter_results,json=interpreterResults,proto3" json:"interpreter_results,omitempty"`
	Images                             []*ImageProto                               `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	AttachedFolders                    []string                                    `protobuf:"bytes,11,rep,name=attached_folders,json=attachedFolders,proto3" json:"attached_folders,omitempty"`
	ApproximateLintErrors              []*ConversationMessage_ApproximateLintError `protobuf:"bytes,12,rep,name=approximate_lint_errors,json=approximateLintErrors,proto3" json:"approximate_lint_errors,omitempty"`
	BubbleId                           string                                      `protobuf:"bytes,13,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`
	AttachedFoldersNew                 []*FolderInfo                               `protobuf:"bytes,14,rep,name=attached_folders_new,json=attachedFoldersNew,proto3" json:"attached_folders_new,omitempty"`
	Lints                              []*ConversationMessage_Lints                `protobuf:"bytes,15,rep,name=lints,proto3" json:"lints,omitempty"`
	UserResponsesToSuggestedCodeBlocks []*UserResponseToSuggestedCodeBlock         `protobuf:"bytes,16,rep,name=user_responses_to_suggested_code_blocks,json=userResponsesToSuggestedCodeBlocks,proto3" json:"user_responses_to_suggested_code_blocks,omitempty"`
	RelevantFiles                      []string                                    `protobuf:"bytes,17,rep,name=relevant_files,json=relevantFiles,proto3" json:"relevant_files,omitempty"`
	ToolResults                        []*ConversationMessage_ToolResult           `protobuf:"bytes,18,rep,name=tool_results,json=toolResults,proto3" json:"tool_results,omitempty"`
}

func (x *ConversationMessage) Reset() {
	*x = ConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage) ProtoMessage() {}

func (x *ConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage.ProtoReflect.Descriptor instead.
func (*ConversationMessage) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15}
}

func (x *ConversationMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ConversationMessage) GetType() ConversationMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return ConversationMessage_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ConversationMessage) GetAttachedCodeChunks() []*ConversationMessage_CodeChunk {
	if x != nil {
		return x.AttachedCodeChunks
	}
	return nil
}

func (x *ConversationMessage) GetCodebaseContextChunks() []*CodeBlock {
	if x != nil {
		return x.CodebaseContextChunks
	}
	return nil
}

func (x *ConversationMessage) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *ConversationMessage) GetPullRequests() []*PullRequest {
	if x != nil {
		return x.PullRequests
	}
	return nil
}

func (x *ConversationMessage) GetGitDiffs() []*GitDiff {
	if x != nil {
		return x.GitDiffs
	}
	return nil
}

func (x *ConversationMessage) GetAssistantSuggestedDiffs() []*SimpleFileDiff {
	if x != nil {
		return x.AssistantSuggestedDiffs
	}
	return nil
}

func (x *ConversationMessage) GetInterpreterResults() []*InterpreterResult {
	if x != nil {
		return x.InterpreterResults
	}
	return nil
}

func (x *ConversationMessage) GetImages() []*ImageProto {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ConversationMessage) GetAttachedFolders() []string {
	if x != nil {
		return x.AttachedFolders
	}
	return nil
}

func (x *ConversationMessage) GetApproximateLintErrors() []*ConversationMessage_ApproximateLintError {
	if x != nil {
		return x.ApproximateLintErrors
	}
	return nil
}

func (x *ConversationMessage) GetBubbleId() string {
	if x != nil {
		return x.BubbleId
	}
	return ""
}

func (x *ConversationMessage) GetAttachedFoldersNew() []*FolderInfo {
	if x != nil {
		return x.AttachedFoldersNew
	}
	return nil
}

func (x *ConversationMessage) GetLints() []*ConversationMessage_Lints {
	if x != nil {
		return x.Lints
	}
	return nil
}

func (x *ConversationMessage) GetUserResponsesToSuggestedCodeBlocks() []*UserResponseToSuggestedCodeBlock {
	if x != nil {
		return x.UserResponsesToSuggestedCodeBlocks
	}
	return nil
}

func (x *ConversationMessage) GetRelevantFiles() []string {
	if x != nil {
		return x.RelevantFiles
	}
	return nil
}

func (x *ConversationMessage) GetToolResults() []*ConversationMessage_ToolResult {
	if x != nil {
		return x.ToolResults
	}
	return nil
}

type CodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	FileContents          *string               `protobuf:"bytes,2,opt,name=file_contents,json=fileContents,proto3,oneof" json:"file_contents,omitempty"`
	Range                 *CursorRange          `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	Contents              string                `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
	Signatures            *CodeBlock_Signatures `protobuf:"bytes,5,opt,name=signatures,proto3" json:"signatures,omitempty"`
	OverrideContents      *string               `protobuf:"bytes,6,opt,name=override_contents,json=overrideContents,proto3,oneof" json:"override_contents,omitempty"`
	OriginalContents      *string               `protobuf:"bytes,7,opt,name=original_contents,json=originalContents,proto3,oneof" json:"original_contents,omitempty"`
	DetailedLines         []*DetailedLine       `protobuf:"bytes,8,rep,name=detailed_lines,json=detailedLines,proto3" json:"detailed_lines,omitempty"`
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{16}
}

func (x *CodeBlock) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CodeBlock) GetFileContents() string {
	if x != nil && x.FileContents != nil {
		return *x.FileContents
	}
	return ""
}

func (x *CodeBlock) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CodeBlock) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *CodeBlock) GetSignatures() *CodeBlock_Signatures {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *CodeBlock) GetOverrideContents() string {
	if x != nil && x.OverrideContents != nil {
		return *x.OverrideContents
	}
	return ""
}

func (x *CodeBlock) GetOriginalContents() string {
	if x != nil && x.OriginalContents != nil {
		return *x.OriginalContents
	}
	return ""
}

func (x *CodeBlock) GetDetailedLines() []*DetailedLine {
	if x != nil {
		return x.DetailedLines
	}
	return nil
}

type DetailedLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	LineNumber  float32 `protobuf:"fixed32,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	IsSignature bool    `protobuf:"varint,3,opt,name=is_signature,json=isSignature,proto3" json:"is_signature,omitempty"`
}

func (x *DetailedLine) Reset() {
	*x = DetailedLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedLine) ProtoMessage() {}

func (x *DetailedLine) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedLine.ProtoReflect.Descriptor instead.
func (*DetailedLine) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{17}
}

func (x *DetailedLine) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DetailedLine) GetLineNumber() float32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DetailedLine) GetIsSignature() bool {
	if x != nil {
		return x.IsSignature
	}
	return false
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha         string      `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Message     string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Diff        []*FileDiff `protobuf:"bytes,4,rep,name=diff,proto3" json:"diff,omitempty"`
	Author      string      `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Date        string      `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{18}
}

func (x *Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Commit) GetDiff() []*FileDiff {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type FileDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   string            `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To     string            `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Chunks []*FileDiff_Chunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *FileDiff) Reset() {
	*x = FileDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDiff) ProtoMessage() {}

func (x *FileDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDiff.ProtoReflect.Descriptor instead.
func (*FileDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{19}
}

func (x *FileDiff) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *FileDiff) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *FileDiff) GetChunks() []*FileDiff_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body  string      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Diff  []*FileDiff `protobuf:"bytes,3,rep,name=diff,proto3" json:"diff,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{20}
}

func (x *PullRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PullRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PullRequest) GetDiff() []*FileDiff {
	if x != nil {
		return x.Diff
	}
	return nil
}

type GitDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diffs    []*FileDiff      `protobuf:"bytes,1,rep,name=diffs,proto3" json:"diffs,omitempty"`
	DiffType GitDiff_DiffType `protobuf:"varint,2,opt,name=diff_type,json=diffType,proto3,enum=aiserver.v1.GitDiff_DiffType" json:"diff_type,omitempty"`
}

func (x *GitDiff) Reset() {
	*x = GitDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitDiff) ProtoMessage() {}

func (x *GitDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitDiff.ProtoReflect.Descriptor instead.
func (*GitDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{21}
}

func (x *GitDiff) GetDiffs() []*FileDiff {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *GitDiff) GetDiffType() GitDiff_DiffType {
	if x != nil {
		return x.DiffType
	}
	return GitDiff_DIFF_TYPE_UNSPECIFIED
}

type SimpleFileDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                  `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Chunks                []*SimpleFileDiff_Chunk `protobuf:"bytes,3,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *SimpleFileDiff) Reset() {
	*x = SimpleFileDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleFileDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleFileDiff) ProtoMessage() {}

func (x *SimpleFileDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleFileDiff.ProtoReflect.Descriptor instead.
func (*SimpleFileDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{22}
}

func (x *SimpleFileDiff) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *SimpleFileDiff) GetChunks() []*SimpleFileDiff_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type LineRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber        int32 `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumberInclusive int32 `protobuf:"varint,2,opt,name=end_line_number_inclusive,json=endLineNumberInclusive,proto3" json:"end_line_number_inclusive,omitempty"`
}

func (x *LineRange) Reset() {
	*x = LineRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineRange) ProtoMessage() {}

func (x *LineRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineRange.ProtoReflect.Descriptor instead.
func (*LineRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{23}
}

func (x *LineRange) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *LineRange) GetEndLineNumberInclusive() int32 {
	if x != nil {
		return x.EndLineNumberInclusive
	}
	return 0
}

type InterpreterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *InterpreterResult) Reset() {
	*x = InterpreterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpreterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpreterResult) ProtoMessage() {}

func (x *InterpreterResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpreterResult.ProtoReflect.Descriptor instead.
func (*InterpreterResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{24}
}

func (x *InterpreterResult) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *InterpreterResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ImageProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []byte                `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Dimension *ImageProto_Dimension `protobuf:"bytes,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *ImageProto) Reset() {
	*x = ImageProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProto) ProtoMessage() {}

func (x *ImageProto) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProto.ProtoReflect.Descriptor instead.
func (*ImageProto) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{25}
}

func (x *ImageProto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ImageProto) GetDimension() *ImageProto_Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

type FolderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativePath string            `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Files        []*FolderFileInfo `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *FolderInfo) Reset() {
	*x = FolderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderInfo) ProtoMessage() {}

func (x *FolderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderInfo.ProtoReflect.Descriptor instead.
func (*FolderInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{26}
}

func (x *FolderInfo) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FolderInfo) GetFiles() []*FolderFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type FolderFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativePath string  `protobuf:"bytes,1,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Content      string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Truncated    bool    `protobuf:"varint,3,opt,name=truncated,proto3" json:"truncated,omitempty"`
	Score        float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *FolderFileInfo) Reset() {
	*x = FolderFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderFileInfo) ProtoMessage() {}

func (x *FolderFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderFileInfo.ProtoReflect.Descriptor instead.
func (*FolderFileInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{27}
}

func (x *FolderFileInfo) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *FolderFileInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FolderFileInfo) GetTruncated() bool {
	if x != nil {
		return x.Truncated
	}
	return false
}

func (x *FolderFileInfo) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GetLintsForChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lints []*GetLintsForChangeResponse_Lint `protobuf:"bytes,1,rep,name=lints,proto3" json:"lints,omitempty"`
}

func (x *GetLintsForChangeResponse) Reset() {
	*x = GetLintsForChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLintsForChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLintsForChangeResponse) ProtoMessage() {}

func (x *GetLintsForChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLintsForChangeResponse.ProtoReflect.Descriptor instead.
func (*GetLintsForChangeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{28}
}

func (x *GetLintsForChangeResponse) GetLints() []*GetLintsForChangeResponse_Lint {
	if x != nil {
		return x.Lints
	}
	return nil
}

type UserResponseToSuggestedCodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserResponseType                       UserResponseToSuggestedCodeBlock_UserResponseType `protobuf:"varint,1,opt,name=user_response_type,json=userResponseType,proto3,enum=aiserver.v1.UserResponseToSuggestedCodeBlock_UserResponseType" json:"user_response_type,omitempty"`
	FilePath                               string                                            `protobuf:"bytes,2,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	UserModificationsToSuggestedCodeBlocks *FileDiff                                         `protobuf:"bytes,3,opt,name=user_modifications_to_suggested_code_blocks,json=userModificationsToSuggestedCodeBlocks,proto3,oneof" json:"user_modifications_to_suggested_code_blocks,omitempty"`
}

func (x *UserResponseToSuggestedCodeBlock) Reset() {
	*x = UserResponseToSuggestedCodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResponseToSuggestedCodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResponseToSuggestedCodeBlock) ProtoMessage() {}

func (x *UserResponseToSuggestedCodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResponseToSuggestedCodeBlock.ProtoReflect.Descriptor instead.
func (*UserResponseToSuggestedCodeBlock) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{29}
}

func (x *UserResponseToSuggestedCodeBlock) GetUserResponseType() UserResponseToSuggestedCodeBlock_UserResponseType {
	if x != nil {
		return x.UserResponseType
	}
	return UserResponseToSuggestedCodeBlock_USER_RESPONSE_TYPE_UNSPECIFIED
}

func (x *UserResponseToSuggestedCodeBlock) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UserResponseToSuggestedCodeBlock) GetUserModificationsToSuggestedCodeBlocks() *FileDiff {
	if x != nil {
		return x.UserModificationsToSuggestedCodeBlocks
	}
	return nil
}

type RepositoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath   string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RemoteUrls              []string `protobuf:"bytes,2,rep,name=remote_urls,json=remoteUrls,proto3" json:"remote_urls,omitempty"`
	RemoteNames             []string `protobuf:"bytes,3,rep,name=remote_names,json=remoteNames,proto3" json:"remote_names,omitempty"`
	RepoName                string   `protobuf:"bytes,4,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	RepoOwner               string   `protobuf:"bytes,5,opt,name=repo_owner,json=repoOwner,proto3" json:"repo_owner,omitempty"`
	IsTracked               bool     `protobuf:"varint,6,opt,name=is_tracked,json=isTracked,proto3" json:"is_tracked,omitempty"`
	IsLocal                 bool     `protobuf:"varint,7,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	NumFiles                *int32   `protobuf:"varint,8,opt,name=num_files,json=numFiles,proto3,oneof" json:"num_files,omitempty"`
	OrthogonalTransformSeed *float64 `protobuf:"fixed64,9,opt,name=orthogonal_transform_seed,json=orthogonalTransformSeed,proto3,oneof" json:"orthogonal_transform_seed,omitempty"`
}

func (x *RepositoryInfo) Reset() {
	*x = RepositoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryInfo) ProtoMessage() {}

func (x *RepositoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryInfo.ProtoReflect.Descriptor instead.
func (*RepositoryInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{30}
}

func (x *RepositoryInfo) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *RepositoryInfo) GetRemoteUrls() []string {
	if x != nil {
		return x.RemoteUrls
	}
	return nil
}

func (x *RepositoryInfo) GetRemoteNames() []string {
	if x != nil {
		return x.RemoteNames
	}
	return nil
}

func (x *RepositoryInfo) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *RepositoryInfo) GetRepoOwner() string {
	if x != nil {
		return x.RepoOwner
	}
	return ""
}

func (x *RepositoryInfo) GetIsTracked() bool {
	if x != nil {
		return x.IsTracked
	}
	return false
}

func (x *RepositoryInfo) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *RepositoryInfo) GetNumFiles() int32 {
	if x != nil && x.NumFiles != nil {
		return *x.NumFiles
	}
	return 0
}

func (x *RepositoryInfo) GetOrthogonalTransformSeed() float64 {
	if x != nil && x.OrthogonalTransformSeed != nil {
		return *x.OrthogonalTransformSeed
	}
	return 0
}

type ExplicitContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     string  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	RepoContext *string `protobuf:"bytes,2,opt,name=repo_context,json=repoContext,proto3,oneof" json:"repo_context,omitempty"`
}

func (x *ExplicitContext) Reset() {
	*x = ExplicitContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitContext) ProtoMessage() {}

func (x *ExplicitContext) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitContext.ProtoReflect.Descriptor instead.
func (*ExplicitContext) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{31}
}

func (x *ExplicitContext) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ExplicitContext) GetRepoContext() string {
	if x != nil && x.RepoContext != nil {
		return *x.RepoContext
	}
	return ""
}

type ModelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName        *string     `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	ApiKey           *string     `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,oneof" json:"api_key,omitempty"`
	EnableGhostMode  *bool       `protobuf:"varint,3,opt,name=enable_ghost_mode,json=enableGhostMode,proto3,oneof" json:"enable_ghost_mode,omitempty"`
	AzureState       *AzureState `protobuf:"bytes,4,opt,name=azure_state,json=azureState,proto3,oneof" json:"azure_state,omitempty"`
	EnableSlowPool   *bool       `protobuf:"varint,5,opt,name=enable_slow_pool,json=enableSlowPool,proto3,oneof" json:"enable_slow_pool,omitempty"`
	OpenaiApiBaseUrl *string     `protobuf:"bytes,6,opt,name=openai_api_base_url,json=openaiApiBaseUrl,proto3,oneof" json:"openai_api_base_url,omitempty"`
}

func (x *ModelDetails) Reset() {
	*x = ModelDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelDetails) ProtoMessage() {}

func (x *ModelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelDetails.ProtoReflect.Descriptor instead.
func (*ModelDetails) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{32}
}

func (x *ModelDetails) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *ModelDetails) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *ModelDetails) GetEnableGhostMode() bool {
	if x != nil && x.EnableGhostMode != nil {
		return *x.EnableGhostMode
	}
	return false
}

func (x *ModelDetails) GetAzureState() *AzureState {
	if x != nil {
		return x.AzureState
	}
	return nil
}

func (x *ModelDetails) GetEnableSlowPool() bool {
	if x != nil && x.EnableSlowPool != nil {
		return *x.EnableSlowPool
	}
	return false
}

func (x *ModelDetails) GetOpenaiApiBaseUrl() string {
	if x != nil && x.OpenaiApiBaseUrl != nil {
		return *x.OpenaiApiBaseUrl
	}
	return ""
}

type AzureState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey     string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	BaseUrl    string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	Deployment string `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	UseAzure   bool   `protobuf:"varint,4,opt,name=use_azure,json=useAzure,proto3" json:"use_azure,omitempty"`
}

func (x *AzureState) Reset() {
	*x = AzureState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureState) ProtoMessage() {}

func (x *AzureState) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureState.ProtoReflect.Descriptor instead.
func (*AzureState) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{33}
}

func (x *AzureState) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *AzureState) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *AzureState) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *AzureState) GetUseAzure() bool {
	if x != nil {
		return x.UseAzure
	}
	return false
}

type LinterErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string         `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Errors                []*LinterError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	FileContents          string         `protobuf:"bytes,3,opt,name=file_contents,json=fileContents,proto3" json:"file_contents,omitempty"`
}

func (x *LinterErrors) Reset() {
	*x = LinterErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinterErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinterErrors) ProtoMessage() {}

func (x *LinterErrors) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinterErrors.ProtoReflect.Descriptor instead.
func (*LinterErrors) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{34}
}

func (x *LinterErrors) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *LinterErrors) GetErrors() []*LinterError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *LinterErrors) GetFileContents() string {
	if x != nil {
		return x.FileContents
	}
	return ""
}

type LinterError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                            `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range              *CursorRange                      `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Source             *string                           `protobuf:"bytes,3,opt,name=source,proto3,oneof" json:"source,omitempty"`
	RelatedInformation []*LinterError_RelatedInformation `protobuf:"bytes,4,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
	Severity           *LinterError_DiagnosticSeverity   `protobuf:"varint,5,opt,name=severity,proto3,enum=aiserver.v1.LinterError_DiagnosticSeverity,oneof" json:"severity,omitempty"`
}

func (x *LinterError) Reset() {
	*x = LinterError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinterError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinterError) ProtoMessage() {}

func (x *LinterError) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinterError.ProtoReflect.Descriptor instead.
func (*LinterError) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{35}
}

func (x *LinterError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LinterError) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *LinterError) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *LinterError) GetRelatedInformation() []*LinterError_RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

func (x *LinterError) GetSeverity() LinterError_DiagnosticSeverity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return LinterError_DIAGNOSTIC_SEVERITY_UNSPECIFIED
}

type ChatQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markdown     string `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
	BubbleId     string `protobuf:"bytes,2,opt,name=bubble_id,json=bubbleId,proto3" json:"bubble_id,omitempty"`
	SectionIndex int32  `protobuf:"varint,3,opt,name=section_index,json=sectionIndex,proto3" json:"section_index,omitempty"`
}

func (x *ChatQuote) Reset() {
	*x = ChatQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatQuote) ProtoMessage() {}

func (x *ChatQuote) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatQuote.ProtoReflect.Descriptor instead.
func (*ChatQuote) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{36}
}

func (x *ChatQuote) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

func (x *ChatQuote) GetBubbleId() string {
	if x != nil {
		return x.BubbleId
	}
	return ""
}

func (x *ChatQuote) GetSectionIndex() int32 {
	if x != nil {
		return x.SectionIndex
	}
	return 0
}

type DebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Breakpoint *DebugInfo_Breakpoint       `protobuf:"bytes,1,opt,name=breakpoint,proto3" json:"breakpoint,omitempty"`
	CallStack  []*DebugInfo_CallStackFrame `protobuf:"bytes,2,rep,name=call_stack,json=callStack,proto3" json:"call_stack,omitempty"`
	History    []*CodeBlock                `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *DebugInfo) Reset() {
	*x = DebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo) ProtoMessage() {}

func (x *DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo.ProtoReflect.Descriptor instead.
func (*DebugInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{37}
}

func (x *DebugInfo) GetBreakpoint() *DebugInfo_Breakpoint {
	if x != nil {
		return x.Breakpoint
	}
	return nil
}

func (x *DebugInfo) GetCallStack() []*DebugInfo_CallStackFrame {
	if x != nil {
		return x.CallStack
	}
	return nil
}

func (x *DebugInfo) GetHistory() []*CodeBlock {
	if x != nil {
		return x.History
	}
	return nil
}

type ChatExternalLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ChatExternalLink) Reset() {
	*x = ChatExternalLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatExternalLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatExternalLink) ProtoMessage() {}

func (x *ChatExternalLink) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatExternalLink.ProtoReflect.Descriptor instead.
func (*ChatExternalLink) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{38}
}

func (x *ChatExternalLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ChatExternalLink) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CommitNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note       string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	CommitHash string `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
}

func (x *CommitNote) Reset() {
	*x = CommitNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitNote) ProtoMessage() {}

func (x *CommitNote) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitNote.ProtoReflect.Descriptor instead.
func (*CommitNote) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{39}
}

func (x *CommitNote) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CommitNote) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type ContextAST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*ContainerTree `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ContextAST) Reset() {
	*x = ContextAST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextAST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextAST) ProtoMessage() {}

func (x *ContextAST) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextAST.ProtoReflect.Descriptor instead.
func (*ContextAST) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{40}
}

func (x *ContextAST) GetFiles() []*ContainerTree {
	if x != nil {
		return x.Files
	}
	return nil
}

type ContainerTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string               `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Nodes                 []*ContainerTreeNode `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ContainerTree) Reset() {
	*x = ContainerTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTree) ProtoMessage() {}

func (x *ContainerTree) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTree.ProtoReflect.Descriptor instead.
func (*ContainerTree) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{41}
}

func (x *ContainerTree) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ContainerTree) GetNodes() []*ContainerTreeNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ContainerTreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container *ContainerTreeNode_Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Blob      *ContainerTreeNode_Blob      `protobuf:"bytes,2,opt,name=blob,proto3" json:"blob,omitempty"`
	Symbol    *ContainerTreeNode_Symbol    `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *ContainerTreeNode) Reset() {
	*x = ContainerTreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode) ProtoMessage() {}

func (x *ContainerTreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42}
}

func (x *ContainerTreeNode) GetContainer() *ContainerTreeNode_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ContainerTreeNode) GetBlob() *ContainerTreeNode_Blob {
	if x != nil {
		return x.Blob
	}
	return nil
}

func (x *ContainerTreeNode) GetSymbol() *ContainerTreeNode_Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

type StreamChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                    string                            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	DebuggingOnlyChatPrompt *string                           `protobuf:"bytes,2,opt,name=debugging_only_chat_prompt,json=debuggingOnlyChatPrompt,proto3,oneof" json:"debugging_only_chat_prompt,omitempty"`
	DebuggingOnlyTokenCount *int32                            `protobuf:"varint,3,opt,name=debugging_only_token_count,json=debuggingOnlyTokenCount,proto3,oneof" json:"debugging_only_token_count,omitempty"`
	DocumentCitation        *DocumentationCitation            `protobuf:"bytes,4,opt,name=document_citation,json=documentCitation,proto3" json:"document_citation,omitempty"`
	FilledPrompt            *string                           `protobuf:"bytes,5,opt,name=filled_prompt,json=filledPrompt,proto3,oneof" json:"filled_prompt,omitempty"`
	IsBigFile               *bool                             `protobuf:"varint,6,opt,name=is_big_file,json=isBigFile,proto3,oneof" json:"is_big_file,omitempty"`
	IntermediateText        *string                           `protobuf:"bytes,7,opt,name=intermediate_text,json=intermediateText,proto3,oneof" json:"intermediate_text,omitempty"`
	IsUsingSlowRequest      *bool                             `protobuf:"varint,10,opt,name=is_using_slow_request,json=isUsingSlowRequest,proto3,oneof" json:"is_using_slow_request,omitempty"`
	ChunkIdentity           *StreamChatResponse_ChunkIdentity `protobuf:"bytes,8,opt,name=chunk_identity,json=chunkIdentity,proto3,oneof" json:"chunk_identity,omitempty"`
	DocsReference           *DocsReference                    `protobuf:"bytes,9,opt,name=docs_reference,json=docsReference,proto3,oneof" json:"docs_reference,omitempty"`
	WebCitation             *WebCitation                      `protobuf:"bytes,11,opt,name=web_citation,json=webCitation,proto3,oneof" json:"web_citation,omitempty"`
	StatusUpdates           *StatusUpdates                    `protobuf:"bytes,12,opt,name=status_updates,json=statusUpdates,proto3,oneof" json:"status_updates,omitempty"`
}

func (x *StreamChatResponse) Reset() {
	*x = StreamChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatResponse) ProtoMessage() {}

func (x *StreamChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatResponse.ProtoReflect.Descriptor instead.
func (*StreamChatResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{43}
}

func (x *StreamChatResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChatResponse) GetDebuggingOnlyChatPrompt() string {
	if x != nil && x.DebuggingOnlyChatPrompt != nil {
		return *x.DebuggingOnlyChatPrompt
	}
	return ""
}

func (x *StreamChatResponse) GetDebuggingOnlyTokenCount() int32 {
	if x != nil && x.DebuggingOnlyTokenCount != nil {
		return *x.DebuggingOnlyTokenCount
	}
	return 0
}

func (x *StreamChatResponse) GetDocumentCitation() *DocumentationCitation {
	if x != nil {
		return x.DocumentCitation
	}
	return nil
}

func (x *StreamChatResponse) GetFilledPrompt() string {
	if x != nil && x.FilledPrompt != nil {
		return *x.FilledPrompt
	}
	return ""
}

func (x *StreamChatResponse) GetIsBigFile() bool {
	if x != nil && x.IsBigFile != nil {
		return *x.IsBigFile
	}
	return false
}

func (x *StreamChatResponse) GetIntermediateText() string {
	if x != nil && x.IntermediateText != nil {
		return *x.IntermediateText
	}
	return ""
}

func (x *StreamChatResponse) GetIsUsingSlowRequest() bool {
	if x != nil && x.IsUsingSlowRequest != nil {
		return *x.IsUsingSlowRequest
	}
	return false
}

func (x *StreamChatResponse) GetChunkIdentity() *StreamChatResponse_ChunkIdentity {
	if x != nil {
		return x.ChunkIdentity
	}
	return nil
}

func (x *StreamChatResponse) GetDocsReference() *DocsReference {
	if x != nil {
		return x.DocsReference
	}
	return nil
}

func (x *StreamChatResponse) GetWebCitation() *WebCitation {
	if x != nil {
		return x.WebCitation
	}
	return nil
}

func (x *StreamChatResponse) GetStatusUpdates() *StatusUpdates {
	if x != nil {
		return x.StatusUpdates
	}
	return nil
}

type DocumentationCitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks []*DocumentationChunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *DocumentationCitation) Reset() {
	*x = DocumentationCitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationCitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationCitation) ProtoMessage() {}

func (x *DocumentationCitation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationCitation.ProtoReflect.Descriptor instead.
func (*DocumentationCitation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{44}
}

func (x *DocumentationCitation) GetChunks() []*DocumentationChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

type DocumentationChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocName            string  `protobuf:"bytes,1,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	PageUrl            string  `protobuf:"bytes,2,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	DocumentationChunk string  `protobuf:"bytes,3,opt,name=documentation_chunk,json=documentationChunk,proto3" json:"documentation_chunk,omitempty"`
	Score              float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
	PageTitle          string  `protobuf:"bytes,5,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
}

func (x *DocumentationChunk) Reset() {
	*x = DocumentationChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationChunk) ProtoMessage() {}

func (x *DocumentationChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationChunk.ProtoReflect.Descriptor instead.
func (*DocumentationChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{45}
}

func (x *DocumentationChunk) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *DocumentationChunk) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *DocumentationChunk) GetDocumentationChunk() string {
	if x != nil {
		return x.DocumentationChunk
	}
	return ""
}

func (x *DocumentationChunk) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DocumentationChunk) GetPageTitle() string {
	if x != nil {
		return x.PageTitle
	}
	return ""
}

type DocsReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DocsReference) Reset() {
	*x = DocsReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocsReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocsReference) ProtoMessage() {}

func (x *DocsReference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocsReference.ProtoReflect.Descriptor instead.
func (*DocsReference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{46}
}

func (x *DocsReference) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocsReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type WebCitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	References []*WebReference `protobuf:"bytes,1,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *WebCitation) Reset() {
	*x = WebCitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebCitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebCitation) ProtoMessage() {}

func (x *WebCitation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebCitation.ProtoReflect.Descriptor instead.
func (*WebCitation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{47}
}

func (x *WebCitation) GetReferences() []*WebReference {
	if x != nil {
		return x.References
	}
	return nil
}

type WebReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Url   string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *WebReference) Reset() {
	*x = WebReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebReference) ProtoMessage() {}

func (x *WebReference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebReference.ProtoReflect.Descriptor instead.
func (*WebReference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{48}
}

func (x *WebReference) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WebReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type StatusUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*StatusUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *StatusUpdates) Reset() {
	*x = StatusUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdates) ProtoMessage() {}

func (x *StatusUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdates.ProtoReflect.Descriptor instead.
func (*StatusUpdates) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{49}
}

func (x *StatusUpdates) GetUpdates() []*StatusUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message  string  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Metadata *string `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{50}
}

func (x *StatusUpdate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *StatusUpdate) GetMetadata() string {
	if x != nil && x.Metadata != nil {
		return *x.Metadata
	}
	return ""
}

type RerankDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     string      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Documents []*Document `protobuf:"bytes,2,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *RerankDocumentsRequest) Reset() {
	*x = RerankDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankDocumentsRequest) ProtoMessage() {}

func (x *RerankDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankDocumentsRequest.ProtoReflect.Descriptor instead.
func (*RerankDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{51}
}

func (x *RerankDocumentsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RerankDocumentsRequest) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{52}
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RerankDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Documents []*DocumentIdsWithScores `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
}

func (x *RerankDocumentsResponse) Reset() {
	*x = RerankDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankDocumentsResponse) ProtoMessage() {}

func (x *RerankDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankDocumentsResponse.ProtoReflect.Descriptor instead.
func (*RerankDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{53}
}

func (x *RerankDocumentsResponse) GetDocuments() []*DocumentIdsWithScores {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DocumentIdsWithScores struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocumentId string  `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Score      float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DocumentIdsWithScores) Reset() {
	*x = DocumentIdsWithScores{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentIdsWithScores) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentIdsWithScores) ProtoMessage() {}

func (x *DocumentIdsWithScores) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentIdsWithScores.ProtoReflect.Descriptor instead.
func (*DocumentIdsWithScores) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{54}
}

func (x *DocumentIdsWithScores) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *DocumentIdsWithScores) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type GetComposerChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation                       []*ConversationMessage            `protobuf:"bytes,1,rep,name=conversation,proto3" json:"conversation,omitempty"`
	AllowLongFileScan                  *bool                             `protobuf:"varint,2,opt,name=allow_long_file_scan,json=allowLongFileScan,proto3,oneof" json:"allow_long_file_scan,omitempty"`
	ExplicitContext                    *ExplicitContext                  `protobuf:"bytes,3,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	CanHandleFilenamesAfterLanguageIds *bool                             `protobuf:"varint,4,opt,name=can_handle_filenames_after_language_ids,json=canHandleFilenamesAfterLanguageIds,proto3,oneof" json:"can_handle_filenames_after_language_ids,omitempty"`
	ModelDetails                       *ModelDetails                     `protobuf:"bytes,5,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	LinterErrors                       *LinterErrors                     `protobuf:"bytes,6,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	DocumentationIdentifiers           []string                          `protobuf:"bytes,7,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	UseWeb                             *string                           `protobuf:"bytes,8,opt,name=use_web,json=useWeb,proto3,oneof" json:"use_web,omitempty"`
	ExternalLinks                      []*ComposerExternalLink           `protobuf:"bytes,9,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
	ProjectContext                     *ConversationMessage              `protobuf:"bytes,10,opt,name=project_context,json=projectContext,proto3,oneof" json:"project_context,omitempty"`
	DiffsForCompressingFiles           []*GetComposerChatRequest_RedDiff `protobuf:"bytes,11,rep,name=diffs_for_compressing_files,json=diffsForCompressingFiles,proto3" json:"diffs_for_compressing_files,omitempty"`
	CompressEdits                      *bool                             `protobuf:"varint,12,opt,name=compress_edits,json=compressEdits,proto3,oneof" json:"compress_edits,omitempty"`
	ShouldCache                        *bool                             `protobuf:"varint,13,opt,name=should_cache,json=shouldCache,proto3,oneof" json:"should_cache,omitempty"`
	MultiFileLinterErrors              []*LinterErrors                   `protobuf:"bytes,14,rep,name=multi_file_linter_errors,json=multiFileLinterErrors,proto3" json:"multi_file_linter_errors,omitempty"`
}

func (x *GetComposerChatRequest) Reset() {
	*x = GetComposerChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComposerChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComposerChatRequest) ProtoMessage() {}

func (x *GetComposerChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComposerChatRequest.ProtoReflect.Descriptor instead.
func (*GetComposerChatRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{55}
}

func (x *GetComposerChatRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *GetComposerChatRequest) GetAllowLongFileScan() bool {
	if x != nil && x.AllowLongFileScan != nil {
		return *x.AllowLongFileScan
	}
	return false
}

func (x *GetComposerChatRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *GetComposerChatRequest) GetCanHandleFilenamesAfterLanguageIds() bool {
	if x != nil && x.CanHandleFilenamesAfterLanguageIds != nil {
		return *x.CanHandleFilenamesAfterLanguageIds
	}
	return false
}

func (x *GetComposerChatRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *GetComposerChatRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *GetComposerChatRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *GetComposerChatRequest) GetUseWeb() string {
	if x != nil && x.UseWeb != nil {
		return *x.UseWeb
	}
	return ""
}

func (x *GetComposerChatRequest) GetExternalLinks() []*ComposerExternalLink {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

func (x *GetComposerChatRequest) GetProjectContext() *ConversationMessage {
	if x != nil {
		return x.ProjectContext
	}
	return nil
}

func (x *GetComposerChatRequest) GetDiffsForCompressingFiles() []*GetComposerChatRequest_RedDiff {
	if x != nil {
		return x.DiffsForCompressingFiles
	}
	return nil
}

func (x *GetComposerChatRequest) GetCompressEdits() bool {
	if x != nil && x.CompressEdits != nil {
		return *x.CompressEdits
	}
	return false
}

func (x *GetComposerChatRequest) GetShouldCache() bool {
	if x != nil && x.ShouldCache != nil {
		return *x.ShouldCache
	}
	return false
}

func (x *GetComposerChatRequest) GetMultiFileLinterErrors() []*LinterErrors {
	if x != nil {
		return x.MultiFileLinterErrors
	}
	return nil
}

type ComposerExternalLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ComposerExternalLink) Reset() {
	*x = ComposerExternalLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposerExternalLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposerExternalLink) ProtoMessage() {}

func (x *ComposerExternalLink) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposerExternalLink.ProtoReflect.Descriptor instead.
func (*ComposerExternalLink) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{56}
}

func (x *ComposerExternalLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ComposerExternalLink) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type StreamChatContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile                        *CurrentFileInfo                      `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation                       []*ConversationMessage                `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories                       []*RepositoryInfo                     `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext                    *ExplicitContext                      `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath                  *string                               `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	CodeBlocks                         []*CodeBlock                          `protobuf:"bytes,6,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails                       *ModelDetails                         `protobuf:"bytes,7,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers           []string                              `protobuf:"bytes,8,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	Query                              string                                `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
	CodeContext                        *StreamChatContextRequest_CodeContext `protobuf:"bytes,10,opt,name=code_context,json=codeContext,proto3" json:"code_context,omitempty"`
	RerankResults                      bool                                  `protobuf:"varint,11,opt,name=rerank_results,json=rerankResults,proto3" json:"rerank_results,omitempty"`
	FileSearchResults                  *FullFileSearchResult                 `protobuf:"bytes,12,opt,name=file_search_results,json=fileSearchResults,proto3" json:"file_search_results,omitempty"`
	CodeSearchResults                  *CodeSearchResult                     `protobuf:"bytes,13,opt,name=code_search_results,json=codeSearchResults,proto3" json:"code_search_results,omitempty"`
	LinterErrors                       *LinterErrors                         `protobuf:"bytes,14,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	IsBash                             *bool                                 `protobuf:"varint,15,opt,name=is_bash,json=isBash,proto3,oneof" json:"is_bash,omitempty"`
	RerankResultsV2                    bool                                  `protobuf:"varint,16,opt,name=rerank_results_v2,json=rerankResultsV2,proto3" json:"rerank_results_v2,omitempty"`
	ConversationId                     string                                `protobuf:"bytes,17,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	CanHandleFilenamesAfterLanguageIds bool                                  `protobuf:"varint,18,opt,name=can_handle_filenames_after_language_ids,json=canHandleFilenamesAfterLanguageIds,proto3" json:"can_handle_filenames_after_language_ids,omitempty"`
	LongContextMode                    bool                                  `protobuf:"varint,19,opt,name=long_context_mode,json=longContextMode,proto3" json:"long_context_mode,omitempty"`
	IsEval                             bool                                  `protobuf:"varint,20,opt,name=is_eval,json=isEval,proto3" json:"is_eval,omitempty"`
	RequestId                          string                                `protobuf:"bytes,21,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DesiredMaxTokens                   *int32                                `protobuf:"varint,22,opt,name=desired_max_tokens,json=desiredMaxTokens,proto3,oneof" json:"desired_max_tokens,omitempty"`
	RunnableCodeBlocks                 *bool                                 `protobuf:"varint,23,opt,name=runnable_code_blocks,json=runnableCodeBlocks,proto3,oneof" json:"runnable_code_blocks,omitempty"`
}

func (x *StreamChatContextRequest) Reset() {
	*x = StreamChatContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatContextRequest) ProtoMessage() {}

func (x *StreamChatContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatContextRequest.ProtoReflect.Descriptor instead.
func (*StreamChatContextRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{57}
}

func (x *StreamChatContextRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamChatContextRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamChatContextRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamChatContextRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamChatContextRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamChatContextRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *StreamChatContextRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamChatContextRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *StreamChatContextRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamChatContextRequest) GetCodeContext() *StreamChatContextRequest_CodeContext {
	if x != nil {
		return x.CodeContext
	}
	return nil
}

func (x *StreamChatContextRequest) GetRerankResults() bool {
	if x != nil {
		return x.RerankResults
	}
	return false
}

func (x *StreamChatContextRequest) GetFileSearchResults() *FullFileSearchResult {
	if x != nil {
		return x.FileSearchResults
	}
	return nil
}

func (x *StreamChatContextRequest) GetCodeSearchResults() *CodeSearchResult {
	if x != nil {
		return x.CodeSearchResults
	}
	return nil
}

func (x *StreamChatContextRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *StreamChatContextRequest) GetIsBash() bool {
	if x != nil && x.IsBash != nil {
		return *x.IsBash
	}
	return false
}

func (x *StreamChatContextRequest) GetRerankResultsV2() bool {
	if x != nil {
		return x.RerankResultsV2
	}
	return false
}

func (x *StreamChatContextRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *StreamChatContextRequest) GetCanHandleFilenamesAfterLanguageIds() bool {
	if x != nil {
		return x.CanHandleFilenamesAfterLanguageIds
	}
	return false
}

func (x *StreamChatContextRequest) GetLongContextMode() bool {
	if x != nil {
		return x.LongContextMode
	}
	return false
}

func (x *StreamChatContextRequest) GetIsEval() bool {
	if x != nil {
		return x.IsEval
	}
	return false
}

func (x *StreamChatContextRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StreamChatContextRequest) GetDesiredMaxTokens() int32 {
	if x != nil && x.DesiredMaxTokens != nil {
		return *x.DesiredMaxTokens
	}
	return 0
}

func (x *StreamChatContextRequest) GetRunnableCodeBlocks() bool {
	if x != nil && x.RunnableCodeBlocks != nil {
		return *x.RunnableCodeBlocks
	}
	return false
}

type CodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeBlock *CodeBlock `protobuf:"bytes,1,opt,name=code_block,json=codeBlock,proto3" json:"code_block,omitempty"`
	Score     float32    `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CodeResult) Reset() {
	*x = CodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeResult) ProtoMessage() {}

func (x *CodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeResult.ProtoReflect.Descriptor instead.
func (*CodeResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{58}
}

func (x *CodeResult) GetCodeBlock() *CodeBlock {
	if x != nil {
		return x.CodeBlock
	}
	return nil
}

func (x *CodeResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type FullFileSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FileResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *FullFileSearchResult) Reset() {
	*x = FullFileSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullFileSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullFileSearchResult) ProtoMessage() {}

func (x *FullFileSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullFileSearchResult.ProtoReflect.Descriptor instead.
func (*FullFileSearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{59}
}

func (x *FullFileSearchResult) GetResults() []*FileResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  *File   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *FileResult) Reset() {
	*x = FileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResult) ProtoMessage() {}

func (x *FileResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResult.ProtoReflect.Descriptor instead.
func (*FileResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{60}
}

func (x *FileResult) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{61}
}

func (x *File) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *File) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type CodeSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CodeResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CodeSearchResult) Reset() {
	*x = CodeSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSearchResult) ProtoMessage() {}

func (x *CodeSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSearchResult.ProtoReflect.Descriptor instead.
func (*CodeSearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{62}
}

func (x *CodeSearchResult) GetResults() []*CodeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type StreamChatContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                    string                                   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	DebuggingOnlyChatPrompt *string                                  `protobuf:"bytes,2,opt,name=debugging_only_chat_prompt,json=debuggingOnlyChatPrompt,proto3,oneof" json:"debugging_only_chat_prompt,omitempty"`
	DebuggingOnlyTokenCount *int32                                   `protobuf:"varint,3,opt,name=debugging_only_token_count,json=debuggingOnlyTokenCount,proto3,oneof" json:"debugging_only_token_count,omitempty"`
	DocumentCitation        *DocumentationCitation                   `protobuf:"bytes,4,opt,name=document_citation,json=documentCitation,proto3" json:"document_citation,omitempty"`
	FilledPrompt            *string                                  `protobuf:"bytes,5,opt,name=filled_prompt,json=filledPrompt,proto3,oneof" json:"filled_prompt,omitempty"`
	UsedCode                *StreamChatContextResponse_UsedCode      `protobuf:"bytes,6,opt,name=used_code,json=usedCode,proto3" json:"used_code,omitempty"`
	CodeLink                *StreamChatContextResponse_CodeLink      `protobuf:"bytes,7,opt,name=code_link,json=codeLink,proto3" json:"code_link,omitempty"`
	ChunkIdentity           *StreamChatContextResponse_ChunkIdentity `protobuf:"bytes,8,opt,name=chunk_identity,json=chunkIdentity,proto3,oneof" json:"chunk_identity,omitempty"`
	DocsReference           *DocsReference                           `protobuf:"bytes,9,opt,name=docs_reference,json=docsReference,proto3,oneof" json:"docs_reference,omitempty"`
}

func (x *StreamChatContextResponse) Reset() {
	*x = StreamChatContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatContextResponse) ProtoMessage() {}

func (x *StreamChatContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatContextResponse.ProtoReflect.Descriptor instead.
func (*StreamChatContextResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{63}
}

func (x *StreamChatContextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChatContextResponse) GetDebuggingOnlyChatPrompt() string {
	if x != nil && x.DebuggingOnlyChatPrompt != nil {
		return *x.DebuggingOnlyChatPrompt
	}
	return ""
}

func (x *StreamChatContextResponse) GetDebuggingOnlyTokenCount() int32 {
	if x != nil && x.DebuggingOnlyTokenCount != nil {
		return *x.DebuggingOnlyTokenCount
	}
	return 0
}

func (x *StreamChatContextResponse) GetDocumentCitation() *DocumentationCitation {
	if x != nil {
		return x.DocumentCitation
	}
	return nil
}

func (x *StreamChatContextResponse) GetFilledPrompt() string {
	if x != nil && x.FilledPrompt != nil {
		return *x.FilledPrompt
	}
	return ""
}

func (x *StreamChatContextResponse) GetUsedCode() *StreamChatContextResponse_UsedCode {
	if x != nil {
		return x.UsedCode
	}
	return nil
}

func (x *StreamChatContextResponse) GetCodeLink() *StreamChatContextResponse_CodeLink {
	if x != nil {
		return x.CodeLink
	}
	return nil
}

func (x *StreamChatContextResponse) GetChunkIdentity() *StreamChatContextResponse_ChunkIdentity {
	if x != nil {
		return x.ChunkIdentity
	}
	return nil
}

func (x *StreamChatContextResponse) GetDocsReference() *DocsReference {
	if x != nil {
		return x.DocsReference
	}
	return nil
}

type WarmComposerCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidWarmCache bool `protobuf:"varint,1,opt,name=did_warm_cache,json=didWarmCache,proto3" json:"did_warm_cache,omitempty"`
}

func (x *WarmComposerCacheResponse) Reset() {
	*x = WarmComposerCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarmComposerCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarmComposerCacheResponse) ProtoMessage() {}

func (x *WarmComposerCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarmComposerCacheResponse.ProtoReflect.Descriptor instead.
func (*WarmComposerCacheResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{64}
}

func (x *WarmComposerCacheResponse) GetDidWarmCache() bool {
	if x != nil {
		return x.DidWarmCache
	}
	return false
}

type GetChatTitleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
}

func (x *GetChatTitleRequest) Reset() {
	*x = GetChatTitleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatTitleRequest) ProtoMessage() {}

func (x *GetChatTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatTitleRequest.ProtoReflect.Descriptor instead.
func (*GetChatTitleRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{65}
}

func (x *GetChatTitleRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

type GetChatTitleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *GetChatTitleResponse) Reset() {
	*x = GetChatTitleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatTitleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatTitleResponse) ProtoMessage() {}

func (x *GetChatTitleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatTitleResponse.ProtoReflect.Descriptor instead.
func (*GetChatTitleResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{66}
}

func (x *GetChatTitleResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileIdentifier        *UniqueFileIdentifier `protobuf:"bytes,1,opt,name=file_identifier,json=fileIdentifier,proto3" json:"file_identifier,omitempty"`
	CursorPosition        *CursorPosition       `protobuf:"bytes,2,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
	SurroundingLines      *SurroundingLines     `protobuf:"bytes,3,opt,name=surrounding_lines,json=surroundingLines,proto3" json:"surrounding_lines,omitempty"`
	ExplicitContext       *ExplicitContext      `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	SuggestionsFromEditor []string              `protobuf:"bytes,5,rep,name=suggestions_from_editor,json=suggestionsFromEditor,proto3" json:"suggestions_from_editor,omitempty"`
}

func (x *GetCompletionRequest) Reset() {
	*x = GetCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletionRequest) ProtoMessage() {}

func (x *GetCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletionRequest.ProtoReflect.Descriptor instead.
func (*GetCompletionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{67}
}

func (x *GetCompletionRequest) GetFileIdentifier() *UniqueFileIdentifier {
	if x != nil {
		return x.FileIdentifier
	}
	return nil
}

func (x *GetCompletionRequest) GetCursorPosition() *CursorPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

func (x *GetCompletionRequest) GetSurroundingLines() *SurroundingLines {
	if x != nil {
		return x.SurroundingLines
	}
	return nil
}

func (x *GetCompletionRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *GetCompletionRequest) GetSuggestionsFromEditor() []string {
	if x != nil {
		return x.SuggestionsFromEditor
	}
	return nil
}

type UniqueFileIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectUuid  string  `protobuf:"bytes,1,opt,name=project_uuid,json=projectUuid,proto3" json:"project_uuid,omitempty"`
	RelativePath string  `protobuf:"bytes,2,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	LanguageId   *string `protobuf:"bytes,3,opt,name=language_id,json=languageId,proto3,oneof" json:"language_id,omitempty"`
}

func (x *UniqueFileIdentifier) Reset() {
	*x = UniqueFileIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueFileIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueFileIdentifier) ProtoMessage() {}

func (x *UniqueFileIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueFileIdentifier.ProtoReflect.Descriptor instead.
func (*UniqueFileIdentifier) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{68}
}

func (x *UniqueFileIdentifier) GetProjectUuid() string {
	if x != nil {
		return x.ProjectUuid
	}
	return ""
}

func (x *UniqueFileIdentifier) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *UniqueFileIdentifier) GetLanguageId() string {
	if x != nil && x.LanguageId != nil {
		return *x.LanguageId
	}
	return ""
}

type SurroundingLines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine int32    `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	Lines     []string `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *SurroundingLines) Reset() {
	*x = SurroundingLines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurroundingLines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurroundingLines) ProtoMessage() {}

func (x *SurroundingLines) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurroundingLines.ProtoReflect.Descriptor instead.
func (*SurroundingLines) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{69}
}

func (x *SurroundingLines) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *SurroundingLines) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type GetCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Completion                    string  `protobuf:"bytes,1,opt,name=completion,proto3" json:"completion,omitempty"`
	Score                         float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	DebuggingOnlyCompletionPrompt *string `protobuf:"bytes,3,opt,name=debugging_only_completion_prompt,json=debuggingOnlyCompletionPrompt,proto3,oneof" json:"debugging_only_completion_prompt,omitempty"`
}

func (x *GetCompletionResponse) Reset() {
	*x = GetCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletionResponse) ProtoMessage() {}

func (x *GetCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetCompletionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{70}
}

func (x *GetCompletionResponse) GetCompletion() string {
	if x != nil {
		return x.Completion
	}
	return ""
}

func (x *GetCompletionResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetCompletionResponse) GetDebuggingOnlyCompletionPrompt() string {
	if x != nil && x.DebuggingOnlyCompletionPrompt != nil {
		return *x.DebuggingOnlyCompletionPrompt
	}
	return ""
}

type GetSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query             string            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Repositories      []*RepositoryInfo `protobuf:"bytes,2,rep,name=repositories,proto3" json:"repositories,omitempty"`
	TopK              int32             `protobuf:"varint,3,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	RestrictToBuckets []string          `protobuf:"bytes,4,rep,name=restrict_to_buckets,json=restrictToBuckets,proto3" json:"restrict_to_buckets,omitempty"`
}

func (x *GetSearchRequest) Reset() {
	*x = GetSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchRequest) ProtoMessage() {}

func (x *GetSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchRequest.ProtoReflect.Descriptor instead.
func (*GetSearchRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{71}
}

func (x *GetSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetSearchRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *GetSearchRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *GetSearchRequest) GetRestrictToBuckets() []string {
	if x != nil {
		return x.RestrictToBuckets
	}
	return nil
}

type GetSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*FileSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetSearchResponse) Reset() {
	*x = GetSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSearchResponse) ProtoMessage() {}

func (x *GetSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSearchResponse.ProtoReflect.Descriptor instead.
func (*GetSearchResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{72}
}

func (x *GetSearchResponse) GetResults() []*FileSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type FileSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryRelativeWorkspacePath string  `protobuf:"bytes,1,opt,name=repository_relative_workspace_path,json=repositoryRelativeWorkspacePath,proto3" json:"repository_relative_workspace_path,omitempty"`
	FileRelativeRepositoryPath      string  `protobuf:"bytes,2,opt,name=file_relative_repository_path,json=fileRelativeRepositoryPath,proto3" json:"file_relative_repository_path,omitempty"`
	Chunk                           string  `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Distance                        float32 `protobuf:"fixed32,4,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *FileSearchResult) Reset() {
	*x = FileSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSearchResult) ProtoMessage() {}

func (x *FileSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSearchResult.ProtoReflect.Descriptor instead.
func (*FileSearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{73}
}

func (x *FileSearchResult) GetRepositoryRelativeWorkspacePath() string {
	if x != nil {
		return x.RepositoryRelativeWorkspacePath
	}
	return ""
}

func (x *FileSearchResult) GetFileRelativeRepositoryPath() string {
	if x != nil {
		return x.FileRelativeRepositoryPath
	}
	return ""
}

func (x *FileSearchResult) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *FileSearchResult) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type StreamInlineEditsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile     *CurrentFileInfo  `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Prompt          string            `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Repositories    []*RepositoryInfo `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext *ExplicitContext  `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
}

func (x *StreamInlineEditsRequest) Reset() {
	*x = StreamInlineEditsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInlineEditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInlineEditsRequest) ProtoMessage() {}

func (x *StreamInlineEditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInlineEditsRequest.ProtoReflect.Descriptor instead.
func (*StreamInlineEditsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{74}
}

func (x *StreamInlineEditsRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamInlineEditsRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *StreamInlineEditsRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamInlineEditsRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

type StreamInlineEditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line                    string  `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	DebuggingOnlyPrompt     *string `protobuf:"bytes,2,opt,name=debugging_only_prompt,json=debuggingOnlyPrompt,proto3,oneof" json:"debugging_only_prompt,omitempty"`
	DebuggingOnlyTokenCount *int32  `protobuf:"varint,3,opt,name=debugging_only_token_count,json=debuggingOnlyTokenCount,proto3,oneof" json:"debugging_only_token_count,omitempty"`
}

func (x *StreamInlineEditsResponse) Reset() {
	*x = StreamInlineEditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInlineEditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInlineEditsResponse) ProtoMessage() {}

func (x *StreamInlineEditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInlineEditsResponse.ProtoReflect.Descriptor instead.
func (*StreamInlineEditsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{75}
}

func (x *StreamInlineEditsResponse) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

func (x *StreamInlineEditsResponse) GetDebuggingOnlyPrompt() string {
	if x != nil && x.DebuggingOnlyPrompt != nil {
		return *x.DebuggingOnlyPrompt
	}
	return ""
}

func (x *StreamInlineEditsResponse) GetDebuggingOnlyTokenCount() int32 {
	if x != nil && x.DebuggingOnlyTokenCount != nil {
		return *x.DebuggingOnlyTokenCount
	}
	return 0
}

type SummarizeConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidSummarize bool   `protobuf:"varint,1,opt,name=did_summarize,json=didSummarize,proto3" json:"did_summarize,omitempty"`
	UpUntilIndex int32  `protobuf:"varint,2,opt,name=up_until_index,json=upUntilIndex,proto3" json:"up_until_index,omitempty"`
	Summary      string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *SummarizeConversationResponse) Reset() {
	*x = SummarizeConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeConversationResponse) ProtoMessage() {}

func (x *SummarizeConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeConversationResponse.ProtoReflect.Descriptor instead.
func (*SummarizeConversationResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{76}
}

func (x *SummarizeConversationResponse) GetDidSummarize() bool {
	if x != nil {
		return x.DidSummarize
	}
	return false
}

func (x *SummarizeConversationResponse) GetUpUntilIndex() int32 {
	if x != nil {
		return x.UpUntilIndex
	}
	return 0
}

func (x *SummarizeConversationResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type IsolatedTreesitterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileContent string `protobuf:"bytes,1,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	LanguageId  string `protobuf:"bytes,2,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	CommandId   string `protobuf:"bytes,3,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *IsolatedTreesitterRequest) Reset() {
	*x = IsolatedTreesitterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsolatedTreesitterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsolatedTreesitterRequest) ProtoMessage() {}

func (x *IsolatedTreesitterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsolatedTreesitterRequest.ProtoReflect.Descriptor instead.
func (*IsolatedTreesitterRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{77}
}

func (x *IsolatedTreesitterRequest) GetFileContent() string {
	if x != nil {
		return x.FileContent
	}
	return ""
}

func (x *IsolatedTreesitterRequest) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *IsolatedTreesitterRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

type IsolatedTreesitterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*IsolatedTreesitterResponse_TreesitterSymbolNameItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *IsolatedTreesitterResponse) Reset() {
	*x = IsolatedTreesitterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsolatedTreesitterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsolatedTreesitterResponse) ProtoMessage() {}

func (x *IsolatedTreesitterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsolatedTreesitterResponse.ProtoReflect.Descriptor instead.
func (*IsolatedTreesitterResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{78}
}

func (x *IsolatedTreesitterResponse) GetItems() []*IsolatedTreesitterResponse_TreesitterSymbolNameItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetSimplePromptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query             string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	AnswerPlaceholder string `protobuf:"bytes,2,opt,name=answer_placeholder,json=answerPlaceholder,proto3" json:"answer_placeholder,omitempty"`
}

func (x *GetSimplePromptRequest) Reset() {
	*x = GetSimplePromptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimplePromptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimplePromptRequest) ProtoMessage() {}

func (x *GetSimplePromptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimplePromptRequest.ProtoReflect.Descriptor instead.
func (*GetSimplePromptRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{79}
}

func (x *GetSimplePromptRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetSimplePromptRequest) GetAnswerPlaceholder() string {
	if x != nil {
		return x.AnswerPlaceholder
	}
	return ""
}

type GetSimplePromptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GetSimplePromptResponse) Reset() {
	*x = GetSimplePromptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimplePromptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimplePromptResponse) ProtoMessage() {}

func (x *GetSimplePromptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimplePromptResponse.ProtoReflect.Descriptor instead.
func (*GetSimplePromptResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{80}
}

func (x *GetSimplePromptResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type CheckLongFilesFitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DidFit bool `protobuf:"varint,1,opt,name=did_fit,json=didFit,proto3" json:"did_fit,omitempty"`
}

func (x *CheckLongFilesFitResponse) Reset() {
	*x = CheckLongFilesFitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckLongFilesFitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckLongFilesFitResponse) ProtoMessage() {}

func (x *CheckLongFilesFitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckLongFilesFitResponse.ProtoReflect.Descriptor instead.
func (*CheckLongFilesFitResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{81}
}

func (x *CheckLongFilesFitResponse) GetDidFit() bool {
	if x != nil {
		return x.DidFit
	}
	return false
}

type GetEvaluationPromptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptType        GetEvaluationPromptRequest_EvaluationPromptType `protobuf:"varint,1,opt,name=prompt_type,json=promptType,proto3,enum=aiserver.v1.GetEvaluationPromptRequest_EvaluationPromptType" json:"prompt_type,omitempty"`
	CurrentFile       *CurrentFileInfo                                `protobuf:"bytes,2,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Query             string                                          `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	BucketId          string                                          `protobuf:"bytes,4,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	QueryStrategy     string                                          `protobuf:"bytes,5,opt,name=query_strategy,json=queryStrategy,proto3" json:"query_strategy,omitempty"`
	TokenLimit        int32                                           `protobuf:"varint,6,opt,name=token_limit,json=tokenLimit,proto3" json:"token_limit,omitempty"`
	RerankingStrategy GetEvaluationPromptRequest_RerankingStrategy    `protobuf:"varint,7,opt,name=reranking_strategy,json=rerankingStrategy,proto3,enum=aiserver.v1.GetEvaluationPromptRequest_RerankingStrategy" json:"reranking_strategy,omitempty"`
}

func (x *GetEvaluationPromptRequest) Reset() {
	*x = GetEvaluationPromptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationPromptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationPromptRequest) ProtoMessage() {}

func (x *GetEvaluationPromptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationPromptRequest.ProtoReflect.Descriptor instead.
func (*GetEvaluationPromptRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{82}
}

func (x *GetEvaluationPromptRequest) GetPromptType() GetEvaluationPromptRequest_EvaluationPromptType {
	if x != nil {
		return x.PromptType
	}
	return GetEvaluationPromptRequest_EVALUATION_PROMPT_TYPE_UNSPECIFIED
}

func (x *GetEvaluationPromptRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *GetEvaluationPromptRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetEvaluationPromptRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *GetEvaluationPromptRequest) GetQueryStrategy() string {
	if x != nil {
		return x.QueryStrategy
	}
	return ""
}

func (x *GetEvaluationPromptRequest) GetTokenLimit() int32 {
	if x != nil {
		return x.TokenLimit
	}
	return 0
}

func (x *GetEvaluationPromptRequest) GetRerankingStrategy() GetEvaluationPromptRequest_RerankingStrategy {
	if x != nil {
		return x.RerankingStrategy
	}
	return GetEvaluationPromptRequest_RERANKING_STRATEGY_UNSPECIFIED
}

type GetEvaluationPromptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt              string `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	TokenCount          int32  `protobuf:"varint,2,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
	EstimatedTokenCount int32  `protobuf:"varint,3,opt,name=estimated_token_count,json=estimatedTokenCount,proto3" json:"estimated_token_count,omitempty"`
}

func (x *GetEvaluationPromptResponse) Reset() {
	*x = GetEvaluationPromptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEvaluationPromptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEvaluationPromptResponse) ProtoMessage() {}

func (x *GetEvaluationPromptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEvaluationPromptResponse.ProtoReflect.Descriptor instead.
func (*GetEvaluationPromptResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{83}
}

func (x *GetEvaluationPromptResponse) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *GetEvaluationPromptResponse) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *GetEvaluationPromptResponse) GetEstimatedTokenCount() int32 {
	if x != nil {
		return x.EstimatedTokenCount
	}
	return 0
}

type GetUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{84}
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JupyterToken string     `protobuf:"bytes,2,opt,name=jupyter_token,json=jupyterToken,proto3" json:"jupyter_token,omitempty"`
	Usage        *UsageData `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{85}
}

func (x *GetUserInfoResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserInfoResponse) GetJupyterToken() string {
	if x != nil {
		return x.JupyterToken
	}
	return ""
}

func (x *GetUserInfoResponse) GetUsage() *UsageData {
	if x != nil {
		return x.Usage
	}
	return nil
}

type UsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gpt4Requests    int32 `protobuf:"varint,2,opt,name=gpt4_requests,json=gpt4Requests,proto3" json:"gpt4_requests,omitempty"`
	Gpt4MaxRequests int32 `protobuf:"varint,3,opt,name=gpt4_max_requests,json=gpt4MaxRequests,proto3" json:"gpt4_max_requests,omitempty"`
}

func (x *UsageData) Reset() {
	*x = UsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageData) ProtoMessage() {}

func (x *UsageData) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageData.ProtoReflect.Descriptor instead.
func (*UsageData) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{86}
}

func (x *UsageData) GetGpt4Requests() int32 {
	if x != nil {
		return x.Gpt4Requests
	}
	return 0
}

func (x *UsageData) GetGpt4MaxRequests() int32 {
	if x != nil {
		return x.Gpt4MaxRequests
	}
	return 0
}

type ClearAndRedoEntireBucketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketId string  `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	Commit   *string `protobuf:"bytes,2,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
}

func (x *ClearAndRedoEntireBucketRequest) Reset() {
	*x = ClearAndRedoEntireBucketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearAndRedoEntireBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAndRedoEntireBucketRequest) ProtoMessage() {}

func (x *ClearAndRedoEntireBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAndRedoEntireBucketRequest.ProtoReflect.Descriptor instead.
func (*ClearAndRedoEntireBucketRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{87}
}

func (x *ClearAndRedoEntireBucketRequest) GetBucketId() string {
	if x != nil {
		return x.BucketId
	}
	return ""
}

func (x *ClearAndRedoEntireBucketRequest) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

type ClearAndRedoEntireBucketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearAndRedoEntireBucketResponse) Reset() {
	*x = ClearAndRedoEntireBucketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearAndRedoEntireBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAndRedoEntireBucketResponse) ProtoMessage() {}

func (x *ClearAndRedoEntireBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAndRedoEntireBucketResponse.ProtoReflect.Descriptor instead.
func (*ClearAndRedoEntireBucketResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{88}
}

type StreamBranchGeminiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchName                 string                                        `protobuf:"bytes,1,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	BranchNotes                string                                        `protobuf:"bytes,2,opt,name=branch_notes,json=branchNotes,proto3" json:"branch_notes,omitempty"`
	GlobalNotes                string                                        `protobuf:"bytes,3,opt,name=global_notes,json=globalNotes,proto3" json:"global_notes,omitempty"`
	PastThoughts               []*StreamBranchGeminiRequest_PastThought      `protobuf:"bytes,4,rep,name=past_thoughts,json=pastThoughts,proto3" json:"past_thoughts,omitempty"`
	DiffToBaseBranch           *StreamBranchGeminiRequest_BranchDiff         `protobuf:"bytes,5,opt,name=diff_to_base_branch,json=diffToBaseBranch,proto3" json:"diff_to_base_branch,omitempty"`
	PotentiallyRelevantCommits []*Commit                                     `protobuf:"bytes,6,rep,name=potentially_relevant_commits,json=potentiallyRelevantCommits,proto3" json:"potentially_relevant_commits,omitempty"`
	Files                      []*StreamBranchGeminiRequest_File             `protobuf:"bytes,7,rep,name=files,proto3" json:"files,omitempty"`
	ContextGraphFiles          []*StreamBranchGeminiRequest_FileWithPriority `protobuf:"bytes,8,rep,name=context_graph_files,json=contextGraphFiles,proto3" json:"context_graph_files,omitempty"`
	CrucialFiles               []*StreamBranchGeminiRequest_File             `protobuf:"bytes,12,rep,name=crucial_files,json=crucialFiles,proto3" json:"crucial_files,omitempty"`
	OverrideModel              *string                                       `protobuf:"bytes,9,opt,name=override_model,json=overrideModel,proto3,oneof" json:"override_model,omitempty"`
	OverrideTokenLimit         *int32                                        `protobuf:"varint,10,opt,name=override_token_limit,json=overrideTokenLimit,proto3,oneof" json:"override_token_limit,omitempty"`
}

func (x *StreamBranchGeminiRequest) Reset() {
	*x = StreamBranchGeminiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiRequest) ProtoMessage() {}

func (x *StreamBranchGeminiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiRequest.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{89}
}

func (x *StreamBranchGeminiRequest) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *StreamBranchGeminiRequest) GetBranchNotes() string {
	if x != nil {
		return x.BranchNotes
	}
	return ""
}

func (x *StreamBranchGeminiRequest) GetGlobalNotes() string {
	if x != nil {
		return x.GlobalNotes
	}
	return ""
}

func (x *StreamBranchGeminiRequest) GetPastThoughts() []*StreamBranchGeminiRequest_PastThought {
	if x != nil {
		return x.PastThoughts
	}
	return nil
}

func (x *StreamBranchGeminiRequest) GetDiffToBaseBranch() *StreamBranchGeminiRequest_BranchDiff {
	if x != nil {
		return x.DiffToBaseBranch
	}
	return nil
}

func (x *StreamBranchGeminiRequest) GetPotentiallyRelevantCommits() []*Commit {
	if x != nil {
		return x.PotentiallyRelevantCommits
	}
	return nil
}

func (x *StreamBranchGeminiRequest) GetFiles() []*StreamBranchGeminiRequest_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *StreamBranchGeminiRequest) GetContextGraphFiles() []*StreamBranchGeminiRequest_FileWithPriority {
	if x != nil {
		return x.ContextGraphFiles
	}
	return nil
}

func (x *StreamBranchGeminiRequest) GetCrucialFiles() []*StreamBranchGeminiRequest_File {
	if x != nil {
		return x.CrucialFiles
	}
	return nil
}

func (x *StreamBranchGeminiRequest) GetOverrideModel() string {
	if x != nil && x.OverrideModel != nil {
		return *x.OverrideModel
	}
	return ""
}

func (x *StreamBranchGeminiRequest) GetOverrideTokenLimit() int32 {
	if x != nil && x.OverrideTokenLimit != nil {
		return *x.OverrideTokenLimit
	}
	return 0
}

type StreamBranchGeminiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	CachedPrompt *string `protobuf:"bytes,2,opt,name=cached_prompt,json=cachedPrompt,proto3,oneof" json:"cached_prompt,omitempty"`
}

func (x *StreamBranchGeminiResponse) Reset() {
	*x = StreamBranchGeminiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiResponse) ProtoMessage() {}

func (x *StreamBranchGeminiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiResponse.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{90}
}

func (x *StreamBranchGeminiResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamBranchGeminiResponse) GetCachedPrompt() string {
	if x != nil && x.CachedPrompt != nil {
		return *x.CachedPrompt
	}
	return ""
}

type StreamBranchFileSelectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiResponse         string  `protobuf:"bytes,1,opt,name=ai_response,json=aiResponse,proto3" json:"ai_response,omitempty"`
	OverrideModel      *string `protobuf:"bytes,2,opt,name=override_model,json=overrideModel,proto3,oneof" json:"override_model,omitempty"`
	OverrideTokenLimit *int32  `protobuf:"varint,3,opt,name=override_token_limit,json=overrideTokenLimit,proto3,oneof" json:"override_token_limit,omitempty"`
}

func (x *StreamBranchFileSelectionsRequest) Reset() {
	*x = StreamBranchFileSelectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchFileSelectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchFileSelectionsRequest) ProtoMessage() {}

func (x *StreamBranchFileSelectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchFileSelectionsRequest.ProtoReflect.Descriptor instead.
func (*StreamBranchFileSelectionsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{91}
}

func (x *StreamBranchFileSelectionsRequest) GetAiResponse() string {
	if x != nil {
		return x.AiResponse
	}
	return ""
}

func (x *StreamBranchFileSelectionsRequest) GetOverrideModel() string {
	if x != nil && x.OverrideModel != nil {
		return *x.OverrideModel
	}
	return ""
}

func (x *StreamBranchFileSelectionsRequest) GetOverrideTokenLimit() int32 {
	if x != nil && x.OverrideTokenLimit != nil {
		return *x.OverrideTokenLimit
	}
	return 0
}

type StreamBranchFileSelectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileInstructions []*StreamBranchFileSelectionsResponse_FileInstruction `protobuf:"bytes,1,rep,name=file_instructions,json=fileInstructions,proto3" json:"file_instructions,omitempty"`
}

func (x *StreamBranchFileSelectionsResponse) Reset() {
	*x = StreamBranchFileSelectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchFileSelectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchFileSelectionsResponse) ProtoMessage() {}

func (x *StreamBranchFileSelectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchFileSelectionsResponse.ProtoReflect.Descriptor instead.
func (*StreamBranchFileSelectionsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{92}
}

func (x *StreamBranchFileSelectionsResponse) GetFileInstructions() []*StreamBranchFileSelectionsResponse_FileInstruction {
	if x != nil {
		return x.FileInstructions
	}
	return nil
}

type StreamBackgroundEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile       *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Repositories      []*RepositoryInfo      `protobuf:"bytes,2,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext   *ExplicitContext       `protobuf:"bytes,3,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath *string                `protobuf:"bytes,4,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	GitDiff           string                 `protobuf:"bytes,5,opt,name=git_diff,json=gitDiff,proto3" json:"git_diff,omitempty"`
	Conversation      []*ConversationMessage `protobuf:"bytes,6,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Query             string                 `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	ModelDetails      *ModelDetails          `protobuf:"bytes,8,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	Stop              string                 `protobuf:"bytes,9,opt,name=stop,proto3" json:"stop,omitempty"`
	ImportLineInDiff  int32                  `protobuf:"varint,10,opt,name=import_line_in_diff,json=importLineInDiff,proto3" json:"import_line_in_diff,omitempty"`
}

func (x *StreamBackgroundEditRequest) Reset() {
	*x = StreamBackgroundEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBackgroundEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBackgroundEditRequest) ProtoMessage() {}

func (x *StreamBackgroundEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBackgroundEditRequest.ProtoReflect.Descriptor instead.
func (*StreamBackgroundEditRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{93}
}

func (x *StreamBackgroundEditRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamBackgroundEditRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamBackgroundEditRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamBackgroundEditRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamBackgroundEditRequest) GetGitDiff() string {
	if x != nil {
		return x.GitDiff
	}
	return ""
}

func (x *StreamBackgroundEditRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamBackgroundEditRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamBackgroundEditRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamBackgroundEditRequest) GetStop() string {
	if x != nil {
		return x.Stop
	}
	return ""
}

func (x *StreamBackgroundEditRequest) GetImportLineInDiff() int32 {
	if x != nil {
		return x.ImportLineInDiff
	}
	return 0
}

type StreamGPTFourEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile              *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation             []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories             []*RepositoryInfo      `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext          *ExplicitContext       `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath        *string                `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	Query                    string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	CodeBlocks               []*CodeBlock           `protobuf:"bytes,7,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	SessionId                string                 `protobuf:"bytes,14,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ModelDetails             *ModelDetails          `protobuf:"bytes,9,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers []string               `protobuf:"bytes,10,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	LinterErrors             *LinterErrors          `protobuf:"bytes,11,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	PromptCodeBlocks         []*CodeBlock           `protobuf:"bytes,12,rep,name=prompt_code_blocks,json=promptCodeBlocks,proto3" json:"prompt_code_blocks,omitempty"`
	FastMode                 bool                   `protobuf:"varint,13,opt,name=fast_mode,json=fastMode,proto3" json:"fast_mode,omitempty"`
}

func (x *StreamGPTFourEditRequest) Reset() {
	*x = StreamGPTFourEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamGPTFourEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGPTFourEditRequest) ProtoMessage() {}

func (x *StreamGPTFourEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGPTFourEditRequest.ProtoReflect.Descriptor instead.
func (*StreamGPTFourEditRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{94}
}

func (x *StreamGPTFourEditRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamGPTFourEditRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamGPTFourEditRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamGPTFourEditRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetPromptCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.PromptCodeBlocks
	}
	return nil
}

func (x *StreamGPTFourEditRequest) GetFastMode() bool {
	if x != nil {
		return x.FastMode
	}
	return false
}

type StreamEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile              *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation             []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories             []*RepositoryInfo      `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext          *ExplicitContext       `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath        *string                `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	Query                    string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	CodeBlocks               []*CodeBlock           `protobuf:"bytes,7,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails             *ModelDetails          `protobuf:"bytes,9,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers []string               `protobuf:"bytes,10,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	LinterErrors             *LinterErrors          `protobuf:"bytes,11,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	PromptCodeBlocks         []*CodeBlock           `protobuf:"bytes,12,rep,name=prompt_code_blocks,json=promptCodeBlocks,proto3" json:"prompt_code_blocks,omitempty"`
	SessionId                string                 `protobuf:"bytes,14,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CmdKDebugInfo            *CmdKDebugInfo         `protobuf:"bytes,13,opt,name=cmd_k_debug_info,json=cmdKDebugInfo,proto3" json:"cmd_k_debug_info,omitempty"`
	FastMode                 bool                   `protobuf:"varint,15,opt,name=fast_mode,json=fastMode,proto3" json:"fast_mode,omitempty"`
	OriginalRequest          *StreamEditRequest     `protobuf:"bytes,16,opt,name=original_request,json=originalRequest,proto3" json:"original_request,omitempty"`
	Images                   []*ImageProto          `protobuf:"bytes,17,rep,name=images,proto3" json:"images,omitempty"`
	Links                    []*CmdKExternalLink    `protobuf:"bytes,18,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *StreamEditRequest) Reset() {
	*x = StreamEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEditRequest) ProtoMessage() {}

func (x *StreamEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEditRequest.ProtoReflect.Descriptor instead.
func (*StreamEditRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{95}
}

func (x *StreamEditRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamEditRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamEditRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamEditRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamEditRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamEditRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamEditRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *StreamEditRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamEditRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *StreamEditRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *StreamEditRequest) GetPromptCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.PromptCodeBlocks
	}
	return nil
}

func (x *StreamEditRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamEditRequest) GetCmdKDebugInfo() *CmdKDebugInfo {
	if x != nil {
		return x.CmdKDebugInfo
	}
	return nil
}

func (x *StreamEditRequest) GetFastMode() bool {
	if x != nil {
		return x.FastMode
	}
	return false
}

func (x *StreamEditRequest) GetOriginalRequest() *StreamEditRequest {
	if x != nil {
		return x.OriginalRequest
	}
	return nil
}

func (x *StreamEditRequest) GetImages() []*ImageProto {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *StreamEditRequest) GetLinks() []*CmdKExternalLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type CmdKDebugInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteUrl          string                              `protobuf:"bytes,1,opt,name=remote_url,json=remoteUrl,proto3" json:"remote_url,omitempty"`
	CommitId           string                              `protobuf:"bytes,2,opt,name=commit_id,json=commitId,proto3" json:"commit_id,omitempty"`
	GitPatch           string                              `protobuf:"bytes,3,opt,name=git_patch,json=gitPatch,proto3" json:"git_patch,omitempty"`
	UnsavedFiles       []*CmdKDebugInfo_UnsavedFiles       `protobuf:"bytes,4,rep,name=unsaved_files,json=unsavedFiles,proto3" json:"unsaved_files,omitempty"`
	UnixTimestampMs    float64                             `protobuf:"fixed64,5,opt,name=unix_timestamp_ms,json=unixTimestampMs,proto3" json:"unix_timestamp_ms,omitempty"`
	OpenEditors        []*CmdKDebugInfo_OpenEditor         `protobuf:"bytes,6,rep,name=open_editors,json=openEditors,proto3" json:"open_editors,omitempty"`
	FileDiffHistories  []*CmdKDebugInfo_CppFileDiffHistory `protobuf:"bytes,7,rep,name=file_diff_histories,json=fileDiffHistories,proto3" json:"file_diff_histories,omitempty"`
	BranchName         string                              `protobuf:"bytes,8,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	BranchNotes        string                              `protobuf:"bytes,9,opt,name=branch_notes,json=branchNotes,proto3" json:"branch_notes,omitempty"`
	BranchNotesRich    string                              `protobuf:"bytes,12,opt,name=branch_notes_rich,json=branchNotesRich,proto3" json:"branch_notes_rich,omitempty"`
	GlobalNotes        string                              `protobuf:"bytes,10,opt,name=global_notes,json=globalNotes,proto3" json:"global_notes,omitempty"`
	PastThoughts       []*CmdKDebugInfo_PastThought        `protobuf:"bytes,11,rep,name=past_thoughts,json=pastThoughts,proto3" json:"past_thoughts,omitempty"`
	BaseBranchName     string                              `protobuf:"bytes,13,opt,name=base_branch_name,json=baseBranchName,proto3" json:"base_branch_name,omitempty"`
	BaseBranchCommitId string                              `protobuf:"bytes,14,opt,name=base_branch_commit_id,json=baseBranchCommitId,proto3" json:"base_branch_commit_id,omitempty"`
}

func (x *CmdKDebugInfo) Reset() {
	*x = CmdKDebugInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKDebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKDebugInfo) ProtoMessage() {}

func (x *CmdKDebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKDebugInfo.ProtoReflect.Descriptor instead.
func (*CmdKDebugInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{96}
}

func (x *CmdKDebugInfo) GetRemoteUrl() string {
	if x != nil {
		return x.RemoteUrl
	}
	return ""
}

func (x *CmdKDebugInfo) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *CmdKDebugInfo) GetGitPatch() string {
	if x != nil {
		return x.GitPatch
	}
	return ""
}

func (x *CmdKDebugInfo) GetUnsavedFiles() []*CmdKDebugInfo_UnsavedFiles {
	if x != nil {
		return x.UnsavedFiles
	}
	return nil
}

func (x *CmdKDebugInfo) GetUnixTimestampMs() float64 {
	if x != nil {
		return x.UnixTimestampMs
	}
	return 0
}

func (x *CmdKDebugInfo) GetOpenEditors() []*CmdKDebugInfo_OpenEditor {
	if x != nil {
		return x.OpenEditors
	}
	return nil
}

func (x *CmdKDebugInfo) GetFileDiffHistories() []*CmdKDebugInfo_CppFileDiffHistory {
	if x != nil {
		return x.FileDiffHistories
	}
	return nil
}

func (x *CmdKDebugInfo) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CmdKDebugInfo) GetBranchNotes() string {
	if x != nil {
		return x.BranchNotes
	}
	return ""
}

func (x *CmdKDebugInfo) GetBranchNotesRich() string {
	if x != nil {
		return x.BranchNotesRich
	}
	return ""
}

func (x *CmdKDebugInfo) GetGlobalNotes() string {
	if x != nil {
		return x.GlobalNotes
	}
	return ""
}

func (x *CmdKDebugInfo) GetPastThoughts() []*CmdKDebugInfo_PastThought {
	if x != nil {
		return x.PastThoughts
	}
	return nil
}

func (x *CmdKDebugInfo) GetBaseBranchName() string {
	if x != nil {
		return x.BaseBranchName
	}
	return ""
}

func (x *CmdKDebugInfo) GetBaseBranchCommitId() string {
	if x != nil {
		return x.BaseBranchCommitId
	}
	return ""
}

type CmdKExternalLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *CmdKExternalLink) Reset() {
	*x = CmdKExternalLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKExternalLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKExternalLink) ProtoMessage() {}

func (x *CmdKExternalLink) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKExternalLink.ProtoReflect.Descriptor instead.
func (*CmdKExternalLink) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{97}
}

func (x *CmdKExternalLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CmdKExternalLink) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type PreloadEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req *StreamEditRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (x *PreloadEditRequest) Reset() {
	*x = PreloadEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadEditRequest) ProtoMessage() {}

func (x *PreloadEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadEditRequest.ProtoReflect.Descriptor instead.
func (*PreloadEditRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{98}
}

func (x *PreloadEditRequest) GetReq() *StreamEditRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

type PreloadEditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PreloadEditResponse) Reset() {
	*x = PreloadEditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreloadEditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreloadEditResponse) ProtoMessage() {}

func (x *PreloadEditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreloadEditResponse.ProtoReflect.Descriptor instead.
func (*PreloadEditResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{99}
}

type StreamFastEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile              *CurrentFileInfo  `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Repositories             []*RepositoryInfo `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext          *ExplicitContext  `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath        *string           `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	Query                    string            `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	CodeBlocks               []*CodeBlock      `protobuf:"bytes,7,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails             *ModelDetails     `protobuf:"bytes,9,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers []string          `protobuf:"bytes,10,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	LinterErrors             *LinterErrors     `protobuf:"bytes,11,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
}

func (x *StreamFastEditRequest) Reset() {
	*x = StreamFastEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFastEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFastEditRequest) ProtoMessage() {}

func (x *StreamFastEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFastEditRequest.ProtoReflect.Descriptor instead.
func (*StreamFastEditRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{100}
}

func (x *StreamFastEditRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamFastEditRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamFastEditRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamFastEditRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamFastEditRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamFastEditRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *StreamFastEditRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamFastEditRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *StreamFastEditRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

type StreamFastEditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineNumber      int32   `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	ReplaceNumLines int32   `protobuf:"varint,3,opt,name=replace_num_lines,json=replaceNumLines,proto3" json:"replace_num_lines,omitempty"`
	EditUuid        string  `protobuf:"bytes,5,opt,name=edit_uuid,json=editUuid,proto3" json:"edit_uuid,omitempty"`
	Done            *bool   `protobuf:"varint,4,opt,name=done,proto3,oneof" json:"done,omitempty"`
	NewLine         *string `protobuf:"bytes,6,opt,name=new_line,json=newLine,proto3,oneof" json:"new_line,omitempty"`
	ResetNewLines   bool    `protobuf:"varint,7,opt,name=reset_new_lines,json=resetNewLines,proto3" json:"reset_new_lines,omitempty"`
}

func (x *StreamFastEditResponse) Reset() {
	*x = StreamFastEditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFastEditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFastEditResponse) ProtoMessage() {}

func (x *StreamFastEditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFastEditResponse.ProtoReflect.Descriptor instead.
func (*StreamFastEditResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{101}
}

func (x *StreamFastEditResponse) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *StreamFastEditResponse) GetReplaceNumLines() int32 {
	if x != nil {
		return x.ReplaceNumLines
	}
	return 0
}

func (x *StreamFastEditResponse) GetEditUuid() string {
	if x != nil {
		return x.EditUuid
	}
	return ""
}

func (x *StreamFastEditResponse) GetDone() bool {
	if x != nil && x.Done != nil {
		return *x.Done
	}
	return false
}

func (x *StreamFastEditResponse) GetNewLine() string {
	if x != nil && x.NewLine != nil {
		return *x.NewLine
	}
	return ""
}

func (x *StreamFastEditResponse) GetResetNewLines() bool {
	if x != nil {
		return x.ResetNewLines
	}
	return false
}

type StreamGenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile              *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation             []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories             []*RepositoryInfo      `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext          *ExplicitContext       `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath        *string                `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	Query                    string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	CodeBlocks               []*CodeBlock           `protobuf:"bytes,7,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails             *ModelDetails          `protobuf:"bytes,9,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers []string               `protobuf:"bytes,10,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	LinterErrors             *LinterErrors          `protobuf:"bytes,11,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	PromptCodeBlocks         []*CodeBlock           `protobuf:"bytes,12,rep,name=prompt_code_blocks,json=promptCodeBlocks,proto3" json:"prompt_code_blocks,omitempty"`
	SessionId                string                 `protobuf:"bytes,14,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CmdKDebugInfo            *CmdKDebugInfo         `protobuf:"bytes,13,opt,name=cmd_k_debug_info,json=cmdKDebugInfo,proto3" json:"cmd_k_debug_info,omitempty"`
	FastMode                 bool                   `protobuf:"varint,15,opt,name=fast_mode,json=fastMode,proto3" json:"fast_mode,omitempty"`
	OriginalRequest          *StreamGenerateRequest `protobuf:"bytes,16,opt,name=original_request,json=originalRequest,proto3" json:"original_request,omitempty"`
}

func (x *StreamGenerateRequest) Reset() {
	*x = StreamGenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGenerateRequest) ProtoMessage() {}

func (x *StreamGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGenerateRequest.ProtoReflect.Descriptor instead.
func (*StreamGenerateRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{102}
}

func (x *StreamGenerateRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamGenerateRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamGenerateRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamGenerateRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamGenerateRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamGenerateRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamGenerateRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *StreamGenerateRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamGenerateRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *StreamGenerateRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *StreamGenerateRequest) GetPromptCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.PromptCodeBlocks
	}
	return nil
}

func (x *StreamGenerateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamGenerateRequest) GetCmdKDebugInfo() *CmdKDebugInfo {
	if x != nil {
		return x.CmdKDebugInfo
	}
	return nil
}

func (x *StreamGenerateRequest) GetFastMode() bool {
	if x != nil {
		return x.FastMode
	}
	return false
}

func (x *StreamGenerateRequest) GetOriginalRequest() *StreamGenerateRequest {
	if x != nil {
		return x.OriginalRequest
	}
	return nil
}

type StreamInlineLongCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile     *CurrentFileInfo                                  `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Repositories    []*RepositoryInfo                                 `protobuf:"bytes,6,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ContextBlocks   []*StreamInlineLongCompletionRequest_ContextBlock `protobuf:"bytes,7,rep,name=context_blocks,json=contextBlocks,proto3" json:"context_blocks,omitempty"`
	ExplicitContext *ExplicitContext                                  `protobuf:"bytes,13,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	ModelDetails    *ModelDetails                                     `protobuf:"bytes,14,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	LinterErrors    *LinterErrors                                     `protobuf:"bytes,15,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
}

func (x *StreamInlineLongCompletionRequest) Reset() {
	*x = StreamInlineLongCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInlineLongCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInlineLongCompletionRequest) ProtoMessage() {}

func (x *StreamInlineLongCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInlineLongCompletionRequest.ProtoReflect.Descriptor instead.
func (*StreamInlineLongCompletionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{103}
}

func (x *StreamInlineLongCompletionRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamInlineLongCompletionRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamInlineLongCompletionRequest) GetContextBlocks() []*StreamInlineLongCompletionRequest_ContextBlock {
	if x != nil {
		return x.ContextBlocks
	}
	return nil
}

func (x *StreamInlineLongCompletionRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamInlineLongCompletionRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamInlineLongCompletionRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

type SlashEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile                               *CurrentFileInfo                    `protobuf:"bytes,2,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation                              []*ConversationMessage              `protobuf:"bytes,3,rep,name=conversation,proto3" json:"conversation,omitempty"`
	ExplicitContext                           *ExplicitContext                    `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	ModelDetails                              *ModelDetails                       `protobuf:"bytes,7,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	IsCmdI                                    bool                                `protobuf:"varint,8,opt,name=is_cmd_i,json=isCmdI,proto3" json:"is_cmd_i,omitempty"`
	Summary                                   *string                             `protobuf:"bytes,11,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	SummaryUpUntilIndex                       *int32                              `protobuf:"varint,12,opt,name=summary_up_until_index,json=summaryUpUntilIndex,proto3,oneof" json:"summary_up_until_index,omitempty"`
	ShouldUseTurboDebugPrompt                 *bool                               `protobuf:"varint,13,opt,name=should_use_turbo_debug_prompt,json=shouldUseTurboDebugPrompt,proto3,oneof" json:"should_use_turbo_debug_prompt,omitempty"`
	EditSelection                             *LineRange                          `protobuf:"bytes,14,opt,name=edit_selection,json=editSelection,proto3,oneof" json:"edit_selection,omitempty"`
	Files                                     []*CurrentFileInfo                  `protobuf:"bytes,15,rep,name=files,proto3" json:"files,omitempty"`
	ClickedCodeBlockContents                  *string                             `protobuf:"bytes,16,opt,name=clicked_code_block_contents,json=clickedCodeBlockContents,proto3,oneof" json:"clicked_code_block_contents,omitempty"`
	IsAnOptimisticRequestForCachingAndLinting *bool                               `protobuf:"varint,17,opt,name=is_an_optimistic_request_for_caching_and_linting,json=isAnOptimisticRequestForCachingAndLinting,proto3,oneof" json:"is_an_optimistic_request_for_caching_and_linting,omitempty"`
	SpecificInstructions                      *string                             `protobuf:"bytes,18,opt,name=specific_instructions,json=specificInstructions,proto3,oneof" json:"specific_instructions,omitempty"`
	UseFastApply                              bool                                `protobuf:"varint,19,opt,name=use_fast_apply,json=useFastApply,proto3" json:"use_fast_apply,omitempty"`
	FastApplyModelType                        SlashEditRequest_FastApplyModelType `protobuf:"varint,20,opt,name=fast_apply_model_type,json=fastApplyModelType,proto3,enum=aiserver.v1.SlashEditRequest_FastApplyModelType" json:"fast_apply_model_type,omitempty"`
	UseChunkSpeculationForLongFiles           *bool                               `protobuf:"varint,25,opt,name=use_chunk_speculation_for_long_files,json=useChunkSpeculationForLongFiles,proto3,oneof" json:"use_chunk_speculation_for_long_files,omitempty"`
}

func (x *SlashEditRequest) Reset() {
	*x = SlashEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashEditRequest) ProtoMessage() {}

func (x *SlashEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashEditRequest.ProtoReflect.Descriptor instead.
func (*SlashEditRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{104}
}

func (x *SlashEditRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *SlashEditRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *SlashEditRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *SlashEditRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *SlashEditRequest) GetIsCmdI() bool {
	if x != nil {
		return x.IsCmdI
	}
	return false
}

func (x *SlashEditRequest) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *SlashEditRequest) GetSummaryUpUntilIndex() int32 {
	if x != nil && x.SummaryUpUntilIndex != nil {
		return *x.SummaryUpUntilIndex
	}
	return 0
}

func (x *SlashEditRequest) GetShouldUseTurboDebugPrompt() bool {
	if x != nil && x.ShouldUseTurboDebugPrompt != nil {
		return *x.ShouldUseTurboDebugPrompt
	}
	return false
}

func (x *SlashEditRequest) GetEditSelection() *LineRange {
	if x != nil {
		return x.EditSelection
	}
	return nil
}

func (x *SlashEditRequest) GetFiles() []*CurrentFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *SlashEditRequest) GetClickedCodeBlockContents() string {
	if x != nil && x.ClickedCodeBlockContents != nil {
		return *x.ClickedCodeBlockContents
	}
	return ""
}

func (x *SlashEditRequest) GetIsAnOptimisticRequestForCachingAndLinting() bool {
	if x != nil && x.IsAnOptimisticRequestForCachingAndLinting != nil {
		return *x.IsAnOptimisticRequestForCachingAndLinting
	}
	return false
}

func (x *SlashEditRequest) GetSpecificInstructions() string {
	if x != nil && x.SpecificInstructions != nil {
		return *x.SpecificInstructions
	}
	return ""
}

func (x *SlashEditRequest) GetUseFastApply() bool {
	if x != nil {
		return x.UseFastApply
	}
	return false
}

func (x *SlashEditRequest) GetFastApplyModelType() SlashEditRequest_FastApplyModelType {
	if x != nil {
		return x.FastApplyModelType
	}
	return SlashEditRequest_FAST_APPLY_MODEL_TYPE_UNSPECIFIED
}

func (x *SlashEditRequest) GetUseChunkSpeculationForLongFiles() bool {
	if x != nil && x.UseChunkSpeculationForLongFiles != nil {
		return *x.UseChunkSpeculationForLongFiles
	}
	return false
}

type SlashEditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdKResponse *StreamCmdKResponse `protobuf:"bytes,1,opt,name=cmd_k_response,json=cmdKResponse,proto3" json:"cmd_k_response,omitempty"`
}

func (x *SlashEditResponse) Reset() {
	*x = SlashEditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashEditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashEditResponse) ProtoMessage() {}

func (x *SlashEditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashEditResponse.ProtoReflect.Descriptor instead.
func (*SlashEditResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{105}
}

func (x *SlashEditResponse) GetCmdKResponse() *StreamCmdKResponse {
	if x != nil {
		return x.CmdKResponse
	}
	return nil
}

type StreamCmdKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditStart    *StreamCmdKResponse_EditStart    `protobuf:"bytes,1,opt,name=edit_start,json=editStart,proto3" json:"edit_start,omitempty"`
	EditStream   *StreamCmdKResponse_EditStream   `protobuf:"bytes,2,opt,name=edit_stream,json=editStream,proto3" json:"edit_stream,omitempty"`
	EditEnd      *StreamCmdKResponse_EditEnd      `protobuf:"bytes,3,opt,name=edit_end,json=editEnd,proto3" json:"edit_end,omitempty"`
	Chat         *StreamCmdKResponse_Chat         `protobuf:"bytes,4,opt,name=chat,proto3" json:"chat,omitempty"`
	StatusUpdate *StreamCmdKResponse_StatusUpdate `protobuf:"bytes,5,opt,name=status_update,json=statusUpdate,proto3" json:"status_update,omitempty"`
}

func (x *StreamCmdKResponse) Reset() {
	*x = StreamCmdKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCmdKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCmdKResponse) ProtoMessage() {}

func (x *StreamCmdKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCmdKResponse.ProtoReflect.Descriptor instead.
func (*StreamCmdKResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{106}
}

func (x *StreamCmdKResponse) GetEditStart() *StreamCmdKResponse_EditStart {
	if x != nil {
		return x.EditStart
	}
	return nil
}

func (x *StreamCmdKResponse) GetEditStream() *StreamCmdKResponse_EditStream {
	if x != nil {
		return x.EditStream
	}
	return nil
}

func (x *StreamCmdKResponse) GetEditEnd() *StreamCmdKResponse_EditEnd {
	if x != nil {
		return x.EditEnd
	}
	return nil
}

func (x *StreamCmdKResponse) GetChat() *StreamCmdKResponse_Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *StreamCmdKResponse) GetStatusUpdate() *StreamCmdKResponse_StatusUpdate {
	if x != nil {
		return x.StatusUpdate
	}
	return nil
}

type SlashEditFollowUpWithPreviousEditsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation  []*ConversationMessage   `protobuf:"bytes,1,rep,name=conversation,proto3" json:"conversation,omitempty"`
	ModelDetails  *ModelDetails            `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	PreviousEdits []*SlashEditPreviousEdit `protobuf:"bytes,3,rep,name=previous_edits,json=previousEdits,proto3" json:"previous_edits,omitempty"`
}

func (x *SlashEditFollowUpWithPreviousEditsRequest) Reset() {
	*x = SlashEditFollowUpWithPreviousEditsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashEditFollowUpWithPreviousEditsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashEditFollowUpWithPreviousEditsRequest) ProtoMessage() {}

func (x *SlashEditFollowUpWithPreviousEditsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashEditFollowUpWithPreviousEditsRequest.ProtoReflect.Descriptor instead.
func (*SlashEditFollowUpWithPreviousEditsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{107}
}

func (x *SlashEditFollowUpWithPreviousEditsRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *SlashEditFollowUpWithPreviousEditsRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *SlashEditFollowUpWithPreviousEditsRequest) GetPreviousEdits() []*SlashEditPreviousEdit {
	if x != nil {
		return x.PreviousEdits
	}
	return nil
}

type SlashEditPreviousEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalLines         []string   `protobuf:"bytes,1,rep,name=original_lines,json=originalLines,proto3" json:"original_lines,omitempty"`
	NewLines              []string   `protobuf:"bytes,2,rep,name=new_lines,json=newLines,proto3" json:"new_lines,omitempty"`
	RelativeWorkspacePath string     `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Range                 *LineRange `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *SlashEditPreviousEdit) Reset() {
	*x = SlashEditPreviousEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlashEditPreviousEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlashEditPreviousEdit) ProtoMessage() {}

func (x *SlashEditPreviousEdit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlashEditPreviousEdit.ProtoReflect.Descriptor instead.
func (*SlashEditPreviousEdit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{108}
}

func (x *SlashEditPreviousEdit) GetOriginalLines() []string {
	if x != nil {
		return x.OriginalLines
	}
	return nil
}

func (x *SlashEditPreviousEdit) GetNewLines() []string {
	if x != nil {
		return x.NewLines
	}
	return nil
}

func (x *SlashEditPreviousEdit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *SlashEditPreviousEdit) GetRange() *LineRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type StreamSlashEditFollowUpWithPreviousEditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat          *StreamSlashEditFollowUpWithPreviousEditsResponse_Chat          `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	EditsToUpdate *StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate `protobuf:"bytes,2,opt,name=edits_to_update,json=editsToUpdate,proto3" json:"edits_to_update,omitempty"`
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse) Reset() {
	*x = StreamSlashEditFollowUpWithPreviousEditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSlashEditFollowUpWithPreviousEditsResponse) ProtoMessage() {}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSlashEditFollowUpWithPreviousEditsResponse.ProtoReflect.Descriptor instead.
func (*StreamSlashEditFollowUpWithPreviousEditsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{109}
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse) GetChat() *StreamSlashEditFollowUpWithPreviousEditsResponse_Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse) GetEditsToUpdate() *StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate {
	if x != nil {
		return x.EditsToUpdate
	}
	return nil
}

type StreamAiPreviewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile  *CurrentFileInfo        `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Intent       *StreamAiPreviewsIntent `protobuf:"bytes,2,opt,name=intent,proto3" json:"intent,omitempty"`
	ModelDetails *ModelDetails           `protobuf:"bytes,14,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	IsDetailed   *bool                   `protobuf:"varint,15,opt,name=is_detailed,json=isDetailed,proto3,oneof" json:"is_detailed,omitempty"`
}

func (x *StreamAiPreviewsRequest) Reset() {
	*x = StreamAiPreviewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiPreviewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiPreviewsRequest) ProtoMessage() {}

func (x *StreamAiPreviewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiPreviewsRequest.ProtoReflect.Descriptor instead.
func (*StreamAiPreviewsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{110}
}

func (x *StreamAiPreviewsRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamAiPreviewsRequest) GetIntent() *StreamAiPreviewsIntent {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *StreamAiPreviewsRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamAiPreviewsRequest) GetIsDetailed() bool {
	if x != nil && x.IsDetailed != nil {
		return *x.IsDetailed
	}
	return false
}

type StreamAiPreviewsIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainSymbolsToAnalyzeFromGoToDef         []*DocumentSymbolWithText `protobuf:"bytes,1,rep,name=main_symbols_to_analyze_from_go_to_def,json=mainSymbolsToAnalyzeFromGoToDef,proto3" json:"main_symbols_to_analyze_from_go_to_def,omitempty"`
	MainSymbolHoverDetails                  *HoverDetails             `protobuf:"bytes,4,opt,name=main_symbol_hover_details,json=mainSymbolHoverDetails,proto3" json:"main_symbol_hover_details,omitempty"`
	RelatedSymbols                          []*DocumentSymbolWithText `protobuf:"bytes,3,rep,name=related_symbols,json=relatedSymbols,proto3" json:"related_symbols,omitempty"`
	MainSymbolsToAnalyzeFromImplementations []*DocumentSymbolWithText `protobuf:"bytes,6,rep,name=main_symbols_to_analyze_from_implementations,json=mainSymbolsToAnalyzeFromImplementations,proto3" json:"main_symbols_to_analyze_from_implementations,omitempty"`
}

func (x *StreamAiPreviewsIntent) Reset() {
	*x = StreamAiPreviewsIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiPreviewsIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiPreviewsIntent) ProtoMessage() {}

func (x *StreamAiPreviewsIntent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiPreviewsIntent.ProtoReflect.Descriptor instead.
func (*StreamAiPreviewsIntent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{111}
}

func (x *StreamAiPreviewsIntent) GetMainSymbolsToAnalyzeFromGoToDef() []*DocumentSymbolWithText {
	if x != nil {
		return x.MainSymbolsToAnalyzeFromGoToDef
	}
	return nil
}

func (x *StreamAiPreviewsIntent) GetMainSymbolHoverDetails() *HoverDetails {
	if x != nil {
		return x.MainSymbolHoverDetails
	}
	return nil
}

func (x *StreamAiPreviewsIntent) GetRelatedSymbols() []*DocumentSymbolWithText {
	if x != nil {
		return x.RelatedSymbols
	}
	return nil
}

func (x *StreamAiPreviewsIntent) GetMainSymbolsToAnalyzeFromImplementations() []*DocumentSymbolWithText {
	if x != nil {
		return x.MainSymbolsToAnalyzeFromImplementations
	}
	return nil
}

type DocumentSymbolWithText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol                *DocumentSymbol `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	RelativeWorkspacePath string          `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	TextInSymbolRange     string          `protobuf:"bytes,3,opt,name=text_in_symbol_range,json=textInSymbolRange,proto3" json:"text_in_symbol_range,omitempty"`
	UriComponents         *UriComponents  `protobuf:"bytes,4,opt,name=uri_components,json=uriComponents,proto3" json:"uri_components,omitempty"`
}

func (x *DocumentSymbolWithText) Reset() {
	*x = DocumentSymbolWithText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbolWithText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbolWithText) ProtoMessage() {}

func (x *DocumentSymbolWithText) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbolWithText.ProtoReflect.Descriptor instead.
func (*DocumentSymbolWithText) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{112}
}

func (x *DocumentSymbolWithText) GetSymbol() *DocumentSymbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *DocumentSymbolWithText) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *DocumentSymbolWithText) GetTextInSymbolRange() string {
	if x != nil {
		return x.TextInSymbolRange
	}
	return ""
}

func (x *DocumentSymbolWithText) GetUriComponents() *UriComponents {
	if x != nil {
		return x.UriComponents
	}
	return nil
}

type DocumentSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Detail         string                    `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	Kind           DocumentSymbol_SymbolKind `protobuf:"varint,3,opt,name=kind,proto3,enum=aiserver.v1.DocumentSymbol_SymbolKind" json:"kind,omitempty"`
	ContainerName  string                    `protobuf:"bytes,5,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	Range          *DocumentSymbol_Range     `protobuf:"bytes,6,opt,name=range,proto3" json:"range,omitempty"`
	SelectionRange *DocumentSymbol_Range     `protobuf:"bytes,7,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	Children       []*DocumentSymbol         `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DocumentSymbol) Reset() {
	*x = DocumentSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbol) ProtoMessage() {}

func (x *DocumentSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbol.ProtoReflect.Descriptor instead.
func (*DocumentSymbol) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{113}
}

func (x *DocumentSymbol) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentSymbol) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *DocumentSymbol) GetKind() DocumentSymbol_SymbolKind {
	if x != nil {
		return x.Kind
	}
	return DocumentSymbol_SYMBOL_KIND_UNSPECIFIED
}

func (x *DocumentSymbol) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *DocumentSymbol) GetRange() *DocumentSymbol_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *DocumentSymbol) GetSelectionRange() *DocumentSymbol_Range {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *DocumentSymbol) GetChildren() []*DocumentSymbol {
	if x != nil {
		return x.Children
	}
	return nil
}

type UriComponents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme    string  `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Authority *string `protobuf:"bytes,2,opt,name=authority,proto3,oneof" json:"authority,omitempty"`
	Path      *string `protobuf:"bytes,3,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Query     *string `protobuf:"bytes,4,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Fragment  *string `protobuf:"bytes,5,opt,name=fragment,proto3,oneof" json:"fragment,omitempty"`
}

func (x *UriComponents) Reset() {
	*x = UriComponents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UriComponents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UriComponents) ProtoMessage() {}

func (x *UriComponents) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UriComponents.ProtoReflect.Descriptor instead.
func (*UriComponents) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{114}
}

func (x *UriComponents) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *UriComponents) GetAuthority() string {
	if x != nil && x.Authority != nil {
		return *x.Authority
	}
	return ""
}

func (x *UriComponents) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *UriComponents) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *UriComponents) GetFragment() string {
	if x != nil && x.Fragment != nil {
		return *x.Fragment
	}
	return ""
}

type HoverDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeDetails    string   `protobuf:"bytes,1,opt,name=code_details,json=codeDetails,proto3" json:"code_details,omitempty"`
	MarkdownBlocks []string `protobuf:"bytes,2,rep,name=markdown_blocks,json=markdownBlocks,proto3" json:"markdown_blocks,omitempty"`
}

func (x *HoverDetails) Reset() {
	*x = HoverDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoverDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoverDetails) ProtoMessage() {}

func (x *HoverDetails) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoverDetails.ProtoReflect.Descriptor instead.
func (*HoverDetails) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{115}
}

func (x *HoverDetails) GetCodeDetails() string {
	if x != nil {
		return x.CodeDetails
	}
	return ""
}

func (x *HoverDetails) GetMarkdownBlocks() []string {
	if x != nil {
		return x.MarkdownBlocks
	}
	return nil
}

type StreamAiPreviewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamAiPreviewsResponse) Reset() {
	*x = StreamAiPreviewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiPreviewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiPreviewsResponse) ProtoMessage() {}

func (x *StreamAiPreviewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiPreviewsResponse.ProtoReflect.Descriptor instead.
func (*StreamAiPreviewsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{116}
}

func (x *StreamAiPreviewsResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ShouldTurnOnCppOnboardingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShouldTurnOnCppOnboardingRequest) Reset() {
	*x = ShouldTurnOnCppOnboardingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShouldTurnOnCppOnboardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldTurnOnCppOnboardingRequest) ProtoMessage() {}

func (x *ShouldTurnOnCppOnboardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldTurnOnCppOnboardingRequest.ProtoReflect.Descriptor instead.
func (*ShouldTurnOnCppOnboardingRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{117}
}

type ShouldTurnOnCppOnboardingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldTurnOnCppOnboarding bool `protobuf:"varint,1,opt,name=should_turn_on_cpp_onboarding,json=shouldTurnOnCppOnboarding,proto3" json:"should_turn_on_cpp_onboarding,omitempty"`
}

func (x *ShouldTurnOnCppOnboardingResponse) Reset() {
	*x = ShouldTurnOnCppOnboardingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShouldTurnOnCppOnboardingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldTurnOnCppOnboardingResponse) ProtoMessage() {}

func (x *ShouldTurnOnCppOnboardingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldTurnOnCppOnboardingResponse.ProtoReflect.Descriptor instead.
func (*ShouldTurnOnCppOnboardingResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{118}
}

func (x *ShouldTurnOnCppOnboardingResponse) GetShouldTurnOnCppOnboarding() bool {
	if x != nil {
		return x.ShouldTurnOnCppOnboarding
	}
	return false
}

type ReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk              string     `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileContext        string     `protobuf:"bytes,2,opt,name=file_context,json=fileContext,proto3" json:"file_context,omitempty"`
	ChunkRange         *LineRange `protobuf:"bytes,3,opt,name=chunk_range,json=chunkRange,proto3" json:"chunk_range,omitempty"`
	DiffString         *string    `protobuf:"bytes,4,opt,name=diff_string,json=diffString,proto3,oneof" json:"diff_string,omitempty"`
	CustomInstructions *string    `protobuf:"bytes,5,opt,name=custom_instructions,json=customInstructions,proto3,oneof" json:"custom_instructions,omitempty"`
}

func (x *ReviewRequest) Reset() {
	*x = ReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewRequest) ProtoMessage() {}

func (x *ReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewRequest.ProtoReflect.Descriptor instead.
func (*ReviewRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{119}
}

func (x *ReviewRequest) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *ReviewRequest) GetFileContext() string {
	if x != nil {
		return x.FileContext
	}
	return ""
}

func (x *ReviewRequest) GetChunkRange() *LineRange {
	if x != nil {
		return x.ChunkRange
	}
	return nil
}

func (x *ReviewRequest) GetDiffString() string {
	if x != nil && x.DiffString != nil {
		return *x.DiffString
	}
	return ""
}

func (x *ReviewRequest) GetCustomInstructions() string {
	if x != nil && x.CustomInstructions != nil {
		return *x.CustomInstructions
	}
	return ""
}

type ReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   string       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Prompt *string      `protobuf:"bytes,2,opt,name=prompt,proto3,oneof" json:"prompt,omitempty"`
	Tldr   *string      `protobuf:"bytes,3,opt,name=tldr,proto3,oneof" json:"tldr,omitempty"`
	IsBug  *bool        `protobuf:"varint,4,opt,name=is_bug,json=isBug,proto3,oneof" json:"is_bug,omitempty"`
	Bugs   []*ReviewBug `protobuf:"bytes,5,rep,name=bugs,proto3" json:"bugs,omitempty"`
}

func (x *ReviewResponse) Reset() {
	*x = ReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewResponse) ProtoMessage() {}

func (x *ReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewResponse.ProtoReflect.Descriptor instead.
func (*ReviewResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{120}
}

func (x *ReviewResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReviewResponse) GetPrompt() string {
	if x != nil && x.Prompt != nil {
		return *x.Prompt
	}
	return ""
}

func (x *ReviewResponse) GetTldr() string {
	if x != nil && x.Tldr != nil {
		return *x.Tldr
	}
	return ""
}

func (x *ReviewResponse) GetIsBug() bool {
	if x != nil && x.IsBug != nil {
		return *x.IsBug
	}
	return false
}

func (x *ReviewResponse) GetBugs() []*ReviewBug {
	if x != nil {
		return x.Bugs
	}
	return nil
}

type ReviewBug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartLine   *int32  `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3,oneof" json:"start_line,omitempty"`
	EndLine     *int32  `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3,oneof" json:"end_line,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Severity    *int32  `protobuf:"varint,5,opt,name=severity,proto3,oneof" json:"severity,omitempty"`
	Tldr        *string `protobuf:"bytes,6,opt,name=tldr,proto3,oneof" json:"tldr,omitempty"`
}

func (x *ReviewBug) Reset() {
	*x = ReviewBug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewBug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewBug) ProtoMessage() {}

func (x *ReviewBug) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewBug.ProtoReflect.Descriptor instead.
func (*ReviewBug) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{121}
}

func (x *ReviewBug) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReviewBug) GetStartLine() int32 {
	if x != nil && x.StartLine != nil {
		return *x.StartLine
	}
	return 0
}

func (x *ReviewBug) GetEndLine() int32 {
	if x != nil && x.EndLine != nil {
		return *x.EndLine
	}
	return 0
}

func (x *ReviewBug) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ReviewBug) GetSeverity() int32 {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return 0
}

func (x *ReviewBug) GetTldr() string {
	if x != nil && x.Tldr != nil {
		return *x.Tldr
	}
	return ""
}

type ReviewChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk       string               `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	FileContext string               `protobuf:"bytes,2,opt,name=file_context,json=fileContext,proto3" json:"file_context,omitempty"`
	ChunkRange  *LineRange           `protobuf:"bytes,3,opt,name=chunk_range,json=chunkRange,proto3" json:"chunk_range,omitempty"`
	Messages    []*ReviewChatMessage `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ReviewChatRequest) Reset() {
	*x = ReviewChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewChatRequest) ProtoMessage() {}

func (x *ReviewChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewChatRequest.ProtoReflect.Descriptor instead.
func (*ReviewChatRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{122}
}

func (x *ReviewChatRequest) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *ReviewChatRequest) GetFileContext() string {
	if x != nil {
		return x.FileContext
	}
	return ""
}

func (x *ReviewChatRequest) GetChunkRange() *LineRange {
	if x != nil {
		return x.ChunkRange
	}
	return nil
}

func (x *ReviewChatRequest) GetMessages() []*ReviewChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ReviewChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string                                  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type ReviewChatMessage_ReviewChatMessageType `protobuf:"varint,2,opt,name=type,proto3,enum=aiserver.v1.ReviewChatMessage_ReviewChatMessageType" json:"type,omitempty"`
}

func (x *ReviewChatMessage) Reset() {
	*x = ReviewChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewChatMessage) ProtoMessage() {}

func (x *ReviewChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewChatMessage.ProtoReflect.Descriptor instead.
func (*ReviewChatMessage) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{123}
}

func (x *ReviewChatMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReviewChatMessage) GetType() ReviewChatMessage_ReviewChatMessageType {
	if x != nil {
		return x.Type
	}
	return ReviewChatMessage_REVIEW_CHAT_MESSAGE_TYPE_UNSPECIFIED
}

type ReviewChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text          string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	ShouldResolve *bool  `protobuf:"varint,2,opt,name=should_resolve,json=shouldResolve,proto3,oneof" json:"should_resolve,omitempty"`
}

func (x *ReviewChatResponse) Reset() {
	*x = ReviewChatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewChatResponse) ProtoMessage() {}

func (x *ReviewChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewChatResponse.ProtoReflect.Descriptor instead.
func (*ReviewChatResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{124}
}

func (x *ReviewChatResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReviewChatResponse) GetShouldResolve() bool {
	if x != nil && x.ShouldResolve != nil {
		return *x.ShouldResolve
	}
	return false
}

type CheckQueuePositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigRequestId string        `protobuf:"bytes,1,opt,name=orig_request_id,json=origRequestId,proto3" json:"orig_request_id,omitempty"`
	ModelDetails  *ModelDetails `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	UsageUuid     string        `protobuf:"bytes,3,opt,name=usage_uuid,json=usageUuid,proto3" json:"usage_uuid,omitempty"`
}

func (x *CheckQueuePositionRequest) Reset() {
	*x = CheckQueuePositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueuePositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueuePositionRequest) ProtoMessage() {}

func (x *CheckQueuePositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueuePositionRequest.ProtoReflect.Descriptor instead.
func (*CheckQueuePositionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{125}
}

func (x *CheckQueuePositionRequest) GetOrigRequestId() string {
	if x != nil {
		return x.OrigRequestId
	}
	return ""
}

func (x *CheckQueuePositionRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *CheckQueuePositionRequest) GetUsageUuid() string {
	if x != nil {
		return x.UsageUuid
	}
	return ""
}

type CheckQueuePositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                           int32                                  `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	SecondsLeftToWait                  *int32                                 `protobuf:"varint,2,opt,name=seconds_left_to_wait,json=secondsLeftToWait,proto3,oneof" json:"seconds_left_to_wait,omitempty"`
	NewQueuePosition                   *int32                                 `protobuf:"varint,7,opt,name=new_queue_position,json=newQueuePosition,proto3,oneof" json:"new_queue_position,omitempty"`
	HitHardLimit                       bool                                   `protobuf:"varint,3,opt,name=hit_hard_limit,json=hitHardLimit,proto3" json:"hit_hard_limit,omitempty"`
	CouldEnableUsageBasedPricingToSkip bool                                   `protobuf:"varint,4,opt,name=could_enable_usage_based_pricing_to_skip,json=couldEnableUsageBasedPricingToSkip,proto3" json:"could_enable_usage_based_pricing_to_skip,omitempty"`
	UsageEventDetails                  *UsageEventDetails                     `protobuf:"bytes,5,opt,name=usage_event_details,json=usageEventDetails,proto3" json:"usage_event_details,omitempty"`
	CustomLink                         *CheckQueuePositionResponse_CustomLink `protobuf:"bytes,6,opt,name=custom_link,json=customLink,proto3" json:"custom_link,omitempty"`
}

func (x *CheckQueuePositionResponse) Reset() {
	*x = CheckQueuePositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueuePositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueuePositionResponse) ProtoMessage() {}

func (x *CheckQueuePositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueuePositionResponse.ProtoReflect.Descriptor instead.
func (*CheckQueuePositionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{126}
}

func (x *CheckQueuePositionResponse) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CheckQueuePositionResponse) GetSecondsLeftToWait() int32 {
	if x != nil && x.SecondsLeftToWait != nil {
		return *x.SecondsLeftToWait
	}
	return 0
}

func (x *CheckQueuePositionResponse) GetNewQueuePosition() int32 {
	if x != nil && x.NewQueuePosition != nil {
		return *x.NewQueuePosition
	}
	return 0
}

func (x *CheckQueuePositionResponse) GetHitHardLimit() bool {
	if x != nil {
		return x.HitHardLimit
	}
	return false
}

func (x *CheckQueuePositionResponse) GetCouldEnableUsageBasedPricingToSkip() bool {
	if x != nil {
		return x.CouldEnableUsageBasedPricingToSkip
	}
	return false
}

func (x *CheckQueuePositionResponse) GetUsageEventDetails() *UsageEventDetails {
	if x != nil {
		return x.UsageEventDetails
	}
	return nil
}

func (x *CheckQueuePositionResponse) GetCustomLink() *CheckQueuePositionResponse_CustomLink {
	if x != nil {
		return x.CustomLink
	}
	return nil
}

type UsageEventDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chat                    *UsageEventDetails_Chat                    `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	ContextChat             *UsageEventDetails_ContextChat             `protobuf:"bytes,2,opt,name=context_chat,json=contextChat,proto3" json:"context_chat,omitempty"`
	CmdK                    *UsageEventDetails_CmdK                    `protobuf:"bytes,3,opt,name=cmd_k,json=cmdK,proto3" json:"cmd_k,omitempty"`
	TerminalCmdK            *UsageEventDetails_TerminalCmdK            `protobuf:"bytes,4,opt,name=terminal_cmd_k,json=terminalCmdK,proto3" json:"terminal_cmd_k,omitempty"`
	AiReviewAcceptedComment *UsageEventDetails_AiReviewAcceptedComment `protobuf:"bytes,5,opt,name=ai_review_accepted_comment,json=aiReviewAcceptedComment,proto3" json:"ai_review_accepted_comment,omitempty"`
	InterpreterChat         *UsageEventDetails_InterpreterChat         `protobuf:"bytes,6,opt,name=interpreter_chat,json=interpreterChat,proto3" json:"interpreter_chat,omitempty"`
	SlashEdit               *UsageEventDetails_SlashEdit               `protobuf:"bytes,7,opt,name=slash_edit,json=slashEdit,proto3" json:"slash_edit,omitempty"`
}

func (x *UsageEventDetails) Reset() {
	*x = UsageEventDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails) ProtoMessage() {}

func (x *UsageEventDetails) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails.ProtoReflect.Descriptor instead.
func (*UsageEventDetails) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127}
}

func (x *UsageEventDetails) GetChat() *UsageEventDetails_Chat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *UsageEventDetails) GetContextChat() *UsageEventDetails_ContextChat {
	if x != nil {
		return x.ContextChat
	}
	return nil
}

func (x *UsageEventDetails) GetCmdK() *UsageEventDetails_CmdK {
	if x != nil {
		return x.CmdK
	}
	return nil
}

func (x *UsageEventDetails) GetTerminalCmdK() *UsageEventDetails_TerminalCmdK {
	if x != nil {
		return x.TerminalCmdK
	}
	return nil
}

func (x *UsageEventDetails) GetAiReviewAcceptedComment() *UsageEventDetails_AiReviewAcceptedComment {
	if x != nil {
		return x.AiReviewAcceptedComment
	}
	return nil
}

func (x *UsageEventDetails) GetInterpreterChat() *UsageEventDetails_InterpreterChat {
	if x != nil {
		return x.InterpreterChat
	}
	return nil
}

func (x *UsageEventDetails) GetSlashEdit() *UsageEventDetails_SlashEdit {
	if x != nil {
		return x.SlashEdit
	}
	return nil
}

type CheckUsageBasedPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsageEventDetails *UsageEventDetails `protobuf:"bytes,1,opt,name=usage_event_details,json=usageEventDetails,proto3" json:"usage_event_details,omitempty"`
}

func (x *CheckUsageBasedPriceRequest) Reset() {
	*x = CheckUsageBasedPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUsageBasedPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUsageBasedPriceRequest) ProtoMessage() {}

func (x *CheckUsageBasedPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUsageBasedPriceRequest.ProtoReflect.Descriptor instead.
func (*CheckUsageBasedPriceRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{128}
}

func (x *CheckUsageBasedPriceRequest) GetUsageEventDetails() *UsageEventDetails {
	if x != nil {
		return x.UsageEventDetails
	}
	return nil
}

type CheckUsageBasedPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkdownResponse string `protobuf:"bytes,1,opt,name=markdown_response,json=markdownResponse,proto3" json:"markdown_response,omitempty"`
	Cents            int32  `protobuf:"varint,2,opt,name=cents,proto3" json:"cents,omitempty"`
	PriceId          string `protobuf:"bytes,3,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
}

func (x *CheckUsageBasedPriceResponse) Reset() {
	*x = CheckUsageBasedPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUsageBasedPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUsageBasedPriceResponse) ProtoMessage() {}

func (x *CheckUsageBasedPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUsageBasedPriceResponse.ProtoReflect.Descriptor instead.
func (*CheckUsageBasedPriceResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{129}
}

func (x *CheckUsageBasedPriceResponse) GetMarkdownResponse() string {
	if x != nil {
		return x.MarkdownResponse
	}
	return ""
}

func (x *CheckUsageBasedPriceResponse) GetCents() int32 {
	if x != nil {
		return x.Cents
	}
	return 0
}

func (x *CheckUsageBasedPriceResponse) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

type DoThisForMeCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerationUuid string `protobuf:"bytes,1,opt,name=generation_uuid,json=generationUuid,proto3" json:"generation_uuid,omitempty"`
	Completion     string `protobuf:"bytes,2,opt,name=completion,proto3" json:"completion,omitempty"`
}

func (x *DoThisForMeCheckRequest) Reset() {
	*x = DoThisForMeCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeCheckRequest) ProtoMessage() {}

func (x *DoThisForMeCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeCheckRequest.ProtoReflect.Descriptor instead.
func (*DoThisForMeCheckRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{130}
}

func (x *DoThisForMeCheckRequest) GetGenerationUuid() string {
	if x != nil {
		return x.GenerationUuid
	}
	return ""
}

func (x *DoThisForMeCheckRequest) GetCompletion() string {
	if x != nil {
		return x.Completion
	}
	return ""
}

type DoThisForMeCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipAction   *DoThisForMeCheckResponse_SkipAction   `protobuf:"bytes,1,opt,name=skip_action,json=skipAction,proto3" json:"skip_action,omitempty"`
	EditAction   *DoThisForMeCheckResponse_EditAction   `protobuf:"bytes,2,opt,name=edit_action,json=editAction,proto3" json:"edit_action,omitempty"`
	CreateAction *DoThisForMeCheckResponse_CreateAction `protobuf:"bytes,3,opt,name=create_action,json=createAction,proto3" json:"create_action,omitempty"`
	RunAction    *DoThisForMeCheckResponse_RunAction    `protobuf:"bytes,4,opt,name=run_action,json=runAction,proto3" json:"run_action,omitempty"`
	Reasoning    string                                 `protobuf:"bytes,5,opt,name=reasoning,proto3" json:"reasoning,omitempty"`
}

func (x *DoThisForMeCheckResponse) Reset() {
	*x = DoThisForMeCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeCheckResponse) ProtoMessage() {}

func (x *DoThisForMeCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeCheckResponse.ProtoReflect.Descriptor instead.
func (*DoThisForMeCheckResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{131}
}

func (x *DoThisForMeCheckResponse) GetSkipAction() *DoThisForMeCheckResponse_SkipAction {
	if x != nil {
		return x.SkipAction
	}
	return nil
}

func (x *DoThisForMeCheckResponse) GetEditAction() *DoThisForMeCheckResponse_EditAction {
	if x != nil {
		return x.EditAction
	}
	return nil
}

func (x *DoThisForMeCheckResponse) GetCreateAction() *DoThisForMeCheckResponse_CreateAction {
	if x != nil {
		return x.CreateAction
	}
	return nil
}

func (x *DoThisForMeCheckResponse) GetRunAction() *DoThisForMeCheckResponse_RunAction {
	if x != nil {
		return x.RunAction
	}
	return nil
}

func (x *DoThisForMeCheckResponse) GetReasoning() string {
	if x != nil {
		return x.Reasoning
	}
	return ""
}

type DoThisForMeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerationUuid string                    `protobuf:"bytes,1,opt,name=generation_uuid,json=generationUuid,proto3" json:"generation_uuid,omitempty"`
	Completion     string                    `protobuf:"bytes,2,opt,name=completion,proto3" json:"completion,omitempty"`
	Action         *DoThisForMeCheckResponse `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *DoThisForMeRequest) Reset() {
	*x = DoThisForMeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeRequest) ProtoMessage() {}

func (x *DoThisForMeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeRequest.ProtoReflect.Descriptor instead.
func (*DoThisForMeRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{132}
}

func (x *DoThisForMeRequest) GetGenerationUuid() string {
	if x != nil {
		return x.GenerationUuid
	}
	return ""
}

func (x *DoThisForMeRequest) GetCompletion() string {
	if x != nil {
		return x.Completion
	}
	return ""
}

func (x *DoThisForMeRequest) GetAction() *DoThisForMeCheckResponse {
	if x != nil {
		return x.Action
	}
	return nil
}

type DoThisForMeResponseWrapped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealResponse       *DoThisForMeResponse `protobuf:"bytes,1,opt,name=real_response,json=realResponse,proto3" json:"real_response,omitempty"`
	BackgroundTaskUuid string               `protobuf:"bytes,2,opt,name=background_task_uuid,json=backgroundTaskUuid,proto3" json:"background_task_uuid,omitempty"`
}

func (x *DoThisForMeResponseWrapped) Reset() {
	*x = DoThisForMeResponseWrapped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeResponseWrapped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeResponseWrapped) ProtoMessage() {}

func (x *DoThisForMeResponseWrapped) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeResponseWrapped.ProtoReflect.Descriptor instead.
func (*DoThisForMeResponseWrapped) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{133}
}

func (x *DoThisForMeResponseWrapped) GetRealResponse() *DoThisForMeResponse {
	if x != nil {
		return x.RealResponse
	}
	return nil
}

func (x *DoThisForMeResponseWrapped) GetBackgroundTaskUuid() string {
	if x != nil {
		return x.BackgroundTaskUuid
	}
	return ""
}

type DoThisForMeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStatus *DoThisForMeResponse_UpdateStatus `protobuf:"bytes,1,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`
}

func (x *DoThisForMeResponse) Reset() {
	*x = DoThisForMeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeResponse) ProtoMessage() {}

func (x *DoThisForMeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeResponse.ProtoReflect.Descriptor instead.
func (*DoThisForMeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{134}
}

func (x *DoThisForMeResponse) GetUpdateStatus() *DoThisForMeResponse_UpdateStatus {
	if x != nil {
		return x.UpdateStatus
	}
	return nil
}

type StreamChatToolformerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolformerSessionId *string                                  `protobuf:"bytes,1,opt,name=toolformer_session_id,json=toolformerSessionId,proto3,oneof" json:"toolformer_session_id,omitempty"`
	Output              *StreamChatToolformerResponse_Output     `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	ToolAction          *StreamChatToolformerResponse_ToolAction `protobuf:"bytes,3,opt,name=tool_action,json=toolAction,proto3" json:"tool_action,omitempty"`
	Thought             *StreamChatToolformerResponse_Thought    `protobuf:"bytes,4,opt,name=thought,proto3" json:"thought,omitempty"`
}

func (x *StreamChatToolformerResponse) Reset() {
	*x = StreamChatToolformerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatToolformerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatToolformerResponse) ProtoMessage() {}

func (x *StreamChatToolformerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatToolformerResponse.ProtoReflect.Descriptor instead.
func (*StreamChatToolformerResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{135}
}

func (x *StreamChatToolformerResponse) GetToolformerSessionId() string {
	if x != nil && x.ToolformerSessionId != nil {
		return *x.ToolformerSessionId
	}
	return ""
}

func (x *StreamChatToolformerResponse) GetOutput() *StreamChatToolformerResponse_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *StreamChatToolformerResponse) GetToolAction() *StreamChatToolformerResponse_ToolAction {
	if x != nil {
		return x.ToolAction
	}
	return nil
}

func (x *StreamChatToolformerResponse) GetThought() *StreamChatToolformerResponse_Thought {
	if x != nil {
		return x.Thought
	}
	return nil
}

type ToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuiltinToolCall *BuiltinToolCall `protobuf:"bytes,1,opt,name=builtin_tool_call,json=builtinToolCall,proto3" json:"builtin_tool_call,omitempty"`
	CustomToolCall  *CustomToolCall  `protobuf:"bytes,2,opt,name=custom_tool_call,json=customToolCall,proto3" json:"custom_tool_call,omitempty"`
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{136}
}

func (x *ToolCall) GetBuiltinToolCall() *BuiltinToolCall {
	if x != nil {
		return x.BuiltinToolCall
	}
	return nil
}

func (x *ToolCall) GetCustomToolCall() *CustomToolCall {
	if x != nil {
		return x.CustomToolCall
	}
	return nil
}

type BuiltinToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tool                      BuiltinTool                `protobuf:"varint,1,opt,name=tool,proto3,enum=aiserver.v1.BuiltinTool" json:"tool,omitempty"`
	SearchParams              *SearchParams              `protobuf:"bytes,2,opt,name=search_params,json=searchParams,proto3" json:"search_params,omitempty"`
	ReadChunkParams           *ReadChunkParams           `protobuf:"bytes,3,opt,name=read_chunk_params,json=readChunkParams,proto3" json:"read_chunk_params,omitempty"`
	GotodefParams             *GotodefParams             `protobuf:"bytes,4,opt,name=gotodef_params,json=gotodefParams,proto3" json:"gotodef_params,omitempty"`
	EditParams                *EditParams                `protobuf:"bytes,5,opt,name=edit_params,json=editParams,proto3" json:"edit_params,omitempty"`
	UndoEditParams            *UndoEditParams            `protobuf:"bytes,6,opt,name=undo_edit_params,json=undoEditParams,proto3" json:"undo_edit_params,omitempty"`
	EndParams                 *EndParams                 `protobuf:"bytes,7,opt,name=end_params,json=endParams,proto3" json:"end_params,omitempty"`
	NewFileParams             *NewFileParams             `protobuf:"bytes,8,opt,name=new_file_params,json=newFileParams,proto3" json:"new_file_params,omitempty"`
	AddTestParams             *AddTestParams             `protobuf:"bytes,9,opt,name=add_test_params,json=addTestParams,proto3" json:"add_test_params,omitempty"`
	RunTestParams             *RunTestParams             `protobuf:"bytes,10,opt,name=run_test_params,json=runTestParams,proto3" json:"run_test_params,omitempty"`
	DeleteTestParams          *DeleteTestParams          `protobuf:"bytes,11,opt,name=delete_test_params,json=deleteTestParams,proto3" json:"delete_test_params,omitempty"`
	SaveFileParams            *SaveFileParams            `protobuf:"bytes,12,opt,name=save_file_params,json=saveFileParams,proto3" json:"save_file_params,omitempty"`
	GetTestsParams            *GetTestsParams            `protobuf:"bytes,13,opt,name=get_tests_params,json=getTestsParams,proto3" json:"get_tests_params,omitempty"`
	GetSymbolsParams          *GetSymbolsParams          `protobuf:"bytes,14,opt,name=get_symbols_params,json=getSymbolsParams,proto3" json:"get_symbols_params,omitempty"`
	SemanticSearchParams      *SemanticSearchParams      `protobuf:"bytes,15,opt,name=semantic_search_params,json=semanticSearchParams,proto3" json:"semantic_search_params,omitempty"`
	GetProjectStructureParams *GetProjectStructureParams `protobuf:"bytes,16,opt,name=get_project_structure_params,json=getProjectStructureParams,proto3" json:"get_project_structure_params,omitempty"`
	CreateRmFilesParams       *CreateRmFilesParams       `protobuf:"bytes,17,opt,name=create_rm_files_params,json=createRmFilesParams,proto3" json:"create_rm_files_params,omitempty"`
	RunTerminalCommandsParams *RunTerminalCommandsParams `protobuf:"bytes,18,opt,name=run_terminal_commands_params,json=runTerminalCommandsParams,proto3" json:"run_terminal_commands_params,omitempty"`
	NewEditParams             *NewEditParams             `protobuf:"bytes,19,opt,name=new_edit_params,json=newEditParams,proto3" json:"new_edit_params,omitempty"`
	ReadWithLinterParams      *ReadWithLinterParams      `protobuf:"bytes,20,opt,name=read_with_linter_params,json=readWithLinterParams,proto3" json:"read_with_linter_params,omitempty"`
}

func (x *BuiltinToolCall) Reset() {
	*x = BuiltinToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinToolCall) ProtoMessage() {}

func (x *BuiltinToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinToolCall.ProtoReflect.Descriptor instead.
func (*BuiltinToolCall) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{137}
}

func (x *BuiltinToolCall) GetTool() BuiltinTool {
	if x != nil {
		return x.Tool
	}
	return BuiltinTool_BUILTIN_TOOL_UNSPECIFIED
}

func (x *BuiltinToolCall) GetSearchParams() *SearchParams {
	if x != nil {
		return x.SearchParams
	}
	return nil
}

func (x *BuiltinToolCall) GetReadChunkParams() *ReadChunkParams {
	if x != nil {
		return x.ReadChunkParams
	}
	return nil
}

func (x *BuiltinToolCall) GetGotodefParams() *GotodefParams {
	if x != nil {
		return x.GotodefParams
	}
	return nil
}

func (x *BuiltinToolCall) GetEditParams() *EditParams {
	if x != nil {
		return x.EditParams
	}
	return nil
}

func (x *BuiltinToolCall) GetUndoEditParams() *UndoEditParams {
	if x != nil {
		return x.UndoEditParams
	}
	return nil
}

func (x *BuiltinToolCall) GetEndParams() *EndParams {
	if x != nil {
		return x.EndParams
	}
	return nil
}

func (x *BuiltinToolCall) GetNewFileParams() *NewFileParams {
	if x != nil {
		return x.NewFileParams
	}
	return nil
}

func (x *BuiltinToolCall) GetAddTestParams() *AddTestParams {
	if x != nil {
		return x.AddTestParams
	}
	return nil
}

func (x *BuiltinToolCall) GetRunTestParams() *RunTestParams {
	if x != nil {
		return x.RunTestParams
	}
	return nil
}

func (x *BuiltinToolCall) GetDeleteTestParams() *DeleteTestParams {
	if x != nil {
		return x.DeleteTestParams
	}
	return nil
}

func (x *BuiltinToolCall) GetSaveFileParams() *SaveFileParams {
	if x != nil {
		return x.SaveFileParams
	}
	return nil
}

func (x *BuiltinToolCall) GetGetTestsParams() *GetTestsParams {
	if x != nil {
		return x.GetTestsParams
	}
	return nil
}

func (x *BuiltinToolCall) GetGetSymbolsParams() *GetSymbolsParams {
	if x != nil {
		return x.GetSymbolsParams
	}
	return nil
}

func (x *BuiltinToolCall) GetSemanticSearchParams() *SemanticSearchParams {
	if x != nil {
		return x.SemanticSearchParams
	}
	return nil
}

func (x *BuiltinToolCall) GetGetProjectStructureParams() *GetProjectStructureParams {
	if x != nil {
		return x.GetProjectStructureParams
	}
	return nil
}

func (x *BuiltinToolCall) GetCreateRmFilesParams() *CreateRmFilesParams {
	if x != nil {
		return x.CreateRmFilesParams
	}
	return nil
}

func (x *BuiltinToolCall) GetRunTerminalCommandsParams() *RunTerminalCommandsParams {
	if x != nil {
		return x.RunTerminalCommandsParams
	}
	return nil
}

func (x *BuiltinToolCall) GetNewEditParams() *NewEditParams {
	if x != nil {
		return x.NewEditParams
	}
	return nil
}

func (x *BuiltinToolCall) GetReadWithLinterParams() *ReadWithLinterParams {
	if x != nil {
		return x.ReadWithLinterParams
	}
	return nil
}

type SearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Regex          bool   `protobuf:"varint,2,opt,name=regex,proto3" json:"regex,omitempty"`
	IncludePattern string `protobuf:"bytes,3,opt,name=include_pattern,json=includePattern,proto3" json:"include_pattern,omitempty"`
	ExcludePattern string `protobuf:"bytes,4,opt,name=exclude_pattern,json=excludePattern,proto3" json:"exclude_pattern,omitempty"`
	FilenameSearch bool   `protobuf:"varint,5,opt,name=filename_search,json=filenameSearch,proto3" json:"filename_search,omitempty"`
}

func (x *SearchParams) Reset() {
	*x = SearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParams) ProtoMessage() {}

func (x *SearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParams.ProtoReflect.Descriptor instead.
func (*SearchParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{138}
}

func (x *SearchParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchParams) GetRegex() bool {
	if x != nil {
		return x.Regex
	}
	return false
}

func (x *SearchParams) GetIncludePattern() string {
	if x != nil {
		return x.IncludePattern
	}
	return ""
}

func (x *SearchParams) GetExcludePattern() string {
	if x != nil {
		return x.ExcludePattern
	}
	return ""
}

func (x *SearchParams) GetFilenameSearch() bool {
	if x != nil {
		return x.FilenameSearch
	}
	return false
}

type ReadChunkParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32  `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	NumLines              *int32 `protobuf:"varint,3,opt,name=num_lines,json=numLines,proto3,oneof" json:"num_lines,omitempty"`
}

func (x *ReadChunkParams) Reset() {
	*x = ReadChunkParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadChunkParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkParams) ProtoMessage() {}

func (x *ReadChunkParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkParams.ProtoReflect.Descriptor instead.
func (*ReadChunkParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{139}
}

func (x *ReadChunkParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ReadChunkParams) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *ReadChunkParams) GetNumLines() int32 {
	if x != nil && x.NumLines != nil {
		return *x.NumLines
	}
	return 0
}

type GotodefParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineNumber            int32  `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Symbol                string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *GotodefParams) Reset() {
	*x = GotodefParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotodefParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotodefParams) ProtoMessage() {}

func (x *GotodefParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotodefParams.ProtoReflect.Descriptor instead.
func (*GotodefParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{140}
}

func (x *GotodefParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GotodefParams) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *GotodefParams) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type EditParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath        string                      `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineNumber                   *int32                      `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3,oneof" json:"line_number,omitempty"`
	ReplaceNumLines              int32                       `protobuf:"varint,3,opt,name=replace_num_lines,json=replaceNumLines,proto3" json:"replace_num_lines,omitempty"`
	NewLines                     []string                    `protobuf:"bytes,4,rep,name=new_lines,json=newLines,proto3" json:"new_lines,omitempty"`
	ReplaceWholeFile             *bool                       `protobuf:"varint,7,opt,name=replace_whole_file,json=replaceWholeFile,proto3,oneof" json:"replace_whole_file,omitempty"`
	EditId                       string                      `protobuf:"bytes,5,opt,name=edit_id,json=editId,proto3" json:"edit_id,omitempty"`
	FrontendEditType             EditParams_FrontendEditType `protobuf:"varint,6,opt,name=frontend_edit_type,json=frontendEditType,proto3,enum=aiserver.v1.EditParams_FrontendEditType" json:"frontend_edit_type,omitempty"`
	AutoFixAllLinterErrorsInFile *bool                       `protobuf:"varint,8,opt,name=auto_fix_all_linter_errors_in_file,json=autoFixAllLinterErrorsInFile,proto3,oneof" json:"auto_fix_all_linter_errors_in_file,omitempty"`
}

func (x *EditParams) Reset() {
	*x = EditParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditParams) ProtoMessage() {}

func (x *EditParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditParams.ProtoReflect.Descriptor instead.
func (*EditParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{141}
}

func (x *EditParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *EditParams) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *EditParams) GetReplaceNumLines() int32 {
	if x != nil {
		return x.ReplaceNumLines
	}
	return 0
}

func (x *EditParams) GetNewLines() []string {
	if x != nil {
		return x.NewLines
	}
	return nil
}

func (x *EditParams) GetReplaceWholeFile() bool {
	if x != nil && x.ReplaceWholeFile != nil {
		return *x.ReplaceWholeFile
	}
	return false
}

func (x *EditParams) GetEditId() string {
	if x != nil {
		return x.EditId
	}
	return ""
}

func (x *EditParams) GetFrontendEditType() EditParams_FrontendEditType {
	if x != nil {
		return x.FrontendEditType
	}
	return EditParams_FRONTEND_EDIT_TYPE_UNSPECIFIED
}

func (x *EditParams) GetAutoFixAllLinterErrorsInFile() bool {
	if x != nil && x.AutoFixAllLinterErrorsInFile != nil {
		return *x.AutoFixAllLinterErrorsInFile
	}
	return false
}

type UndoEditParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UndoEditParams) Reset() {
	*x = UndoEditParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoEditParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoEditParams) ProtoMessage() {}

func (x *UndoEditParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoEditParams.ProtoReflect.Descriptor instead.
func (*UndoEditParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{142}
}

type EndParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndParams) Reset() {
	*x = EndParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndParams) ProtoMessage() {}

func (x *EndParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndParams.ProtoReflect.Descriptor instead.
func (*EndParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{143}
}

type NewFileParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *NewFileParams) Reset() {
	*x = NewFileParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFileParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFileParams) ProtoMessage() {}

func (x *NewFileParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFileParams.ProtoReflect.Descriptor instead.
func (*NewFileParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{144}
}

func (x *NewFileParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type AddTestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	TestName              string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3" json:"test_name,omitempty"`
	TestCode              string `protobuf:"bytes,3,opt,name=test_code,json=testCode,proto3" json:"test_code,omitempty"`
}

func (x *AddTestParams) Reset() {
	*x = AddTestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestParams) ProtoMessage() {}

func (x *AddTestParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestParams.ProtoReflect.Descriptor instead.
func (*AddTestParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{145}
}

func (x *AddTestParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *AddTestParams) GetTestName() string {
	if x != nil {
		return x.TestName
	}
	return ""
}

func (x *AddTestParams) GetTestCode() string {
	if x != nil {
		return x.TestCode
	}
	return ""
}

type RunTestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string  `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	TestName              *string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3,oneof" json:"test_name,omitempty"`
}

func (x *RunTestParams) Reset() {
	*x = RunTestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestParams) ProtoMessage() {}

func (x *RunTestParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestParams.ProtoReflect.Descriptor instead.
func (*RunTestParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{146}
}

func (x *RunTestParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *RunTestParams) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

type DeleteTestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string  `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	TestName              *string `protobuf:"bytes,2,opt,name=test_name,json=testName,proto3,oneof" json:"test_name,omitempty"`
}

func (x *DeleteTestParams) Reset() {
	*x = DeleteTestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestParams) ProtoMessage() {}

func (x *DeleteTestParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestParams.ProtoReflect.Descriptor instead.
func (*DeleteTestParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{147}
}

func (x *DeleteTestParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *DeleteTestParams) GetTestName() string {
	if x != nil && x.TestName != nil {
		return *x.TestName
	}
	return ""
}

type SaveFileParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *SaveFileParams) Reset() {
	*x = SaveFileParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveFileParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFileParams) ProtoMessage() {}

func (x *SaveFileParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFileParams.ProtoReflect.Descriptor instead.
func (*SaveFileParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{148}
}

func (x *SaveFileParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type GetTestsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *GetTestsParams) Reset() {
	*x = GetTestsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestsParams) ProtoMessage() {}

func (x *GetTestsParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestsParams.ProtoReflect.Descriptor instead.
func (*GetTestsParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{149}
}

func (x *GetTestsParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type GetSymbolsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                      `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineRange             *GetSymbolsParams_LineRange `protobuf:"bytes,2,opt,name=line_range,json=lineRange,proto3,oneof" json:"line_range,omitempty"`
	IncludeChildren       bool                        `protobuf:"varint,3,opt,name=include_children,json=includeChildren,proto3" json:"include_children,omitempty"`
}

func (x *GetSymbolsParams) Reset() {
	*x = GetSymbolsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolsParams) ProtoMessage() {}

func (x *GetSymbolsParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolsParams.ProtoReflect.Descriptor instead.
func (*GetSymbolsParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{150}
}

func (x *GetSymbolsParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetSymbolsParams) GetLineRange() *GetSymbolsParams_LineRange {
	if x != nil {
		return x.LineRange
	}
	return nil
}

func (x *GetSymbolsParams) GetIncludeChildren() bool {
	if x != nil {
		return x.IncludeChildren
	}
	return false
}

type SemanticSearchParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          string  `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	IncludePattern *string `protobuf:"bytes,2,opt,name=include_pattern,json=includePattern,proto3,oneof" json:"include_pattern,omitempty"`
	ExcludePattern *string `protobuf:"bytes,3,opt,name=exclude_pattern,json=excludePattern,proto3,oneof" json:"exclude_pattern,omitempty"`
	TopK           int32   `protobuf:"varint,4,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	IndexId        *string `protobuf:"bytes,5,opt,name=index_id,json=indexId,proto3,oneof" json:"index_id,omitempty"`
	GrabWholeFile  bool    `protobuf:"varint,6,opt,name=grab_whole_file,json=grabWholeFile,proto3" json:"grab_whole_file,omitempty"`
}

func (x *SemanticSearchParams) Reset() {
	*x = SemanticSearchParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticSearchParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticSearchParams) ProtoMessage() {}

func (x *SemanticSearchParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticSearchParams.ProtoReflect.Descriptor instead.
func (*SemanticSearchParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{151}
}

func (x *SemanticSearchParams) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SemanticSearchParams) GetIncludePattern() string {
	if x != nil && x.IncludePattern != nil {
		return *x.IncludePattern
	}
	return ""
}

func (x *SemanticSearchParams) GetExcludePattern() string {
	if x != nil && x.ExcludePattern != nil {
		return *x.ExcludePattern
	}
	return ""
}

func (x *SemanticSearchParams) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SemanticSearchParams) GetIndexId() string {
	if x != nil && x.IndexId != nil {
		return *x.IndexId
	}
	return ""
}

func (x *SemanticSearchParams) GetGrabWholeFile() bool {
	if x != nil {
		return x.GrabWholeFile
	}
	return false
}

type GetProjectStructureParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProjectStructureParams) Reset() {
	*x = GetProjectStructureParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectStructureParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectStructureParams) ProtoMessage() {}

func (x *GetProjectStructureParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectStructureParams.ProtoReflect.Descriptor instead.
func (*GetProjectStructureParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{152}
}

type CreateRmFilesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemovedFilePaths      []string `protobuf:"bytes,1,rep,name=removed_file_paths,json=removedFilePaths,proto3" json:"removed_file_paths,omitempty"`
	CreatedFilePaths      []string `protobuf:"bytes,2,rep,name=created_file_paths,json=createdFilePaths,proto3" json:"created_file_paths,omitempty"`
	CreatedDirectoryPaths []string `protobuf:"bytes,3,rep,name=created_directory_paths,json=createdDirectoryPaths,proto3" json:"created_directory_paths,omitempty"`
}

func (x *CreateRmFilesParams) Reset() {
	*x = CreateRmFilesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRmFilesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRmFilesParams) ProtoMessage() {}

func (x *CreateRmFilesParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRmFilesParams.ProtoReflect.Descriptor instead.
func (*CreateRmFilesParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{153}
}

func (x *CreateRmFilesParams) GetRemovedFilePaths() []string {
	if x != nil {
		return x.RemovedFilePaths
	}
	return nil
}

func (x *CreateRmFilesParams) GetCreatedFilePaths() []string {
	if x != nil {
		return x.CreatedFilePaths
	}
	return nil
}

func (x *CreateRmFilesParams) GetCreatedDirectoryPaths() []string {
	if x != nil {
		return x.CreatedDirectoryPaths
	}
	return nil
}

type RunTerminalCommandsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands     []string `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	CommandsUuid string   `protobuf:"bytes,2,opt,name=commands_uuid,json=commandsUuid,proto3" json:"commands_uuid,omitempty"`
}

func (x *RunTerminalCommandsParams) Reset() {
	*x = RunTerminalCommandsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTerminalCommandsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTerminalCommandsParams) ProtoMessage() {}

func (x *RunTerminalCommandsParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTerminalCommandsParams.ProtoReflect.Descriptor instead.
func (*RunTerminalCommandsParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{154}
}

func (x *RunTerminalCommandsParams) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RunTerminalCommandsParams) GetCommandsUuid() string {
	if x != nil {
		return x.CommandsUuid
	}
	return ""
}

type NewEditParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       *int32 `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3,oneof" json:"start_line_number,omitempty"`
	EndLineNumber         *int32 `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3,oneof" json:"end_line_number,omitempty"`
	Text                  string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	EditId                string `protobuf:"bytes,5,opt,name=edit_id,json=editId,proto3" json:"edit_id,omitempty"`
	FirstEdit             bool   `protobuf:"varint,6,opt,name=first_edit,json=firstEdit,proto3" json:"first_edit,omitempty"`
}

func (x *NewEditParams) Reset() {
	*x = NewEditParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEditParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEditParams) ProtoMessage() {}

func (x *NewEditParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEditParams.ProtoReflect.Descriptor instead.
func (*NewEditParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{155}
}

func (x *NewEditParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *NewEditParams) GetStartLineNumber() int32 {
	if x != nil && x.StartLineNumber != nil {
		return *x.StartLineNumber
	}
	return 0
}

func (x *NewEditParams) GetEndLineNumber() int32 {
	if x != nil && x.EndLineNumber != nil {
		return *x.EndLineNumber
	}
	return 0
}

func (x *NewEditParams) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *NewEditParams) GetEditId() string {
	if x != nil {
		return x.EditId
	}
	return ""
}

func (x *NewEditParams) GetFirstEdit() bool {
	if x != nil {
		return x.FirstEdit
	}
	return false
}

type ReadWithLinterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *ReadWithLinterParams) Reset() {
	*x = ReadWithLinterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWithLinterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWithLinterParams) ProtoMessage() {}

func (x *ReadWithLinterParams) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWithLinterParams.ProtoReflect.Descriptor instead.
func (*ReadWithLinterParams) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{156}
}

func (x *ReadWithLinterParams) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type CustomToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolId string `protobuf:"bytes,1,opt,name=tool_id,json=toolId,proto3" json:"tool_id,omitempty"`
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *CustomToolCall) Reset() {
	*x = CustomToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomToolCall) ProtoMessage() {}

func (x *CustomToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomToolCall.ProtoReflect.Descriptor instead.
func (*CustomToolCall) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{157}
}

func (x *CustomToolCall) GetToolId() string {
	if x != nil {
		return x.ToolId
	}
	return ""
}

func (x *CustomToolCall) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type StreamChatToolformerContinueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolformerSessionId string      `protobuf:"bytes,1,opt,name=toolformer_session_id,json=toolformerSessionId,proto3" json:"toolformer_session_id,omitempty"`
	ToolResult          *ToolResult `protobuf:"bytes,2,opt,name=tool_result,json=toolResult,proto3" json:"tool_result,omitempty"`
}

func (x *StreamChatToolformerContinueRequest) Reset() {
	*x = StreamChatToolformerContinueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatToolformerContinueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatToolformerContinueRequest) ProtoMessage() {}

func (x *StreamChatToolformerContinueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatToolformerContinueRequest.ProtoReflect.Descriptor instead.
func (*StreamChatToolformerContinueRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{158}
}

func (x *StreamChatToolformerContinueRequest) GetToolformerSessionId() string {
	if x != nil {
		return x.ToolformerSessionId
	}
	return ""
}

func (x *StreamChatToolformerContinueRequest) GetToolResult() *ToolResult {
	if x != nil {
		return x.ToolResult
	}
	return nil
}

type ToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuiltinToolResult *BuiltinToolResult `protobuf:"bytes,1,opt,name=builtin_tool_result,json=builtinToolResult,proto3" json:"builtin_tool_result,omitempty"`
	CustomToolResult  *CustomToolResult  `protobuf:"bytes,2,opt,name=custom_tool_result,json=customToolResult,proto3" json:"custom_tool_result,omitempty"`
	ErrorToolResult   *ErrorToolResult   `protobuf:"bytes,3,opt,name=error_tool_result,json=errorToolResult,proto3" json:"error_tool_result,omitempty"`
}

func (x *ToolResult) Reset() {
	*x = ToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolResult) ProtoMessage() {}

func (x *ToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolResult.ProtoReflect.Descriptor instead.
func (*ToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{159}
}

func (x *ToolResult) GetBuiltinToolResult() *BuiltinToolResult {
	if x != nil {
		return x.BuiltinToolResult
	}
	return nil
}

func (x *ToolResult) GetCustomToolResult() *CustomToolResult {
	if x != nil {
		return x.CustomToolResult
	}
	return nil
}

func (x *ToolResult) GetErrorToolResult() *ErrorToolResult {
	if x != nil {
		return x.ErrorToolResult
	}
	return nil
}

type BuiltinToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tool                      BuiltinTool                `protobuf:"varint,1,opt,name=tool,proto3,enum=aiserver.v1.BuiltinTool" json:"tool,omitempty"`
	SearchResult              *SearchResult              `protobuf:"bytes,2,opt,name=search_result,json=searchResult,proto3" json:"search_result,omitempty"`
	ReadChunkResult           *ReadChunkResult           `protobuf:"bytes,3,opt,name=read_chunk_result,json=readChunkResult,proto3" json:"read_chunk_result,omitempty"`
	GotodefResult             *GotodefResult             `protobuf:"bytes,4,opt,name=gotodef_result,json=gotodefResult,proto3" json:"gotodef_result,omitempty"`
	EditResult                *EditResult                `protobuf:"bytes,5,opt,name=edit_result,json=editResult,proto3" json:"edit_result,omitempty"`
	UndoEditResult            *UndoEditResult            `protobuf:"bytes,6,opt,name=undo_edit_result,json=undoEditResult,proto3" json:"undo_edit_result,omitempty"`
	EndResult                 *EndResult                 `protobuf:"bytes,7,opt,name=end_result,json=endResult,proto3" json:"end_result,omitempty"`
	NewFileResult             *NewFileResult             `protobuf:"bytes,8,opt,name=new_file_result,json=newFileResult,proto3" json:"new_file_result,omitempty"`
	AddTestResult             *AddTestResult             `protobuf:"bytes,9,opt,name=add_test_result,json=addTestResult,proto3" json:"add_test_result,omitempty"`
	RunTestResult             *RunTestResult             `protobuf:"bytes,10,opt,name=run_test_result,json=runTestResult,proto3" json:"run_test_result,omitempty"`
	DeleteTestResult          *DeleteTestResult          `protobuf:"bytes,11,opt,name=delete_test_result,json=deleteTestResult,proto3" json:"delete_test_result,omitempty"`
	SaveFileResult            *SaveFileResult            `protobuf:"bytes,12,opt,name=save_file_result,json=saveFileResult,proto3" json:"save_file_result,omitempty"`
	GetTestsResult            *GetTestsResult            `protobuf:"bytes,13,opt,name=get_tests_result,json=getTestsResult,proto3" json:"get_tests_result,omitempty"`
	GetSymbolsResult          *GetSymbolsResult          `protobuf:"bytes,14,opt,name=get_symbols_result,json=getSymbolsResult,proto3" json:"get_symbols_result,omitempty"`
	SemanticSearchResult      *SemanticSearchResult      `protobuf:"bytes,15,opt,name=semantic_search_result,json=semanticSearchResult,proto3" json:"semantic_search_result,omitempty"`
	GetProjectStructureResult *GetProjectStructureResult `protobuf:"bytes,16,opt,name=get_project_structure_result,json=getProjectStructureResult,proto3" json:"get_project_structure_result,omitempty"`
	CreateRmFilesResult       *CreateRmFilesResult       `protobuf:"bytes,17,opt,name=create_rm_files_result,json=createRmFilesResult,proto3" json:"create_rm_files_result,omitempty"`
	RunTerminalCommandsResult *RunTerminalCommandsResult `protobuf:"bytes,18,opt,name=run_terminal_commands_result,json=runTerminalCommandsResult,proto3" json:"run_terminal_commands_result,omitempty"`
	NewEditResult             *NewEditResult             `protobuf:"bytes,19,opt,name=new_edit_result,json=newEditResult,proto3" json:"new_edit_result,omitempty"`
	ReadWithLinterResult      *ReadWithLinterResult      `protobuf:"bytes,20,opt,name=read_with_linter_result,json=readWithLinterResult,proto3" json:"read_with_linter_result,omitempty"`
}

func (x *BuiltinToolResult) Reset() {
	*x = BuiltinToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuiltinToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuiltinToolResult) ProtoMessage() {}

func (x *BuiltinToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuiltinToolResult.ProtoReflect.Descriptor instead.
func (*BuiltinToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{160}
}

func (x *BuiltinToolResult) GetTool() BuiltinTool {
	if x != nil {
		return x.Tool
	}
	return BuiltinTool_BUILTIN_TOOL_UNSPECIFIED
}

func (x *BuiltinToolResult) GetSearchResult() *SearchResult {
	if x != nil {
		return x.SearchResult
	}
	return nil
}

func (x *BuiltinToolResult) GetReadChunkResult() *ReadChunkResult {
	if x != nil {
		return x.ReadChunkResult
	}
	return nil
}

func (x *BuiltinToolResult) GetGotodefResult() *GotodefResult {
	if x != nil {
		return x.GotodefResult
	}
	return nil
}

func (x *BuiltinToolResult) GetEditResult() *EditResult {
	if x != nil {
		return x.EditResult
	}
	return nil
}

func (x *BuiltinToolResult) GetUndoEditResult() *UndoEditResult {
	if x != nil {
		return x.UndoEditResult
	}
	return nil
}

func (x *BuiltinToolResult) GetEndResult() *EndResult {
	if x != nil {
		return x.EndResult
	}
	return nil
}

func (x *BuiltinToolResult) GetNewFileResult() *NewFileResult {
	if x != nil {
		return x.NewFileResult
	}
	return nil
}

func (x *BuiltinToolResult) GetAddTestResult() *AddTestResult {
	if x != nil {
		return x.AddTestResult
	}
	return nil
}

func (x *BuiltinToolResult) GetRunTestResult() *RunTestResult {
	if x != nil {
		return x.RunTestResult
	}
	return nil
}

func (x *BuiltinToolResult) GetDeleteTestResult() *DeleteTestResult {
	if x != nil {
		return x.DeleteTestResult
	}
	return nil
}

func (x *BuiltinToolResult) GetSaveFileResult() *SaveFileResult {
	if x != nil {
		return x.SaveFileResult
	}
	return nil
}

func (x *BuiltinToolResult) GetGetTestsResult() *GetTestsResult {
	if x != nil {
		return x.GetTestsResult
	}
	return nil
}

func (x *BuiltinToolResult) GetGetSymbolsResult() *GetSymbolsResult {
	if x != nil {
		return x.GetSymbolsResult
	}
	return nil
}

func (x *BuiltinToolResult) GetSemanticSearchResult() *SemanticSearchResult {
	if x != nil {
		return x.SemanticSearchResult
	}
	return nil
}

func (x *BuiltinToolResult) GetGetProjectStructureResult() *GetProjectStructureResult {
	if x != nil {
		return x.GetProjectStructureResult
	}
	return nil
}

func (x *BuiltinToolResult) GetCreateRmFilesResult() *CreateRmFilesResult {
	if x != nil {
		return x.CreateRmFilesResult
	}
	return nil
}

func (x *BuiltinToolResult) GetRunTerminalCommandsResult() *RunTerminalCommandsResult {
	if x != nil {
		return x.RunTerminalCommandsResult
	}
	return nil
}

func (x *BuiltinToolResult) GetNewEditResult() *NewEditResult {
	if x != nil {
		return x.NewEditResult
	}
	return nil
}

func (x *BuiltinToolResult) GetReadWithLinterResult() *ReadWithLinterResult {
	if x != nil {
		return x.ReadWithLinterResult
	}
	return nil
}

type SearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileResults             []*SearchToolFileSearchResult `protobuf:"bytes,1,rep,name=file_results,json=fileResults,proto3" json:"file_results,omitempty"`
	NumTotalMatches         int32                         `protobuf:"varint,2,opt,name=num_total_matches,json=numTotalMatches,proto3" json:"num_total_matches,omitempty"`
	NumTotalMatchedFiles    int32                         `protobuf:"varint,3,opt,name=num_total_matched_files,json=numTotalMatchedFiles,proto3" json:"num_total_matched_files,omitempty"`
	NumTotalMayBeIncomplete bool                          `protobuf:"varint,4,opt,name=num_total_may_be_incomplete,json=numTotalMayBeIncomplete,proto3" json:"num_total_may_be_incomplete,omitempty"`
	FilesOnly               bool                          `protobuf:"varint,5,opt,name=files_only,json=filesOnly,proto3" json:"files_only,omitempty"`
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{161}
}

func (x *SearchResult) GetFileResults() []*SearchToolFileSearchResult {
	if x != nil {
		return x.FileResults
	}
	return nil
}

func (x *SearchResult) GetNumTotalMatches() int32 {
	if x != nil {
		return x.NumTotalMatches
	}
	return 0
}

func (x *SearchResult) GetNumTotalMatchedFiles() int32 {
	if x != nil {
		return x.NumTotalMatchedFiles
	}
	return 0
}

func (x *SearchResult) GetNumTotalMayBeIncomplete() bool {
	if x != nil {
		return x.NumTotalMayBeIncomplete
	}
	return false
}

func (x *SearchResult) GetFilesOnly() bool {
	if x != nil {
		return x.FilesOnly
	}
	return false
}

type SearchToolFileSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath    string                             `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	NumMatches               int32                              `protobuf:"varint,2,opt,name=num_matches,json=numMatches,proto3" json:"num_matches,omitempty"`
	PotentiallyRelevantLines []*SearchToolFileSearchResult_Line `protobuf:"bytes,3,rep,name=potentially_relevant_lines,json=potentiallyRelevantLines,proto3" json:"potentially_relevant_lines,omitempty"`
	Cropped                  bool                               `protobuf:"varint,4,opt,name=cropped,proto3" json:"cropped,omitempty"`
}

func (x *SearchToolFileSearchResult) Reset() {
	*x = SearchToolFileSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchToolFileSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchToolFileSearchResult) ProtoMessage() {}

func (x *SearchToolFileSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchToolFileSearchResult.ProtoReflect.Descriptor instead.
func (*SearchToolFileSearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{162}
}

func (x *SearchToolFileSearchResult) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *SearchToolFileSearchResult) GetNumMatches() int32 {
	if x != nil {
		return x.NumMatches
	}
	return 0
}

func (x *SearchToolFileSearchResult) GetPotentiallyRelevantLines() []*SearchToolFileSearchResult_Line {
	if x != nil {
		return x.PotentiallyRelevantLines
	}
	return nil
}

func (x *SearchToolFileSearchResult) GetCropped() bool {
	if x != nil {
		return x.Cropped
	}
	return false
}

type ReadChunkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	TotalNumLines         int32    `protobuf:"varint,4,opt,name=total_num_lines,json=totalNumLines,proto3" json:"total_num_lines,omitempty"`
	Cropped               bool     `protobuf:"varint,5,opt,name=cropped,proto3" json:"cropped,omitempty"`
}

func (x *ReadChunkResult) Reset() {
	*x = ReadChunkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadChunkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChunkResult) ProtoMessage() {}

func (x *ReadChunkResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChunkResult.ProtoReflect.Descriptor instead.
func (*ReadChunkResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{163}
}

func (x *ReadChunkResult) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ReadChunkResult) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *ReadChunkResult) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *ReadChunkResult) GetTotalNumLines() int32 {
	if x != nil {
		return x.TotalNumLines
	}
	return 0
}

func (x *ReadChunkResult) GetCropped() bool {
	if x != nil {
		return x.Cropped
	}
	return false
}

type GotodefResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GotodefToolFileSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GotodefResult) Reset() {
	*x = GotodefResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotodefResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotodefResult) ProtoMessage() {}

func (x *GotodefResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotodefResult.ProtoReflect.Descriptor instead.
func (*GotodefResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{164}
}

func (x *GotodefResult) GetResults() []*GotodefToolFileSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GotodefToolFileSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath    string                              `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	PotentiallyRelevantLines []*GotodefToolFileSearchResult_Line `protobuf:"bytes,3,rep,name=potentially_relevant_lines,json=potentiallyRelevantLines,proto3" json:"potentially_relevant_lines,omitempty"`
}

func (x *GotodefToolFileSearchResult) Reset() {
	*x = GotodefToolFileSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotodefToolFileSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotodefToolFileSearchResult) ProtoMessage() {}

func (x *GotodefToolFileSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotodefToolFileSearchResult.ProtoReflect.Descriptor instead.
func (*GotodefToolFileSearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{165}
}

func (x *GotodefToolFileSearchResult) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GotodefToolFileSearchResult) GetPotentiallyRelevantLines() []*GotodefToolFileSearchResult_Line {
	if x != nil {
		return x.PotentiallyRelevantLines
	}
	return nil
}

type EditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feedback               []string               `protobuf:"bytes,1,rep,name=feedback,proto3" json:"feedback,omitempty"`
	ContextStartLineNumber int32                  `protobuf:"varint,2,opt,name=context_start_line_number,json=contextStartLineNumber,proto3" json:"context_start_line_number,omitempty"`
	ContextLines           []string               `protobuf:"bytes,3,rep,name=context_lines,json=contextLines,proto3" json:"context_lines,omitempty"`
	File                   string                 `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	FileTotalLines         int32                  `protobuf:"varint,5,opt,name=file_total_lines,json=fileTotalLines,proto3" json:"file_total_lines,omitempty"`
	StructuredFeedback     []*EditResult_Feedback `protobuf:"bytes,6,rep,name=structured_feedback,json=structuredFeedback,proto3" json:"structured_feedback,omitempty"`
}

func (x *EditResult) Reset() {
	*x = EditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditResult) ProtoMessage() {}

func (x *EditResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditResult.ProtoReflect.Descriptor instead.
func (*EditResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{166}
}

func (x *EditResult) GetFeedback() []string {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *EditResult) GetContextStartLineNumber() int32 {
	if x != nil {
		return x.ContextStartLineNumber
	}
	return 0
}

func (x *EditResult) GetContextLines() []string {
	if x != nil {
		return x.ContextLines
	}
	return nil
}

func (x *EditResult) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *EditResult) GetFileTotalLines() int32 {
	if x != nil {
		return x.FileTotalLines
	}
	return 0
}

func (x *EditResult) GetStructuredFeedback() []*EditResult_Feedback {
	if x != nil {
		return x.StructuredFeedback
	}
	return nil
}

type UndoEditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feedback               []string `protobuf:"bytes,1,rep,name=feedback,proto3" json:"feedback,omitempty"`
	RelativeWorkspacePath  string   `protobuf:"bytes,4,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	ContextStartLineNumber int32    `protobuf:"varint,2,opt,name=context_start_line_number,json=contextStartLineNumber,proto3" json:"context_start_line_number,omitempty"`
	ContextLines           []string `protobuf:"bytes,3,rep,name=context_lines,json=contextLines,proto3" json:"context_lines,omitempty"`
	ContextTotalNumLines   int32    `protobuf:"varint,5,opt,name=context_total_num_lines,json=contextTotalNumLines,proto3" json:"context_total_num_lines,omitempty"`
	FileTotalLines         int32    `protobuf:"varint,6,opt,name=file_total_lines,json=fileTotalLines,proto3" json:"file_total_lines,omitempty"`
}

func (x *UndoEditResult) Reset() {
	*x = UndoEditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndoEditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndoEditResult) ProtoMessage() {}

func (x *UndoEditResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndoEditResult.ProtoReflect.Descriptor instead.
func (*UndoEditResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{167}
}

func (x *UndoEditResult) GetFeedback() []string {
	if x != nil {
		return x.Feedback
	}
	return nil
}

func (x *UndoEditResult) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *UndoEditResult) GetContextStartLineNumber() int32 {
	if x != nil {
		return x.ContextStartLineNumber
	}
	return 0
}

func (x *UndoEditResult) GetContextLines() []string {
	if x != nil {
		return x.ContextLines
	}
	return nil
}

func (x *UndoEditResult) GetContextTotalNumLines() int32 {
	if x != nil {
		return x.ContextTotalNumLines
	}
	return 0
}

func (x *UndoEditResult) GetFileTotalLines() int32 {
	if x != nil {
		return x.FileTotalLines
	}
	return 0
}

type EndResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndResult) Reset() {
	*x = EndResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndResult) ProtoMessage() {}

func (x *EndResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndResult.ProtoReflect.Descriptor instead.
func (*EndResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{168}
}

type NewFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	FileTotalLines        int32  `protobuf:"varint,2,opt,name=file_total_lines,json=fileTotalLines,proto3" json:"file_total_lines,omitempty"`
}

func (x *NewFileResult) Reset() {
	*x = NewFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFileResult) ProtoMessage() {}

func (x *NewFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFileResult.ProtoReflect.Descriptor instead.
func (*NewFileResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{169}
}

func (x *NewFileResult) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *NewFileResult) GetFileTotalLines() int32 {
	if x != nil {
		return x.FileTotalLines
	}
	return 0
}

type AddTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feedback []*AddTestResult_Feedback `protobuf:"bytes,1,rep,name=feedback,proto3" json:"feedback,omitempty"`
}

func (x *AddTestResult) Reset() {
	*x = AddTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestResult) ProtoMessage() {}

func (x *AddTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestResult.ProtoReflect.Descriptor instead.
func (*AddTestResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{170}
}

func (x *AddTestResult) GetFeedback() []*AddTestResult_Feedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

type RunTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RunTestResult) Reset() {
	*x = RunTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestResult) ProtoMessage() {}

func (x *RunTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestResult.ProtoReflect.Descriptor instead.
func (*RunTestResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{171}
}

func (x *RunTestResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type DeleteTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTestResult) Reset() {
	*x = DeleteTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestResult) ProtoMessage() {}

func (x *DeleteTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestResult.ProtoReflect.Descriptor instead.
func (*DeleteTestResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{172}
}

type SaveFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveFileResult) Reset() {
	*x = SaveFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveFileResult) ProtoMessage() {}

func (x *SaveFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveFileResult.ProtoReflect.Descriptor instead.
func (*SaveFileResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{173}
}

type GetTestsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*GetTestsResult_Test `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *GetTestsResult) Reset() {
	*x = GetTestsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestsResult) ProtoMessage() {}

func (x *GetTestsResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestsResult.ProtoReflect.Descriptor instead.
func (*GetTestsResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{174}
}

func (x *GetTestsResult) GetTests() []*GetTestsResult_Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

type GetSymbolsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []*DocumentSymbol `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
}

func (x *GetSymbolsResult) Reset() {
	*x = GetSymbolsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolsResult) ProtoMessage() {}

func (x *GetSymbolsResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolsResult.ProtoReflect.Descriptor instead.
func (*GetSymbolsResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{175}
}

func (x *GetSymbolsResult) GetSymbols() []*DocumentSymbol {
	if x != nil {
		return x.Symbols
	}
	return nil
}

type SemanticSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*SemanticSearchResult_Item `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *SemanticSearchResult) Reset() {
	*x = SemanticSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticSearchResult) ProtoMessage() {}

func (x *SemanticSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticSearchResult.ProtoReflect.Descriptor instead.
func (*SemanticSearchResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{176}
}

func (x *SemanticSearchResult) GetResults() []*SemanticSearchResult_Item {
	if x != nil {
		return x.Results
	}
	return nil
}

type SimpleRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber        int32 `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	StartColumn            int32 `protobuf:"varint,2,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndLineNumberInclusive int32 `protobuf:"varint,3,opt,name=end_line_number_inclusive,json=endLineNumberInclusive,proto3" json:"end_line_number_inclusive,omitempty"`
	EndColumn              int32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *SimpleRange) Reset() {
	*x = SimpleRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRange) ProtoMessage() {}

func (x *SimpleRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRange.ProtoReflect.Descriptor instead.
func (*SimpleRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{177}
}

func (x *SimpleRange) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *SimpleRange) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *SimpleRange) GetEndLineNumberInclusive() int32 {
	if x != nil {
		return x.EndLineNumberInclusive
	}
	return 0
}

func (x *SimpleRange) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type GetProjectStructureResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files             []*GetProjectStructureResult_File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	RootWorkspacePath string                            `protobuf:"bytes,2,opt,name=root_workspace_path,json=rootWorkspacePath,proto3" json:"root_workspace_path,omitempty"`
}

func (x *GetProjectStructureResult) Reset() {
	*x = GetProjectStructureResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectStructureResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectStructureResult) ProtoMessage() {}

func (x *GetProjectStructureResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectStructureResult.ProtoReflect.Descriptor instead.
func (*GetProjectStructureResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{178}
}

func (x *GetProjectStructureResult) GetFiles() []*GetProjectStructureResult_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GetProjectStructureResult) GetRootWorkspacePath() string {
	if x != nil {
		return x.RootWorkspacePath
	}
	return ""
}

type CreateRmFilesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedFilePaths []string `protobuf:"bytes,1,rep,name=created_file_paths,json=createdFilePaths,proto3" json:"created_file_paths,omitempty"`
	RemovedFilePaths []string `protobuf:"bytes,2,rep,name=removed_file_paths,json=removedFilePaths,proto3" json:"removed_file_paths,omitempty"`
}

func (x *CreateRmFilesResult) Reset() {
	*x = CreateRmFilesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRmFilesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRmFilesResult) ProtoMessage() {}

func (x *CreateRmFilesResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRmFilesResult.ProtoReflect.Descriptor instead.
func (*CreateRmFilesResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{179}
}

func (x *CreateRmFilesResult) GetCreatedFilePaths() []string {
	if x != nil {
		return x.CreatedFilePaths
	}
	return nil
}

func (x *CreateRmFilesResult) GetRemovedFilePaths() []string {
	if x != nil {
		return x.RemovedFilePaths
	}
	return nil
}

type RunTerminalCommandsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []string `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *RunTerminalCommandsResult) Reset() {
	*x = RunTerminalCommandsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTerminalCommandsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTerminalCommandsResult) ProtoMessage() {}

func (x *RunTerminalCommandsResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTerminalCommandsResult.ProtoReflect.Descriptor instead.
func (*RunTerminalCommandsResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{180}
}

func (x *RunTerminalCommandsResult) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type NewEditResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewEditResult) Reset() {
	*x = NewEditResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEditResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEditResult) ProtoMessage() {}

func (x *NewEditResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEditResult.ProtoReflect.Descriptor instead.
func (*NewEditResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{181}
}

type ReadWithLinterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents    string        `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Diagnostics []*Diagnostic `protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ReadWithLinterResult) Reset() {
	*x = ReadWithLinterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadWithLinterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWithLinterResult) ProtoMessage() {}

func (x *ReadWithLinterResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWithLinterResult.ProtoReflect.Descriptor instead.
func (*ReadWithLinterResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{182}
}

func (x *ReadWithLinterResult) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *ReadWithLinterResult) GetDiagnostics() []*Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type CustomToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolId string `protobuf:"bytes,1,opt,name=tool_id,json=toolId,proto3" json:"tool_id,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CustomToolResult) Reset() {
	*x = CustomToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomToolResult) ProtoMessage() {}

func (x *CustomToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomToolResult.ProtoReflect.Descriptor instead.
func (*CustomToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{183}
}

func (x *CustomToolResult) GetToolId() string {
	if x != nil {
		return x.ToolId
	}
	return ""
}

func (x *CustomToolResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type ErrorToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ErrorToolResult) Reset() {
	*x = ErrorToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorToolResult) ProtoMessage() {}

func (x *ErrorToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorToolResult.ProtoReflect.Descriptor instead.
func (*ErrorToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{184}
}

func (x *ErrorToolResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type PushAiThoughtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thought       string                         `protobuf:"bytes,1,opt,name=thought,proto3" json:"thought,omitempty"`
	CmdKDebugInfo *CmdKDebugInfo                 `protobuf:"bytes,2,opt,name=cmd_k_debug_info,json=cmdKDebugInfo,proto3" json:"cmd_k_debug_info,omitempty"`
	Automated     bool                           `protobuf:"varint,3,opt,name=automated,proto3" json:"automated,omitempty"`
	Metadata      *PushAiThoughtRequest_Metadata `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *PushAiThoughtRequest) Reset() {
	*x = PushAiThoughtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushAiThoughtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushAiThoughtRequest) ProtoMessage() {}

func (x *PushAiThoughtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushAiThoughtRequest.ProtoReflect.Descriptor instead.
func (*PushAiThoughtRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{185}
}

func (x *PushAiThoughtRequest) GetThought() string {
	if x != nil {
		return x.Thought
	}
	return ""
}

func (x *PushAiThoughtRequest) GetCmdKDebugInfo() *CmdKDebugInfo {
	if x != nil {
		return x.CmdKDebugInfo
	}
	return nil
}

func (x *PushAiThoughtRequest) GetAutomated() bool {
	if x != nil {
		return x.Automated
	}
	return false
}

func (x *PushAiThoughtRequest) GetMetadata() *PushAiThoughtRequest_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PushAiThoughtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushAiThoughtResponse) Reset() {
	*x = PushAiThoughtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushAiThoughtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushAiThoughtResponse) ProtoMessage() {}

func (x *PushAiThoughtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushAiThoughtResponse.ProtoReflect.Descriptor instead.
func (*PushAiThoughtResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{186}
}

type CheckDoableAsTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelOutput  string        `protobuf:"bytes,1,opt,name=model_output,json=modelOutput,proto3" json:"model_output,omitempty"`
	ModelDetails *ModelDetails `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *CheckDoableAsTaskRequest) Reset() {
	*x = CheckDoableAsTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDoableAsTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDoableAsTaskRequest) ProtoMessage() {}

func (x *CheckDoableAsTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDoableAsTaskRequest.ProtoReflect.Descriptor instead.
func (*CheckDoableAsTaskRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{187}
}

func (x *CheckDoableAsTaskRequest) GetModelOutput() string {
	if x != nil {
		return x.ModelOutput
	}
	return ""
}

func (x *CheckDoableAsTaskRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type CheckDoableAsTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoableAsTask bool `protobuf:"varint,1,opt,name=doable_as_task,json=doableAsTask,proto3" json:"doable_as_task,omitempty"`
}

func (x *CheckDoableAsTaskResponse) Reset() {
	*x = CheckDoableAsTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDoableAsTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDoableAsTaskResponse) ProtoMessage() {}

func (x *CheckDoableAsTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDoableAsTaskResponse.ProtoReflect.Descriptor instead.
func (*CheckDoableAsTaskResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{188}
}

func (x *CheckDoableAsTaskResponse) GetDoableAsTask() bool {
	if x != nil {
		return x.DoableAsTask
	}
	return false
}

type ReportGroundTruthCandidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId                  string      `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	TimeSinceCompletedActionMs int32       `protobuf:"varint,2,opt,name=time_since_completed_action_ms,json=timeSinceCompletedActionMs,proto3" json:"time_since_completed_action_ms,omitempty"`
	FeatureType                FeatureType `protobuf:"varint,3,opt,name=feature_type,json=featureType,proto3,enum=aiserver.v1.FeatureType" json:"feature_type,omitempty"`
	RelativeWorkspacePath      string      `protobuf:"bytes,4,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents                   string      `protobuf:"bytes,5,opt,name=contents,proto3" json:"contents,omitempty"`
	SelectionInQuestion        *LineRange  `protobuf:"bytes,6,opt,name=selection_in_question,json=selectionInQuestion,proto3" json:"selection_in_question,omitempty"`
	LinesAboveAndBelow         int32       `protobuf:"varint,7,opt,name=lines_above_and_below,json=linesAboveAndBelow,proto3" json:"lines_above_and_below,omitempty"`
}

func (x *ReportGroundTruthCandidateRequest) Reset() {
	*x = ReportGroundTruthCandidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportGroundTruthCandidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGroundTruthCandidateRequest) ProtoMessage() {}

func (x *ReportGroundTruthCandidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGroundTruthCandidateRequest.ProtoReflect.Descriptor instead.
func (*ReportGroundTruthCandidateRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{189}
}

func (x *ReportGroundTruthCandidateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReportGroundTruthCandidateRequest) GetTimeSinceCompletedActionMs() int32 {
	if x != nil {
		return x.TimeSinceCompletedActionMs
	}
	return 0
}

func (x *ReportGroundTruthCandidateRequest) GetFeatureType() FeatureType {
	if x != nil {
		return x.FeatureType
	}
	return FeatureType_FEATURE_TYPE_UNSPECIFIED
}

func (x *ReportGroundTruthCandidateRequest) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ReportGroundTruthCandidateRequest) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *ReportGroundTruthCandidateRequest) GetSelectionInQuestion() *LineRange {
	if x != nil {
		return x.SelectionInQuestion
	}
	return nil
}

func (x *ReportGroundTruthCandidateRequest) GetLinesAboveAndBelow() int32 {
	if x != nil {
		return x.LinesAboveAndBelow
	}
	return 0
}

type ReportGroundTruthCandidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportGroundTruthCandidateResponse) Reset() {
	*x = ReportGroundTruthCandidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportGroundTruthCandidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGroundTruthCandidateResponse) ProtoMessage() {}

func (x *ReportGroundTruthCandidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGroundTruthCandidateResponse.ProtoReflect.Descriptor instead.
func (*ReportGroundTruthCandidateResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{190}
}

type ReportCmdKFateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                     `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Fate      ReportCmdKFateRequest_Fate `protobuf:"varint,2,opt,name=fate,proto3,enum=aiserver.v1.ReportCmdKFateRequest_Fate" json:"fate,omitempty"`
}

func (x *ReportCmdKFateRequest) Reset() {
	*x = ReportCmdKFateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCmdKFateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCmdKFateRequest) ProtoMessage() {}

func (x *ReportCmdKFateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCmdKFateRequest.ProtoReflect.Descriptor instead.
func (*ReportCmdKFateRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{191}
}

func (x *ReportCmdKFateRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReportCmdKFateRequest) GetFate() ReportCmdKFateRequest_Fate {
	if x != nil {
		return x.Fate
	}
	return ReportCmdKFateRequest_FATE_UNSPECIFIED
}

type ReportCmdKFateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportCmdKFateResponse) Reset() {
	*x = ReportCmdKFateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCmdKFateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCmdKFateResponse) ProtoMessage() {}

func (x *ReportCmdKFateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCmdKFateResponse.ProtoReflect.Descriptor instead.
func (*ReportCmdKFateResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{192}
}

type ShowWelcomeScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShowWelcomeScreenRequest) Reset() {
	*x = ShowWelcomeScreenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowWelcomeScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowWelcomeScreenRequest) ProtoMessage() {}

func (x *ShowWelcomeScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowWelcomeScreenRequest.ProtoReflect.Descriptor instead.
func (*ShowWelcomeScreenRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{193}
}

type ShowWelcomeScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableCards []string `protobuf:"bytes,1,rep,name=enable_cards,json=enableCards,proto3" json:"enable_cards,omitempty"`
}

func (x *ShowWelcomeScreenResponse) Reset() {
	*x = ShowWelcomeScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowWelcomeScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowWelcomeScreenResponse) ProtoMessage() {}

func (x *ShowWelcomeScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowWelcomeScreenResponse.ProtoReflect.Descriptor instead.
func (*ShowWelcomeScreenResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{194}
}

func (x *ShowWelcomeScreenResponse) GetEnableCards() []string {
	if x != nil {
		return x.EnableCards
	}
	return nil
}

type InterfaceAgentInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelDetails              *ModelDetails              `protobuf:"bytes,1,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DebuggingOnlyLiveMode     bool                       `protobuf:"varint,2,opt,name=debugging_only_live_mode,json=debuggingOnlyLiveMode,proto3" json:"debugging_only_live_mode,omitempty"`
	InterfaceAgentClientState *InterfaceAgentClientState `protobuf:"bytes,3,opt,name=interface_agent_client_state,json=interfaceAgentClientState,proto3" json:"interface_agent_client_state,omitempty"`
}

func (x *InterfaceAgentInitRequest) Reset() {
	*x = InterfaceAgentInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAgentInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAgentInitRequest) ProtoMessage() {}

func (x *InterfaceAgentInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAgentInitRequest.ProtoReflect.Descriptor instead.
func (*InterfaceAgentInitRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{195}
}

func (x *InterfaceAgentInitRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *InterfaceAgentInitRequest) GetDebuggingOnlyLiveMode() bool {
	if x != nil {
		return x.DebuggingOnlyLiveMode
	}
	return false
}

func (x *InterfaceAgentInitRequest) GetInterfaceAgentClientState() *InterfaceAgentClientState {
	if x != nil {
		return x.InterfaceAgentClientState
	}
	return nil
}

type InterfaceAgentClientState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceRelativeWorkspacePath      string   `protobuf:"bytes,3,opt,name=interface_relative_workspace_path,json=interfaceRelativeWorkspacePath,proto3" json:"interface_relative_workspace_path,omitempty"`
	InterfaceLines                      []string `protobuf:"bytes,4,rep,name=interface_lines,json=interfaceLines,proto3" json:"interface_lines,omitempty"`
	TestRelativeWorkspacePath           *string  `protobuf:"bytes,5,opt,name=test_relative_workspace_path,json=testRelativeWorkspacePath,proto3,oneof" json:"test_relative_workspace_path,omitempty"`
	TestLines                           []string `protobuf:"bytes,10,rep,name=test_lines,json=testLines,proto3" json:"test_lines,omitempty"`
	ImplementationRelativeWorkspacePath *string  `protobuf:"bytes,6,opt,name=implementation_relative_workspace_path,json=implementationRelativeWorkspacePath,proto3,oneof" json:"implementation_relative_workspace_path,omitempty"`
	ImplementationLines                 []string `protobuf:"bytes,7,rep,name=implementation_lines,json=implementationLines,proto3" json:"implementation_lines,omitempty"`
	Language                            string   `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	TestingFramework                    string   `protobuf:"bytes,9,opt,name=testing_framework,json=testingFramework,proto3" json:"testing_framework,omitempty"`
}

func (x *InterfaceAgentClientState) Reset() {
	*x = InterfaceAgentClientState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAgentClientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAgentClientState) ProtoMessage() {}

func (x *InterfaceAgentClientState) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAgentClientState.ProtoReflect.Descriptor instead.
func (*InterfaceAgentClientState) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{196}
}

func (x *InterfaceAgentClientState) GetInterfaceRelativeWorkspacePath() string {
	if x != nil {
		return x.InterfaceRelativeWorkspacePath
	}
	return ""
}

func (x *InterfaceAgentClientState) GetInterfaceLines() []string {
	if x != nil {
		return x.InterfaceLines
	}
	return nil
}

func (x *InterfaceAgentClientState) GetTestRelativeWorkspacePath() string {
	if x != nil && x.TestRelativeWorkspacePath != nil {
		return *x.TestRelativeWorkspacePath
	}
	return ""
}

func (x *InterfaceAgentClientState) GetTestLines() []string {
	if x != nil {
		return x.TestLines
	}
	return nil
}

func (x *InterfaceAgentClientState) GetImplementationRelativeWorkspacePath() string {
	if x != nil && x.ImplementationRelativeWorkspacePath != nil {
		return *x.ImplementationRelativeWorkspacePath
	}
	return ""
}

func (x *InterfaceAgentClientState) GetImplementationLines() []string {
	if x != nil {
		return x.ImplementationLines
	}
	return nil
}

func (x *InterfaceAgentClientState) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InterfaceAgentClientState) GetTestingFramework() string {
	if x != nil {
		return x.TestingFramework
	}
	return ""
}

type InterfaceAgentInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid           string `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	HumanReadableTitle string `protobuf:"bytes,2,opt,name=human_readable_title,json=humanReadableTitle,proto3" json:"human_readable_title,omitempty"`
}

func (x *InterfaceAgentInitResponse) Reset() {
	*x = InterfaceAgentInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAgentInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAgentInitResponse) ProtoMessage() {}

func (x *InterfaceAgentInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAgentInitResponse.ProtoReflect.Descriptor instead.
func (*InterfaceAgentInitResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{197}
}

func (x *InterfaceAgentInitResponse) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *InterfaceAgentInitResponse) GetHumanReadableTitle() string {
	if x != nil {
		return x.HumanReadableTitle
	}
	return ""
}

type StreamInterfaceAgentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid string `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
}

func (x *StreamInterfaceAgentStatusRequest) Reset() {
	*x = StreamInterfaceAgentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInterfaceAgentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInterfaceAgentStatusRequest) ProtoMessage() {}

func (x *StreamInterfaceAgentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInterfaceAgentStatusRequest.ProtoReflect.Descriptor instead.
func (*StreamInterfaceAgentStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{198}
}

func (x *StreamInterfaceAgentStatusRequest) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

type StreamInterfaceAgentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *InterfaceAgentStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StreamInterfaceAgentStatusResponse) Reset() {
	*x = StreamInterfaceAgentStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInterfaceAgentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInterfaceAgentStatusResponse) ProtoMessage() {}

func (x *StreamInterfaceAgentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInterfaceAgentStatusResponse.ProtoReflect.Descriptor instead.
func (*StreamInterfaceAgentStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{199}
}

func (x *StreamInterfaceAgentStatusResponse) GetStatus() *InterfaceAgentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type InterfaceAgentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidateConfiguration        InterfaceAgentStatus_Status `protobuf:"varint,1,opt,name=validate_configuration,json=validateConfiguration,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"validate_configuration,omitempty"`
	StubNewFunction              InterfaceAgentStatus_Status `protobuf:"varint,2,opt,name=stub_new_function,json=stubNewFunction,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"stub_new_function,omitempty"`
	VerifySpec                   InterfaceAgentStatus_Status `protobuf:"varint,3,opt,name=verify_spec,json=verifySpec,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"verify_spec,omitempty"`
	WriteTestPlan                InterfaceAgentStatus_Status `protobuf:"varint,15,opt,name=write_test_plan,json=writeTestPlan,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"write_test_plan,omitempty"`
	WriteTests                   InterfaceAgentStatus_Status `protobuf:"varint,4,opt,name=write_tests,json=writeTests,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"write_tests,omitempty"`
	WriteImplementation          InterfaceAgentStatus_Status `protobuf:"varint,5,opt,name=write_implementation,json=writeImplementation,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"write_implementation,omitempty"`
	ImplementNewFunction         InterfaceAgentStatus_Status `protobuf:"varint,6,opt,name=implement_new_function,json=implementNewFunction,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"implement_new_function,omitempty"`
	RunTests                     InterfaceAgentStatus_Status `protobuf:"varint,7,opt,name=run_tests,json=runTests,proto3,enum=aiserver.v1.InterfaceAgentStatus_Status" json:"run_tests,omitempty"`
	ValidateConfigurationMessage string                      `protobuf:"bytes,8,opt,name=validate_configuration_message,json=validateConfigurationMessage,proto3" json:"validate_configuration_message,omitempty"`
	StubNewFunctionMessage       string                      `protobuf:"bytes,9,opt,name=stub_new_function_message,json=stubNewFunctionMessage,proto3" json:"stub_new_function_message,omitempty"`
	VerifySpecMessage            string                      `protobuf:"bytes,10,opt,name=verify_spec_message,json=verifySpecMessage,proto3" json:"verify_spec_message,omitempty"`
	WriteTestPlanMessage         string                      `protobuf:"bytes,16,opt,name=write_test_plan_message,json=writeTestPlanMessage,proto3" json:"write_test_plan_message,omitempty"`
	WriteTestsMessage            string                      `protobuf:"bytes,11,opt,name=write_tests_message,json=writeTestsMessage,proto3" json:"write_tests_message,omitempty"`
	WriteImplementationMessage   string                      `protobuf:"bytes,12,opt,name=write_implementation_message,json=writeImplementationMessage,proto3" json:"write_implementation_message,omitempty"`
	ImplementNewFunctionMessage  string                      `protobuf:"bytes,13,opt,name=implement_new_function_message,json=implementNewFunctionMessage,proto3" json:"implement_new_function_message,omitempty"`
	RunTestsMessage              string                      `protobuf:"bytes,14,opt,name=run_tests_message,json=runTestsMessage,proto3" json:"run_tests_message,omitempty"`
}

func (x *InterfaceAgentStatus) Reset() {
	*x = InterfaceAgentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceAgentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceAgentStatus) ProtoMessage() {}

func (x *InterfaceAgentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceAgentStatus.ProtoReflect.Descriptor instead.
func (*InterfaceAgentStatus) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{200}
}

func (x *InterfaceAgentStatus) GetValidateConfiguration() InterfaceAgentStatus_Status {
	if x != nil {
		return x.ValidateConfiguration
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetStubNewFunction() InterfaceAgentStatus_Status {
	if x != nil {
		return x.StubNewFunction
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetVerifySpec() InterfaceAgentStatus_Status {
	if x != nil {
		return x.VerifySpec
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetWriteTestPlan() InterfaceAgentStatus_Status {
	if x != nil {
		return x.WriteTestPlan
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetWriteTests() InterfaceAgentStatus_Status {
	if x != nil {
		return x.WriteTests
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetWriteImplementation() InterfaceAgentStatus_Status {
	if x != nil {
		return x.WriteImplementation
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetImplementNewFunction() InterfaceAgentStatus_Status {
	if x != nil {
		return x.ImplementNewFunction
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetRunTests() InterfaceAgentStatus_Status {
	if x != nil {
		return x.RunTests
	}
	return InterfaceAgentStatus_STATUS_UNSPECIFIED
}

func (x *InterfaceAgentStatus) GetValidateConfigurationMessage() string {
	if x != nil {
		return x.ValidateConfigurationMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetStubNewFunctionMessage() string {
	if x != nil {
		return x.StubNewFunctionMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetVerifySpecMessage() string {
	if x != nil {
		return x.VerifySpecMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetWriteTestPlanMessage() string {
	if x != nil {
		return x.WriteTestPlanMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetWriteTestsMessage() string {
	if x != nil {
		return x.WriteTestsMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetWriteImplementationMessage() string {
	if x != nil {
		return x.WriteImplementationMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetImplementNewFunctionMessage() string {
	if x != nil {
		return x.ImplementNewFunctionMessage
	}
	return ""
}

func (x *InterfaceAgentStatus) GetRunTestsMessage() string {
	if x != nil {
		return x.RunTestsMessage
	}
	return ""
}

type TaskGetInterfaceAgentStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceAgentClientState *InterfaceAgentClientState `protobuf:"bytes,1,opt,name=interface_agent_client_state,json=interfaceAgentClientState,proto3" json:"interface_agent_client_state,omitempty"`
}

func (x *TaskGetInterfaceAgentStatusRequest) Reset() {
	*x = TaskGetInterfaceAgentStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGetInterfaceAgentStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGetInterfaceAgentStatusRequest) ProtoMessage() {}

func (x *TaskGetInterfaceAgentStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGetInterfaceAgentStatusRequest.ProtoReflect.Descriptor instead.
func (*TaskGetInterfaceAgentStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{201}
}

func (x *TaskGetInterfaceAgentStatusRequest) GetInterfaceAgentClientState() *InterfaceAgentClientState {
	if x != nil {
		return x.InterfaceAgentClientState
	}
	return nil
}

type TaskGetInterfaceAgentStatusResponseWrapped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealResponse       *TaskGetInterfaceAgentStatusResponse `protobuf:"bytes,1,opt,name=real_response,json=realResponse,proto3" json:"real_response,omitempty"`
	BackgroundTaskUuid string                               `protobuf:"bytes,2,opt,name=background_task_uuid,json=backgroundTaskUuid,proto3" json:"background_task_uuid,omitempty"`
}

func (x *TaskGetInterfaceAgentStatusResponseWrapped) Reset() {
	*x = TaskGetInterfaceAgentStatusResponseWrapped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGetInterfaceAgentStatusResponseWrapped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGetInterfaceAgentStatusResponseWrapped) ProtoMessage() {}

func (x *TaskGetInterfaceAgentStatusResponseWrapped) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGetInterfaceAgentStatusResponseWrapped.ProtoReflect.Descriptor instead.
func (*TaskGetInterfaceAgentStatusResponseWrapped) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{202}
}

func (x *TaskGetInterfaceAgentStatusResponseWrapped) GetRealResponse() *TaskGetInterfaceAgentStatusResponse {
	if x != nil {
		return x.RealResponse
	}
	return nil
}

func (x *TaskGetInterfaceAgentStatusResponseWrapped) GetBackgroundTaskUuid() string {
	if x != nil {
		return x.BackgroundTaskUuid
	}
	return ""
}

type TaskGetInterfaceAgentStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *InterfaceAgentStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskGetInterfaceAgentStatusResponse) Reset() {
	*x = TaskGetInterfaceAgentStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGetInterfaceAgentStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGetInterfaceAgentStatusResponse) ProtoMessage() {}

func (x *TaskGetInterfaceAgentStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGetInterfaceAgentStatusResponse.ProtoReflect.Descriptor instead.
func (*TaskGetInterfaceAgentStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{203}
}

func (x *TaskGetInterfaceAgentStatusResponse) GetStatus() *InterfaceAgentStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TaskInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruction           *TaskInstruction `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	ModelDetails          *ModelDetails    `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DebuggingOnlyLiveMode bool             `protobuf:"varint,3,opt,name=debugging_only_live_mode,json=debuggingOnlyLiveMode,proto3" json:"debugging_only_live_mode,omitempty"`
	EngineId              *string          `protobuf:"bytes,4,opt,name=engine_id,json=engineId,proto3,oneof" json:"engine_id,omitempty"`
}

func (x *TaskInitRequest) Reset() {
	*x = TaskInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInitRequest) ProtoMessage() {}

func (x *TaskInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInitRequest.ProtoReflect.Descriptor instead.
func (*TaskInitRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{204}
}

func (x *TaskInitRequest) GetInstruction() *TaskInstruction {
	if x != nil {
		return x.Instruction
	}
	return nil
}

func (x *TaskInitRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *TaskInitRequest) GetDebuggingOnlyLiveMode() bool {
	if x != nil {
		return x.DebuggingOnlyLiveMode
	}
	return false
}

func (x *TaskInitRequest) GetEngineId() string {
	if x != nil && x.EngineId != nil {
		return *x.EngineId
	}
	return ""
}

type TaskInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text               string                       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AttachedCodeChunks []*TaskInstruction_CodeChunk `protobuf:"bytes,2,rep,name=attached_code_chunks,json=attachedCodeChunks,proto3" json:"attached_code_chunks,omitempty"`
	CurrentFile        *CurrentFileInfo             `protobuf:"bytes,3,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Repositories       []*RepositoryInfo            `protobuf:"bytes,4,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext    *ExplicitContext             `protobuf:"bytes,5,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
}

func (x *TaskInstruction) Reset() {
	*x = TaskInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInstruction) ProtoMessage() {}

func (x *TaskInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInstruction.ProtoReflect.Descriptor instead.
func (*TaskInstruction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{205}
}

func (x *TaskInstruction) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TaskInstruction) GetAttachedCodeChunks() []*TaskInstruction_CodeChunk {
	if x != nil {
		return x.AttachedCodeChunks
	}
	return nil
}

func (x *TaskInstruction) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *TaskInstruction) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *TaskInstruction) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

type TaskInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid           string `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	HumanReadableTitle string `protobuf:"bytes,2,opt,name=human_readable_title,json=humanReadableTitle,proto3" json:"human_readable_title,omitempty"`
}

func (x *TaskInitResponse) Reset() {
	*x = TaskInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInitResponse) ProtoMessage() {}

func (x *TaskInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInitResponse.ProtoReflect.Descriptor instead.
func (*TaskInitResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{206}
}

func (x *TaskInitResponse) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *TaskInitResponse) GetHumanReadableTitle() string {
	if x != nil {
		return x.HumanReadableTitle
	}
	return ""
}

type TaskPauseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid string `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
}

func (x *TaskPauseRequest) Reset() {
	*x = TaskPauseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPauseRequest) ProtoMessage() {}

func (x *TaskPauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPauseRequest.ProtoReflect.Descriptor instead.
func (*TaskPauseRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{207}
}

func (x *TaskPauseRequest) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

type TaskPauseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskPauseResponse) Reset() {
	*x = TaskPauseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskPauseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPauseResponse) ProtoMessage() {}

func (x *TaskPauseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPauseResponse.ProtoReflect.Descriptor instead.
func (*TaskPauseResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{208}
}

type TaskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid string `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
}

func (x *TaskInfoRequest) Reset() {
	*x = TaskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfoRequest) ProtoMessage() {}

func (x *TaskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfoRequest.ProtoReflect.Descriptor instead.
func (*TaskInfoRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{209}
}

func (x *TaskInfoRequest) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

type TaskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HumanReadableTitle    string     `protobuf:"bytes,1,opt,name=human_readable_title,json=humanReadableTitle,proto3" json:"human_readable_title,omitempty"`
	TaskStatus            TaskStatus `protobuf:"varint,2,opt,name=task_status,json=taskStatus,proto3,enum=aiserver.v1.TaskStatus" json:"task_status,omitempty"`
	LastLogSequenceNumber int32      `protobuf:"varint,3,opt,name=last_log_sequence_number,json=lastLogSequenceNumber,proto3" json:"last_log_sequence_number,omitempty"`
}

func (x *TaskInfoResponse) Reset() {
	*x = TaskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfoResponse) ProtoMessage() {}

func (x *TaskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfoResponse.ProtoReflect.Descriptor instead.
func (*TaskInfoResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{210}
}

func (x *TaskInfoResponse) GetHumanReadableTitle() string {
	if x != nil {
		return x.HumanReadableTitle
	}
	return ""
}

func (x *TaskInfoResponse) GetTaskStatus() TaskStatus {
	if x != nil {
		return x.TaskStatus
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

func (x *TaskInfoResponse) GetLastLogSequenceNumber() int32 {
	if x != nil {
		return x.LastLogSequenceNumber
	}
	return 0
}

type TaskStreamLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid            string `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	StartSequenceNumber int32  `protobuf:"varint,2,opt,name=start_sequence_number,json=startSequenceNumber,proto3" json:"start_sequence_number,omitempty"`
}

func (x *TaskStreamLogRequest) Reset() {
	*x = TaskStreamLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamLogRequest) ProtoMessage() {}

func (x *TaskStreamLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamLogRequest.ProtoReflect.Descriptor instead.
func (*TaskStreamLogRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{211}
}

func (x *TaskStreamLogRequest) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *TaskStreamLogRequest) GetStartSequenceNumber() int32 {
	if x != nil {
		return x.StartSequenceNumber
	}
	return 0
}

type TaskStreamLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamedLogItem *TaskLogItem                      `protobuf:"bytes,1,opt,name=streamed_log_item,json=streamedLogItem,proto3" json:"streamed_log_item,omitempty"`
	InfoUpdate      *TaskStreamLogResponse_InfoUpdate `protobuf:"bytes,2,opt,name=info_update,json=infoUpdate,proto3" json:"info_update,omitempty"`
	InitialTaskInfo *TaskInfoResponse                 `protobuf:"bytes,3,opt,name=initial_task_info,json=initialTaskInfo,proto3" json:"initial_task_info,omitempty"`
}

func (x *TaskStreamLogResponse) Reset() {
	*x = TaskStreamLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamLogResponse) ProtoMessage() {}

func (x *TaskStreamLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamLogResponse.ProtoReflect.Descriptor instead.
func (*TaskStreamLogResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{212}
}

func (x *TaskStreamLogResponse) GetStreamedLogItem() *TaskLogItem {
	if x != nil {
		return x.StreamedLogItem
	}
	return nil
}

func (x *TaskStreamLogResponse) GetInfoUpdate() *TaskStreamLogResponse_InfoUpdate {
	if x != nil {
		return x.InfoUpdate
	}
	return nil
}

func (x *TaskStreamLogResponse) GetInitialTaskInfo() *TaskInfoResponse {
	if x != nil {
		return x.InitialTaskInfo
	}
	return nil
}

type TaskLogItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber int32              `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	IsNotDone      bool               `protobuf:"varint,2,opt,name=is_not_done,json=isNotDone,proto3" json:"is_not_done,omitempty"`
	Output         *TaskLogOutput     `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	ToolAction     *TaskLogToolAction `protobuf:"bytes,4,opt,name=tool_action,json=toolAction,proto3" json:"tool_action,omitempty"`
	Thought        *TaskLogThought    `protobuf:"bytes,5,opt,name=thought,proto3" json:"thought,omitempty"`
	UserMessage    *TaskUserMessage   `protobuf:"bytes,6,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`
	Instruction    *TaskInstruction   `protobuf:"bytes,7,opt,name=instruction,proto3" json:"instruction,omitempty"`
	ToolResult     *TaskLogToolResult `protobuf:"bytes,8,opt,name=tool_result,json=toolResult,proto3" json:"tool_result,omitempty"`
}

func (x *TaskLogItem) Reset() {
	*x = TaskLogItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogItem) ProtoMessage() {}

func (x *TaskLogItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogItem.ProtoReflect.Descriptor instead.
func (*TaskLogItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{213}
}

func (x *TaskLogItem) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *TaskLogItem) GetIsNotDone() bool {
	if x != nil {
		return x.IsNotDone
	}
	return false
}

func (x *TaskLogItem) GetOutput() *TaskLogOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskLogItem) GetToolAction() *TaskLogToolAction {
	if x != nil {
		return x.ToolAction
	}
	return nil
}

func (x *TaskLogItem) GetThought() *TaskLogThought {
	if x != nil {
		return x.Thought
	}
	return nil
}

func (x *TaskLogItem) GetUserMessage() *TaskUserMessage {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *TaskLogItem) GetInstruction() *TaskInstruction {
	if x != nil {
		return x.Instruction
	}
	return nil
}

func (x *TaskLogItem) GetToolResult() *TaskLogToolResult {
	if x != nil {
		return x.ToolResult
	}
	return nil
}

type TaskLogOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TaskLogOutput) Reset() {
	*x = TaskLogOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogOutput) ProtoMessage() {}

func (x *TaskLogOutput) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogOutput.ProtoReflect.Descriptor instead.
func (*TaskLogOutput) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{214}
}

func (x *TaskLogOutput) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TaskLogToolAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserFacingText string    `protobuf:"bytes,1,opt,name=user_facing_text,json=userFacingText,proto3" json:"user_facing_text,omitempty"`
	RawModelOutput string    `protobuf:"bytes,3,opt,name=raw_model_output,json=rawModelOutput,proto3" json:"raw_model_output,omitempty"`
	ToolCall       *ToolCall `protobuf:"bytes,2,opt,name=tool_call,json=toolCall,proto3" json:"tool_call,omitempty"`
}

func (x *TaskLogToolAction) Reset() {
	*x = TaskLogToolAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogToolAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogToolAction) ProtoMessage() {}

func (x *TaskLogToolAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogToolAction.ProtoReflect.Descriptor instead.
func (*TaskLogToolAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{215}
}

func (x *TaskLogToolAction) GetUserFacingText() string {
	if x != nil {
		return x.UserFacingText
	}
	return ""
}

func (x *TaskLogToolAction) GetRawModelOutput() string {
	if x != nil {
		return x.RawModelOutput
	}
	return ""
}

func (x *TaskLogToolAction) GetToolCall() *ToolCall {
	if x != nil {
		return x.ToolCall
	}
	return nil
}

type TaskLogThought struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TaskLogThought) Reset() {
	*x = TaskLogThought{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogThought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogThought) ProtoMessage() {}

func (x *TaskLogThought) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogThought.ProtoReflect.Descriptor instead.
func (*TaskLogThought) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{216}
}

func (x *TaskLogThought) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TaskUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text               string                       `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AttachedCodeChunks []*TaskUserMessage_CodeChunk `protobuf:"bytes,2,rep,name=attached_code_chunks,json=attachedCodeChunks,proto3" json:"attached_code_chunks,omitempty"`
}

func (x *TaskUserMessage) Reset() {
	*x = TaskUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUserMessage) ProtoMessage() {}

func (x *TaskUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUserMessage.ProtoReflect.Descriptor instead.
func (*TaskUserMessage) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{217}
}

func (x *TaskUserMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TaskUserMessage) GetAttachedCodeChunks() []*TaskUserMessage_CodeChunk {
	if x != nil {
		return x.AttachedCodeChunks
	}
	return nil
}

type TaskLogToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolResult           *ToolResult `protobuf:"bytes,1,opt,name=tool_result,json=toolResult,proto3" json:"tool_result,omitempty"`
	ActionSequenceNumber int32       `protobuf:"varint,2,opt,name=action_sequence_number,json=actionSequenceNumber,proto3" json:"action_sequence_number,omitempty"`
}

func (x *TaskLogToolResult) Reset() {
	*x = TaskLogToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogToolResult) ProtoMessage() {}

func (x *TaskLogToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogToolResult.ProtoReflect.Descriptor instead.
func (*TaskLogToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{218}
}

func (x *TaskLogToolResult) GetToolResult() *ToolResult {
	if x != nil {
		return x.ToolResult
	}
	return nil
}

func (x *TaskLogToolResult) GetActionSequenceNumber() int32 {
	if x != nil {
		return x.ActionSequenceNumber
	}
	return 0
}

type TaskSendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid               string           `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	UserMessage            *TaskUserMessage `protobuf:"bytes,2,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`
	WantsAttentionRightNow bool             `protobuf:"varint,3,opt,name=wants_attention_right_now,json=wantsAttentionRightNow,proto3" json:"wants_attention_right_now,omitempty"`
}

func (x *TaskSendMessageRequest) Reset() {
	*x = TaskSendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSendMessageRequest) ProtoMessage() {}

func (x *TaskSendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSendMessageRequest.ProtoReflect.Descriptor instead.
func (*TaskSendMessageRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{219}
}

func (x *TaskSendMessageRequest) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *TaskSendMessageRequest) GetUserMessage() *TaskUserMessage {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *TaskSendMessageRequest) GetWantsAttentionRightNow() bool {
	if x != nil {
		return x.WantsAttentionRightNow
	}
	return false
}

type TaskSendMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskSendMessageResponse) Reset() {
	*x = TaskSendMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSendMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSendMessageResponse) ProtoMessage() {}

func (x *TaskSendMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSendMessageResponse.ProtoReflect.Descriptor instead.
func (*TaskSendMessageResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{220}
}

type TaskProvideResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUuid             string      `protobuf:"bytes,1,opt,name=task_uuid,json=taskUuid,proto3" json:"task_uuid,omitempty"`
	ActionSequenceNumber int32       `protobuf:"varint,2,opt,name=action_sequence_number,json=actionSequenceNumber,proto3" json:"action_sequence_number,omitempty"`
	ToolResult           *ToolResult `protobuf:"bytes,3,opt,name=tool_result,json=toolResult,proto3" json:"tool_result,omitempty"`
}

func (x *TaskProvideResultRequest) Reset() {
	*x = TaskProvideResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProvideResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProvideResultRequest) ProtoMessage() {}

func (x *TaskProvideResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProvideResultRequest.ProtoReflect.Descriptor instead.
func (*TaskProvideResultRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{221}
}

func (x *TaskProvideResultRequest) GetTaskUuid() string {
	if x != nil {
		return x.TaskUuid
	}
	return ""
}

func (x *TaskProvideResultRequest) GetActionSequenceNumber() int32 {
	if x != nil {
		return x.ActionSequenceNumber
	}
	return 0
}

func (x *TaskProvideResultRequest) GetToolResult() *ToolResult {
	if x != nil {
		return x.ToolResult
	}
	return nil
}

type TaskProvideResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskProvideResultResponse) Reset() {
	*x = TaskProvideResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProvideResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProvideResultResponse) ProtoMessage() {}

func (x *TaskProvideResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProvideResultResponse.ProtoReflect.Descriptor instead.
func (*TaskProvideResultResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{222}
}

type CreateExperimentalIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files     []string `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	TargetDir string   `protobuf:"bytes,2,opt,name=target_dir,json=targetDir,proto3" json:"target_dir,omitempty"`
	Repo      string   `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *CreateExperimentalIndexRequest) Reset() {
	*x = CreateExperimentalIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentalIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentalIndexRequest) ProtoMessage() {}

func (x *CreateExperimentalIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentalIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentalIndexRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{223}
}

func (x *CreateExperimentalIndexRequest) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CreateExperimentalIndexRequest) GetTargetDir() string {
	if x != nil {
		return x.TargetDir
	}
	return ""
}

func (x *CreateExperimentalIndexRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type CreateExperimentalIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *CreateExperimentalIndexResponse) Reset() {
	*x = CreateExperimentalIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentalIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentalIndexResponse) ProtoMessage() {}

func (x *CreateExperimentalIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentalIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateExperimentalIndexResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{224}
}

func (x *CreateExperimentalIndexResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

type ListExperimentalIndexFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *ListExperimentalIndexFilesRequest) Reset() {
	*x = ListExperimentalIndexFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentalIndexFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentalIndexFilesRequest) ProtoMessage() {}

func (x *ListExperimentalIndexFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentalIndexFilesRequest.ProtoReflect.Descriptor instead.
func (*ListExperimentalIndexFilesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{225}
}

func (x *ListExperimentalIndexFilesRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

type ListExperimentalIndexFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string           `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Files   []*IndexFileData `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ListExperimentalIndexFilesResponse) Reset() {
	*x = ListExperimentalIndexFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExperimentalIndexFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExperimentalIndexFilesResponse) ProtoMessage() {}

func (x *ListExperimentalIndexFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExperimentalIndexFilesResponse.ProtoReflect.Descriptor instead.
func (*ListExperimentalIndexFilesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{226}
}

func (x *ListExperimentalIndexFilesResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ListExperimentalIndexFilesResponse) GetFiles() []*IndexFileData {
	if x != nil {
		return x.Files
	}
	return nil
}

type IndexFileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId               string                    `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	WorkspaceRelativePath string                    `protobuf:"bytes,2,opt,name=workspace_relative_path,json=workspaceRelativePath,proto3" json:"workspace_relative_path,omitempty"`
	Stage                 string                    `protobuf:"bytes,3,opt,name=stage,proto3" json:"stage,omitempty"`
	Order                 int32                     `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	Nodes                 []*IndexFileData_NodeData `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *IndexFileData) Reset() {
	*x = IndexFileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexFileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexFileData) ProtoMessage() {}

func (x *IndexFileData) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexFileData.ProtoReflect.Descriptor instead.
func (*IndexFileData) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{227}
}

func (x *IndexFileData) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *IndexFileData) GetWorkspaceRelativePath() string {
	if x != nil {
		return x.WorkspaceRelativePath
	}
	return ""
}

func (x *IndexFileData) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *IndexFileData) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *IndexFileData) GetNodes() []*IndexFileData_NodeData {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ListenExperimentalIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *ListenExperimentalIndexRequest) Reset() {
	*x = ListenExperimentalIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexRequest) ProtoMessage() {}

func (x *ListenExperimentalIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexRequest.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{228}
}

func (x *ListenExperimentalIndexRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

type ListenExperimentalIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId   string                                         `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Ready     *ListenExperimentalIndexResponse_ReadyItem     `protobuf:"bytes,2,opt,name=ready,proto3" json:"ready,omitempty"`
	Register  *ListenExperimentalIndexResponse_RegisterItem  `protobuf:"bytes,3,opt,name=register,proto3" json:"register,omitempty"`
	Choose    *ListenExperimentalIndexResponse_ChooseItem    `protobuf:"bytes,4,opt,name=choose,proto3" json:"choose,omitempty"`
	Summarize *ListenExperimentalIndexResponse_SummarizeItem `protobuf:"bytes,5,opt,name=summarize,proto3" json:"summarize,omitempty"`
	Error     *ListenExperimentalIndexResponse_ErrorItem     `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ListenExperimentalIndexResponse) Reset() {
	*x = ListenExperimentalIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexResponse) ProtoMessage() {}

func (x *ListenExperimentalIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexResponse.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{229}
}

func (x *ListenExperimentalIndexResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ListenExperimentalIndexResponse) GetReady() *ListenExperimentalIndexResponse_ReadyItem {
	if x != nil {
		return x.Ready
	}
	return nil
}

func (x *ListenExperimentalIndexResponse) GetRegister() *ListenExperimentalIndexResponse_RegisterItem {
	if x != nil {
		return x.Register
	}
	return nil
}

func (x *ListenExperimentalIndexResponse) GetChoose() *ListenExperimentalIndexResponse_ChooseItem {
	if x != nil {
		return x.Choose
	}
	return nil
}

func (x *ListenExperimentalIndexResponse) GetSummarize() *ListenExperimentalIndexResponse_SummarizeItem {
	if x != nil {
		return x.Summarize
	}
	return nil
}

func (x *ListenExperimentalIndexResponse) GetError() *ListenExperimentalIndexResponse_ErrorItem {
	if x != nil {
		return x.Error
	}
	return nil
}

type RegisterFileToIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId                       string                  `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	RootContextNodeId            string                  `protobuf:"bytes,2,opt,name=root_context_node_id,json=rootContextNodeId,proto3" json:"root_context_node_id,omitempty"`
	DependencyResolutionAttempts []*URIResolutionAttempt `protobuf:"bytes,3,rep,name=dependency_resolution_attempts,json=dependencyResolutionAttempts,proto3" json:"dependency_resolution_attempts,omitempty"`
	FileData                     *IndexFileData          `protobuf:"bytes,4,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *RegisterFileToIndexResponse) Reset() {
	*x = RegisterFileToIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFileToIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFileToIndexResponse) ProtoMessage() {}

func (x *RegisterFileToIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFileToIndexResponse.ProtoReflect.Descriptor instead.
func (*RegisterFileToIndexResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{230}
}

func (x *RegisterFileToIndexResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *RegisterFileToIndexResponse) GetRootContextNodeId() string {
	if x != nil {
		return x.RootContextNodeId
	}
	return ""
}

func (x *RegisterFileToIndexResponse) GetDependencyResolutionAttempts() []*URIResolutionAttempt {
	if x != nil {
		return x.DependencyResolutionAttempts
	}
	return nil
}

func (x *RegisterFileToIndexResponse) GetFileData() *IndexFileData {
	if x != nil {
		return x.FileData
	}
	return nil
}

type URIResolutionAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceRelativePath string                `protobuf:"bytes,1,opt,name=workspace_relative_path,json=workspaceRelativePath,proto3" json:"workspace_relative_path,omitempty"`
	NodeId                string                `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Symbol                *CodeSymbolWithAction `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *URIResolutionAttempt) Reset() {
	*x = URIResolutionAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URIResolutionAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URIResolutionAttempt) ProtoMessage() {}

func (x *URIResolutionAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URIResolutionAttempt.ProtoReflect.Descriptor instead.
func (*URIResolutionAttempt) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{231}
}

func (x *URIResolutionAttempt) GetWorkspaceRelativePath() string {
	if x != nil {
		return x.WorkspaceRelativePath
	}
	return ""
}

func (x *URIResolutionAttempt) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *URIResolutionAttempt) GetSymbol() *CodeSymbolWithAction {
	if x != nil {
		return x.Symbol
	}
	return nil
}

type CodeSymbolWithAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceRelativePath string                                `protobuf:"bytes,1,opt,name=workspace_relative_path,json=workspaceRelativePath,proto3" json:"workspace_relative_path,omitempty"`
	LineNumber            int32                                 `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	SymbolStartColumn     int32                                 `protobuf:"varint,3,opt,name=symbol_start_column,json=symbolStartColumn,proto3" json:"symbol_start_column,omitempty"`
	SymbolEndColumn       int32                                 `protobuf:"varint,4,opt,name=symbol_end_column,json=symbolEndColumn,proto3" json:"symbol_end_column,omitempty"`
	Action                CodeSymbolWithAction_CodeSymbolAction `protobuf:"varint,5,opt,name=action,proto3,enum=aiserver.v1.CodeSymbolWithAction_CodeSymbolAction" json:"action,omitempty"`
	Symbol                string                                `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *CodeSymbolWithAction) Reset() {
	*x = CodeSymbolWithAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSymbolWithAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSymbolWithAction) ProtoMessage() {}

func (x *CodeSymbolWithAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSymbolWithAction.ProtoReflect.Descriptor instead.
func (*CodeSymbolWithAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{232}
}

func (x *CodeSymbolWithAction) GetWorkspaceRelativePath() string {
	if x != nil {
		return x.WorkspaceRelativePath
	}
	return ""
}

func (x *CodeSymbolWithAction) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *CodeSymbolWithAction) GetSymbolStartColumn() int32 {
	if x != nil {
		return x.SymbolStartColumn
	}
	return 0
}

func (x *CodeSymbolWithAction) GetSymbolEndColumn() int32 {
	if x != nil {
		return x.SymbolEndColumn
	}
	return 0
}

func (x *CodeSymbolWithAction) GetAction() CodeSymbolWithAction_CodeSymbolAction {
	if x != nil {
		return x.Action
	}
	return CodeSymbolWithAction_CODE_SYMBOL_ACTION_UNSPECIFIED
}

func (x *CodeSymbolWithAction) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type RegisterFileToIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId               string                 `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	WorkspaceRelativePath string                 `protobuf:"bytes,2,opt,name=workspace_relative_path,json=workspaceRelativePath,proto3" json:"workspace_relative_path,omitempty"`
	RootContextNode       *SerializedContextNode `protobuf:"bytes,3,opt,name=root_context_node,json=rootContextNode,proto3" json:"root_context_node,omitempty"`
	Content               []string               `protobuf:"bytes,4,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *RegisterFileToIndexRequest) Reset() {
	*x = RegisterFileToIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterFileToIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterFileToIndexRequest) ProtoMessage() {}

func (x *RegisterFileToIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterFileToIndexRequest.ProtoReflect.Descriptor instead.
func (*RegisterFileToIndexRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{233}
}

func (x *RegisterFileToIndexRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *RegisterFileToIndexRequest) GetWorkspaceRelativePath() string {
	if x != nil {
		return x.WorkspaceRelativePath
	}
	return ""
}

func (x *RegisterFileToIndexRequest) GetRootContextNode() *SerializedContextNode {
	if x != nil {
		return x.RootContextNode
	}
	return nil
}

func (x *RegisterFileToIndexRequest) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

type SerializedContextNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceRelativePath string                   `protobuf:"bytes,1,opt,name=workspace_relative_path,json=workspaceRelativePath,proto3" json:"workspace_relative_path,omitempty"`
	StartLineNumber       int32                    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber         int32                    `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	Children              []*SerializedContextNode `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
	NodeSnippets          *FileCodeSnippets        `protobuf:"bytes,5,opt,name=node_snippets,json=nodeSnippets,proto3" json:"node_snippets,omitempty"`
}

func (x *SerializedContextNode) Reset() {
	*x = SerializedContextNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializedContextNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializedContextNode) ProtoMessage() {}

func (x *SerializedContextNode) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializedContextNode.ProtoReflect.Descriptor instead.
func (*SerializedContextNode) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{234}
}

func (x *SerializedContextNode) GetWorkspaceRelativePath() string {
	if x != nil {
		return x.WorkspaceRelativePath
	}
	return ""
}

func (x *SerializedContextNode) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *SerializedContextNode) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *SerializedContextNode) GetChildren() []*SerializedContextNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *SerializedContextNode) GetNodeSnippets() *FileCodeSnippets {
	if x != nil {
		return x.NodeSnippets
	}
	return nil
}

type FileCodeSnippets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string         `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	TotalLines            int32          `protobuf:"varint,2,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"`
	Snippets              []*CodeSnippet `protobuf:"bytes,3,rep,name=snippets,proto3" json:"snippets,omitempty"`
}

func (x *FileCodeSnippets) Reset() {
	*x = FileCodeSnippets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCodeSnippets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCodeSnippets) ProtoMessage() {}

func (x *FileCodeSnippets) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCodeSnippets.ProtoReflect.Descriptor instead.
func (*FileCodeSnippets) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{235}
}

func (x *FileCodeSnippets) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FileCodeSnippets) GetTotalLines() int32 {
	if x != nil {
		return x.TotalLines
	}
	return 0
}

func (x *FileCodeSnippets) GetSnippets() []*CodeSnippet {
	if x != nil {
		return x.Snippets
	}
	return nil
}

type CodeSnippet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber int32    `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber   int32    `protobuf:"varint,2,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	Lines           []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *CodeSnippet) Reset() {
	*x = CodeSnippet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSnippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSnippet) ProtoMessage() {}

func (x *CodeSnippet) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSnippet.ProtoReflect.Descriptor instead.
func (*CodeSnippet) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{236}
}

func (x *CodeSnippet) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *CodeSnippet) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *CodeSnippet) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type ChooseCodeReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *ChooseCodeReferencesResponse_FileResponse `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Node *ChooseCodeReferencesResponse_NodeResponse `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *ChooseCodeReferencesResponse) Reset() {
	*x = ChooseCodeReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesResponse) ProtoMessage() {}

func (x *ChooseCodeReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesResponse.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{237}
}

func (x *ChooseCodeReferencesResponse) GetFile() *ChooseCodeReferencesResponse_FileResponse {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ChooseCodeReferencesResponse) GetNode() *ChooseCodeReferencesResponse_NodeResponse {
	if x != nil {
		return x.Node
	}
	return nil
}

type ChooseCodeReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId   string                                   `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	File      *ChooseCodeReferencesRequest_FileRequest `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Node      *ChooseCodeReferencesRequest_NodeRequest `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Recompute bool                                     `protobuf:"varint,4,opt,name=recompute,proto3" json:"recompute,omitempty"`
}

func (x *ChooseCodeReferencesRequest) Reset() {
	*x = ChooseCodeReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesRequest) ProtoMessage() {}

func (x *ChooseCodeReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesRequest.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{238}
}

func (x *ChooseCodeReferencesRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ChooseCodeReferencesRequest) GetFile() *ChooseCodeReferencesRequest_FileRequest {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ChooseCodeReferencesRequest) GetNode() *ChooseCodeReferencesRequest_NodeRequest {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ChooseCodeReferencesRequest) GetRecompute() bool {
	if x != nil {
		return x.Recompute
	}
	return false
}

type SummarizeWithReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success    *SummarizeWithReferencesResponse_Success    `protobuf:"bytes,1,opt,name=success,proto3" json:"success,omitempty"`
	Dependency *SummarizeWithReferencesResponse_Dependency `protobuf:"bytes,2,opt,name=dependency,proto3" json:"dependency,omitempty"`
	NodeId     string                                      `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *SummarizeWithReferencesResponse) Reset() {
	*x = SummarizeWithReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeWithReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeWithReferencesResponse) ProtoMessage() {}

func (x *SummarizeWithReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeWithReferencesResponse.ProtoReflect.Descriptor instead.
func (*SummarizeWithReferencesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{239}
}

func (x *SummarizeWithReferencesResponse) GetSuccess() *SummarizeWithReferencesResponse_Success {
	if x != nil {
		return x.Success
	}
	return nil
}

func (x *SummarizeWithReferencesResponse) GetDependency() *SummarizeWithReferencesResponse_Dependency {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *SummarizeWithReferencesResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type SummarizeWithReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId   string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	NodeId    string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Recompute bool   `protobuf:"varint,3,opt,name=recompute,proto3" json:"recompute,omitempty"`
}

func (x *SummarizeWithReferencesRequest) Reset() {
	*x = SummarizeWithReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeWithReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeWithReferencesRequest) ProtoMessage() {}

func (x *SummarizeWithReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeWithReferencesRequest.ProtoReflect.Descriptor instead.
func (*SummarizeWithReferencesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{240}
}

func (x *SummarizeWithReferencesRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *SummarizeWithReferencesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SummarizeWithReferencesRequest) GetRecompute() bool {
	if x != nil {
		return x.Recompute
	}
	return false
}

type RequestReceivedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqUuid string `protobuf:"bytes,1,opt,name=req_uuid,json=reqUuid,proto3" json:"req_uuid,omitempty"`
}

func (x *RequestReceivedResponse) Reset() {
	*x = RequestReceivedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReceivedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReceivedResponse) ProtoMessage() {}

func (x *RequestReceivedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReceivedResponse.ProtoReflect.Descriptor instead.
func (*RequestReceivedResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{241}
}

func (x *RequestReceivedResponse) GetReqUuid() string {
	if x != nil {
		return x.ReqUuid
	}
	return ""
}

type SetupIndexDependenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId                     string                 `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	FileId                      string                 `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	DependencyResolutionResults []*URIResolutionResult `protobuf:"bytes,2,rep,name=dependency_resolution_results,json=dependencyResolutionResults,proto3" json:"dependency_resolution_results,omitempty"`
}

func (x *SetupIndexDependenciesRequest) Reset() {
	*x = SetupIndexDependenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupIndexDependenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupIndexDependenciesRequest) ProtoMessage() {}

func (x *SetupIndexDependenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupIndexDependenciesRequest.ProtoReflect.Descriptor instead.
func (*SetupIndexDependenciesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{242}
}

func (x *SetupIndexDependenciesRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *SetupIndexDependenciesRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *SetupIndexDependenciesRequest) GetDependencyResolutionResults() []*URIResolutionResult {
	if x != nil {
		return x.DependencyResolutionResults
	}
	return nil
}

type URIResolutionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request       *URIResolutionAttempt `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	ResolvedPaths []string              `protobuf:"bytes,2,rep,name=resolved_paths,json=resolvedPaths,proto3" json:"resolved_paths,omitempty"`
}

func (x *URIResolutionResult) Reset() {
	*x = URIResolutionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URIResolutionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URIResolutionResult) ProtoMessage() {}

func (x *URIResolutionResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URIResolutionResult.ProtoReflect.Descriptor instead.
func (*URIResolutionResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{243}
}

func (x *URIResolutionResult) GetRequest() *URIResolutionAttempt {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *URIResolutionResult) GetResolvedPaths() []string {
	if x != nil {
		return x.ResolvedPaths
	}
	return nil
}

type SetupIndexDependenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetupIndexDependenciesResponse) Reset() {
	*x = SetupIndexDependenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupIndexDependenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupIndexDependenciesResponse) ProtoMessage() {}

func (x *SetupIndexDependenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupIndexDependenciesResponse.ProtoReflect.Descriptor instead.
func (*SetupIndexDependenciesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{244}
}

type ComputeIndexTopoSortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *ComputeIndexTopoSortRequest) Reset() {
	*x = ComputeIndexTopoSortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeIndexTopoSortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeIndexTopoSortRequest) ProtoMessage() {}

func (x *ComputeIndexTopoSortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeIndexTopoSortRequest.ProtoReflect.Descriptor instead.
func (*ComputeIndexTopoSortRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{245}
}

func (x *ComputeIndexTopoSortRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

type ComputeIndexTopoSortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ComputeIndexTopoSortResponse) Reset() {
	*x = ComputeIndexTopoSortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeIndexTopoSortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeIndexTopoSortResponse) ProtoMessage() {}

func (x *ComputeIndexTopoSortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeIndexTopoSortResponse.ProtoReflect.Descriptor instead.
func (*ComputeIndexTopoSortResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{246}
}

type StreamChatDeepContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation    []*ConversationMessage               `protobuf:"bytes,1,rep,name=conversation,proto3" json:"conversation,omitempty"`
	ExplicitContext *ExplicitContext                     `protobuf:"bytes,2,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	ModelDetails    *ModelDetails                        `protobuf:"bytes,3,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	ContextResults  *SearchRepositoryDeepContextResponse `protobuf:"bytes,4,opt,name=context_results,json=contextResults,proto3" json:"context_results,omitempty"`
	RerankResults   bool                                 `protobuf:"varint,5,opt,name=rerank_results,json=rerankResults,proto3" json:"rerank_results,omitempty"`
}

func (x *StreamChatDeepContextRequest) Reset() {
	*x = StreamChatDeepContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatDeepContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatDeepContextRequest) ProtoMessage() {}

func (x *StreamChatDeepContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatDeepContextRequest.ProtoReflect.Descriptor instead.
func (*StreamChatDeepContextRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{247}
}

func (x *StreamChatDeepContextRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamChatDeepContextRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamChatDeepContextRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamChatDeepContextRequest) GetContextResults() *SearchRepositoryDeepContextResponse {
	if x != nil {
		return x.ContextResults
	}
	return nil
}

func (x *StreamChatDeepContextRequest) GetRerankResults() bool {
	if x != nil {
		return x.RerankResults
	}
	return false
}

type SearchRepositoryDeepContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNodes    []*NodeResult       `protobuf:"bytes,1,rep,name=top_nodes,json=topNodes,proto3" json:"top_nodes,omitempty"`
	Reflections []*ReflectionResult `protobuf:"bytes,2,rep,name=reflections,proto3" json:"reflections,omitempty"`
	IndexId     string              `protobuf:"bytes,3,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
}

func (x *SearchRepositoryDeepContextResponse) Reset() {
	*x = SearchRepositoryDeepContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryDeepContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryDeepContextResponse) ProtoMessage() {}

func (x *SearchRepositoryDeepContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryDeepContextResponse.ProtoReflect.Descriptor instead.
func (*SearchRepositoryDeepContextResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{248}
}

func (x *SearchRepositoryDeepContextResponse) GetTopNodes() []*NodeResult {
	if x != nil {
		return x.TopNodes
	}
	return nil
}

func (x *SearchRepositoryDeepContextResponse) GetReflections() []*ReflectionResult {
	if x != nil {
		return x.Reflections
	}
	return nil
}

func (x *SearchRepositoryDeepContextResponse) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

type NodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  *NodeResult_NodeData `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	File  *File                `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Score float32              `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *NodeResult) Reset() {
	*x = NodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResult) ProtoMessage() {}

func (x *NodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResult.ProtoReflect.Descriptor instead.
func (*NodeResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{249}
}

func (x *NodeResult) GetNode() *NodeResult_NodeData {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeResult) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *NodeResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ReflectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reflection *ReflectionData `protobuf:"bytes,1,opt,name=reflection,proto3" json:"reflection,omitempty"`
	Score      float32         `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ReflectionResult) Reset() {
	*x = ReflectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectionResult) ProtoMessage() {}

func (x *ReflectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectionResult.ProtoReflect.Descriptor instead.
func (*ReflectionResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{250}
}

func (x *ReflectionResult) GetReflection() *ReflectionData {
	if x != nil {
		return x.Reflection
	}
	return nil
}

func (x *ReflectionResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ReflectionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ReflectionData) Reset() {
	*x = ReflectionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectionData) ProtoMessage() {}

func (x *ReflectionData) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectionData.ProtoReflect.Descriptor instead.
func (*ReflectionData) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{251}
}

func (x *ReflectionData) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ReflectionData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReflectionData) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type StreamChatDeepContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamChatDeepContextResponse) Reset() {
	*x = StreamChatDeepContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatDeepContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatDeepContextResponse) ProtoMessage() {}

func (x *StreamChatDeepContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatDeepContextResponse.ProtoReflect.Descriptor instead.
func (*StreamChatDeepContextResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{252}
}

func (x *StreamChatDeepContextResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type RegisterCodeReferencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId     string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	References []*SymbolActionResults `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *RegisterCodeReferencesRequest) Reset() {
	*x = RegisterCodeReferencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCodeReferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCodeReferencesRequest) ProtoMessage() {}

func (x *RegisterCodeReferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCodeReferencesRequest.ProtoReflect.Descriptor instead.
func (*RegisterCodeReferencesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{253}
}

func (x *RegisterCodeReferencesRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RegisterCodeReferencesRequest) GetReferences() []*SymbolActionResults {
	if x != nil {
		return x.References
	}
	return nil
}

type SymbolActionResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     *CodeSymbolWithAction          `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	References []*SymbolActionResultReference `protobuf:"bytes,2,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *SymbolActionResults) Reset() {
	*x = SymbolActionResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolActionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolActionResults) ProtoMessage() {}

func (x *SymbolActionResults) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolActionResults.ProtoReflect.Descriptor instead.
func (*SymbolActionResults) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{254}
}

func (x *SymbolActionResults) GetAction() *CodeSymbolWithAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *SymbolActionResults) GetReferences() []*SymbolActionResultReference {
	if x != nil {
		return x.References
	}
	return nil
}

type SymbolActionResultReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range     *SimpleRange      `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Reference *FileCodeSnippets `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *SymbolActionResultReference) Reset() {
	*x = SymbolActionResultReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolActionResultReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolActionResultReference) ProtoMessage() {}

func (x *SymbolActionResultReference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolActionResultReference.ProtoReflect.Descriptor instead.
func (*SymbolActionResultReference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{255}
}

func (x *SymbolActionResultReference) GetRange() *SimpleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SymbolActionResultReference) GetReference() *FileCodeSnippets {
	if x != nil {
		return x.Reference
	}
	return nil
}

type RegisterCodeReferencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dependencies []string `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *RegisterCodeReferencesResponse) Reset() {
	*x = RegisterCodeReferencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCodeReferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCodeReferencesResponse) ProtoMessage() {}

func (x *RegisterCodeReferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCodeReferencesResponse.ProtoReflect.Descriptor instead.
func (*RegisterCodeReferencesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{256}
}

func (x *RegisterCodeReferencesResponse) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type ExtractPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileCodeSnippets *FileCodeSnippets `protobuf:"bytes,1,opt,name=file_code_snippets,json=fileCodeSnippets,proto3" json:"file_code_snippets,omitempty"`
}

func (x *ExtractPathsRequest) Reset() {
	*x = ExtractPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractPathsRequest) ProtoMessage() {}

func (x *ExtractPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractPathsRequest.ProtoReflect.Descriptor instead.
func (*ExtractPathsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{257}
}

func (x *ExtractPathsRequest) GetFileCodeSnippets() *FileCodeSnippets {
	if x != nil {
		return x.FileCodeSnippets
	}
	return nil
}

type ExtractPathsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*CodeSymbolWithAction `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ExtractPathsResponse) Reset() {
	*x = ExtractPathsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtractPathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractPathsResponse) ProtoMessage() {}

func (x *ExtractPathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractPathsResponse.ProtoReflect.Descriptor instead.
func (*ExtractPathsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{258}
}

func (x *ExtractPathsResponse) GetPaths() []*CodeSymbolWithAction {
	if x != nil {
		return x.Paths
	}
	return nil
}

type DocumentationQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocIdentifier string `protobuf:"bytes,1,opt,name=doc_identifier,json=docIdentifier,proto3" json:"doc_identifier,omitempty"`
	Query         string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	TopK          uint32 `protobuf:"varint,3,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	RerankResults bool   `protobuf:"varint,4,opt,name=rerank_results,json=rerankResults,proto3" json:"rerank_results,omitempty"`
}

func (x *DocumentationQueryRequest) Reset() {
	*x = DocumentationQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationQueryRequest) ProtoMessage() {}

func (x *DocumentationQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationQueryRequest.ProtoReflect.Descriptor instead.
func (*DocumentationQueryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{259}
}

func (x *DocumentationQueryRequest) GetDocIdentifier() string {
	if x != nil {
		return x.DocIdentifier
	}
	return ""
}

func (x *DocumentationQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DocumentationQueryRequest) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *DocumentationQueryRequest) GetRerankResults() bool {
	if x != nil {
		return x.RerankResults
	}
	return false
}

type DocumentationQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocIdentifier string                            `protobuf:"bytes,1,opt,name=doc_identifier,json=docIdentifier,proto3" json:"doc_identifier,omitempty"`
	DocName       string                            `protobuf:"bytes,2,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	DocChunks     []*DocumentationChunk             `protobuf:"bytes,3,rep,name=doc_chunks,json=docChunks,proto3" json:"doc_chunks,omitempty"`
	Status        DocumentationQueryResponse_Status `protobuf:"varint,4,opt,name=status,proto3,enum=aiserver.v1.DocumentationQueryResponse_Status" json:"status,omitempty"`
}

func (x *DocumentationQueryResponse) Reset() {
	*x = DocumentationQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationQueryResponse) ProtoMessage() {}

func (x *DocumentationQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationQueryResponse.ProtoReflect.Descriptor instead.
func (*DocumentationQueryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{260}
}

func (x *DocumentationQueryResponse) GetDocIdentifier() string {
	if x != nil {
		return x.DocIdentifier
	}
	return ""
}

func (x *DocumentationQueryResponse) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *DocumentationQueryResponse) GetDocChunks() []*DocumentationChunk {
	if x != nil {
		return x.DocChunks
	}
	return nil
}

func (x *DocumentationQueryResponse) GetStatus() DocumentationQueryResponse_Status {
	if x != nil {
		return x.Status
	}
	return DocumentationQueryResponse_STATUS_UNSPECIFIED
}

type AvailableDocsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartialUrl               string   `protobuf:"bytes,1,opt,name=partial_url,json=partialUrl,proto3" json:"partial_url,omitempty"`
	PartialDocName           string   `protobuf:"bytes,2,opt,name=partial_doc_name,json=partialDocName,proto3" json:"partial_doc_name,omitempty"`
	GetAll                   bool     `protobuf:"varint,3,opt,name=get_all,json=getAll,proto3" json:"get_all,omitempty"`
	AdditionalDocIdentifiers []string `protobuf:"bytes,4,rep,name=additional_doc_identifiers,json=additionalDocIdentifiers,proto3" json:"additional_doc_identifiers,omitempty"`
}

func (x *AvailableDocsRequest) Reset() {
	*x = AvailableDocsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableDocsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableDocsRequest) ProtoMessage() {}

func (x *AvailableDocsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableDocsRequest.ProtoReflect.Descriptor instead.
func (*AvailableDocsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{261}
}

func (x *AvailableDocsRequest) GetPartialUrl() string {
	if x != nil {
		return x.PartialUrl
	}
	return ""
}

func (x *AvailableDocsRequest) GetPartialDocName() string {
	if x != nil {
		return x.PartialDocName
	}
	return ""
}

func (x *AvailableDocsRequest) GetGetAll() bool {
	if x != nil {
		return x.GetAll
	}
	return false
}

func (x *AvailableDocsRequest) GetAdditionalDocIdentifiers() []string {
	if x != nil {
		return x.AdditionalDocIdentifiers
	}
	return nil
}

type AvailableDocsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docs []*DocumentationInfo `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"`
}

func (x *AvailableDocsResponse) Reset() {
	*x = AvailableDocsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableDocsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableDocsResponse) ProtoMessage() {}

func (x *AvailableDocsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableDocsResponse.ProtoReflect.Descriptor instead.
func (*AvailableDocsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{262}
}

func (x *AvailableDocsResponse) GetDocs() []*DocumentationInfo {
	if x != nil {
		return x.Docs
	}
	return nil
}

type DocumentationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocIdentifier string                 `protobuf:"bytes,1,opt,name=doc_identifier,json=docIdentifier,proto3" json:"doc_identifier,omitempty"`
	Metadata      *DocumentationMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DocumentationInfo) Reset() {
	*x = DocumentationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationInfo) ProtoMessage() {}

func (x *DocumentationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationInfo.ProtoReflect.Descriptor instead.
func (*DocumentationInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{263}
}

func (x *DocumentationInfo) GetDocIdentifier() string {
	if x != nil {
		return x.DocIdentifier
	}
	return ""
}

func (x *DocumentationInfo) GetMetadata() *DocumentationMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type DocumentationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixUrl               string `protobuf:"bytes,1,opt,name=prefix_url,json=prefixUrl,proto3" json:"prefix_url,omitempty"`
	DocName                 string `protobuf:"bytes,2,opt,name=doc_name,json=docName,proto3" json:"doc_name,omitempty"`
	IsDifferentPrefixOrigin bool   `protobuf:"varint,3,opt,name=is_different_prefix_origin,json=isDifferentPrefixOrigin,proto3" json:"is_different_prefix_origin,omitempty"`
	TruePrefixUrl           string `protobuf:"bytes,4,opt,name=true_prefix_url,json=truePrefixUrl,proto3" json:"true_prefix_url,omitempty"`
	Public                  bool   `protobuf:"varint,5,opt,name=public,proto3" json:"public,omitempty"`
	TeamId                  *int32 `protobuf:"varint,6,opt,name=team_id,json=teamId,proto3,oneof" json:"team_id,omitempty"`
}

func (x *DocumentationMetadata) Reset() {
	*x = DocumentationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentationMetadata) ProtoMessage() {}

func (x *DocumentationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentationMetadata.ProtoReflect.Descriptor instead.
func (*DocumentationMetadata) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{264}
}

func (x *DocumentationMetadata) GetPrefixUrl() string {
	if x != nil {
		return x.PrefixUrl
	}
	return ""
}

func (x *DocumentationMetadata) GetDocName() string {
	if x != nil {
		return x.DocName
	}
	return ""
}

func (x *DocumentationMetadata) GetIsDifferentPrefixOrigin() bool {
	if x != nil {
		return x.IsDifferentPrefixOrigin
	}
	return false
}

func (x *DocumentationMetadata) GetTruePrefixUrl() string {
	if x != nil {
		return x.TruePrefixUrl
	}
	return ""
}

func (x *DocumentationMetadata) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *DocumentationMetadata) GetTeamId() int32 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

type ReportFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feedback     string                             `protobuf:"bytes,1,opt,name=feedback,proto3" json:"feedback,omitempty"`
	FeedbackType ReportFeedbackRequest_FeedbackType `protobuf:"varint,2,opt,name=feedback_type,json=feedbackType,proto3,enum=aiserver.v1.ReportFeedbackRequest_FeedbackType" json:"feedback_type,omitempty"`
}

func (x *ReportFeedbackRequest) Reset() {
	*x = ReportFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFeedbackRequest) ProtoMessage() {}

func (x *ReportFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFeedbackRequest.ProtoReflect.Descriptor instead.
func (*ReportFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{265}
}

func (x *ReportFeedbackRequest) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

func (x *ReportFeedbackRequest) GetFeedbackType() ReportFeedbackRequest_FeedbackType {
	if x != nil {
		return x.FeedbackType
	}
	return ReportFeedbackRequest_FEEDBACK_TYPE_UNSPECIFIED
}

type ReportFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportFeedbackResponse) Reset() {
	*x = ReportFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportFeedbackResponse) ProtoMessage() {}

func (x *ReportFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportFeedbackResponse.ProtoReflect.Descriptor instead.
func (*ReportFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{266}
}

type ReportBugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bug          string                   `protobuf:"bytes,1,opt,name=bug,proto3" json:"bug,omitempty"`
	BugType      ReportBugRequest_BugType `protobuf:"varint,2,opt,name=bug_type,json=bugType,proto3,enum=aiserver.v1.ReportBugRequest_BugType" json:"bug_type,omitempty"`
	Context      *BugContext              `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	ContactEmail string                   `protobuf:"bytes,4,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
}

func (x *ReportBugRequest) Reset() {
	*x = ReportBugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBugRequest) ProtoMessage() {}

func (x *ReportBugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBugRequest.ProtoReflect.Descriptor instead.
func (*ReportBugRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{267}
}

func (x *ReportBugRequest) GetBug() string {
	if x != nil {
		return x.Bug
	}
	return ""
}

func (x *ReportBugRequest) GetBugType() ReportBugRequest_BugType {
	if x != nil {
		return x.BugType
	}
	return ReportBugRequest_BUG_TYPE_UNSPECIFIED
}

func (x *ReportBugRequest) GetContext() *BugContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ReportBugRequest) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

type BugContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Screenshots        []string               `protobuf:"bytes,1,rep,name=screenshots,proto3" json:"screenshots,omitempty"`
	CurrentFile        *CurrentFileInfo       `protobuf:"bytes,2,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation       []*ConversationMessage `protobuf:"bytes,3,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Logs               []*LogFile             `protobuf:"bytes,4,rep,name=logs,proto3" json:"logs,omitempty"`
	ConsoleLogs        string                 `protobuf:"bytes,5,opt,name=console_logs,json=consoleLogs,proto3" json:"console_logs,omitempty"`
	CursorVersion      string                 `protobuf:"bytes,6,opt,name=cursor_version,json=cursorVersion,proto3" json:"cursor_version,omitempty"`
	Os                 string                 `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	ProtoUrl           string                 `protobuf:"bytes,8,opt,name=proto_url,json=protoUrl,proto3" json:"proto_url,omitempty"`
	FailingRequstId    string                 `protobuf:"bytes,9,opt,name=failing_requst_id,json=failingRequstId,proto3" json:"failing_requst_id,omitempty"`
	ConnectionErrorRaw string                 `protobuf:"bytes,10,opt,name=connection_error_raw,json=connectionErrorRaw,proto3" json:"connection_error_raw,omitempty"`
	DebugInfo          *CmdKDebugInfo         `protobuf:"bytes,12,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
}

func (x *BugContext) Reset() {
	*x = BugContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BugContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugContext) ProtoMessage() {}

func (x *BugContext) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugContext.ProtoReflect.Descriptor instead.
func (*BugContext) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{268}
}

func (x *BugContext) GetScreenshots() []string {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *BugContext) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *BugContext) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *BugContext) GetLogs() []*LogFile {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *BugContext) GetConsoleLogs() string {
	if x != nil {
		return x.ConsoleLogs
	}
	return ""
}

func (x *BugContext) GetCursorVersion() string {
	if x != nil {
		return x.CursorVersion
	}
	return ""
}

func (x *BugContext) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *BugContext) GetProtoUrl() string {
	if x != nil {
		return x.ProtoUrl
	}
	return ""
}

func (x *BugContext) GetFailingRequstId() string {
	if x != nil {
		return x.FailingRequstId
	}
	return ""
}

func (x *BugContext) GetConnectionErrorRaw() string {
	if x != nil {
		return x.ConnectionErrorRaw
	}
	return ""
}

func (x *BugContext) GetDebugInfo() *CmdKDebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

type LogFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativePathToCursorFolder string `protobuf:"bytes,1,opt,name=relative_path_to_cursor_folder,json=relativePathToCursorFolder,proto3" json:"relative_path_to_cursor_folder,omitempty"`
	Contents                   string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *LogFile) Reset() {
	*x = LogFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFile) ProtoMessage() {}

func (x *LogFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogFile.ProtoReflect.Descriptor instead.
func (*LogFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{269}
}

func (x *LogFile) GetRelativePathToCursorFolder() string {
	if x != nil {
		return x.RelativePathToCursorFolder
	}
	return ""
}

func (x *LogFile) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type ReportBugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportBugResponse) Reset() {
	*x = ReportBugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportBugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportBugResponse) ProtoMessage() {}

func (x *ReportBugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportBugResponse.ProtoReflect.Descriptor instead.
func (*ReportBugResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{270}
}

type GenerateTldrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *GenerateTldrRequest) Reset() {
	*x = GenerateTldrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTldrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTldrRequest) ProtoMessage() {}

func (x *GenerateTldrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTldrRequest.ProtoReflect.Descriptor instead.
func (*GenerateTldrRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{271}
}

func (x *GenerateTldrRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GenerateTldrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
	All     string `protobuf:"bytes,2,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *GenerateTldrResponse) Reset() {
	*x = GenerateTldrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTldrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTldrResponse) ProtoMessage() {}

func (x *GenerateTldrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTldrResponse.ProtoReflect.Descriptor instead.
func (*GenerateTldrResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{272}
}

func (x *GenerateTldrResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *GenerateTldrResponse) GetAll() string {
	if x != nil {
		return x.All
	}
	return ""
}

type TaskStreamChatContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile              *CurrentFileInfo                `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation             []*ConversationMessage          `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories             []*RepositoryInfo               `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext          *ExplicitContext                `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath        *string                         `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	CodeBlocks               []*CodeBlock                    `protobuf:"bytes,6,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails             *ModelDetails                   `protobuf:"bytes,7,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers []string                        `protobuf:"bytes,8,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	LinterErrors             *LinterErrors                   `protobuf:"bytes,14,opt,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	AdvancedCodebaseContext  *AdvancedCodebaseContextOptions `protobuf:"bytes,15,opt,name=advanced_codebase_context,json=advancedCodebaseContext,proto3" json:"advanced_codebase_context,omitempty"`
	IsEval                   *bool                           `protobuf:"varint,16,opt,name=is_eval,json=isEval,proto3,oneof" json:"is_eval,omitempty"`
	RequestId                string                          `protobuf:"bytes,17,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DesiredTokenLimit        *int32                          `protobuf:"varint,18,opt,name=desired_token_limit,json=desiredTokenLimit,proto3,oneof" json:"desired_token_limit,omitempty"`
}

func (x *TaskStreamChatContextRequest) Reset() {
	*x = TaskStreamChatContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextRequest) ProtoMessage() {}

func (x *TaskStreamChatContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextRequest.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{273}
}

func (x *TaskStreamChatContextRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *TaskStreamChatContextRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetAdvancedCodebaseContext() *AdvancedCodebaseContextOptions {
	if x != nil {
		return x.AdvancedCodebaseContext
	}
	return nil
}

func (x *TaskStreamChatContextRequest) GetIsEval() bool {
	if x != nil && x.IsEval != nil {
		return *x.IsEval
	}
	return false
}

func (x *TaskStreamChatContextRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TaskStreamChatContextRequest) GetDesiredTokenLimit() int32 {
	if x != nil && x.DesiredTokenLimit != nil {
		return *x.DesiredTokenLimit
	}
	return 0
}

type AdvancedCodebaseContextOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumResultsPerSearch int32             `protobuf:"varint,1,opt,name=num_results_per_search,json=numResultsPerSearch,proto3" json:"num_results_per_search,omitempty"`
	IncludePattern      *string           `protobuf:"bytes,2,opt,name=include_pattern,json=includePattern,proto3,oneof" json:"include_pattern,omitempty"`
	ExcludePattern      *string           `protobuf:"bytes,3,opt,name=exclude_pattern,json=excludePattern,proto3,oneof" json:"exclude_pattern,omitempty"`
	Reranker            RerankerAlgorithm `protobuf:"varint,4,opt,name=reranker,proto3,enum=aiserver.v1.RerankerAlgorithm" json:"reranker,omitempty"`
	IndexId             *string           `protobuf:"bytes,5,opt,name=index_id,json=indexId,proto3,oneof" json:"index_id,omitempty"`
	ReasoningStep       bool              `protobuf:"varint,6,opt,name=reasoning_step,json=reasoningStep,proto3" json:"reasoning_step,omitempty"`
	Rechunker           *RechunkerChoice  `protobuf:"varint,7,opt,name=rechunker,proto3,enum=aiserver.v1.RechunkerChoice,oneof" json:"rechunker,omitempty"`
}

func (x *AdvancedCodebaseContextOptions) Reset() {
	*x = AdvancedCodebaseContextOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedCodebaseContextOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedCodebaseContextOptions) ProtoMessage() {}

func (x *AdvancedCodebaseContextOptions) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedCodebaseContextOptions.ProtoReflect.Descriptor instead.
func (*AdvancedCodebaseContextOptions) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{274}
}

func (x *AdvancedCodebaseContextOptions) GetNumResultsPerSearch() int32 {
	if x != nil {
		return x.NumResultsPerSearch
	}
	return 0
}

func (x *AdvancedCodebaseContextOptions) GetIncludePattern() string {
	if x != nil && x.IncludePattern != nil {
		return *x.IncludePattern
	}
	return ""
}

func (x *AdvancedCodebaseContextOptions) GetExcludePattern() string {
	if x != nil && x.ExcludePattern != nil {
		return *x.ExcludePattern
	}
	return ""
}

func (x *AdvancedCodebaseContextOptions) GetReranker() RerankerAlgorithm {
	if x != nil {
		return x.Reranker
	}
	return RerankerAlgorithm_RERANKER_ALGORITHM_UNSPECIFIED
}

func (x *AdvancedCodebaseContextOptions) GetIndexId() string {
	if x != nil && x.IndexId != nil {
		return *x.IndexId
	}
	return ""
}

func (x *AdvancedCodebaseContextOptions) GetReasoningStep() bool {
	if x != nil {
		return x.ReasoningStep
	}
	return false
}

func (x *AdvancedCodebaseContextOptions) GetRechunker() RechunkerChoice {
	if x != nil && x.Rechunker != nil {
		return *x.Rechunker
	}
	return RechunkerChoice_RECHUNKER_CHOICE_UNSPECIFIED
}

type TaskStreamChatContextResponseWrapped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RealResponse       *TaskStreamChatContextResponse `protobuf:"bytes,1,opt,name=real_response,json=realResponse,proto3" json:"real_response,omitempty"`
	BackgroundTaskUuid string                         `protobuf:"bytes,2,opt,name=background_task_uuid,json=backgroundTaskUuid,proto3" json:"background_task_uuid,omitempty"`
}

func (x *TaskStreamChatContextResponseWrapped) Reset() {
	*x = TaskStreamChatContextResponseWrapped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponseWrapped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponseWrapped) ProtoMessage() {}

func (x *TaskStreamChatContextResponseWrapped) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponseWrapped.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponseWrapped) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{275}
}

func (x *TaskStreamChatContextResponseWrapped) GetRealResponse() *TaskStreamChatContextResponse {
	if x != nil {
		return x.RealResponse
	}
	return nil
}

func (x *TaskStreamChatContextResponseWrapped) GetBackgroundTaskUuid() string {
	if x != nil {
		return x.BackgroundTaskUuid
	}
	return ""
}

type TaskStreamChatContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output           *TaskStreamChatContextResponse_Output           `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	GatheringStep    *TaskStreamChatContextResponse_GatheringStep    `protobuf:"bytes,2,opt,name=gathering_step,json=gatheringStep,proto3" json:"gathering_step,omitempty"`
	GatheringFile    *TaskStreamChatContextResponse_GatheringFile    `protobuf:"bytes,3,opt,name=gathering_file,json=gatheringFile,proto3" json:"gathering_file,omitempty"`
	RerankingStep    *TaskStreamChatContextResponse_RerankingStep    `protobuf:"bytes,4,opt,name=reranking_step,json=rerankingStep,proto3" json:"reranking_step,omitempty"`
	RerankingFile    *TaskStreamChatContextResponse_RerankingFile    `protobuf:"bytes,5,opt,name=reranking_file,json=rerankingFile,proto3" json:"reranking_file,omitempty"`
	ReasoningStep    *TaskStreamChatContextResponse_ReasoningStep    `protobuf:"bytes,6,opt,name=reasoning_step,json=reasoningStep,proto3" json:"reasoning_step,omitempty"`
	ReasoningSubstep *TaskStreamChatContextResponse_ReasoningSubstep `protobuf:"bytes,7,opt,name=reasoning_substep,json=reasoningSubstep,proto3" json:"reasoning_substep,omitempty"`
}

func (x *TaskStreamChatContextResponse) Reset() {
	*x = TaskStreamChatContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse) ProtoMessage() {}

func (x *TaskStreamChatContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276}
}

func (x *TaskStreamChatContextResponse) GetOutput() *TaskStreamChatContextResponse_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TaskStreamChatContextResponse) GetGatheringStep() *TaskStreamChatContextResponse_GatheringStep {
	if x != nil {
		return x.GatheringStep
	}
	return nil
}

func (x *TaskStreamChatContextResponse) GetGatheringFile() *TaskStreamChatContextResponse_GatheringFile {
	if x != nil {
		return x.GatheringFile
	}
	return nil
}

func (x *TaskStreamChatContextResponse) GetRerankingStep() *TaskStreamChatContextResponse_RerankingStep {
	if x != nil {
		return x.RerankingStep
	}
	return nil
}

func (x *TaskStreamChatContextResponse) GetRerankingFile() *TaskStreamChatContextResponse_RerankingFile {
	if x != nil {
		return x.RerankingFile
	}
	return nil
}

func (x *TaskStreamChatContextResponse) GetReasoningStep() *TaskStreamChatContextResponse_ReasoningStep {
	if x != nil {
		return x.ReasoningStep
	}
	return nil
}

func (x *TaskStreamChatContextResponse) GetReasoningSubstep() *TaskStreamChatContextResponse_ReasoningSubstep {
	if x != nil {
		return x.ReasoningSubstep
	}
	return nil
}

type RerankerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeResults       []*CodeResult          `protobuf:"bytes,1,rep,name=code_results,json=codeResults,proto3" json:"code_results,omitempty"`
	Query             string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	NumBlocks         int32                  `protobuf:"varint,3,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	CurrentFile       *CurrentFileInfo       `protobuf:"bytes,4,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation      []*ConversationMessage `protobuf:"bytes,5,rep,name=conversation,proto3" json:"conversation,omitempty"`
	ApiDetails        *ApiDetails            `protobuf:"bytes,6,opt,name=api_details,json=apiDetails,proto3" json:"api_details,omitempty"`
	FileSearchResults *FullFileSearchResult  `protobuf:"bytes,7,opt,name=file_search_results,json=fileSearchResults,proto3" json:"file_search_results,omitempty"`
	CodeSearchResults *CodeSearchResult      `protobuf:"bytes,8,opt,name=code_search_results,json=codeSearchResults,proto3" json:"code_search_results,omitempty"`
}

func (x *RerankerRequest) Reset() {
	*x = RerankerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankerRequest) ProtoMessage() {}

func (x *RerankerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankerRequest.ProtoReflect.Descriptor instead.
func (*RerankerRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{277}
}

func (x *RerankerRequest) GetCodeResults() []*CodeResult {
	if x != nil {
		return x.CodeResults
	}
	return nil
}

func (x *RerankerRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RerankerRequest) GetNumBlocks() int32 {
	if x != nil {
		return x.NumBlocks
	}
	return 0
}

func (x *RerankerRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *RerankerRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *RerankerRequest) GetApiDetails() *ApiDetails {
	if x != nil {
		return x.ApiDetails
	}
	return nil
}

func (x *RerankerRequest) GetFileSearchResults() *FullFileSearchResult {
	if x != nil {
		return x.FileSearchResults
	}
	return nil
}

func (x *RerankerRequest) GetCodeSearchResults() *CodeSearchResult {
	if x != nil {
		return x.CodeSearchResults
	}
	return nil
}

type ApiDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey          string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	EnableGhostMode *bool  `protobuf:"varint,2,opt,name=enable_ghost_mode,json=enableGhostMode,proto3,oneof" json:"enable_ghost_mode,omitempty"`
}

func (x *ApiDetails) Reset() {
	*x = ApiDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiDetails) ProtoMessage() {}

func (x *ApiDetails) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiDetails.ProtoReflect.Descriptor instead.
func (*ApiDetails) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{278}
}

func (x *ApiDetails) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ApiDetails) GetEnableGhostMode() bool {
	if x != nil && x.EnableGhostMode != nil {
		return *x.EnableGhostMode
	}
	return false
}

type RerankerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CodeResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *RerankerResponse) Reset() {
	*x = RerankerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankerResponse) ProtoMessage() {}

func (x *RerankerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankerResponse.ProtoReflect.Descriptor instead.
func (*RerankerResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{279}
}

func (x *RerankerResponse) GetResults() []*CodeResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type ModelQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile       *CurrentFileInfo            `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation      []*ConversationMessage      `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories      []*RepositoryInfo           `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext   *ExplicitContext            `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath *string                     `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	CodeBlocks        []*CodeBlock                `protobuf:"bytes,6,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails      *ModelDetails               `protobuf:"bytes,7,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	QueryType         ModelQueryRequest_QueryType `protobuf:"varint,8,opt,name=query_type,json=queryType,proto3,enum=aiserver.v1.ModelQueryRequest_QueryType" json:"query_type,omitempty"`
	RepositoryInfo    *RepositoryInfo             `protobuf:"bytes,9,opt,name=repository_info,json=repositoryInfo,proto3" json:"repository_info,omitempty"`
	FasterAndStupider bool                        `protobuf:"varint,10,opt,name=faster_and_stupider,json=fasterAndStupider,proto3" json:"faster_and_stupider,omitempty"`
	UseGlobs          bool                        `protobuf:"varint,11,opt,name=use_globs,json=useGlobs,proto3" json:"use_globs,omitempty"`
}

func (x *ModelQueryRequest) Reset() {
	*x = ModelQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQueryRequest) ProtoMessage() {}

func (x *ModelQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQueryRequest.ProtoReflect.Descriptor instead.
func (*ModelQueryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{280}
}

func (x *ModelQueryRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *ModelQueryRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *ModelQueryRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *ModelQueryRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *ModelQueryRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *ModelQueryRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *ModelQueryRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *ModelQueryRequest) GetQueryType() ModelQueryRequest_QueryType {
	if x != nil {
		return x.QueryType
	}
	return ModelQueryRequest_QUERY_TYPE_UNSPECIFIED
}

func (x *ModelQueryRequest) GetRepositoryInfo() *RepositoryInfo {
	if x != nil {
		return x.RepositoryInfo
	}
	return nil
}

func (x *ModelQueryRequest) GetFasterAndStupider() bool {
	if x != nil {
		return x.FasterAndStupider
	}
	return false
}

func (x *ModelQueryRequest) GetUseGlobs() bool {
	if x != nil {
		return x.UseGlobs
	}
	return false
}

type ModelQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*ModelQueryResponse_Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ModelQueryResponse) Reset() {
	*x = ModelQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQueryResponse) ProtoMessage() {}

func (x *ModelQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQueryResponse.ProtoReflect.Descriptor instead.
func (*ModelQueryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{281}
}

func (x *ModelQueryResponse) GetQueries() []*ModelQueryResponse_Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

type ModelQueryResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *ModelQueryResponseV2_QueryItem `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Reasoning string                          `protobuf:"bytes,2,opt,name=reasoning,proto3" json:"reasoning,omitempty"`
}

func (x *ModelQueryResponseV2) Reset() {
	*x = ModelQueryResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQueryResponseV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQueryResponseV2) ProtoMessage() {}

func (x *ModelQueryResponseV2) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQueryResponseV2.ProtoReflect.Descriptor instead.
func (*ModelQueryResponseV2) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{282}
}

func (x *ModelQueryResponseV2) GetQuery() *ModelQueryResponseV2_QueryItem {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ModelQueryResponseV2) GetReasoning() string {
	if x != nil {
		return x.Reasoning
	}
	return ""
}

type IntentPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages       []*ConversationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	ContextOptions *ContextOptions        `protobuf:"bytes,2,opt,name=context_options,json=contextOptions,proto3" json:"context_options,omitempty"`
	ModelDetails   *ModelDetails          `protobuf:"bytes,3,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *IntentPredictionRequest) Reset() {
	*x = IntentPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentPredictionRequest) ProtoMessage() {}

func (x *IntentPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentPredictionRequest.ProtoReflect.Descriptor instead.
func (*IntentPredictionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{283}
}

func (x *IntentPredictionRequest) GetMessages() []*ConversationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *IntentPredictionRequest) GetContextOptions() *ContextOptions {
	if x != nil {
		return x.ContextOptions
	}
	return nil
}

func (x *IntentPredictionRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type ContextOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllDocumentation    *ContextOptions_AllDocumentation    `protobuf:"bytes,1,opt,name=all_documentation,json=allDocumentation,proto3" json:"all_documentation,omitempty"`
	CurrentFileContents *ContextOptions_CurrentFileContents `protobuf:"bytes,2,opt,name=current_file_contents,json=currentFileContents,proto3" json:"current_file_contents,omitempty"`
	LinterDiagnostics   *ContextOptions_LinterDiagnostics   `protobuf:"bytes,3,opt,name=linter_diagnostics,json=linterDiagnostics,proto3" json:"linter_diagnostics,omitempty"`
	GlobalContext       *ContextOptions_GlobalContext       `protobuf:"bytes,4,opt,name=global_context,json=globalContext,proto3" json:"global_context,omitempty"`
}

func (x *ContextOptions) Reset() {
	*x = ContextOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions) ProtoMessage() {}

func (x *ContextOptions) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions.ProtoReflect.Descriptor instead.
func (*ContextOptions) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284}
}

func (x *ContextOptions) GetAllDocumentation() *ContextOptions_AllDocumentation {
	if x != nil {
		return x.AllDocumentation
	}
	return nil
}

func (x *ContextOptions) GetCurrentFileContents() *ContextOptions_CurrentFileContents {
	if x != nil {
		return x.CurrentFileContents
	}
	return nil
}

func (x *ContextOptions) GetLinterDiagnostics() *ContextOptions_LinterDiagnostics {
	if x != nil {
		return x.LinterDiagnostics
	}
	return nil
}

func (x *ContextOptions) GetGlobalContext() *ContextOptions_GlobalContext {
	if x != nil {
		return x.GlobalContext
	}
	return nil
}

type IntentPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChosenDocumentation     *IntentPredictionResponse_ChosenDocumentation     `protobuf:"bytes,1,opt,name=chosen_documentation,json=chosenDocumentation,proto3" json:"chosen_documentation,omitempty"`
	ChosenFileContents      *IntentPredictionResponse_ChosenFileContents      `protobuf:"bytes,2,opt,name=chosen_file_contents,json=chosenFileContents,proto3" json:"chosen_file_contents,omitempty"`
	ChosenLinterDiagnostics *IntentPredictionResponse_ChosenLinterDiagnostics `protobuf:"bytes,3,opt,name=chosen_linter_diagnostics,json=chosenLinterDiagnostics,proto3" json:"chosen_linter_diagnostics,omitempty"`
	UseGlobalContext        bool                                              `protobuf:"varint,4,opt,name=use_global_context,json=useGlobalContext,proto3" json:"use_global_context,omitempty"`
	UseWithFolderContext    bool                                              `protobuf:"varint,5,opt,name=use_with_folder_context,json=useWithFolderContext,proto3" json:"use_with_folder_context,omitempty"`
}

func (x *IntentPredictionResponse) Reset() {
	*x = IntentPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentPredictionResponse) ProtoMessage() {}

func (x *IntentPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentPredictionResponse.ProtoReflect.Descriptor instead.
func (*IntentPredictionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{285}
}

func (x *IntentPredictionResponse) GetChosenDocumentation() *IntentPredictionResponse_ChosenDocumentation {
	if x != nil {
		return x.ChosenDocumentation
	}
	return nil
}

func (x *IntentPredictionResponse) GetChosenFileContents() *IntentPredictionResponse_ChosenFileContents {
	if x != nil {
		return x.ChosenFileContents
	}
	return nil
}

func (x *IntentPredictionResponse) GetChosenLinterDiagnostics() *IntentPredictionResponse_ChosenLinterDiagnostics {
	if x != nil {
		return x.ChosenLinterDiagnostics
	}
	return nil
}

func (x *IntentPredictionResponse) GetUseGlobalContext() bool {
	if x != nil {
		return x.UseGlobalContext
	}
	return false
}

func (x *IntentPredictionResponse) GetUseWithFolderContext() bool {
	if x != nil {
		return x.UseWithFolderContext
	}
	return false
}

type StreamCursorTutorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation []*ConversationMessage `protobuf:"bytes,1,rep,name=conversation,proto3" json:"conversation,omitempty"`
	ModelDetails *ModelDetails          `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *StreamCursorTutorRequest) Reset() {
	*x = StreamCursorTutorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCursorTutorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCursorTutorRequest) ProtoMessage() {}

func (x *StreamCursorTutorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCursorTutorRequest.ProtoReflect.Descriptor instead.
func (*StreamCursorTutorRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{286}
}

func (x *StreamCursorTutorRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamCursorTutorRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type StreamCursorTutorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamCursorTutorResponse) Reset() {
	*x = StreamCursorTutorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCursorTutorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCursorTutorResponse) ProtoMessage() {}

func (x *StreamCursorTutorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCursorTutorResponse.ProtoReflect.Descriptor instead.
func (*StreamCursorTutorResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{287}
}

func (x *StreamCursorTutorResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CheckFeatureStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureName string `protobuf:"bytes,1,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
}

func (x *CheckFeatureStatusRequest) Reset() {
	*x = CheckFeatureStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFeatureStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFeatureStatusRequest) ProtoMessage() {}

func (x *CheckFeatureStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFeatureStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckFeatureStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{288}
}

func (x *CheckFeatureStatusRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type CheckFeatureStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *CheckFeatureStatusResponse) Reset() {
	*x = CheckFeatureStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckFeatureStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckFeatureStatusResponse) ProtoMessage() {}

func (x *CheckFeatureStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckFeatureStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckFeatureStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{289}
}

func (x *CheckFeatureStatusResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetEffectiveTokenLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelDetails *ModelDetails `protobuf:"bytes,1,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *GetEffectiveTokenLimitRequest) Reset() {
	*x = GetEffectiveTokenLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEffectiveTokenLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEffectiveTokenLimitRequest) ProtoMessage() {}

func (x *GetEffectiveTokenLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEffectiveTokenLimitRequest.ProtoReflect.Descriptor instead.
func (*GetEffectiveTokenLimitRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{290}
}

func (x *GetEffectiveTokenLimitRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type GetEffectiveTokenLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenLimit int32 `protobuf:"varint,1,opt,name=token_limit,json=tokenLimit,proto3" json:"token_limit,omitempty"`
}

func (x *GetEffectiveTokenLimitResponse) Reset() {
	*x = GetEffectiveTokenLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEffectiveTokenLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEffectiveTokenLimitResponse) ProtoMessage() {}

func (x *GetEffectiveTokenLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEffectiveTokenLimitResponse.ProtoReflect.Descriptor instead.
func (*GetEffectiveTokenLimitResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{291}
}

func (x *GetEffectiveTokenLimitResponse) GetTokenLimit() int32 {
	if x != nil {
		return x.TokenLimit
	}
	return 0
}

type ContextScoresRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceRange      string   `protobuf:"bytes,1,opt,name=source_range,json=sourceRange,proto3" json:"source_range,omitempty"`
	MethodSignatures []string `protobuf:"bytes,2,rep,name=method_signatures,json=methodSignatures,proto3" json:"method_signatures,omitempty"`
}

func (x *ContextScoresRequest) Reset() {
	*x = ContextScoresRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextScoresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextScoresRequest) ProtoMessage() {}

func (x *ContextScoresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextScoresRequest.ProtoReflect.Descriptor instead.
func (*ContextScoresRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{292}
}

func (x *ContextScoresRequest) GetSourceRange() string {
	if x != nil {
		return x.SourceRange
	}
	return ""
}

func (x *ContextScoresRequest) GetMethodSignatures() []string {
	if x != nil {
		return x.MethodSignatures
	}
	return nil
}

type ContextScoresResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scores []float32 `protobuf:"fixed32,1,rep,packed,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ContextScoresResponse) Reset() {
	*x = ContextScoresResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextScoresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextScoresResponse) ProtoMessage() {}

func (x *ContextScoresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextScoresResponse.ProtoReflect.Descriptor instead.
func (*ContextScoresResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{293}
}

func (x *ContextScoresResponse) GetScores() []float32 {
	if x != nil {
		return x.Scores
	}
	return nil
}

type StreamCppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile           *CurrentFileInfo                  `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	DiffHistory           []string                          `protobuf:"bytes,2,rep,name=diff_history,json=diffHistory,proto3" json:"diff_history,omitempty"`
	ModelName             *string                           `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	LinterErrors          *LinterErrors                     `protobuf:"bytes,4,opt,name=linter_errors,json=linterErrors,proto3,oneof" json:"linter_errors,omitempty"`
	ContextItems          []*CppContextItem                 `protobuf:"bytes,13,rep,name=context_items,json=contextItems,proto3" json:"context_items,omitempty"`
	DiffHistoryKeys       []string                          `protobuf:"bytes,5,rep,name=diff_history_keys,json=diffHistoryKeys,proto3" json:"diff_history_keys,omitempty"`
	GiveDebugOutput       *bool                             `protobuf:"varint,6,opt,name=give_debug_output,json=giveDebugOutput,proto3,oneof" json:"give_debug_output,omitempty"`
	FileDiffHistories     []*CppFileDiffHistory             `protobuf:"bytes,7,rep,name=file_diff_histories,json=fileDiffHistories,proto3" json:"file_diff_histories,omitempty"`
	MergedDiffHistories   []*CppFileDiffHistory             `protobuf:"bytes,8,rep,name=merged_diff_histories,json=mergedDiffHistories,proto3" json:"merged_diff_histories,omitempty"`
	BlockDiffPatches      []*BlockDiffPatch                 `protobuf:"bytes,9,rep,name=block_diff_patches,json=blockDiffPatches,proto3" json:"block_diff_patches,omitempty"`
	IsNightly             *bool                             `protobuf:"varint,10,opt,name=is_nightly,json=isNightly,proto3,oneof" json:"is_nightly,omitempty"`
	IsDebug               *bool                             `protobuf:"varint,11,opt,name=is_debug,json=isDebug,proto3,oneof" json:"is_debug,omitempty"`
	ImmediatelyAck        *bool                             `protobuf:"varint,12,opt,name=immediately_ack,json=immediatelyAck,proto3,oneof" json:"immediately_ack,omitempty"`
	EnableMoreContext     *bool                             `protobuf:"varint,17,opt,name=enable_more_context,json=enableMoreContext,proto3,oneof" json:"enable_more_context,omitempty"`
	ParameterHints        []*CppParameterHint               `protobuf:"bytes,14,rep,name=parameter_hints,json=parameterHints,proto3" json:"parameter_hints,omitempty"`
	LspContexts           []*LspSubgraphFullContext         `protobuf:"bytes,15,rep,name=lsp_contexts,json=lspContexts,proto3" json:"lsp_contexts,omitempty"`
	CppIntentInfo         *CppIntentInfo                    `protobuf:"bytes,16,opt,name=cpp_intent_info,json=cppIntentInfo,proto3,oneof" json:"cpp_intent_info,omitempty"`
	WorkspaceId           *string                           `protobuf:"bytes,18,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
	AdditionalFiles       []*AdditionalFile                 `protobuf:"bytes,19,rep,name=additional_files,json=additionalFiles,proto3" json:"additional_files,omitempty"`
	ControlToken          *StreamCppRequest_ControlToken    `protobuf:"varint,20,opt,name=control_token,json=controlToken,proto3,enum=aiserver.v1.StreamCppRequest_ControlToken,oneof" json:"control_token,omitempty"`
	ClientTime            *float64                          `protobuf:"fixed64,21,opt,name=client_time,json=clientTime,proto3,oneof" json:"client_time,omitempty"`
	FilesyncUpdates       []*FilesyncUpdateWithModelVersion `protobuf:"bytes,22,rep,name=filesync_updates,json=filesyncUpdates,proto3" json:"filesync_updates,omitempty"`
	TimeSinceRequestStart float64                           `protobuf:"fixed64,23,opt,name=time_since_request_start,json=timeSinceRequestStart,proto3" json:"time_since_request_start,omitempty"`
	TimeAtRequestSend     float64                           `protobuf:"fixed64,24,opt,name=time_at_request_send,json=timeAtRequestSend,proto3" json:"time_at_request_send,omitempty"`
}

func (x *StreamCppRequest) Reset() {
	*x = StreamCppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCppRequest) ProtoMessage() {}

func (x *StreamCppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCppRequest.ProtoReflect.Descriptor instead.
func (*StreamCppRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{294}
}

func (x *StreamCppRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamCppRequest) GetDiffHistory() []string {
	if x != nil {
		return x.DiffHistory
	}
	return nil
}

func (x *StreamCppRequest) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *StreamCppRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *StreamCppRequest) GetContextItems() []*CppContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *StreamCppRequest) GetDiffHistoryKeys() []string {
	if x != nil {
		return x.DiffHistoryKeys
	}
	return nil
}

func (x *StreamCppRequest) GetGiveDebugOutput() bool {
	if x != nil && x.GiveDebugOutput != nil {
		return *x.GiveDebugOutput
	}
	return false
}

func (x *StreamCppRequest) GetFileDiffHistories() []*CppFileDiffHistory {
	if x != nil {
		return x.FileDiffHistories
	}
	return nil
}

func (x *StreamCppRequest) GetMergedDiffHistories() []*CppFileDiffHistory {
	if x != nil {
		return x.MergedDiffHistories
	}
	return nil
}

func (x *StreamCppRequest) GetBlockDiffPatches() []*BlockDiffPatch {
	if x != nil {
		return x.BlockDiffPatches
	}
	return nil
}

func (x *StreamCppRequest) GetIsNightly() bool {
	if x != nil && x.IsNightly != nil {
		return *x.IsNightly
	}
	return false
}

func (x *StreamCppRequest) GetIsDebug() bool {
	if x != nil && x.IsDebug != nil {
		return *x.IsDebug
	}
	return false
}

func (x *StreamCppRequest) GetImmediatelyAck() bool {
	if x != nil && x.ImmediatelyAck != nil {
		return *x.ImmediatelyAck
	}
	return false
}

func (x *StreamCppRequest) GetEnableMoreContext() bool {
	if x != nil && x.EnableMoreContext != nil {
		return *x.EnableMoreContext
	}
	return false
}

func (x *StreamCppRequest) GetParameterHints() []*CppParameterHint {
	if x != nil {
		return x.ParameterHints
	}
	return nil
}

func (x *StreamCppRequest) GetLspContexts() []*LspSubgraphFullContext {
	if x != nil {
		return x.LspContexts
	}
	return nil
}

func (x *StreamCppRequest) GetCppIntentInfo() *CppIntentInfo {
	if x != nil {
		return x.CppIntentInfo
	}
	return nil
}

func (x *StreamCppRequest) GetWorkspaceId() string {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return ""
}

func (x *StreamCppRequest) GetAdditionalFiles() []*AdditionalFile {
	if x != nil {
		return x.AdditionalFiles
	}
	return nil
}

func (x *StreamCppRequest) GetControlToken() StreamCppRequest_ControlToken {
	if x != nil && x.ControlToken != nil {
		return *x.ControlToken
	}
	return StreamCppRequest_CONTROL_TOKEN_UNSPECIFIED
}

func (x *StreamCppRequest) GetClientTime() float64 {
	if x != nil && x.ClientTime != nil {
		return *x.ClientTime
	}
	return 0
}

func (x *StreamCppRequest) GetFilesyncUpdates() []*FilesyncUpdateWithModelVersion {
	if x != nil {
		return x.FilesyncUpdates
	}
	return nil
}

func (x *StreamCppRequest) GetTimeSinceRequestStart() float64 {
	if x != nil {
		return x.TimeSinceRequestStart
	}
	return 0
}

func (x *StreamCppRequest) GetTimeAtRequestSend() float64 {
	if x != nil {
		return x.TimeAtRequestSend
	}
	return 0
}

type CppContextItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contents              string  `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	Symbol                *string `protobuf:"bytes,2,opt,name=symbol,proto3,oneof" json:"symbol,omitempty"`
	RelativeWorkspacePath string  `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Score                 float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *CppContextItem) Reset() {
	*x = CppContextItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppContextItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppContextItem) ProtoMessage() {}

func (x *CppContextItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppContextItem.ProtoReflect.Descriptor instead.
func (*CppContextItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{295}
}

func (x *CppContextItem) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *CppContextItem) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *CppContextItem) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CppContextItem) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type CppFileDiffHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName              string    `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	DiffHistory           []string  `protobuf:"bytes,2,rep,name=diff_history,json=diffHistory,proto3" json:"diff_history,omitempty"`
	DiffHistoryTimestamps []float64 `protobuf:"fixed64,3,rep,packed,name=diff_history_timestamps,json=diffHistoryTimestamps,proto3" json:"diff_history_timestamps,omitempty"`
}

func (x *CppFileDiffHistory) Reset() {
	*x = CppFileDiffHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppFileDiffHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppFileDiffHistory) ProtoMessage() {}

func (x *CppFileDiffHistory) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppFileDiffHistory.ProtoReflect.Descriptor instead.
func (*CppFileDiffHistory) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{296}
}

func (x *CppFileDiffHistory) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CppFileDiffHistory) GetDiffHistory() []string {
	if x != nil {
		return x.DiffHistory
	}
	return nil
}

func (x *CppFileDiffHistory) GetDiffHistoryTimestamps() []float64 {
	if x != nil {
		return x.DiffHistoryTimestamps
	}
	return nil
}

type BlockDiffPatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartModelWindow     *BlockDiffPatch_ModelWindow `protobuf:"bytes,1,opt,name=start_model_window,json=startModelWindow,proto3" json:"start_model_window,omitempty"`
	Changes              []*BlockDiffPatch_Change    `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`
	RelativePath         string                      `protobuf:"bytes,4,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	ModelUuid            string                      `protobuf:"bytes,7,opt,name=model_uuid,json=modelUuid,proto3" json:"model_uuid,omitempty"`
	StartFromChangeIndex int32                       `protobuf:"varint,5,opt,name=start_from_change_index,json=startFromChangeIndex,proto3" json:"start_from_change_index,omitempty"`
}

func (x *BlockDiffPatch) Reset() {
	*x = BlockDiffPatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDiffPatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDiffPatch) ProtoMessage() {}

func (x *BlockDiffPatch) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDiffPatch.ProtoReflect.Descriptor instead.
func (*BlockDiffPatch) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{297}
}

func (x *BlockDiffPatch) GetStartModelWindow() *BlockDiffPatch_ModelWindow {
	if x != nil {
		return x.StartModelWindow
	}
	return nil
}

func (x *BlockDiffPatch) GetChanges() []*BlockDiffPatch_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *BlockDiffPatch) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *BlockDiffPatch) GetModelUuid() string {
	if x != nil {
		return x.ModelUuid
	}
	return ""
}

func (x *BlockDiffPatch) GetStartFromChangeIndex() int32 {
	if x != nil {
		return x.StartFromChangeIndex
	}
	return 0
}

type IRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber int32 `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	StartColumn     int32 `protobuf:"varint,2,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndLineNumber   int32 `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	EndColumn       int32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *IRange) Reset() {
	*x = IRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IRange) ProtoMessage() {}

func (x *IRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IRange.ProtoReflect.Descriptor instead.
func (*IRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{298}
}

func (x *IRange) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *IRange) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *IRange) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *IRange) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type CppParameterHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Documentation *string `protobuf:"bytes,2,opt,name=documentation,proto3,oneof" json:"documentation,omitempty"`
}

func (x *CppParameterHint) Reset() {
	*x = CppParameterHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppParameterHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppParameterHint) ProtoMessage() {}

func (x *CppParameterHint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppParameterHint.ProtoReflect.Descriptor instead.
func (*CppParameterHint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{299}
}

func (x *CppParameterHint) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CppParameterHint) GetDocumentation() string {
	if x != nil && x.Documentation != nil {
		return *x.Documentation
	}
	return ""
}

type LspSubgraphFullContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri          string                    `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	SymbolName   string                    `protobuf:"bytes,2,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	Positions    []*LspSubgraphPosition    `protobuf:"bytes,3,rep,name=positions,proto3" json:"positions,omitempty"`
	ContextItems []*LspSubgraphContextItem `protobuf:"bytes,4,rep,name=context_items,json=contextItems,proto3" json:"context_items,omitempty"`
	Score        float32                   `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *LspSubgraphFullContext) Reset() {
	*x = LspSubgraphFullContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspSubgraphFullContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspSubgraphFullContext) ProtoMessage() {}

func (x *LspSubgraphFullContext) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspSubgraphFullContext.ProtoReflect.Descriptor instead.
func (*LspSubgraphFullContext) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{300}
}

func (x *LspSubgraphFullContext) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *LspSubgraphFullContext) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *LspSubgraphFullContext) GetPositions() []*LspSubgraphPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *LspSubgraphFullContext) GetContextItems() []*LspSubgraphContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *LspSubgraphFullContext) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type LspSubgraphPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line      int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Character int32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *LspSubgraphPosition) Reset() {
	*x = LspSubgraphPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspSubgraphPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspSubgraphPosition) ProtoMessage() {}

func (x *LspSubgraphPosition) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspSubgraphPosition.ProtoReflect.Descriptor instead.
func (*LspSubgraphPosition) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{301}
}

func (x *LspSubgraphPosition) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *LspSubgraphPosition) GetCharacter() int32 {
	if x != nil {
		return x.Character
	}
	return 0
}

type LspSubgraphContextItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri     *string           `protobuf:"bytes,1,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
	Type    string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Content string            `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Range   *LspSubgraphRange `protobuf:"bytes,4,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *LspSubgraphContextItem) Reset() {
	*x = LspSubgraphContextItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspSubgraphContextItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspSubgraphContextItem) ProtoMessage() {}

func (x *LspSubgraphContextItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspSubgraphContextItem.ProtoReflect.Descriptor instead.
func (*LspSubgraphContextItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{302}
}

func (x *LspSubgraphContextItem) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *LspSubgraphContextItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LspSubgraphContextItem) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LspSubgraphContextItem) GetRange() *LspSubgraphRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type LspSubgraphRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine      int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	StartCharacter int32 `protobuf:"varint,2,opt,name=start_character,json=startCharacter,proto3" json:"start_character,omitempty"`
	EndLine        int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	EndCharacter   int32 `protobuf:"varint,4,opt,name=end_character,json=endCharacter,proto3" json:"end_character,omitempty"`
}

func (x *LspSubgraphRange) Reset() {
	*x = LspSubgraphRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LspSubgraphRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LspSubgraphRange) ProtoMessage() {}

func (x *LspSubgraphRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LspSubgraphRange.ProtoReflect.Descriptor instead.
func (*LspSubgraphRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{303}
}

func (x *LspSubgraphRange) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *LspSubgraphRange) GetStartCharacter() int32 {
	if x != nil {
		return x.StartCharacter
	}
	return 0
}

func (x *LspSubgraphRange) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *LspSubgraphRange) GetEndCharacter() int32 {
	if x != nil {
		return x.EndCharacter
	}
	return 0
}

type CppIntentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CppIntentInfo) Reset() {
	*x = CppIntentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppIntentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppIntentInfo) ProtoMessage() {}

func (x *CppIntentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppIntentInfo.ProtoReflect.Descriptor instead.
func (*CppIntentInfo) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{304}
}

func (x *CppIntentInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type AdditionalFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	IsOpen                bool     `protobuf:"varint,2,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	VisibleRangeContent   []string `protobuf:"bytes,3,rep,name=visible_range_content,json=visibleRangeContent,proto3" json:"visible_range_content,omitempty"`
	LastViewedAt          *float64 `protobuf:"fixed64,4,opt,name=last_viewed_at,json=lastViewedAt,proto3,oneof" json:"last_viewed_at,omitempty"`
}

func (x *AdditionalFile) Reset() {
	*x = AdditionalFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdditionalFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalFile) ProtoMessage() {}

func (x *AdditionalFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalFile.ProtoReflect.Descriptor instead.
func (*AdditionalFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{305}
}

func (x *AdditionalFile) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *AdditionalFile) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *AdditionalFile) GetVisibleRangeContent() []string {
	if x != nil {
		return x.VisibleRangeContent
	}
	return nil
}

func (x *AdditionalFile) GetLastViewedAt() float64 {
	if x != nil && x.LastViewedAt != nil {
		return *x.LastViewedAt
	}
	return 0
}

type FilesyncUpdateWithModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersion          int32                  `protobuf:"varint,1,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	RelativeWorkspacePath string                 `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Updates               []*SingleUpdateRequest `protobuf:"bytes,3,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *FilesyncUpdateWithModelVersion) Reset() {
	*x = FilesyncUpdateWithModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesyncUpdateWithModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesyncUpdateWithModelVersion) ProtoMessage() {}

func (x *FilesyncUpdateWithModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesyncUpdateWithModelVersion.ProtoReflect.Descriptor instead.
func (*FilesyncUpdateWithModelVersion) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{306}
}

func (x *FilesyncUpdateWithModelVersion) GetModelVersion() int32 {
	if x != nil {
		return x.ModelVersion
	}
	return 0
}

func (x *FilesyncUpdateWithModelVersion) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FilesyncUpdateWithModelVersion) GetUpdates() []*SingleUpdateRequest {
	if x != nil {
		return x.Updates
	}
	return nil
}

type SingleUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPosition  int32        `protobuf:"varint,1,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition    int32        `protobuf:"varint,2,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	ChangeLength   int32        `protobuf:"varint,3,opt,name=change_length,json=changeLength,proto3" json:"change_length,omitempty"`
	ReplacedString string       `protobuf:"bytes,4,opt,name=replaced_string,json=replacedString,proto3" json:"replaced_string,omitempty"`
	Range          *SimpleRange `protobuf:"bytes,5,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *SingleUpdateRequest) Reset() {
	*x = SingleUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUpdateRequest) ProtoMessage() {}

func (x *SingleUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUpdateRequest.ProtoReflect.Descriptor instead.
func (*SingleUpdateRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{307}
}

func (x *SingleUpdateRequest) GetStartPosition() int32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *SingleUpdateRequest) GetEndPosition() int32 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *SingleUpdateRequest) GetChangeLength() int32 {
	if x != nil {
		return x.ChangeLength
	}
	return 0
}

func (x *SingleUpdateRequest) GetReplacedString() string {
	if x != nil {
		return x.ReplacedString
	}
	return ""
}

func (x *SingleUpdateRequest) GetRange() *SimpleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type StreamCppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                 string     `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	SuggestionStartLine  *int32     `protobuf:"varint,2,opt,name=suggestion_start_line,json=suggestionStartLine,proto3,oneof" json:"suggestion_start_line,omitempty"`
	SuggestionConfidence *int32     `protobuf:"varint,3,opt,name=suggestion_confidence,json=suggestionConfidence,proto3,oneof" json:"suggestion_confidence,omitempty"`
	DoneStream           *bool      `protobuf:"varint,4,opt,name=done_stream,json=doneStream,proto3,oneof" json:"done_stream,omitempty"`
	DebugModelOutput     *string    `protobuf:"bytes,5,opt,name=debug_model_output,json=debugModelOutput,proto3,oneof" json:"debug_model_output,omitempty"`
	DebugModelInput      *string    `protobuf:"bytes,6,opt,name=debug_model_input,json=debugModelInput,proto3,oneof" json:"debug_model_input,omitempty"`
	DebugStreamTime      *string    `protobuf:"bytes,7,opt,name=debug_stream_time,json=debugStreamTime,proto3,oneof" json:"debug_stream_time,omitempty"`
	DebugTotalTime       *string    `protobuf:"bytes,8,opt,name=debug_total_time,json=debugTotalTime,proto3,oneof" json:"debug_total_time,omitempty"`
	DebugTtftTime        *string    `protobuf:"bytes,9,opt,name=debug_ttft_time,json=debugTtftTime,proto3,oneof" json:"debug_ttft_time,omitempty"`
	DebugServerTiming    *string    `protobuf:"bytes,10,opt,name=debug_server_timing,json=debugServerTiming,proto3,oneof" json:"debug_server_timing,omitempty"`
	RangeToReplace       *LineRange `protobuf:"bytes,11,opt,name=range_to_replace,json=rangeToReplace,proto3,oneof" json:"range_to_replace,omitempty"`
}

func (x *StreamCppResponse) Reset() {
	*x = StreamCppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCppResponse) ProtoMessage() {}

func (x *StreamCppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCppResponse.ProtoReflect.Descriptor instead.
func (*StreamCppResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{308}
}

func (x *StreamCppResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamCppResponse) GetSuggestionStartLine() int32 {
	if x != nil && x.SuggestionStartLine != nil {
		return *x.SuggestionStartLine
	}
	return 0
}

func (x *StreamCppResponse) GetSuggestionConfidence() int32 {
	if x != nil && x.SuggestionConfidence != nil {
		return *x.SuggestionConfidence
	}
	return 0
}

func (x *StreamCppResponse) GetDoneStream() bool {
	if x != nil && x.DoneStream != nil {
		return *x.DoneStream
	}
	return false
}

func (x *StreamCppResponse) GetDebugModelOutput() string {
	if x != nil && x.DebugModelOutput != nil {
		return *x.DebugModelOutput
	}
	return ""
}

func (x *StreamCppResponse) GetDebugModelInput() string {
	if x != nil && x.DebugModelInput != nil {
		return *x.DebugModelInput
	}
	return ""
}

func (x *StreamCppResponse) GetDebugStreamTime() string {
	if x != nil && x.DebugStreamTime != nil {
		return *x.DebugStreamTime
	}
	return ""
}

func (x *StreamCppResponse) GetDebugTotalTime() string {
	if x != nil && x.DebugTotalTime != nil {
		return *x.DebugTotalTime
	}
	return ""
}

func (x *StreamCppResponse) GetDebugTtftTime() string {
	if x != nil && x.DebugTtftTime != nil {
		return *x.DebugTtftTime
	}
	return ""
}

func (x *StreamCppResponse) GetDebugServerTiming() string {
	if x != nil && x.DebugServerTiming != nil {
		return *x.DebugServerTiming
	}
	return ""
}

func (x *StreamCppResponse) GetRangeToReplace() *LineRange {
	if x != nil {
		return x.RangeToReplace
	}
	return nil
}

type CppConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNightly *bool  `protobuf:"varint,1,opt,name=is_nightly,json=isNightly,proto3,oneof" json:"is_nightly,omitempty"`
	Model     string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *CppConfigRequest) Reset() {
	*x = CppConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppConfigRequest) ProtoMessage() {}

func (x *CppConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppConfigRequest.ProtoReflect.Descriptor instead.
func (*CppConfigRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{309}
}

func (x *CppConfigRequest) GetIsNightly() bool {
	if x != nil && x.IsNightly != nil {
		return *x.IsNightly
	}
	return false
}

func (x *CppConfigRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

type CppConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AboveRadius                        *int32                                    `protobuf:"varint,1,opt,name=above_radius,json=aboveRadius,proto3,oneof" json:"above_radius,omitempty"`
	BelowRadius                        *int32                                    `protobuf:"varint,2,opt,name=below_radius,json=belowRadius,proto3,oneof" json:"below_radius,omitempty"`
	MergeBehavior                      *CppConfigResponse_MergeBehavior          `protobuf:"bytes,4,opt,name=merge_behavior,json=mergeBehavior,proto3,oneof" json:"merge_behavior,omitempty"`
	IsOn                               *bool                                     `protobuf:"varint,5,opt,name=is_on,json=isOn,proto3,oneof" json:"is_on,omitempty"`
	IsGhostText                        *bool                                     `protobuf:"varint,6,opt,name=is_ghost_text,json=isGhostText,proto3,oneof" json:"is_ghost_text,omitempty"`
	ShouldLetUserEnableCppEvenIfNotPro *bool                                     `protobuf:"varint,7,opt,name=should_let_user_enable_cpp_even_if_not_pro,json=shouldLetUserEnableCppEvenIfNotPro,proto3,oneof" json:"should_let_user_enable_cpp_even_if_not_pro,omitempty"`
	Heuristics                         []CppConfigResponse_Heuristic             `protobuf:"varint,8,rep,packed,name=heuristics,proto3,enum=aiserver.v1.CppConfigResponse_Heuristic" json:"heuristics,omitempty"`
	ExcludeRecentlyViewedFilesPatterns []string                                  `protobuf:"bytes,9,rep,name=exclude_recently_viewed_files_patterns,json=excludeRecentlyViewedFilesPatterns,proto3" json:"exclude_recently_viewed_files_patterns,omitempty"`
	EnableRvfTracking                  bool                                      `protobuf:"varint,10,opt,name=enable_rvf_tracking,json=enableRvfTracking,proto3" json:"enable_rvf_tracking,omitempty"`
	GlobalDebounceDurationMillis       int32                                     `protobuf:"varint,11,opt,name=global_debounce_duration_millis,json=globalDebounceDurationMillis,proto3" json:"global_debounce_duration_millis,omitempty"`
	ClientDebounceDurationMillis       int32                                     `protobuf:"varint,12,opt,name=client_debounce_duration_millis,json=clientDebounceDurationMillis,proto3" json:"client_debounce_duration_millis,omitempty"`
	CppUrl                             string                                    `protobuf:"bytes,13,opt,name=cpp_url,json=cppUrl,proto3" json:"cpp_url,omitempty"`
	UseWhitespaceDiffHistory           bool                                      `protobuf:"varint,14,opt,name=use_whitespace_diff_history,json=useWhitespaceDiffHistory,proto3" json:"use_whitespace_diff_history,omitempty"`
	ImportPredictionConfig             *CppConfigResponse_ImportPredictionConfig `protobuf:"bytes,15,opt,name=import_prediction_config,json=importPredictionConfig,proto3" json:"import_prediction_config,omitempty"`
	EnableFilesyncDebounceSkipping     bool                                      `protobuf:"varint,16,opt,name=enable_filesync_debounce_skipping,json=enableFilesyncDebounceSkipping,proto3" json:"enable_filesync_debounce_skipping,omitempty"`
	CheckFilesyncHashPercent           float32                                   `protobuf:"fixed32,17,opt,name=check_filesync_hash_percent,json=checkFilesyncHashPercent,proto3" json:"check_filesync_hash_percent,omitempty"`
	GeoCppBackendUrl                   string                                    `protobuf:"bytes,18,opt,name=geo_cpp_backend_url,json=geoCppBackendUrl,proto3" json:"geo_cpp_backend_url,omitempty"`
}

func (x *CppConfigResponse) Reset() {
	*x = CppConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppConfigResponse) ProtoMessage() {}

func (x *CppConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppConfigResponse.ProtoReflect.Descriptor instead.
func (*CppConfigResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{310}
}

func (x *CppConfigResponse) GetAboveRadius() int32 {
	if x != nil && x.AboveRadius != nil {
		return *x.AboveRadius
	}
	return 0
}

func (x *CppConfigResponse) GetBelowRadius() int32 {
	if x != nil && x.BelowRadius != nil {
		return *x.BelowRadius
	}
	return 0
}

func (x *CppConfigResponse) GetMergeBehavior() *CppConfigResponse_MergeBehavior {
	if x != nil {
		return x.MergeBehavior
	}
	return nil
}

func (x *CppConfigResponse) GetIsOn() bool {
	if x != nil && x.IsOn != nil {
		return *x.IsOn
	}
	return false
}

func (x *CppConfigResponse) GetIsGhostText() bool {
	if x != nil && x.IsGhostText != nil {
		return *x.IsGhostText
	}
	return false
}

func (x *CppConfigResponse) GetShouldLetUserEnableCppEvenIfNotPro() bool {
	if x != nil && x.ShouldLetUserEnableCppEvenIfNotPro != nil {
		return *x.ShouldLetUserEnableCppEvenIfNotPro
	}
	return false
}

func (x *CppConfigResponse) GetHeuristics() []CppConfigResponse_Heuristic {
	if x != nil {
		return x.Heuristics
	}
	return nil
}

func (x *CppConfigResponse) GetExcludeRecentlyViewedFilesPatterns() []string {
	if x != nil {
		return x.ExcludeRecentlyViewedFilesPatterns
	}
	return nil
}

func (x *CppConfigResponse) GetEnableRvfTracking() bool {
	if x != nil {
		return x.EnableRvfTracking
	}
	return false
}

func (x *CppConfigResponse) GetGlobalDebounceDurationMillis() int32 {
	if x != nil {
		return x.GlobalDebounceDurationMillis
	}
	return 0
}

func (x *CppConfigResponse) GetClientDebounceDurationMillis() int32 {
	if x != nil {
		return x.ClientDebounceDurationMillis
	}
	return 0
}

func (x *CppConfigResponse) GetCppUrl() string {
	if x != nil {
		return x.CppUrl
	}
	return ""
}

func (x *CppConfigResponse) GetUseWhitespaceDiffHistory() bool {
	if x != nil {
		return x.UseWhitespaceDiffHistory
	}
	return false
}

func (x *CppConfigResponse) GetImportPredictionConfig() *CppConfigResponse_ImportPredictionConfig {
	if x != nil {
		return x.ImportPredictionConfig
	}
	return nil
}

func (x *CppConfigResponse) GetEnableFilesyncDebounceSkipping() bool {
	if x != nil {
		return x.EnableFilesyncDebounceSkipping
	}
	return false
}

func (x *CppConfigResponse) GetCheckFilesyncHashPercent() float32 {
	if x != nil {
		return x.CheckFilesyncHashPercent
	}
	return 0
}

func (x *CppConfigResponse) GetGeoCppBackendUrl() string {
	if x != nil {
		return x.GeoCppBackendUrl
	}
	return ""
}

type CppEditHistoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CppEditHistoryStatusRequest) Reset() {
	*x = CppEditHistoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppEditHistoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppEditHistoryStatusRequest) ProtoMessage() {}

func (x *CppEditHistoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppEditHistoryStatusRequest.ProtoReflect.Descriptor instead.
func (*CppEditHistoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{311}
}

type CppEditHistoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On             bool `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	OnlyIfExplicit bool `protobuf:"varint,2,opt,name=only_if_explicit,json=onlyIfExplicit,proto3" json:"only_if_explicit,omitempty"`
}

func (x *CppEditHistoryStatusResponse) Reset() {
	*x = CppEditHistoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppEditHistoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppEditHistoryStatusResponse) ProtoMessage() {}

func (x *CppEditHistoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppEditHistoryStatusResponse.ProtoReflect.Descriptor instead.
func (*CppEditHistoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{312}
}

func (x *CppEditHistoryStatusResponse) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *CppEditHistoryStatusResponse) GetOnlyIfExplicit() bool {
	if x != nil {
		return x.OnlyIfExplicit
	}
	return false
}

type CppAppendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []byte `protobuf:"bytes,1,opt,name=changes,proto3" json:"changes,omitempty"`
}

func (x *CppAppendRequest) Reset() {
	*x = CppAppendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppAppendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppAppendRequest) ProtoMessage() {}

func (x *CppAppendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppAppendRequest.ProtoReflect.Descriptor instead.
func (*CppAppendRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{313}
}

func (x *CppAppendRequest) GetChanges() []byte {
	if x != nil {
		return x.Changes
	}
	return nil
}

type CppAppendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CppAppendResponse) Reset() {
	*x = CppAppendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppAppendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppAppendResponse) ProtoMessage() {}

func (x *CppAppendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppAppendResponse.ProtoReflect.Descriptor instead.
func (*CppAppendResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{314}
}

func (x *CppAppendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CheckNumberConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CheckNumberConfigRequest) Reset() {
	*x = CheckNumberConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNumberConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNumberConfigRequest) ProtoMessage() {}

func (x *CheckNumberConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNumberConfigRequest.ProtoReflect.Descriptor instead.
func (*CheckNumberConfigRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{315}
}

func (x *CheckNumberConfigRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CheckNumberConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CheckNumberConfigResponse) Reset() {
	*x = CheckNumberConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNumberConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNumberConfigResponse) ProtoMessage() {}

func (x *CheckNumberConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNumberConfigResponse.ProtoReflect.Descriptor instead.
func (*CheckNumberConfigResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{316}
}

func (x *CheckNumberConfigResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type StreamTerminalAutocompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentCommand    string                `protobuf:"bytes,1,opt,name=current_command,json=currentCommand,proto3" json:"current_command,omitempty"`
	CommandHistory    []string              `protobuf:"bytes,2,rep,name=command_history,json=commandHistory,proto3" json:"command_history,omitempty"`
	ModelName         *string               `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	FileDiffHistories []*CppFileDiffHistory `protobuf:"bytes,4,rep,name=file_diff_histories,json=fileDiffHistories,proto3" json:"file_diff_histories,omitempty"`
	GitDiff           *string               `protobuf:"bytes,5,opt,name=git_diff,json=gitDiff,proto3,oneof" json:"git_diff,omitempty"`
	CommitHistory     []string              `protobuf:"bytes,6,rep,name=commit_history,json=commitHistory,proto3" json:"commit_history,omitempty"`
	PastResults       []string              `protobuf:"bytes,7,rep,name=past_results,json=pastResults,proto3" json:"past_results,omitempty"`
}

func (x *StreamTerminalAutocompleteRequest) Reset() {
	*x = StreamTerminalAutocompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTerminalAutocompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTerminalAutocompleteRequest) ProtoMessage() {}

func (x *StreamTerminalAutocompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTerminalAutocompleteRequest.ProtoReflect.Descriptor instead.
func (*StreamTerminalAutocompleteRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{317}
}

func (x *StreamTerminalAutocompleteRequest) GetCurrentCommand() string {
	if x != nil {
		return x.CurrentCommand
	}
	return ""
}

func (x *StreamTerminalAutocompleteRequest) GetCommandHistory() []string {
	if x != nil {
		return x.CommandHistory
	}
	return nil
}

func (x *StreamTerminalAutocompleteRequest) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *StreamTerminalAutocompleteRequest) GetFileDiffHistories() []*CppFileDiffHistory {
	if x != nil {
		return x.FileDiffHistories
	}
	return nil
}

func (x *StreamTerminalAutocompleteRequest) GetGitDiff() string {
	if x != nil && x.GitDiff != nil {
		return *x.GitDiff
	}
	return ""
}

func (x *StreamTerminalAutocompleteRequest) GetCommitHistory() []string {
	if x != nil {
		return x.CommitHistory
	}
	return nil
}

func (x *StreamTerminalAutocompleteRequest) GetPastResults() []string {
	if x != nil {
		return x.PastResults
	}
	return nil
}

type StreamTerminalAutocompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	DoneStream *bool  `protobuf:"varint,2,opt,name=done_stream,json=doneStream,proto3,oneof" json:"done_stream,omitempty"`
}

func (x *StreamTerminalAutocompleteResponse) Reset() {
	*x = StreamTerminalAutocompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTerminalAutocompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTerminalAutocompleteResponse) ProtoMessage() {}

func (x *StreamTerminalAutocompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTerminalAutocompleteResponse.ProtoReflect.Descriptor instead.
func (*StreamTerminalAutocompleteResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{318}
}

func (x *StreamTerminalAutocompleteResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamTerminalAutocompleteResponse) GetDoneStream() bool {
	if x != nil && x.DoneStream != nil {
		return *x.DoneStream
	}
	return false
}

type StreamPseudocodeGeneratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile *CurrentFileInfo  `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Target      *PseudocodeTarget `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *StreamPseudocodeGeneratorRequest) Reset() {
	*x = StreamPseudocodeGeneratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPseudocodeGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPseudocodeGeneratorRequest) ProtoMessage() {}

func (x *StreamPseudocodeGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPseudocodeGeneratorRequest.ProtoReflect.Descriptor instead.
func (*StreamPseudocodeGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{319}
}

func (x *StreamPseudocodeGeneratorRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamPseudocodeGeneratorRequest) GetTarget() *PseudocodeTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type PseudocodeTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range   *SimpleRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Content string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PseudocodeTarget) Reset() {
	*x = PseudocodeTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PseudocodeTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PseudocodeTarget) ProtoMessage() {}

func (x *PseudocodeTarget) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PseudocodeTarget.ProtoReflect.Descriptor instead.
func (*PseudocodeTarget) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{320}
}

func (x *PseudocodeTarget) GetRange() *SimpleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *PseudocodeTarget) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type StreamPseudocodeGeneratorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamPseudocodeGeneratorResponse) Reset() {
	*x = StreamPseudocodeGeneratorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPseudocodeGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPseudocodeGeneratorResponse) ProtoMessage() {}

func (x *StreamPseudocodeGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPseudocodeGeneratorResponse.ProtoReflect.Descriptor instead.
func (*StreamPseudocodeGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{321}
}

func (x *StreamPseudocodeGeneratorResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamPseudocodeMapperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target     *PseudocodeTarget `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Pseudocode string            `protobuf:"bytes,1,opt,name=pseudocode,proto3" json:"pseudocode,omitempty"`
}

func (x *StreamPseudocodeMapperRequest) Reset() {
	*x = StreamPseudocodeMapperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPseudocodeMapperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPseudocodeMapperRequest) ProtoMessage() {}

func (x *StreamPseudocodeMapperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPseudocodeMapperRequest.ProtoReflect.Descriptor instead.
func (*StreamPseudocodeMapperRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{322}
}

func (x *StreamPseudocodeMapperRequest) GetTarget() *PseudocodeTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamPseudocodeMapperRequest) GetPseudocode() string {
	if x != nil {
		return x.Pseudocode
	}
	return ""
}

type StreamPseudocodeMapperResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamPseudocodeMapperResponse) Reset() {
	*x = StreamPseudocodeMapperResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPseudocodeMapperResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPseudocodeMapperResponse) ProtoMessage() {}

func (x *StreamPseudocodeMapperResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPseudocodeMapperResponse.ProtoReflect.Descriptor instead.
func (*StreamPseudocodeMapperResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{323}
}

func (x *StreamPseudocodeMapperResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamAiLintBugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunksToAnalyze            []*StreamAiLintBugRequest_CodeChunk          `protobuf:"bytes,1,rep,name=chunks_to_analyze,json=chunksToAnalyze,proto3" json:"chunks_to_analyze,omitempty"`
	ExplicitContext            *ExplicitContext                             `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath          *string                                      `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	ModelDetails               *ModelDetails                                `protobuf:"bytes,9,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DismissedBugs              []*AiLintBug                                 `protobuf:"bytes,10,rep,name=dismissed_bugs,json=dismissedBugs,proto3" json:"dismissed_bugs,omitempty"`
	ActiveBugs                 []*AiLintBug                                 `protobuf:"bytes,11,rep,name=active_bugs,json=activeBugs,proto3" json:"active_bugs,omitempty"`
	LintRules                  []*AiLintRule                                `protobuf:"bytes,12,rep,name=lint_rules,json=lintRules,proto3" json:"lint_rules,omitempty"`
	Clients                    []*StreamAiLintBugRequest_CodeChunkList      `protobuf:"bytes,14,rep,name=clients,proto3" json:"clients,omitempty"`
	ForceEnableDiscriminators  []LintDiscriminator                          `protobuf:"varint,17,rep,packed,name=force_enable_discriminators,json=forceEnableDiscriminators,proto3,enum=aiserver.v1.LintDiscriminator" json:"force_enable_discriminators,omitempty"`
	ForceDisableDiscriminators []LintDiscriminator                          `protobuf:"varint,18,rep,packed,name=force_disable_discriminators,json=forceDisableDiscriminators,proto3,enum=aiserver.v1.LintDiscriminator" json:"force_disable_discriminators,omitempty"`
	ForceEnableGenerators      []LintGenerator                              `protobuf:"varint,19,rep,packed,name=force_enable_generators,json=forceEnableGenerators,proto3,enum=aiserver.v1.LintGenerator" json:"force_enable_generators,omitempty"`
	ForceDisableGenerators     []LintGenerator                              `protobuf:"varint,20,rep,packed,name=force_disable_generators,json=forceDisableGenerators,proto3,enum=aiserver.v1.LintGenerator" json:"force_disable_generators,omitempty"`
	Version                    int32                                        `protobuf:"varint,21,opt,name=version,proto3" json:"version,omitempty"`
	DiscriminatorOptions       *StreamAiLintBugRequest_DiscriminatorOptions `protobuf:"bytes,15,opt,name=discriminator_options,json=discriminatorOptions,proto3,oneof" json:"discriminator_options,omitempty"`
	DebugMode                  bool                                         `protobuf:"varint,16,opt,name=debug_mode,json=debugMode,proto3" json:"debug_mode,omitempty"`
}

func (x *StreamAiLintBugRequest) Reset() {
	*x = StreamAiLintBugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiLintBugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiLintBugRequest) ProtoMessage() {}

func (x *StreamAiLintBugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiLintBugRequest.ProtoReflect.Descriptor instead.
func (*StreamAiLintBugRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{324}
}

func (x *StreamAiLintBugRequest) GetChunksToAnalyze() []*StreamAiLintBugRequest_CodeChunk {
	if x != nil {
		return x.ChunksToAnalyze
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamAiLintBugRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetDismissedBugs() []*AiLintBug {
	if x != nil {
		return x.DismissedBugs
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetActiveBugs() []*AiLintBug {
	if x != nil {
		return x.ActiveBugs
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetLintRules() []*AiLintRule {
	if x != nil {
		return x.LintRules
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetClients() []*StreamAiLintBugRequest_CodeChunkList {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetForceEnableDiscriminators() []LintDiscriminator {
	if x != nil {
		return x.ForceEnableDiscriminators
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetForceDisableDiscriminators() []LintDiscriminator {
	if x != nil {
		return x.ForceDisableDiscriminators
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetForceEnableGenerators() []LintGenerator {
	if x != nil {
		return x.ForceEnableGenerators
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetForceDisableGenerators() []LintGenerator {
	if x != nil {
		return x.ForceDisableGenerators
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StreamAiLintBugRequest) GetDiscriminatorOptions() *StreamAiLintBugRequest_DiscriminatorOptions {
	if x != nil {
		return x.DiscriminatorOptions
	}
	return nil
}

func (x *StreamAiLintBugRequest) GetDebugMode() bool {
	if x != nil {
		return x.DebugMode
	}
	return false
}

type AiLintBug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                     `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Uuid                  string                     `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Message               string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ReplaceRange          *SimpleRange               `protobuf:"bytes,3,opt,name=replace_range,json=replaceRange,proto3" json:"replace_range,omitempty"`
	ReplaceText           string                     `protobuf:"bytes,4,opt,name=replace_text,json=replaceText,proto3" json:"replace_text,omitempty"`
	ReplaceInitialText    string                     `protobuf:"bytes,5,opt,name=replace_initial_text,json=replaceInitialText,proto3" json:"replace_initial_text,omitempty"`
	ReevaluateRange       *SimpleRange               `protobuf:"bytes,6,opt,name=reevaluate_range,json=reevaluateRange,proto3" json:"reevaluate_range,omitempty"`
	ReevaluateInitialText string                     `protobuf:"bytes,7,opt,name=reevaluate_initial_text,json=reevaluateInitialText,proto3" json:"reevaluate_initial_text,omitempty"`
	Generator             LintGenerator              `protobuf:"varint,9,opt,name=generator,proto3,enum=aiserver.v1.LintGenerator" json:"generator,omitempty"`
	DiscriminatorResults  []*LintDiscriminatorResult `protobuf:"bytes,10,rep,name=discriminator_results,json=discriminatorResults,proto3" json:"discriminator_results,omitempty"`
	LogprobsPayload       *LogprobsLintPayload       `protobuf:"bytes,11,opt,name=logprobs_payload,json=logprobsPayload,proto3" json:"logprobs_payload,omitempty"`
}

func (x *AiLintBug) Reset() {
	*x = AiLintBug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLintBug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLintBug) ProtoMessage() {}

func (x *AiLintBug) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLintBug.ProtoReflect.Descriptor instead.
func (*AiLintBug) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{325}
}

func (x *AiLintBug) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *AiLintBug) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AiLintBug) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AiLintBug) GetReplaceRange() *SimpleRange {
	if x != nil {
		return x.ReplaceRange
	}
	return nil
}

func (x *AiLintBug) GetReplaceText() string {
	if x != nil {
		return x.ReplaceText
	}
	return ""
}

func (x *AiLintBug) GetReplaceInitialText() string {
	if x != nil {
		return x.ReplaceInitialText
	}
	return ""
}

func (x *AiLintBug) GetReevaluateRange() *SimpleRange {
	if x != nil {
		return x.ReevaluateRange
	}
	return nil
}

func (x *AiLintBug) GetReevaluateInitialText() string {
	if x != nil {
		return x.ReevaluateInitialText
	}
	return ""
}

func (x *AiLintBug) GetGenerator() LintGenerator {
	if x != nil {
		return x.Generator
	}
	return LintGenerator_LINT_GENERATOR_UNSPECIFIED
}

func (x *AiLintBug) GetDiscriminatorResults() []*LintDiscriminatorResult {
	if x != nil {
		return x.DiscriminatorResults
	}
	return nil
}

func (x *AiLintBug) GetLogprobsPayload() *LogprobsLintPayload {
	if x != nil {
		return x.LogprobsPayload
	}
	return nil
}

type LintDiscriminatorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discriminator LintDiscriminator `protobuf:"varint,1,opt,name=discriminator,proto3,enum=aiserver.v1.LintDiscriminator" json:"discriminator,omitempty"`
	Allow         bool              `protobuf:"varint,2,opt,name=allow,proto3" json:"allow,omitempty"`
	Reasoning     string            `protobuf:"bytes,3,opt,name=reasoning,proto3" json:"reasoning,omitempty"`
}

func (x *LintDiscriminatorResult) Reset() {
	*x = LintDiscriminatorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LintDiscriminatorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LintDiscriminatorResult) ProtoMessage() {}

func (x *LintDiscriminatorResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LintDiscriminatorResult.ProtoReflect.Descriptor instead.
func (*LintDiscriminatorResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{326}
}

func (x *LintDiscriminatorResult) GetDiscriminator() LintDiscriminator {
	if x != nil {
		return x.Discriminator
	}
	return LintDiscriminator_LINT_DISCRIMINATOR_UNSPECIFIED
}

func (x *LintDiscriminatorResult) GetAllow() bool {
	if x != nil {
		return x.Allow
	}
	return false
}

func (x *LintDiscriminatorResult) GetReasoning() string {
	if x != nil {
		return x.Reasoning
	}
	return ""
}

type LogprobsLintPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk                   string `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	ProblematicLine         string `protobuf:"bytes,2,opt,name=problematic_line,json=problematicLine,proto3" json:"problematic_line,omitempty"`
	StartCol                int32  `protobuf:"varint,3,opt,name=start_col,json=startCol,proto3" json:"start_col,omitempty"`
	EndCol                  int32  `protobuf:"varint,4,opt,name=end_col,json=endCol,proto3" json:"end_col,omitempty"`
	MostLikelyReplace       string `protobuf:"bytes,5,opt,name=most_likely_replace,json=mostLikelyReplace,proto3" json:"most_likely_replace,omitempty"`
	LineChunkIndexZeroBased int32  `protobuf:"varint,6,opt,name=line_chunk_index_zero_based,json=lineChunkIndexZeroBased,proto3" json:"line_chunk_index_zero_based,omitempty"`
}

func (x *LogprobsLintPayload) Reset() {
	*x = LogprobsLintPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogprobsLintPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogprobsLintPayload) ProtoMessage() {}

func (x *LogprobsLintPayload) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogprobsLintPayload.ProtoReflect.Descriptor instead.
func (*LogprobsLintPayload) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{327}
}

func (x *LogprobsLintPayload) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *LogprobsLintPayload) GetProblematicLine() string {
	if x != nil {
		return x.ProblematicLine
	}
	return ""
}

func (x *LogprobsLintPayload) GetStartCol() int32 {
	if x != nil {
		return x.StartCol
	}
	return 0
}

func (x *LogprobsLintPayload) GetEndCol() int32 {
	if x != nil {
		return x.EndCol
	}
	return 0
}

func (x *LogprobsLintPayload) GetMostLikelyReplace() string {
	if x != nil {
		return x.MostLikelyReplace
	}
	return ""
}

func (x *LogprobsLintPayload) GetLineChunkIndexZeroBased() int32 {
	if x != nil {
		return x.LineChunkIndexZeroBased
	}
	return 0
}

type AiLintRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *AiLintRule) Reset() {
	*x = AiLintRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiLintRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiLintRule) ProtoMessage() {}

func (x *AiLintRule) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiLintRule.ProtoReflect.Descriptor instead.
func (*AiLintRule) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{328}
}

func (x *AiLintRule) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamAiLintBugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bug                *AiLintBug `protobuf:"bytes,1,opt,name=bug,proto3" json:"bug,omitempty"`
	BackgroundTaskUuid string     `protobuf:"bytes,2,opt,name=background_task_uuid,json=backgroundTaskUuid,proto3" json:"background_task_uuid,omitempty"`
}

func (x *StreamAiLintBugResponse) Reset() {
	*x = StreamAiLintBugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiLintBugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiLintBugResponse) ProtoMessage() {}

func (x *StreamAiLintBugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiLintBugResponse.ProtoReflect.Descriptor instead.
func (*StreamAiLintBugResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{329}
}

func (x *StreamAiLintBugResponse) GetBug() *AiLintBug {
	if x != nil {
		return x.Bug
	}
	return nil
}

func (x *StreamAiLintBugResponse) GetBackgroundTaskUuid() string {
	if x != nil {
		return x.BackgroundTaskUuid
	}
	return ""
}

type StreamAiCursorHelpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages     []*CursorHelpConversationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	UserOs       string                           `protobuf:"bytes,2,opt,name=user_os,json=userOs,proto3" json:"user_os,omitempty"`
	ModelDetails *ModelDetails                    `protobuf:"bytes,3,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *StreamAiCursorHelpRequest) Reset() {
	*x = StreamAiCursorHelpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiCursorHelpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiCursorHelpRequest) ProtoMessage() {}

func (x *StreamAiCursorHelpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiCursorHelpRequest.ProtoReflect.Descriptor instead.
func (*StreamAiCursorHelpRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{330}
}

func (x *StreamAiCursorHelpRequest) GetMessages() []*CursorHelpConversationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *StreamAiCursorHelpRequest) GetUserOs() string {
	if x != nil {
		return x.UserOs
	}
	return ""
}

func (x *StreamAiCursorHelpRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type CursorHelpConversationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Role    string `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CursorHelpConversationMessage) Reset() {
	*x = CursorHelpConversationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorHelpConversationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorHelpConversationMessage) ProtoMessage() {}

func (x *CursorHelpConversationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorHelpConversationMessage.ProtoReflect.Descriptor instead.
func (*CursorHelpConversationMessage) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{331}
}

func (x *CursorHelpConversationMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CursorHelpConversationMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CursorHelpConversationMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type StreamAiCursorHelpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text    string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Actions []string `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *StreamAiCursorHelpResponse) Reset() {
	*x = StreamAiCursorHelpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiCursorHelpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiCursorHelpResponse) ProtoMessage() {}

func (x *StreamAiCursorHelpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiCursorHelpResponse.ProtoReflect.Descriptor instead.
func (*StreamAiCursorHelpResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{332}
}

func (x *StreamAiCursorHelpResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamAiCursorHelpResponse) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

type LogUserLintReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserAction string `protobuf:"bytes,2,opt,name=user_action,json=userAction,proto3" json:"user_action,omitempty"`
	DebugMode  bool   `protobuf:"varint,3,opt,name=debug_mode,json=debugMode,proto3" json:"debug_mode,omitempty"`
}

func (x *LogUserLintReplyRequest) Reset() {
	*x = LogUserLintReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogUserLintReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogUserLintReplyRequest) ProtoMessage() {}

func (x *LogUserLintReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogUserLintReplyRequest.ProtoReflect.Descriptor instead.
func (*LogUserLintReplyRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{333}
}

func (x *LogUserLintReplyRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *LogUserLintReplyRequest) GetUserAction() string {
	if x != nil {
		return x.UserAction
	}
	return ""
}

func (x *LogUserLintReplyRequest) GetDebugMode() bool {
	if x != nil {
		return x.DebugMode
	}
	return false
}

type LogUserLintReplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogUserLintReplyResponse) Reset() {
	*x = LogUserLintReplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogUserLintReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogUserLintReplyResponse) ProtoMessage() {}

func (x *LogUserLintReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogUserLintReplyResponse.ProtoReflect.Descriptor instead.
func (*LogUserLintReplyResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{334}
}

type LogLinterExplicitUserFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bug                 *AiLintBug                                              `protobuf:"bytes,1,opt,name=bug,proto3" json:"bug,omitempty"`
	UserFeedback        LogLinterExplicitUserFeedbackRequest_LinterUserFeedback `protobuf:"varint,3,opt,name=user_feedback,json=userFeedback,proto3,enum=aiserver.v1.LogLinterExplicitUserFeedbackRequest_LinterUserFeedback" json:"user_feedback,omitempty"`
	UserFeedbackDetails string                                                  `protobuf:"bytes,4,opt,name=user_feedback_details,json=userFeedbackDetails,proto3" json:"user_feedback_details,omitempty"`
}

func (x *LogLinterExplicitUserFeedbackRequest) Reset() {
	*x = LogLinterExplicitUserFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLinterExplicitUserFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLinterExplicitUserFeedbackRequest) ProtoMessage() {}

func (x *LogLinterExplicitUserFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLinterExplicitUserFeedbackRequest.ProtoReflect.Descriptor instead.
func (*LogLinterExplicitUserFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{335}
}

func (x *LogLinterExplicitUserFeedbackRequest) GetBug() *AiLintBug {
	if x != nil {
		return x.Bug
	}
	return nil
}

func (x *LogLinterExplicitUserFeedbackRequest) GetUserFeedback() LogLinterExplicitUserFeedbackRequest_LinterUserFeedback {
	if x != nil {
		return x.UserFeedback
	}
	return LogLinterExplicitUserFeedbackRequest_LINTER_USER_FEEDBACK_UNSPECIFIED
}

func (x *LogLinterExplicitUserFeedbackRequest) GetUserFeedbackDetails() string {
	if x != nil {
		return x.UserFeedbackDetails
	}
	return ""
}

type LogLinterExplicitUserFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogLinterExplicitUserFeedbackResponse) Reset() {
	*x = LogLinterExplicitUserFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLinterExplicitUserFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLinterExplicitUserFeedbackResponse) ProtoMessage() {}

func (x *LogLinterExplicitUserFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLinterExplicitUserFeedbackResponse.ProtoReflect.Descriptor instead.
func (*LogLinterExplicitUserFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{336}
}

type FixMarkersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markers         []*FixMarkersRequest_Marker `protobuf:"bytes,1,rep,name=markers,proto3" json:"markers,omitempty"`
	ModelDetails    *ModelDetails               `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	IterationNumber int32                       `protobuf:"varint,3,opt,name=iteration_number,json=iterationNumber,proto3" json:"iteration_number,omitempty"`
	SequenceId      string                      `protobuf:"bytes,4,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	UserInstruction string                      `protobuf:"bytes,5,opt,name=user_instruction,json=userInstruction,proto3" json:"user_instruction,omitempty"`
}

func (x *FixMarkersRequest) Reset() {
	*x = FixMarkersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest) ProtoMessage() {}

func (x *FixMarkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337}
}

func (x *FixMarkersRequest) GetMarkers() []*FixMarkersRequest_Marker {
	if x != nil {
		return x.Markers
	}
	return nil
}

func (x *FixMarkersRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *FixMarkersRequest) GetIterationNumber() int32 {
	if x != nil {
		return x.IterationNumber
	}
	return 0
}

func (x *FixMarkersRequest) GetSequenceId() string {
	if x != nil {
		return x.SequenceId
	}
	return ""
}

func (x *FixMarkersRequest) GetUserInstruction() string {
	if x != nil {
		return x.UserInstruction
	}
	return ""
}

type FixMarkersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                       `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Changes               []*FixMarkersResponse_Change `protobuf:"bytes,2,rep,name=changes,proto3" json:"changes,omitempty"`
	Success               bool                         `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	IterationNumber       int32                        `protobuf:"varint,4,opt,name=iteration_number,json=iterationNumber,proto3" json:"iteration_number,omitempty"`
}

func (x *FixMarkersResponse) Reset() {
	*x = FixMarkersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersResponse) ProtoMessage() {}

func (x *FixMarkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersResponse.ProtoReflect.Descriptor instead.
func (*FixMarkersResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{338}
}

func (x *FixMarkersResponse) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FixMarkersResponse) GetChanges() []*FixMarkersResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *FixMarkersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FixMarkersResponse) GetIterationNumber() int32 {
	if x != nil {
		return x.IterationNumber
	}
	return 0
}

type ReportInlineActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action         string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	GenerationUuid string `protobuf:"bytes,2,opt,name=generation_uuid,json=generationUuid,proto3" json:"generation_uuid,omitempty"`
}

func (x *ReportInlineActionRequest) Reset() {
	*x = ReportInlineActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportInlineActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInlineActionRequest) ProtoMessage() {}

func (x *ReportInlineActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInlineActionRequest.ProtoReflect.Descriptor instead.
func (*ReportInlineActionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{339}
}

func (x *ReportInlineActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ReportInlineActionRequest) GetGenerationUuid() string {
	if x != nil {
		return x.GenerationUuid
	}
	return ""
}

type ReportInlineActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportInlineActionResponse) Reset() {
	*x = ReportInlineActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportInlineActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInlineActionResponse) ProtoMessage() {}

func (x *ReportInlineActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInlineActionResponse.ProtoReflect.Descriptor instead.
func (*ReportInlineActionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{340}
}

type StreamPriomptPromptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PromptProps         string        `protobuf:"bytes,2,opt,name=prompt_props,json=promptProps,proto3" json:"prompt_props,omitempty"`
	PromptPropsTypeName string        `protobuf:"bytes,3,opt,name=prompt_props_type_name,json=promptPropsTypeName,proto3" json:"prompt_props_type_name,omitempty"`
	SkipLoginCheck      bool          `protobuf:"varint,5,opt,name=skip_login_check,json=skipLoginCheck,proto3" json:"skip_login_check,omitempty"`
	ModelDetails        *ModelDetails `protobuf:"bytes,4,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *StreamPriomptPromptRequest) Reset() {
	*x = StreamPriomptPromptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPriomptPromptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPriomptPromptRequest) ProtoMessage() {}

func (x *StreamPriomptPromptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPriomptPromptRequest.ProtoReflect.Descriptor instead.
func (*StreamPriomptPromptRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{341}
}

func (x *StreamPriomptPromptRequest) GetPromptProps() string {
	if x != nil {
		return x.PromptProps
	}
	return ""
}

func (x *StreamPriomptPromptRequest) GetPromptPropsTypeName() string {
	if x != nil {
		return x.PromptPropsTypeName
	}
	return ""
}

func (x *StreamPriomptPromptRequest) GetSkipLoginCheck() bool {
	if x != nil {
		return x.SkipLoginCheck
	}
	return false
}

func (x *StreamPriomptPromptRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type StreamPriomptPromptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamPriomptPromptResponse) Reset() {
	*x = StreamPriomptPromptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPriomptPromptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPriomptPromptResponse) ProtoMessage() {}

func (x *StreamPriomptPromptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPriomptPromptResponse.ProtoReflect.Descriptor instead.
func (*StreamPriomptPromptResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{342}
}

func (x *StreamPriomptPromptResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamLintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile              *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	Conversation             []*ConversationMessage `protobuf:"bytes,2,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Repositories             []*RepositoryInfo      `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	ExplicitContext          *ExplicitContext       `protobuf:"bytes,4,opt,name=explicit_context,json=explicitContext,proto3" json:"explicit_context,omitempty"`
	WorkspaceRootPath        *string                `protobuf:"bytes,5,opt,name=workspace_root_path,json=workspaceRootPath,proto3,oneof" json:"workspace_root_path,omitempty"`
	Query                    string                 `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	CodeBlocks               []*CodeBlock           `protobuf:"bytes,7,rep,name=code_blocks,json=codeBlocks,proto3" json:"code_blocks,omitempty"`
	ModelDetails             *ModelDetails          `protobuf:"bytes,9,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	DocumentationIdentifiers []string               `protobuf:"bytes,10,rep,name=documentation_identifiers,json=documentationIdentifiers,proto3" json:"documentation_identifiers,omitempty"`
	BadNotifications         []string               `protobuf:"bytes,11,rep,name=bad_notifications,json=badNotifications,proto3" json:"bad_notifications,omitempty"`
	LintRules                string                 `protobuf:"bytes,12,opt,name=lint_rules,json=lintRules,proto3" json:"lint_rules,omitempty"`
}

func (x *StreamLintRequest) Reset() {
	*x = StreamLintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLintRequest) ProtoMessage() {}

func (x *StreamLintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLintRequest.ProtoReflect.Descriptor instead.
func (*StreamLintRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{343}
}

func (x *StreamLintRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamLintRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *StreamLintRequest) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *StreamLintRequest) GetExplicitContext() *ExplicitContext {
	if x != nil {
		return x.ExplicitContext
	}
	return nil
}

func (x *StreamLintRequest) GetWorkspaceRootPath() string {
	if x != nil && x.WorkspaceRootPath != nil {
		return *x.WorkspaceRootPath
	}
	return ""
}

func (x *StreamLintRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamLintRequest) GetCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.CodeBlocks
	}
	return nil
}

func (x *StreamLintRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamLintRequest) GetDocumentationIdentifiers() []string {
	if x != nil {
		return x.DocumentationIdentifiers
	}
	return nil
}

func (x *StreamLintRequest) GetBadNotifications() []string {
	if x != nil {
		return x.BadNotifications
	}
	return nil
}

func (x *StreamLintRequest) GetLintRules() string {
	if x != nil {
		return x.LintRules
	}
	return ""
}

type StreamNewRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRules string `protobuf:"bytes,1,opt,name=current_rules,json=currentRules,proto3" json:"current_rules,omitempty"`
	DismissedBug string `protobuf:"bytes,2,opt,name=dismissed_bug,json=dismissedBug,proto3" json:"dismissed_bug,omitempty"`
}

func (x *StreamNewRuleRequest) Reset() {
	*x = StreamNewRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamNewRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamNewRuleRequest) ProtoMessage() {}

func (x *StreamNewRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamNewRuleRequest.ProtoReflect.Descriptor instead.
func (*StreamNewRuleRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{344}
}

func (x *StreamNewRuleRequest) GetCurrentRules() string {
	if x != nil {
		return x.CurrentRules
	}
	return ""
}

func (x *StreamNewRuleRequest) GetDismissedBug() string {
	if x != nil {
		return x.DismissedBug
	}
	return ""
}

type AiProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description  string        `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ModelDetails *ModelDetails `protobuf:"bytes,2,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *AiProjectRequest) Reset() {
	*x = AiProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiProjectRequest) ProtoMessage() {}

func (x *AiProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiProjectRequest.ProtoReflect.Descriptor instead.
func (*AiProjectRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{345}
}

func (x *AiProjectRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AiProjectRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type AiProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *AiProjectResponse) Reset() {
	*x = AiProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiProjectResponse) ProtoMessage() {}

func (x *AiProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiProjectResponse.ProtoReflect.Descriptor instead.
func (*AiProjectResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{346}
}

func (x *AiProjectResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ToCamelCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ToCamelCaseRequest) Reset() {
	*x = ToCamelCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToCamelCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToCamelCaseRequest) ProtoMessage() {}

func (x *ToCamelCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToCamelCaseRequest.ProtoReflect.Descriptor instead.
func (*ToCamelCaseRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{347}
}

func (x *ToCamelCaseRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ToCamelCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ToCamelCaseResponse) Reset() {
	*x = ToCamelCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToCamelCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToCamelCaseResponse) ProtoMessage() {}

func (x *ToCamelCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToCamelCaseResponse.ProtoReflect.Descriptor instead.
func (*ToCamelCaseResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{348}
}

func (x *ToCamelCaseResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ReportGenerationFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeedbackType ReportGenerationFeedbackRequest_FeedbackType `protobuf:"varint,1,opt,name=feedback_type,json=feedbackType,proto3,enum=aiserver.v1.ReportGenerationFeedbackRequest_FeedbackType" json:"feedback_type,omitempty"`
	RequestId    string                                       `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ReportGenerationFeedbackRequest) Reset() {
	*x = ReportGenerationFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportGenerationFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGenerationFeedbackRequest) ProtoMessage() {}

func (x *ReportGenerationFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGenerationFeedbackRequest.ProtoReflect.Descriptor instead.
func (*ReportGenerationFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{349}
}

func (x *ReportGenerationFeedbackRequest) GetFeedbackType() ReportGenerationFeedbackRequest_FeedbackType {
	if x != nil {
		return x.FeedbackType
	}
	return ReportGenerationFeedbackRequest_FEEDBACK_TYPE_UNSPECIFIED
}

func (x *ReportGenerationFeedbackRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ReportGenerationFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportGenerationFeedbackResponse) Reset() {
	*x = ReportGenerationFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportGenerationFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGenerationFeedbackResponse) ProtoMessage() {}

func (x *ReportGenerationFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGenerationFeedbackResponse.ProtoReflect.Descriptor instead.
func (*ReportGenerationFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{350}
}

type GetThoughtAnnotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetThoughtAnnotationRequest) Reset() {
	*x = GetThoughtAnnotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThoughtAnnotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThoughtAnnotationRequest) ProtoMessage() {}

func (x *GetThoughtAnnotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThoughtAnnotationRequest.ProtoReflect.Descriptor instead.
func (*GetThoughtAnnotationRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{351}
}

func (x *GetThoughtAnnotationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type GetThoughtAnnotationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThoughtAnnotation *AiThoughtAnnotation `protobuf:"bytes,1,opt,name=thought_annotation,json=thoughtAnnotation,proto3" json:"thought_annotation,omitempty"`
}

func (x *GetThoughtAnnotationResponse) Reset() {
	*x = GetThoughtAnnotationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThoughtAnnotationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThoughtAnnotationResponse) ProtoMessage() {}

func (x *GetThoughtAnnotationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThoughtAnnotationResponse.ProtoReflect.Descriptor instead.
func (*GetThoughtAnnotationResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{352}
}

func (x *GetThoughtAnnotationResponse) GetThoughtAnnotation() *AiThoughtAnnotation {
	if x != nil {
		return x.ThoughtAnnotation
	}
	return nil
}

type AiThoughtAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string         `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AuthId    string         `protobuf:"bytes,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	DebugInfo *CmdKDebugInfo `protobuf:"bytes,3,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	Thought   string         `protobuf:"bytes,4,opt,name=thought,proto3" json:"thought,omitempty"`
}

func (x *AiThoughtAnnotation) Reset() {
	*x = AiThoughtAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiThoughtAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiThoughtAnnotation) ProtoMessage() {}

func (x *AiThoughtAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiThoughtAnnotation.ProtoReflect.Descriptor instead.
func (*AiThoughtAnnotation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{353}
}

func (x *AiThoughtAnnotation) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *AiThoughtAnnotation) GetAuthId() string {
	if x != nil {
		return x.AuthId
	}
	return ""
}

func (x *AiThoughtAnnotation) GetDebugInfo() *CmdKDebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *AiThoughtAnnotation) GetThought() string {
	if x != nil {
		return x.Thought
	}
	return ""
}

type StreamWebCmdKV1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string        `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	FileContents          string        `protobuf:"bytes,2,opt,name=file_contents,json=fileContents,proto3" json:"file_contents,omitempty"`
	Prompt                string        `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
	SelectionRange        *LineRange    `protobuf:"bytes,4,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	ModelDetails          *ModelDetails `protobuf:"bytes,5,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	Images                []*ImageProto `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *StreamWebCmdKV1Request) Reset() {
	*x = StreamWebCmdKV1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWebCmdKV1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWebCmdKV1Request) ProtoMessage() {}

func (x *StreamWebCmdKV1Request) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWebCmdKV1Request.ProtoReflect.Descriptor instead.
func (*StreamWebCmdKV1Request) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{354}
}

func (x *StreamWebCmdKV1Request) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamWebCmdKV1Request) GetFileContents() string {
	if x != nil {
		return x.FileContents
	}
	return ""
}

func (x *StreamWebCmdKV1Request) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *StreamWebCmdKV1Request) GetSelectionRange() *LineRange {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *StreamWebCmdKV1Request) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *StreamWebCmdKV1Request) GetImages() []*ImageProto {
	if x != nil {
		return x.Images
	}
	return nil
}

type StreamWebCmdKV1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CmdKResponse *StreamCmdKResponse `protobuf:"bytes,1,opt,name=cmd_k_response,json=cmdKResponse,proto3" json:"cmd_k_response,omitempty"`
}

func (x *StreamWebCmdKV1Response) Reset() {
	*x = StreamWebCmdKV1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamWebCmdKV1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWebCmdKV1Response) ProtoMessage() {}

func (x *StreamWebCmdKV1Response) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWebCmdKV1Response.ProtoReflect.Descriptor instead.
func (*StreamWebCmdKV1Response) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{355}
}

func (x *StreamWebCmdKV1Response) GetCmdKResponse() *StreamCmdKResponse {
	if x != nil {
		return x.CmdKResponse
	}
	return nil
}

type StreamNextCursorPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFile         *CurrentFileInfo          `protobuf:"bytes,1,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	DiffHistory         []string                  `protobuf:"bytes,2,rep,name=diff_history,json=diffHistory,proto3" json:"diff_history,omitempty"`
	ModelName           *string                   `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	LinterErrors        *LinterErrors             `protobuf:"bytes,4,opt,name=linter_errors,json=linterErrors,proto3,oneof" json:"linter_errors,omitempty"`
	ContextItems        []*CppContextItem         `protobuf:"bytes,13,rep,name=context_items,json=contextItems,proto3" json:"context_items,omitempty"`
	DiffHistoryKeys     []string                  `protobuf:"bytes,5,rep,name=diff_history_keys,json=diffHistoryKeys,proto3" json:"diff_history_keys,omitempty"`
	GiveDebugOutput     *bool                     `protobuf:"varint,6,opt,name=give_debug_output,json=giveDebugOutput,proto3,oneof" json:"give_debug_output,omitempty"`
	FileDiffHistories   []*CppFileDiffHistory     `protobuf:"bytes,7,rep,name=file_diff_histories,json=fileDiffHistories,proto3" json:"file_diff_histories,omitempty"`
	MergedDiffHistories []*CppFileDiffHistory     `protobuf:"bytes,8,rep,name=merged_diff_histories,json=mergedDiffHistories,proto3" json:"merged_diff_histories,omitempty"`
	BlockDiffPatches    []*BlockDiffPatch         `protobuf:"bytes,9,rep,name=block_diff_patches,json=blockDiffPatches,proto3" json:"block_diff_patches,omitempty"`
	IsNightly           *bool                     `protobuf:"varint,10,opt,name=is_nightly,json=isNightly,proto3,oneof" json:"is_nightly,omitempty"`
	IsDebug             *bool                     `protobuf:"varint,11,opt,name=is_debug,json=isDebug,proto3,oneof" json:"is_debug,omitempty"`
	ImmediatelyAck      *bool                     `protobuf:"varint,12,opt,name=immediately_ack,json=immediatelyAck,proto3,oneof" json:"immediately_ack,omitempty"`
	EnableMoreContext   *bool                     `protobuf:"varint,17,opt,name=enable_more_context,json=enableMoreContext,proto3,oneof" json:"enable_more_context,omitempty"`
	ParameterHints      []*CppParameterHint       `protobuf:"bytes,14,rep,name=parameter_hints,json=parameterHints,proto3" json:"parameter_hints,omitempty"`
	LspContexts         []*LspSubgraphFullContext `protobuf:"bytes,15,rep,name=lsp_contexts,json=lspContexts,proto3" json:"lsp_contexts,omitempty"`
	CppIntentInfo       *CppIntentInfo            `protobuf:"bytes,16,opt,name=cpp_intent_info,json=cppIntentInfo,proto3,oneof" json:"cpp_intent_info,omitempty"`
	WorkspaceId         *string                   `protobuf:"bytes,18,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
}

func (x *StreamNextCursorPredictionRequest) Reset() {
	*x = StreamNextCursorPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamNextCursorPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamNextCursorPredictionRequest) ProtoMessage() {}

func (x *StreamNextCursorPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamNextCursorPredictionRequest.ProtoReflect.Descriptor instead.
func (*StreamNextCursorPredictionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{356}
}

func (x *StreamNextCursorPredictionRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetDiffHistory() []string {
	if x != nil {
		return x.DiffHistory
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *StreamNextCursorPredictionRequest) GetLinterErrors() *LinterErrors {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetContextItems() []*CppContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetDiffHistoryKeys() []string {
	if x != nil {
		return x.DiffHistoryKeys
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetGiveDebugOutput() bool {
	if x != nil && x.GiveDebugOutput != nil {
		return *x.GiveDebugOutput
	}
	return false
}

func (x *StreamNextCursorPredictionRequest) GetFileDiffHistories() []*CppFileDiffHistory {
	if x != nil {
		return x.FileDiffHistories
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetMergedDiffHistories() []*CppFileDiffHistory {
	if x != nil {
		return x.MergedDiffHistories
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetBlockDiffPatches() []*BlockDiffPatch {
	if x != nil {
		return x.BlockDiffPatches
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetIsNightly() bool {
	if x != nil && x.IsNightly != nil {
		return *x.IsNightly
	}
	return false
}

func (x *StreamNextCursorPredictionRequest) GetIsDebug() bool {
	if x != nil && x.IsDebug != nil {
		return *x.IsDebug
	}
	return false
}

func (x *StreamNextCursorPredictionRequest) GetImmediatelyAck() bool {
	if x != nil && x.ImmediatelyAck != nil {
		return *x.ImmediatelyAck
	}
	return false
}

func (x *StreamNextCursorPredictionRequest) GetEnableMoreContext() bool {
	if x != nil && x.EnableMoreContext != nil {
		return *x.EnableMoreContext
	}
	return false
}

func (x *StreamNextCursorPredictionRequest) GetParameterHints() []*CppParameterHint {
	if x != nil {
		return x.ParameterHints
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetLspContexts() []*LspSubgraphFullContext {
	if x != nil {
		return x.LspContexts
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetCppIntentInfo() *CppIntentInfo {
	if x != nil {
		return x.CppIntentInfo
	}
	return nil
}

func (x *StreamNextCursorPredictionRequest) GetWorkspaceId() string {
	if x != nil && x.WorkspaceId != nil {
		return *x.WorkspaceId
	}
	return ""
}

type StreamNextCursorPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	LineNumber   int32  `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	IsNotInRange bool   `protobuf:"varint,3,opt,name=is_not_in_range,json=isNotInRange,proto3" json:"is_not_in_range,omitempty"`
}

func (x *StreamNextCursorPredictionResponse) Reset() {
	*x = StreamNextCursorPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamNextCursorPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamNextCursorPredictionResponse) ProtoMessage() {}

func (x *StreamNextCursorPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamNextCursorPredictionResponse.ProtoReflect.Descriptor instead.
func (*StreamNextCursorPredictionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{357}
}

func (x *StreamNextCursorPredictionResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamNextCursorPredictionResponse) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *StreamNextCursorPredictionResponse) GetIsNotInRange() bool {
	if x != nil {
		return x.IsNotInRange
	}
	return false
}

type IsCursorPredictionEnabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsCursorPredictionEnabledRequest) Reset() {
	*x = IsCursorPredictionEnabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCursorPredictionEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCursorPredictionEnabledRequest) ProtoMessage() {}

func (x *IsCursorPredictionEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCursorPredictionEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsCursorPredictionEnabledRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{358}
}

type IsCursorPredictionEnabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *IsCursorPredictionEnabledResponse) Reset() {
	*x = IsCursorPredictionEnabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCursorPredictionEnabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCursorPredictionEnabledResponse) ProtoMessage() {}

func (x *IsCursorPredictionEnabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCursorPredictionEnabledResponse.ProtoReflect.Descriptor instead.
func (*IsCursorPredictionEnabledResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{359}
}

func (x *IsCursorPredictionEnabledResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type GetCppEditClassificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppRequest     *StreamCppRequest `protobuf:"bytes,1,opt,name=cpp_request,json=cppRequest,proto3" json:"cpp_request,omitempty"`
	SuggestedEdits []*SuggestedEdit  `protobuf:"bytes,25,rep,name=suggested_edits,json=suggestedEdits,proto3" json:"suggested_edits,omitempty"`
}

func (x *GetCppEditClassificationRequest) Reset() {
	*x = GetCppEditClassificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCppEditClassificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCppEditClassificationRequest) ProtoMessage() {}

func (x *GetCppEditClassificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCppEditClassificationRequest.ProtoReflect.Descriptor instead.
func (*GetCppEditClassificationRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{360}
}

func (x *GetCppEditClassificationRequest) GetCppRequest() *StreamCppRequest {
	if x != nil {
		return x.CppRequest
	}
	return nil
}

func (x *GetCppEditClassificationRequest) GetSuggestedEdits() []*SuggestedEdit {
	if x != nil {
		return x.SuggestedEdits
	}
	return nil
}

type SuggestedEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditRange *SimpleRange `protobuf:"bytes,1,opt,name=edit_range,json=editRange,proto3" json:"edit_range,omitempty"`
	Text      string       `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SuggestedEdit) Reset() {
	*x = SuggestedEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestedEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestedEdit) ProtoMessage() {}

func (x *SuggestedEdit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestedEdit.ProtoReflect.Descriptor instead.
func (*SuggestedEdit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{361}
}

func (x *SuggestedEdit) GetEditRange() *SimpleRange {
	if x != nil {
		return x.EditRange
	}
	return nil
}

func (x *SuggestedEdit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetCppEditClassificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScoredEdits []*GetCppEditClassificationResponse_ScoredEdit `protobuf:"bytes,1,rep,name=scored_edits,json=scoredEdits,proto3" json:"scored_edits,omitempty"`
	NoopEdit    *GetCppEditClassificationResponse_ScoredEdit   `protobuf:"bytes,2,opt,name=noop_edit,json=noopEdit,proto3" json:"noop_edit,omitempty"`
	ShouldNoop  *bool                                          `protobuf:"varint,3,opt,name=should_noop,json=shouldNoop,proto3,oneof" json:"should_noop,omitempty"`
}

func (x *GetCppEditClassificationResponse) Reset() {
	*x = GetCppEditClassificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCppEditClassificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCppEditClassificationResponse) ProtoMessage() {}

func (x *GetCppEditClassificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCppEditClassificationResponse.ProtoReflect.Descriptor instead.
func (*GetCppEditClassificationResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{362}
}

func (x *GetCppEditClassificationResponse) GetScoredEdits() []*GetCppEditClassificationResponse_ScoredEdit {
	if x != nil {
		return x.ScoredEdits
	}
	return nil
}

func (x *GetCppEditClassificationResponse) GetNoopEdit() *GetCppEditClassificationResponse_ScoredEdit {
	if x != nil {
		return x.NoopEdit
	}
	return nil
}

func (x *GetCppEditClassificationResponse) GetShouldNoop() bool {
	if x != nil && x.ShouldNoop != nil {
		return *x.ShouldNoop
	}
	return false
}

type GetTerminalCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentCommand         string                       `protobuf:"bytes,1,opt,name=current_command,json=currentCommand,proto3" json:"current_command,omitempty"`
	CommandHistory         []string                     `protobuf:"bytes,2,rep,name=command_history,json=commandHistory,proto3" json:"command_history,omitempty"`
	ModelName              *string                      `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3,oneof" json:"model_name,omitempty"`
	FileDiffHistories      []*CppFileDiffHistory        `protobuf:"bytes,4,rep,name=file_diff_histories,json=fileDiffHistories,proto3" json:"file_diff_histories,omitempty"`
	GitDiff                *string                      `protobuf:"bytes,5,opt,name=git_diff,json=gitDiff,proto3,oneof" json:"git_diff,omitempty"`
	CommitHistory          []string                     `protobuf:"bytes,6,rep,name=commit_history,json=commitHistory,proto3" json:"commit_history,omitempty"`
	PastResults            []string                     `protobuf:"bytes,7,rep,name=past_results,json=pastResults,proto3" json:"past_results,omitempty"`
	ModelDetails           *ModelDetails                `protobuf:"bytes,8,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	UserPlatform           string                       `protobuf:"bytes,9,opt,name=user_platform,json=userPlatform,proto3" json:"user_platform,omitempty"`
	CurrentFolder          string                       `protobuf:"bytes,10,opt,name=current_folder,json=currentFolder,proto3" json:"current_folder,omitempty"`
	CurrentFolderStructure []*CurrentFolderFileOrFolder `protobuf:"bytes,11,rep,name=current_folder_structure,json=currentFolderStructure,proto3" json:"current_folder_structure,omitempty"`
	RelevantFiles          []*File                      `protobuf:"bytes,12,rep,name=relevant_files,json=relevantFiles,proto3" json:"relevant_files,omitempty"`
}

func (x *GetTerminalCompletionRequest) Reset() {
	*x = GetTerminalCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerminalCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerminalCompletionRequest) ProtoMessage() {}

func (x *GetTerminalCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerminalCompletionRequest.ProtoReflect.Descriptor instead.
func (*GetTerminalCompletionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{363}
}

func (x *GetTerminalCompletionRequest) GetCurrentCommand() string {
	if x != nil {
		return x.CurrentCommand
	}
	return ""
}

func (x *GetTerminalCompletionRequest) GetCommandHistory() []string {
	if x != nil {
		return x.CommandHistory
	}
	return nil
}

func (x *GetTerminalCompletionRequest) GetModelName() string {
	if x != nil && x.ModelName != nil {
		return *x.ModelName
	}
	return ""
}

func (x *GetTerminalCompletionRequest) GetFileDiffHistories() []*CppFileDiffHistory {
	if x != nil {
		return x.FileDiffHistories
	}
	return nil
}

func (x *GetTerminalCompletionRequest) GetGitDiff() string {
	if x != nil && x.GitDiff != nil {
		return *x.GitDiff
	}
	return ""
}

func (x *GetTerminalCompletionRequest) GetCommitHistory() []string {
	if x != nil {
		return x.CommitHistory
	}
	return nil
}

func (x *GetTerminalCompletionRequest) GetPastResults() []string {
	if x != nil {
		return x.PastResults
	}
	return nil
}

func (x *GetTerminalCompletionRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *GetTerminalCompletionRequest) GetUserPlatform() string {
	if x != nil {
		return x.UserPlatform
	}
	return ""
}

func (x *GetTerminalCompletionRequest) GetCurrentFolder() string {
	if x != nil {
		return x.CurrentFolder
	}
	return ""
}

func (x *GetTerminalCompletionRequest) GetCurrentFolderStructure() []*CurrentFolderFileOrFolder {
	if x != nil {
		return x.CurrentFolderStructure
	}
	return nil
}

func (x *GetTerminalCompletionRequest) GetRelevantFiles() []*File {
	if x != nil {
		return x.RelevantFiles
	}
	return nil
}

type CurrentFolderFileOrFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsFolder bool   `protobuf:"varint,2,opt,name=is_folder,json=isFolder,proto3" json:"is_folder,omitempty"`
}

func (x *CurrentFolderFileOrFolder) Reset() {
	*x = CurrentFolderFileOrFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentFolderFileOrFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentFolderFileOrFolder) ProtoMessage() {}

func (x *CurrentFolderFileOrFolder) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentFolderFileOrFolder.ProtoReflect.Descriptor instead.
func (*CurrentFolderFileOrFolder) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{364}
}

func (x *CurrentFolderFileOrFolder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CurrentFolderFileOrFolder) GetIsFolder() bool {
	if x != nil {
		return x.IsFolder
	}
	return false
}

type GetTerminalCompletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *GetTerminalCompletionResponse) Reset() {
	*x = GetTerminalCompletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTerminalCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTerminalCompletionResponse) ProtoMessage() {}

func (x *GetTerminalCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTerminalCompletionResponse.ProtoReflect.Descriptor instead.
func (*GetTerminalCompletionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{365}
}

func (x *GetTerminalCompletionResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type TakeNotesOnCommitDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diff       *CommitDiffString `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
	CommitHash string            `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
}

func (x *TakeNotesOnCommitDiffRequest) Reset() {
	*x = TakeNotesOnCommitDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeNotesOnCommitDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeNotesOnCommitDiffRequest) ProtoMessage() {}

func (x *TakeNotesOnCommitDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeNotesOnCommitDiffRequest.ProtoReflect.Descriptor instead.
func (*TakeNotesOnCommitDiffRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{366}
}

func (x *TakeNotesOnCommitDiffRequest) GetDiff() *CommitDiffString {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *TakeNotesOnCommitDiffRequest) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

type CommitDiffString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diff string `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *CommitDiffString) Reset() {
	*x = CommitDiffString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitDiffString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitDiffString) ProtoMessage() {}

func (x *CommitDiffString) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitDiffString.ProtoReflect.Descriptor instead.
func (*CommitDiffString) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{367}
}

func (x *CommitDiffString) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type TakeNotesOnCommitDiffResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notes []*CommitNoteWithEmbeddings `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
}

func (x *TakeNotesOnCommitDiffResponse) Reset() {
	*x = TakeNotesOnCommitDiffResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeNotesOnCommitDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeNotesOnCommitDiffResponse) ProtoMessage() {}

func (x *TakeNotesOnCommitDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeNotesOnCommitDiffResponse.ProtoReflect.Descriptor instead.
func (*TakeNotesOnCommitDiffResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{368}
}

func (x *TakeNotesOnCommitDiffResponse) GetNotes() []*CommitNoteWithEmbeddings {
	if x != nil {
		return x.Notes
	}
	return nil
}

type CommitNoteWithEmbeddings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note       string    `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	CommitHash string    `protobuf:"bytes,2,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	Embeddings []float64 `protobuf:"fixed64,3,rep,packed,name=embeddings,proto3" json:"embeddings,omitempty"`
}

func (x *CommitNoteWithEmbeddings) Reset() {
	*x = CommitNoteWithEmbeddings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitNoteWithEmbeddings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitNoteWithEmbeddings) ProtoMessage() {}

func (x *CommitNoteWithEmbeddings) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitNoteWithEmbeddings.ProtoReflect.Descriptor instead.
func (*CommitNoteWithEmbeddings) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{369}
}

func (x *CommitNoteWithEmbeddings) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *CommitNoteWithEmbeddings) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *CommitNoteWithEmbeddings) GetEmbeddings() []float64 {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

type BulkEmbedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Texts []string `protobuf:"bytes,1,rep,name=texts,proto3" json:"texts,omitempty"`
}

func (x *BulkEmbedRequest) Reset() {
	*x = BulkEmbedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkEmbedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkEmbedRequest) ProtoMessage() {}

func (x *BulkEmbedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkEmbedRequest.ProtoReflect.Descriptor instead.
func (*BulkEmbedRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{370}
}

func (x *BulkEmbedRequest) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

type BulkEmbedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embeddings []*EmbeddingResponse `protobuf:"bytes,1,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
}

func (x *BulkEmbedResponse) Reset() {
	*x = BulkEmbedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkEmbedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkEmbedResponse) ProtoMessage() {}

func (x *BulkEmbedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkEmbedResponse.ProtoReflect.Descriptor instead.
func (*BulkEmbedResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{371}
}

func (x *BulkEmbedResponse) GetEmbeddings() []*EmbeddingResponse {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

type EmbeddingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedding []float64 `protobuf:"fixed64,1,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
}

func (x *EmbeddingResponse) Reset() {
	*x = EmbeddingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingResponse) ProtoMessage() {}

func (x *EmbeddingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingResponse.ProtoReflect.Descriptor instead.
func (*EmbeddingResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{372}
}

func (x *EmbeddingResponse) GetEmbedding() []float64 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

type ContinueChatRequestWithCommitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string                  `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Commits   []*SimpleCommitWithDiff `protobuf:"bytes,2,rep,name=commits,proto3" json:"commits,omitempty"`
	RequestId string                  `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ContinueChatRequestWithCommitsRequest) Reset() {
	*x = ContinueChatRequestWithCommitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueChatRequestWithCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueChatRequestWithCommitsRequest) ProtoMessage() {}

func (x *ContinueChatRequestWithCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueChatRequestWithCommitsRequest.ProtoReflect.Descriptor instead.
func (*ContinueChatRequestWithCommitsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{373}
}

func (x *ContinueChatRequestWithCommitsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ContinueChatRequestWithCommitsRequest) GetCommits() []*SimpleCommitWithDiff {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *ContinueChatRequestWithCommitsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type SimpleCommitWithDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitHash string `protobuf:"bytes,1,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	Diff       string `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *SimpleCommitWithDiff) Reset() {
	*x = SimpleCommitWithDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCommitWithDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCommitWithDiff) ProtoMessage() {}

func (x *SimpleCommitWithDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCommitWithDiff.ProtoReflect.Descriptor instead.
func (*SimpleCommitWithDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{374}
}

func (x *SimpleCommitWithDiff) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *SimpleCommitWithDiff) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{375}
}

type BackgroundCmdKEvalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruction           string                                      `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	CurrentFile           *CurrentFileInfo                            `protobuf:"bytes,2,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	SelectionRange        *SimpleRange                                `protobuf:"bytes,3,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	GroundTruth           string                                      `protobuf:"bytes,4,opt,name=ground_truth,json=groundTruth,proto3" json:"ground_truth,omitempty"`
	Experiment            BackgroundCmdKEvalRequest_Experiment        `protobuf:"varint,5,opt,name=experiment,proto3,enum=aiserver.v1.BackgroundCmdKEvalRequest_Experiment" json:"experiment,omitempty"`
	RunAutomatedEval      bool                                        `protobuf:"varint,6,opt,name=run_automated_eval,json=runAutomatedEval,proto3" json:"run_automated_eval,omitempty"`
	ProposedChangeHistory []*BackgroundCmdKEvalRequest_ProposedChange `protobuf:"bytes,7,rep,name=proposed_change_history,json=proposedChangeHistory,proto3" json:"proposed_change_history,omitempty"`
	CommitNotes           []*CommitNote                               `protobuf:"bytes,8,rep,name=commit_notes,json=commitNotes,proto3" json:"commit_notes,omitempty"`
	RelatedCodeBlocks     []*CodeBlock                                `protobuf:"bytes,9,rep,name=related_code_blocks,json=relatedCodeBlocks,proto3" json:"related_code_blocks,omitempty"`
}

func (x *BackgroundCmdKEvalRequest) Reset() {
	*x = BackgroundCmdKEvalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKEvalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKEvalRequest) ProtoMessage() {}

func (x *BackgroundCmdKEvalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKEvalRequest.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKEvalRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{376}
}

func (x *BackgroundCmdKEvalRequest) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *BackgroundCmdKEvalRequest) GetSelectionRange() *SimpleRange {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *BackgroundCmdKEvalRequest) GetGroundTruth() string {
	if x != nil {
		return x.GroundTruth
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest) GetExperiment() BackgroundCmdKEvalRequest_Experiment {
	if x != nil {
		return x.Experiment
	}
	return BackgroundCmdKEvalRequest_EXPERIMENT_UNSPECIFIED
}

func (x *BackgroundCmdKEvalRequest) GetRunAutomatedEval() bool {
	if x != nil {
		return x.RunAutomatedEval
	}
	return false
}

func (x *BackgroundCmdKEvalRequest) GetProposedChangeHistory() []*BackgroundCmdKEvalRequest_ProposedChange {
	if x != nil {
		return x.ProposedChangeHistory
	}
	return nil
}

func (x *BackgroundCmdKEvalRequest) GetCommitNotes() []*CommitNote {
	if x != nil {
		return x.CommitNotes
	}
	return nil
}

func (x *BackgroundCmdKEvalRequest) GetRelatedCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.RelatedCodeBlocks
	}
	return nil
}

type BackgroundCmdKEvalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposedChange string `protobuf:"bytes,1,opt,name=proposed_change,json=proposedChange,proto3" json:"proposed_change,omitempty"`
}

func (x *BackgroundCmdKEvalResponse) Reset() {
	*x = BackgroundCmdKEvalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKEvalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKEvalResponse) ProtoMessage() {}

func (x *BackgroundCmdKEvalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKEvalResponse.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKEvalResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{377}
}

func (x *BackgroundCmdKEvalResponse) GetProposedChange() string {
	if x != nil {
		return x.ProposedChange
	}
	return ""
}

type BackgroundCmdKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruction           string                                      `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	CurrentFile           *CurrentFileInfo                            `protobuf:"bytes,2,opt,name=current_file,json=currentFile,proto3" json:"current_file,omitempty"`
	SelectionRange        *SimpleRange                                `protobuf:"bytes,3,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	Type                  BackgroundCmdKRequest_Type                  `protobuf:"varint,4,opt,name=type,proto3,enum=aiserver.v1.BackgroundCmdKRequest_Type" json:"type,omitempty"`
	ProposedChangeHistory []*BackgroundCmdKRequest_ProposedChange     `protobuf:"bytes,5,rep,name=proposed_change_history,json=proposedChangeHistory,proto3" json:"proposed_change_history,omitempty"`
	RelatedCodeBlocks     []*CodeBlock                                `protobuf:"bytes,6,rep,name=related_code_blocks,json=relatedCodeBlocks,proto3" json:"related_code_blocks,omitempty"`
	DiffHistory           []*CppFileDiffHistory                       `protobuf:"bytes,7,rep,name=diff_history,json=diffHistory,proto3" json:"diff_history,omitempty"`
	LinterErrors          []*BackgroundCmdKRequest_Lint               `protobuf:"bytes,8,rep,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
	UsefulTypes           []*BackgroundCmdKRequest_UsefulType         `protobuf:"bytes,9,rep,name=useful_types,json=usefulTypes,proto3" json:"useful_types,omitempty"`
	RecentlyViewedFiles   []*BackgroundCmdKRequest_RecentlyViewedFile `protobuf:"bytes,10,rep,name=recently_viewed_files,json=recentlyViewedFiles,proto3" json:"recently_viewed_files,omitempty"`
	RecentDiffs           []*BackgroundCmdKRequest_Diff               `protobuf:"bytes,11,rep,name=recent_diffs,json=recentDiffs,proto3" json:"recent_diffs,omitempty"`
	MultipleCompletions   *bool                                       `protobuf:"varint,12,opt,name=multiple_completions,json=multipleCompletions,proto3,oneof" json:"multiple_completions,omitempty"`
}

func (x *BackgroundCmdKRequest) Reset() {
	*x = BackgroundCmdKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest) ProtoMessage() {}

func (x *BackgroundCmdKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378}
}

func (x *BackgroundCmdKRequest) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *BackgroundCmdKRequest) GetCurrentFile() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFile
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetSelectionRange() *SimpleRange {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetType() BackgroundCmdKRequest_Type {
	if x != nil {
		return x.Type
	}
	return BackgroundCmdKRequest_TYPE_UNSPECIFIED
}

func (x *BackgroundCmdKRequest) GetProposedChangeHistory() []*BackgroundCmdKRequest_ProposedChange {
	if x != nil {
		return x.ProposedChangeHistory
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetRelatedCodeBlocks() []*CodeBlock {
	if x != nil {
		return x.RelatedCodeBlocks
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetDiffHistory() []*CppFileDiffHistory {
	if x != nil {
		return x.DiffHistory
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetLinterErrors() []*BackgroundCmdKRequest_Lint {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetUsefulTypes() []*BackgroundCmdKRequest_UsefulType {
	if x != nil {
		return x.UsefulTypes
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetRecentlyViewedFiles() []*BackgroundCmdKRequest_RecentlyViewedFile {
	if x != nil {
		return x.RecentlyViewedFiles
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetRecentDiffs() []*BackgroundCmdKRequest_Diff {
	if x != nil {
		return x.RecentDiffs
	}
	return nil
}

func (x *BackgroundCmdKRequest) GetMultipleCompletions() bool {
	if x != nil && x.MultipleCompletions != nil {
		return *x.MultipleCompletions
	}
	return false
}

type BackgroundCmdKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposedChange string `protobuf:"bytes,1,opt,name=proposed_change,json=proposedChange,proto3" json:"proposed_change,omitempty"`
}

func (x *BackgroundCmdKResponse) Reset() {
	*x = BackgroundCmdKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKResponse) ProtoMessage() {}

func (x *BackgroundCmdKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKResponse.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{379}
}

func (x *BackgroundCmdKResponse) GetProposedChange() string {
	if x != nil {
		return x.ProposedChange
	}
	return ""
}

type StreamCursorMotionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFileInfo *CurrentFileInfo `protobuf:"bytes,1,opt,name=current_file_info,json=currentFileInfo,proto3" json:"current_file_info,omitempty"`
	SelectionRange  *SimpleRange     `protobuf:"bytes,2,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	Instruction     string           `protobuf:"bytes,3,opt,name=instruction,proto3" json:"instruction,omitempty"`
	ModelDetails    *ModelDetails    `protobuf:"bytes,4,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *StreamCursorMotionRequest) Reset() {
	*x = StreamCursorMotionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCursorMotionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCursorMotionRequest) ProtoMessage() {}

func (x *StreamCursorMotionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCursorMotionRequest.ProtoReflect.Descriptor instead.
func (*StreamCursorMotionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{380}
}

func (x *StreamCursorMotionRequest) GetCurrentFileInfo() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFileInfo
	}
	return nil
}

func (x *StreamCursorMotionRequest) GetSelectionRange() *SimpleRange {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *StreamCursorMotionRequest) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *StreamCursorMotionRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type StreamCursorMotionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamCursorMotionResponse) Reset() {
	*x = StreamCursorMotionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCursorMotionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCursorMotionResponse) ProtoMessage() {}

func (x *StreamCursorMotionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCursorMotionResponse.ProtoReflect.Descriptor instead.
func (*StreamCursorMotionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{381}
}

func (x *StreamCursorMotionResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CalculateAutoSelectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFileInfo      *CurrentFileInfo       `protobuf:"bytes,1,opt,name=current_file_info,json=currentFileInfo,proto3" json:"current_file_info,omitempty"`
	CursorPosition       *CursorPosition        `protobuf:"bytes,2,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
	SelectionRange       *SimpleRange           `protobuf:"bytes,3,opt,name=selection_range,json=selectionRange,proto3" json:"selection_range,omitempty"`
	ModelDetails         *ModelDetails          `protobuf:"bytes,4,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	HeuristicsSelections []*HeuristicsSelection `protobuf:"bytes,5,rep,name=heuristics_selections,json=heuristicsSelections,proto3" json:"heuristics_selections,omitempty"`
}

func (x *CalculateAutoSelectionRequest) Reset() {
	*x = CalculateAutoSelectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateAutoSelectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateAutoSelectionRequest) ProtoMessage() {}

func (x *CalculateAutoSelectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateAutoSelectionRequest.ProtoReflect.Descriptor instead.
func (*CalculateAutoSelectionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{382}
}

func (x *CalculateAutoSelectionRequest) GetCurrentFileInfo() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFileInfo
	}
	return nil
}

func (x *CalculateAutoSelectionRequest) GetCursorPosition() *CursorPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

func (x *CalculateAutoSelectionRequest) GetSelectionRange() *SimpleRange {
	if x != nil {
		return x.SelectionRange
	}
	return nil
}

func (x *CalculateAutoSelectionRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *CalculateAutoSelectionRequest) GetHeuristicsSelections() []*HeuristicsSelection {
	if x != nil {
		return x.HeuristicsSelections
	}
	return nil
}

type HeuristicsSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      HeuristicsSelection_HeuristicsSelectionType `protobuf:"varint,1,opt,name=type,proto3,enum=aiserver.v1.HeuristicsSelection_HeuristicsSelectionType" json:"type,omitempty"`
	StartLine int32                                       `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32                                       `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
}

func (x *HeuristicsSelection) Reset() {
	*x = HeuristicsSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeuristicsSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeuristicsSelection) ProtoMessage() {}

func (x *HeuristicsSelection) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeuristicsSelection.ProtoReflect.Descriptor instead.
func (*HeuristicsSelection) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{383}
}

func (x *HeuristicsSelection) GetType() HeuristicsSelection_HeuristicsSelectionType {
	if x != nil {
		return x.Type
	}
	return HeuristicsSelection_HEURISTICS_SELECTION_TYPE_UNSPECIFIED
}

func (x *HeuristicsSelection) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *HeuristicsSelection) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

type CalculateAutoSelectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AutoSelectionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CalculateAutoSelectionResponse) Reset() {
	*x = CalculateAutoSelectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateAutoSelectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateAutoSelectionResponse) ProtoMessage() {}

func (x *CalculateAutoSelectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateAutoSelectionResponse.ProtoReflect.Descriptor instead.
func (*CalculateAutoSelectionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{384}
}

func (x *CalculateAutoSelectionResponse) GetResults() []*AutoSelectionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AutoSelectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine    int32                        `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine      int32                        `protobuf:"varint,2,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	Instructions []*AutoSelectionInstructions `protobuf:"bytes,3,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *AutoSelectionResult) Reset() {
	*x = AutoSelectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSelectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSelectionResult) ProtoMessage() {}

func (x *AutoSelectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSelectionResult.ProtoReflect.Descriptor instead.
func (*AutoSelectionResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{385}
}

func (x *AutoSelectionResult) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *AutoSelectionResult) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *AutoSelectionResult) GetInstructions() []*AutoSelectionInstructions {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type AutoSelectionInstructions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	StartLine int32  `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32  `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
}

func (x *AutoSelectionInstructions) Reset() {
	*x = AutoSelectionInstructions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSelectionInstructions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSelectionInstructions) ProtoMessage() {}

func (x *AutoSelectionInstructions) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSelectionInstructions.ProtoReflect.Descriptor instead.
func (*AutoSelectionInstructions) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{386}
}

func (x *AutoSelectionInstructions) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AutoSelectionInstructions) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *AutoSelectionInstructions) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

type GetAtSymbolSuggestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentFileInfo      *CurrentFileInfo                 `protobuf:"bytes,1,opt,name=current_file_info,json=currentFileInfo,proto3" json:"current_file_info,omitempty"`
	AtSymbolDependencies []*AtSymbolDependencyInformation `protobuf:"bytes,2,rep,name=at_symbol_dependencies,json=atSymbolDependencies,proto3" json:"at_symbol_dependencies,omitempty"`
	AtSymbolOptions      []*AtSymbolOption                `protobuf:"bytes,3,rep,name=at_symbol_options,json=atSymbolOptions,proto3" json:"at_symbol_options,omitempty"`
	UserQuery            string                           `protobuf:"bytes,4,opt,name=user_query,json=userQuery,proto3" json:"user_query,omitempty"`
	ModelDetails         *ModelDetails                    `protobuf:"bytes,5,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *GetAtSymbolSuggestionsRequest) Reset() {
	*x = GetAtSymbolSuggestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAtSymbolSuggestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtSymbolSuggestionsRequest) ProtoMessage() {}

func (x *GetAtSymbolSuggestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtSymbolSuggestionsRequest.ProtoReflect.Descriptor instead.
func (*GetAtSymbolSuggestionsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{387}
}

func (x *GetAtSymbolSuggestionsRequest) GetCurrentFileInfo() *CurrentFileInfo {
	if x != nil {
		return x.CurrentFileInfo
	}
	return nil
}

func (x *GetAtSymbolSuggestionsRequest) GetAtSymbolDependencies() []*AtSymbolDependencyInformation {
	if x != nil {
		return x.AtSymbolDependencies
	}
	return nil
}

func (x *GetAtSymbolSuggestionsRequest) GetAtSymbolOptions() []*AtSymbolOption {
	if x != nil {
		return x.AtSymbolOptions
	}
	return nil
}

func (x *GetAtSymbolSuggestionsRequest) GetUserQuery() string {
	if x != nil {
		return x.UserQuery
	}
	return ""
}

func (x *GetAtSymbolSuggestionsRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type AtSymbolDependencyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FromFile string `protobuf:"bytes,2,opt,name=from_file,json=fromFile,proto3" json:"from_file,omitempty"`
}

func (x *AtSymbolDependencyInformation) Reset() {
	*x = AtSymbolDependencyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtSymbolDependencyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtSymbolDependencyInformation) ProtoMessage() {}

func (x *AtSymbolDependencyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtSymbolDependencyInformation.ProtoReflect.Descriptor instead.
func (*AtSymbolDependencyInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{388}
}

func (x *AtSymbolDependencyInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AtSymbolDependencyInformation) GetFromFile() string {
	if x != nil {
		return x.FromFile
	}
	return ""
}

type AtSymbolOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Type  string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *AtSymbolOption) Reset() {
	*x = AtSymbolOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtSymbolOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtSymbolOption) ProtoMessage() {}

func (x *AtSymbolOption) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtSymbolOption.ProtoReflect.Descriptor instead.
func (*AtSymbolOption) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{389}
}

func (x *AtSymbolOption) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AtSymbolOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AtSymbolOption) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type GetAtSymbolSuggestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indices     []int32 `protobuf:"varint,1,rep,packed,name=indices,proto3" json:"indices,omitempty"`
	Explanation string  `protobuf:"bytes,2,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *GetAtSymbolSuggestionsResponse) Reset() {
	*x = GetAtSymbolSuggestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAtSymbolSuggestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtSymbolSuggestionsResponse) ProtoMessage() {}

func (x *GetAtSymbolSuggestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtSymbolSuggestionsResponse.ProtoReflect.Descriptor instead.
func (*GetAtSymbolSuggestionsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{390}
}

func (x *GetAtSymbolSuggestionsResponse) GetIndices() []int32 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *GetAtSymbolSuggestionsResponse) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

type GetCodebaseQuestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Questions []string `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *GetCodebaseQuestionsResponse) Reset() {
	*x = GetCodebaseQuestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodebaseQuestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodebaseQuestionsResponse) ProtoMessage() {}

func (x *GetCodebaseQuestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodebaseQuestionsResponse.ProtoReflect.Descriptor instead.
func (*GetCodebaseQuestionsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{391}
}

func (x *GetCodebaseQuestionsResponse) GetQuestions() []string {
	if x != nil {
		return x.Questions
	}
	return nil
}

type GetRankedContextFromContextBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRequest    *GetChatRequest                                        `protobuf:"bytes,1,opt,name=chat_request,json=chatRequest,proto3" json:"chat_request,omitempty"`
	ContextToRank  []*ContextToRank                                       `protobuf:"bytes,2,rep,name=context_to_rank,json=contextToRank,proto3" json:"context_to_rank,omitempty"`
	RankWithOption *GetRankedContextFromContextBankRequest_RankWithOption `protobuf:"varint,3,opt,name=rank_with_option,json=rankWithOption,proto3,enum=aiserver.v1.GetRankedContextFromContextBankRequest_RankWithOption,oneof" json:"rank_with_option,omitempty"`
}

func (x *GetRankedContextFromContextBankRequest) Reset() {
	*x = GetRankedContextFromContextBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankedContextFromContextBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankedContextFromContextBankRequest) ProtoMessage() {}

func (x *GetRankedContextFromContextBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankedContextFromContextBankRequest.ProtoReflect.Descriptor instead.
func (*GetRankedContextFromContextBankRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{392}
}

func (x *GetRankedContextFromContextBankRequest) GetChatRequest() *GetChatRequest {
	if x != nil {
		return x.ChatRequest
	}
	return nil
}

func (x *GetRankedContextFromContextBankRequest) GetContextToRank() []*ContextToRank {
	if x != nil {
		return x.ContextToRank
	}
	return nil
}

func (x *GetRankedContextFromContextBankRequest) GetRankWithOption() GetRankedContextFromContextBankRequest_RankWithOption {
	if x != nil && x.RankWithOption != nil {
		return *x.RankWithOption
	}
	return GetRankedContextFromContextBankRequest_RANK_WITH_OPTION_UNSPECIFIED
}

type ContextToRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File        *ContextToRank_File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	WorkingDiff *GitDiff            `protobuf:"bytes,2,opt,name=working_diff,json=workingDiff,proto3" json:"working_diff,omitempty"`
}

func (x *ContextToRank) Reset() {
	*x = ContextToRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextToRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextToRank) ProtoMessage() {}

func (x *ContextToRank) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextToRank.ProtoReflect.Descriptor instead.
func (*ContextToRank) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{393}
}

func (x *ContextToRank) GetFile() *ContextToRank_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ContextToRank) GetWorkingDiff() *GitDiff {
	if x != nil {
		return x.WorkingDiff
	}
	return nil
}

type GetRankedContextFromContextBankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankedContext []*ContextToRank `protobuf:"bytes,1,rep,name=ranked_context,json=rankedContext,proto3" json:"ranked_context,omitempty"`
}

func (x *GetRankedContextFromContextBankResponse) Reset() {
	*x = GetRankedContextFromContextBankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankedContextFromContextBankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankedContextFromContextBankResponse) ProtoMessage() {}

func (x *GetRankedContextFromContextBankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankedContextFromContextBankResponse.ProtoReflect.Descriptor instead.
func (*GetRankedContextFromContextBankResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{394}
}

func (x *GetRankedContextFromContextBankResponse) GetRankedContext() []*ContextToRank {
	if x != nil {
		return x.RankedContext
	}
	return nil
}

type EditHistoryAppendChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                   string                                            `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ModelUuid                   string                                            `protobuf:"bytes,2,opt,name=model_uuid,json=modelUuid,proto3" json:"model_uuid,omitempty"`
	StartingModelValue          *string                                           `protobuf:"bytes,3,opt,name=starting_model_value,json=startingModelValue,proto3,oneof" json:"starting_model_value,omitempty"`
	StartingModelVersion        *int32                                            `protobuf:"varint,10,opt,name=starting_model_version,json=startingModelVersion,proto3,oneof" json:"starting_model_version,omitempty"`
	RelativePath                string                                            `protobuf:"bytes,5,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Uri                         string                                            `protobuf:"bytes,14,opt,name=uri,proto3" json:"uri,omitempty"`
	ClientVersion               string                                            `protobuf:"bytes,6,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	ClientCommit                *string                                           `protobuf:"bytes,8,opt,name=client_commit,json=clientCommit,proto3,oneof" json:"client_commit,omitempty"`
	Changes                     []*ModelChange                                    `protobuf:"bytes,4,rep,name=changes,proto3" json:"changes,omitempty"`
	SessionEvents               []*CppSessionEvent                                `protobuf:"bytes,9,rep,name=session_events,json=sessionEvents,proto3" json:"session_events,omitempty"`
	ModelChangesMayBeOutOfOrder bool                                              `protobuf:"varint,11,opt,name=model_changes_may_be_out_of_order,json=modelChangesMayBeOutOfOrder,proto3" json:"model_changes_may_be_out_of_order,omitempty"`
	PrivacyModeStatus           EditHistoryAppendChangesRequest_PrivacyModeStatus `protobuf:"varint,12,opt,name=privacy_mode_status,json=privacyModeStatus,proto3,enum=aiserver.v1.EditHistoryAppendChangesRequest_PrivacyModeStatus" json:"privacy_mode_status,omitempty"`
	Events                      []*CppHistoryAppendEvent                          `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	TimeOrigin                  float32                                           `protobuf:"fixed32,13,opt,name=time_origin,json=timeOrigin,proto3" json:"time_origin,omitempty"`
}

func (x *EditHistoryAppendChangesRequest) Reset() {
	*x = EditHistoryAppendChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditHistoryAppendChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditHistoryAppendChangesRequest) ProtoMessage() {}

func (x *EditHistoryAppendChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditHistoryAppendChangesRequest.ProtoReflect.Descriptor instead.
func (*EditHistoryAppendChangesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{395}
}

func (x *EditHistoryAppendChangesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetModelUuid() string {
	if x != nil {
		return x.ModelUuid
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetStartingModelValue() string {
	if x != nil && x.StartingModelValue != nil {
		return *x.StartingModelValue
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetStartingModelVersion() int32 {
	if x != nil && x.StartingModelVersion != nil {
		return *x.StartingModelVersion
	}
	return 0
}

func (x *EditHistoryAppendChangesRequest) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetClientCommit() string {
	if x != nil && x.ClientCommit != nil {
		return *x.ClientCommit
	}
	return ""
}

func (x *EditHistoryAppendChangesRequest) GetChanges() []*ModelChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *EditHistoryAppendChangesRequest) GetSessionEvents() []*CppSessionEvent {
	if x != nil {
		return x.SessionEvents
	}
	return nil
}

func (x *EditHistoryAppendChangesRequest) GetModelChangesMayBeOutOfOrder() bool {
	if x != nil {
		return x.ModelChangesMayBeOutOfOrder
	}
	return false
}

func (x *EditHistoryAppendChangesRequest) GetPrivacyModeStatus() EditHistoryAppendChangesRequest_PrivacyModeStatus {
	if x != nil {
		return x.PrivacyModeStatus
	}
	return EditHistoryAppendChangesRequest_PRIVACY_MODE_STATUS_UNSPECIFIED
}

func (x *EditHistoryAppendChangesRequest) GetEvents() []*CppHistoryAppendEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EditHistoryAppendChangesRequest) GetTimeOrigin() float32 {
	if x != nil {
		return x.TimeOrigin
	}
	return 0
}

type ModelChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                                   string             `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Range                                  *IRange            `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	FinalModelHash                         *string            `protobuf:"bytes,3,opt,name=final_model_hash,json=finalModelHash,proto3,oneof" json:"final_model_hash,omitempty"`
	ModelVersionImmediatelyAfterThisChange *int32             `protobuf:"varint,4,opt,name=model_version_immediately_after_this_change,json=modelVersionImmediatelyAfterThisChange,proto3,oneof" json:"model_version_immediately_after_this_change,omitempty"`
	PerformanceNowTimestamp                *float64           `protobuf:"fixed64,5,opt,name=performance_now_timestamp,json=performanceNowTimestamp,proto3,oneof" json:"performance_now_timestamp,omitempty"`
	IsUndoing                              *bool              `protobuf:"varint,7,opt,name=is_undoing,json=isUndoing,proto3,oneof" json:"is_undoing,omitempty"`
	IsRedoing                              *bool              `protobuf:"varint,8,opt,name=is_redoing,json=isRedoing,proto3,oneof" json:"is_redoing,omitempty"`
	ModelIsAttachedToEditor                bool               `protobuf:"varint,9,opt,name=model_is_attached_to_editor,json=modelIsAttachedToEditor,proto3" json:"model_is_attached_to_editor,omitempty"`
	ModelIsAttachedToTheActiveEditor       bool               `protobuf:"varint,10,opt,name=model_is_attached_to_the_active_editor,json=modelIsAttachedToTheActiveEditor,proto3" json:"model_is_attached_to_the_active_editor,omitempty"`
	CursorSelections                       []*CursorSelection `protobuf:"bytes,11,rep,name=cursor_selections,json=cursorSelections,proto3" json:"cursor_selections,omitempty"`
	ModelVersionAtMetadataRetrievalTime    int32              `protobuf:"varint,12,opt,name=model_version_at_metadata_retrieval_time,json=modelVersionAtMetadataRetrievalTime,proto3" json:"model_version_at_metadata_retrieval_time,omitempty"`
}

func (x *ModelChange) Reset() {
	*x = ModelChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelChange) ProtoMessage() {}

func (x *ModelChange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelChange.ProtoReflect.Descriptor instead.
func (*ModelChange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{396}
}

func (x *ModelChange) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ModelChange) GetRange() *IRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ModelChange) GetFinalModelHash() string {
	if x != nil && x.FinalModelHash != nil {
		return *x.FinalModelHash
	}
	return ""
}

func (x *ModelChange) GetModelVersionImmediatelyAfterThisChange() int32 {
	if x != nil && x.ModelVersionImmediatelyAfterThisChange != nil {
		return *x.ModelVersionImmediatelyAfterThisChange
	}
	return 0
}

func (x *ModelChange) GetPerformanceNowTimestamp() float64 {
	if x != nil && x.PerformanceNowTimestamp != nil {
		return *x.PerformanceNowTimestamp
	}
	return 0
}

func (x *ModelChange) GetIsUndoing() bool {
	if x != nil && x.IsUndoing != nil {
		return *x.IsUndoing
	}
	return false
}

func (x *ModelChange) GetIsRedoing() bool {
	if x != nil && x.IsRedoing != nil {
		return *x.IsRedoing
	}
	return false
}

func (x *ModelChange) GetModelIsAttachedToEditor() bool {
	if x != nil {
		return x.ModelIsAttachedToEditor
	}
	return false
}

func (x *ModelChange) GetModelIsAttachedToTheActiveEditor() bool {
	if x != nil {
		return x.ModelIsAttachedToTheActiveEditor
	}
	return false
}

func (x *ModelChange) GetCursorSelections() []*CursorSelection {
	if x != nil {
		return x.CursorSelections
	}
	return nil
}

func (x *ModelChange) GetModelVersionAtMetadataRetrievalTime() int32 {
	if x != nil {
		return x.ModelVersionAtMetadataRetrievalTime
	}
	return 0
}

type CursorSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionStartLineNumber int32 `protobuf:"varint,1,opt,name=selection_start_line_number,json=selectionStartLineNumber,proto3" json:"selection_start_line_number,omitempty"`
	SelectionStartColumn     int32 `protobuf:"varint,2,opt,name=selection_start_column,json=selectionStartColumn,proto3" json:"selection_start_column,omitempty"`
	PositionLineNumber       int32 `protobuf:"varint,3,opt,name=position_line_number,json=positionLineNumber,proto3" json:"position_line_number,omitempty"`
	PositionColumn           int32 `protobuf:"varint,4,opt,name=position_column,json=positionColumn,proto3" json:"position_column,omitempty"`
}

func (x *CursorSelection) Reset() {
	*x = CursorSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorSelection) ProtoMessage() {}

func (x *CursorSelection) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorSelection.ProtoReflect.Descriptor instead.
func (*CursorSelection) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{397}
}

func (x *CursorSelection) GetSelectionStartLineNumber() int32 {
	if x != nil {
		return x.SelectionStartLineNumber
	}
	return 0
}

func (x *CursorSelection) GetSelectionStartColumn() int32 {
	if x != nil {
		return x.SelectionStartColumn
	}
	return 0
}

func (x *CursorSelection) GetPositionLineNumber() int32 {
	if x != nil {
		return x.PositionLineNumber
	}
	return 0
}

func (x *CursorSelection) GetPositionColumn() int32 {
	if x != nil {
		return x.PositionColumn
	}
	return 0
}

type CppSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptEvent                  *CppAcceptEventNew               `protobuf:"bytes,2,opt,name=accept_event,json=acceptEvent,proto3" json:"accept_event,omitempty"`
	RejectEvent                  *CppRejectEventNew               `protobuf:"bytes,3,opt,name=reject_event,json=rejectEvent,proto3" json:"reject_event,omitempty"`
	ManualTriggerEvent           *CppManualTriggerEventNew        `protobuf:"bytes,4,opt,name=manual_trigger_event,json=manualTriggerEvent,proto3" json:"manual_trigger_event,omitempty"`
	StoppedTrackingModelEvent    *CppStoppedTrackingModelEvent    `protobuf:"bytes,6,opt,name=stopped_tracking_model_event,json=stoppedTrackingModelEvent,proto3" json:"stopped_tracking_model_event,omitempty"`
	SuggestEvent                 *CppSuggestEvent                 `protobuf:"bytes,7,opt,name=suggest_event,json=suggestEvent,proto3" json:"suggest_event,omitempty"`
	LinterErrorEvent             *CppLinterErrorEvent             `protobuf:"bytes,8,opt,name=linter_error_event,json=linterErrorEvent,proto3" json:"linter_error_event,omitempty"`
	DebouncedCursorMovementEvent *CppDebouncedCursorMovementEvent `protobuf:"bytes,9,opt,name=debounced_cursor_movement_event,json=debouncedCursorMovementEvent,proto3" json:"debounced_cursor_movement_event,omitempty"`
	EditorChangedEvent           *CppEditorChangedEvent           `protobuf:"bytes,10,opt,name=editor_changed_event,json=editorChangedEvent,proto3" json:"editor_changed_event,omitempty"`
	CopyEvent                    *CppCopyEvent                    `protobuf:"bytes,11,opt,name=copy_event,json=copyEvent,proto3" json:"copy_event,omitempty"`
	QuickActionEvent             *CppChangeQuickActionEvent       `protobuf:"bytes,13,opt,name=quick_action_event,json=quickActionEvent,proto3" json:"quick_action_event,omitempty"`
	QuickActionFireEvent         *CppQuickActionFireEvent         `protobuf:"bytes,14,opt,name=quick_action_fire_event,json=quickActionFireEvent,proto3" json:"quick_action_fire_event,omitempty"`
	ModelOpenedEvent             *ModelOpenedEvent                `protobuf:"bytes,15,opt,name=model_opened_event,json=modelOpenedEvent,proto3" json:"model_opened_event,omitempty"`
	CmdKEvent                    *CmdKEvent                       `protobuf:"bytes,17,opt,name=cmd_k_event,json=cmdKEvent,proto3" json:"cmd_k_event,omitempty"`
	ChatEvent                    *ChatEvent                       `protobuf:"bytes,18,opt,name=chat_event,json=chatEvent,proto3" json:"chat_event,omitempty"`
	AiEvent                      *AiRequestEvent                  `protobuf:"bytes,19,opt,name=ai_event,json=aiEvent,proto3" json:"ai_event,omitempty"`
	ScrollEvent                  *ScrollEvent                     `protobuf:"bytes,21,opt,name=scroll_event,json=scrollEvent,proto3" json:"scroll_event,omitempty"`
	EditorCloseEvent             *EditorCloseEvent                `protobuf:"bytes,22,opt,name=editor_close_event,json=editorCloseEvent,proto3" json:"editor_close_event,omitempty"`
	TabCloseEvent                *TabCloseEvent                   `protobuf:"bytes,23,opt,name=tab_close_event,json=tabCloseEvent,proto3" json:"tab_close_event,omitempty"`
	PartialAcceptEvent           *CppPartialAcceptEvent           `protobuf:"bytes,26,opt,name=partial_accept_event,json=partialAcceptEvent,proto3" json:"partial_accept_event,omitempty"`
	AcceptCursorPredictionEvent  *AcceptCursorPredictionEvent     `protobuf:"bytes,27,opt,name=accept_cursor_prediction_event,json=acceptCursorPredictionEvent,proto3" json:"accept_cursor_prediction_event,omitempty"`
	RejectCursorPredictionEvent  *RejectCursorPredictionEvent     `protobuf:"bytes,28,opt,name=reject_cursor_prediction_event,json=rejectCursorPredictionEvent,proto3" json:"reject_cursor_prediction_event,omitempty"`
	SuggestCursorPredictionEvent *SuggestCursorPredictionEvent    `protobuf:"bytes,29,opt,name=suggest_cursor_prediction_event,json=suggestCursorPredictionEvent,proto3" json:"suggest_cursor_prediction_event,omitempty"`
	CppTriggerEvent              *CppTriggerEvent                 `protobuf:"bytes,30,opt,name=cpp_trigger_event,json=cppTriggerEvent,proto3" json:"cpp_trigger_event,omitempty"`
	FinishedCppGenerationEvent   *FinishedCppGenerationEvent      `protobuf:"bytes,31,opt,name=finished_cpp_generation_event,json=finishedCppGenerationEvent,proto3" json:"finished_cpp_generation_event,omitempty"`
	BackgroundFilesEvent         *BackgroundFilesEvent            `protobuf:"bytes,16,opt,name=background_files_event,json=backgroundFilesEvent,proto3" json:"background_files_event,omitempty"`
	TerminalEvent                *CppTerminalEvent                `protobuf:"bytes,20,opt,name=terminal_event,json=terminalEvent,proto3" json:"terminal_event,omitempty"`
	GitContextEvent              *CppGitContextEvent              `protobuf:"bytes,24,opt,name=git_context_event,json=gitContextEvent,proto3" json:"git_context_event,omitempty"`
	PerformanceNowTimestamp      float64                          `protobuf:"fixed64,5,opt,name=performance_now_timestamp,json=performanceNowTimestamp,proto3" json:"performance_now_timestamp,omitempty"`
	PerformanceTimeOrigin        *float64                         `protobuf:"fixed64,25,opt,name=performance_time_origin,json=performanceTimeOrigin,proto3,oneof" json:"performance_time_origin,omitempty"`
}

func (x *CppSessionEvent) Reset() {
	*x = CppSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppSessionEvent) ProtoMessage() {}

func (x *CppSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppSessionEvent.ProtoReflect.Descriptor instead.
func (*CppSessionEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{398}
}

func (x *CppSessionEvent) GetAcceptEvent() *CppAcceptEventNew {
	if x != nil {
		return x.AcceptEvent
	}
	return nil
}

func (x *CppSessionEvent) GetRejectEvent() *CppRejectEventNew {
	if x != nil {
		return x.RejectEvent
	}
	return nil
}

func (x *CppSessionEvent) GetManualTriggerEvent() *CppManualTriggerEventNew {
	if x != nil {
		return x.ManualTriggerEvent
	}
	return nil
}

func (x *CppSessionEvent) GetStoppedTrackingModelEvent() *CppStoppedTrackingModelEvent {
	if x != nil {
		return x.StoppedTrackingModelEvent
	}
	return nil
}

func (x *CppSessionEvent) GetSuggestEvent() *CppSuggestEvent {
	if x != nil {
		return x.SuggestEvent
	}
	return nil
}

func (x *CppSessionEvent) GetLinterErrorEvent() *CppLinterErrorEvent {
	if x != nil {
		return x.LinterErrorEvent
	}
	return nil
}

func (x *CppSessionEvent) GetDebouncedCursorMovementEvent() *CppDebouncedCursorMovementEvent {
	if x != nil {
		return x.DebouncedCursorMovementEvent
	}
	return nil
}

func (x *CppSessionEvent) GetEditorChangedEvent() *CppEditorChangedEvent {
	if x != nil {
		return x.EditorChangedEvent
	}
	return nil
}

func (x *CppSessionEvent) GetCopyEvent() *CppCopyEvent {
	if x != nil {
		return x.CopyEvent
	}
	return nil
}

func (x *CppSessionEvent) GetQuickActionEvent() *CppChangeQuickActionEvent {
	if x != nil {
		return x.QuickActionEvent
	}
	return nil
}

func (x *CppSessionEvent) GetQuickActionFireEvent() *CppQuickActionFireEvent {
	if x != nil {
		return x.QuickActionFireEvent
	}
	return nil
}

func (x *CppSessionEvent) GetModelOpenedEvent() *ModelOpenedEvent {
	if x != nil {
		return x.ModelOpenedEvent
	}
	return nil
}

func (x *CppSessionEvent) GetCmdKEvent() *CmdKEvent {
	if x != nil {
		return x.CmdKEvent
	}
	return nil
}

func (x *CppSessionEvent) GetChatEvent() *ChatEvent {
	if x != nil {
		return x.ChatEvent
	}
	return nil
}

func (x *CppSessionEvent) GetAiEvent() *AiRequestEvent {
	if x != nil {
		return x.AiEvent
	}
	return nil
}

func (x *CppSessionEvent) GetScrollEvent() *ScrollEvent {
	if x != nil {
		return x.ScrollEvent
	}
	return nil
}

func (x *CppSessionEvent) GetEditorCloseEvent() *EditorCloseEvent {
	if x != nil {
		return x.EditorCloseEvent
	}
	return nil
}

func (x *CppSessionEvent) GetTabCloseEvent() *TabCloseEvent {
	if x != nil {
		return x.TabCloseEvent
	}
	return nil
}

func (x *CppSessionEvent) GetPartialAcceptEvent() *CppPartialAcceptEvent {
	if x != nil {
		return x.PartialAcceptEvent
	}
	return nil
}

func (x *CppSessionEvent) GetAcceptCursorPredictionEvent() *AcceptCursorPredictionEvent {
	if x != nil {
		return x.AcceptCursorPredictionEvent
	}
	return nil
}

func (x *CppSessionEvent) GetRejectCursorPredictionEvent() *RejectCursorPredictionEvent {
	if x != nil {
		return x.RejectCursorPredictionEvent
	}
	return nil
}

func (x *CppSessionEvent) GetSuggestCursorPredictionEvent() *SuggestCursorPredictionEvent {
	if x != nil {
		return x.SuggestCursorPredictionEvent
	}
	return nil
}

func (x *CppSessionEvent) GetCppTriggerEvent() *CppTriggerEvent {
	if x != nil {
		return x.CppTriggerEvent
	}
	return nil
}

func (x *CppSessionEvent) GetFinishedCppGenerationEvent() *FinishedCppGenerationEvent {
	if x != nil {
		return x.FinishedCppGenerationEvent
	}
	return nil
}

func (x *CppSessionEvent) GetBackgroundFilesEvent() *BackgroundFilesEvent {
	if x != nil {
		return x.BackgroundFilesEvent
	}
	return nil
}

func (x *CppSessionEvent) GetTerminalEvent() *CppTerminalEvent {
	if x != nil {
		return x.TerminalEvent
	}
	return nil
}

func (x *CppSessionEvent) GetGitContextEvent() *CppGitContextEvent {
	if x != nil {
		return x.GitContextEvent
	}
	return nil
}

func (x *CppSessionEvent) GetPerformanceNowTimestamp() float64 {
	if x != nil {
		return x.PerformanceNowTimestamp
	}
	return 0
}

func (x *CppSessionEvent) GetPerformanceTimeOrigin() float64 {
	if x != nil && x.PerformanceTimeOrigin != nil {
		return *x.PerformanceTimeOrigin
	}
	return 0
}

type CppAcceptEventNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSuggestion    *CurrentlyShownCppSuggestion `protobuf:"bytes,1,opt,name=cpp_suggestion,json=cppSuggestion,proto3" json:"cpp_suggestion,omitempty"`
	PointInTimeModel *PointInTimeModel            `protobuf:"bytes,7,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *CppAcceptEventNew) Reset() {
	*x = CppAcceptEventNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppAcceptEventNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppAcceptEventNew) ProtoMessage() {}

func (x *CppAcceptEventNew) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppAcceptEventNew.ProtoReflect.Descriptor instead.
func (*CppAcceptEventNew) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{399}
}

func (x *CppAcceptEventNew) GetCppSuggestion() *CurrentlyShownCppSuggestion {
	if x != nil {
		return x.CppSuggestion
	}
	return nil
}

func (x *CppAcceptEventNew) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type CurrentlyShownCppSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuggestionId                                                            int32   `protobuf:"varint,1,opt,name=suggestion_id,json=suggestionId,proto3" json:"suggestion_id,omitempty"`
	SuggestionText                                                          string  `protobuf:"bytes,2,opt,name=suggestion_text,json=suggestionText,proto3" json:"suggestion_text,omitempty"`
	ModelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel int32   `protobuf:"varint,3,opt,name=model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model,json=modelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel,proto3" json:"model_version_when_the_change_is_first_indicated_to_the_user_but_not_shown_in_the_model,omitempty"`
	RangeOfSuggestionInCurrentModel                                         *IRange `protobuf:"bytes,4,opt,name=range_of_suggestion_in_current_model,json=rangeOfSuggestionInCurrentModel,proto3,oneof" json:"range_of_suggestion_in_current_model,omitempty"`
	OriginalText                                                            string  `protobuf:"bytes,5,opt,name=original_text,json=originalText,proto3" json:"original_text,omitempty"`
}

func (x *CurrentlyShownCppSuggestion) Reset() {
	*x = CurrentlyShownCppSuggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentlyShownCppSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentlyShownCppSuggestion) ProtoMessage() {}

func (x *CurrentlyShownCppSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentlyShownCppSuggestion.ProtoReflect.Descriptor instead.
func (*CurrentlyShownCppSuggestion) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{400}
}

func (x *CurrentlyShownCppSuggestion) GetSuggestionId() int32 {
	if x != nil {
		return x.SuggestionId
	}
	return 0
}

func (x *CurrentlyShownCppSuggestion) GetSuggestionText() string {
	if x != nil {
		return x.SuggestionText
	}
	return ""
}

func (x *CurrentlyShownCppSuggestion) GetModelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel() int32 {
	if x != nil {
		return x.ModelVersionWhenTheChangeIsFirstIndicatedToTheUserButNotShownInTheModel
	}
	return 0
}

func (x *CurrentlyShownCppSuggestion) GetRangeOfSuggestionInCurrentModel() *IRange {
	if x != nil {
		return x.RangeOfSuggestionInCurrentModel
	}
	return nil
}

func (x *CurrentlyShownCppSuggestion) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

type PointInTimeModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelUuid    string `protobuf:"bytes,1,opt,name=model_uuid,json=modelUuid,proto3" json:"model_uuid,omitempty"`
	ModelVersion int32  `protobuf:"varint,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	RelativePath string `protobuf:"bytes,3,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
}

func (x *PointInTimeModel) Reset() {
	*x = PointInTimeModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointInTimeModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointInTimeModel) ProtoMessage() {}

func (x *PointInTimeModel) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointInTimeModel.ProtoReflect.Descriptor instead.
func (*PointInTimeModel) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{401}
}

func (x *PointInTimeModel) GetModelUuid() string {
	if x != nil {
		return x.ModelUuid
	}
	return ""
}

func (x *PointInTimeModel) GetModelVersion() int32 {
	if x != nil {
		return x.ModelVersion
	}
	return 0
}

func (x *PointInTimeModel) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

type CppRejectEventNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSuggestion    *CurrentlyShownCppSuggestion `protobuf:"bytes,1,opt,name=cpp_suggestion,json=cppSuggestion,proto3" json:"cpp_suggestion,omitempty"`
	PointInTimeModel *PointInTimeModel            `protobuf:"bytes,7,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *CppRejectEventNew) Reset() {
	*x = CppRejectEventNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppRejectEventNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppRejectEventNew) ProtoMessage() {}

func (x *CppRejectEventNew) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppRejectEventNew.ProtoReflect.Descriptor instead.
func (*CppRejectEventNew) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{402}
}

func (x *CppRejectEventNew) GetCppSuggestion() *CurrentlyShownCppSuggestion {
	if x != nil {
		return x.CppSuggestion
	}
	return nil
}

func (x *CppRejectEventNew) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type CppManualTriggerEventNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineNumberOneIndexed   int32             `protobuf:"varint,1,opt,name=line_number_one_indexed,json=lineNumberOneIndexed,proto3" json:"line_number_one_indexed,omitempty"`
	ColumnNumberOneIndexed int32             `protobuf:"varint,2,opt,name=column_number_one_indexed,json=columnNumberOneIndexed,proto3" json:"column_number_one_indexed,omitempty"`
	PointInTimeModel       *PointInTimeModel `protobuf:"bytes,7,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *CppManualTriggerEventNew) Reset() {
	*x = CppManualTriggerEventNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppManualTriggerEventNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppManualTriggerEventNew) ProtoMessage() {}

func (x *CppManualTriggerEventNew) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppManualTriggerEventNew.ProtoReflect.Descriptor instead.
func (*CppManualTriggerEventNew) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{403}
}

func (x *CppManualTriggerEventNew) GetLineNumberOneIndexed() int32 {
	if x != nil {
		return x.LineNumberOneIndexed
	}
	return 0
}

func (x *CppManualTriggerEventNew) GetColumnNumberOneIndexed() int32 {
	if x != nil {
		return x.ColumnNumberOneIndexed
	}
	return 0
}

func (x *CppManualTriggerEventNew) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type CppStoppedTrackingModelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelUuid    string                                                  `protobuf:"bytes,1,opt,name=model_uuid,json=modelUuid,proto3" json:"model_uuid,omitempty"`
	RelativePath string                                                  `protobuf:"bytes,2,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
	Reason       CppStoppedTrackingModelEvent_StoppedTrackingModelReason `protobuf:"varint,3,opt,name=reason,proto3,enum=aiserver.v1.CppStoppedTrackingModelEvent_StoppedTrackingModelReason" json:"reason,omitempty"`
}

func (x *CppStoppedTrackingModelEvent) Reset() {
	*x = CppStoppedTrackingModelEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppStoppedTrackingModelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppStoppedTrackingModelEvent) ProtoMessage() {}

func (x *CppStoppedTrackingModelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppStoppedTrackingModelEvent.ProtoReflect.Descriptor instead.
func (*CppStoppedTrackingModelEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{404}
}

func (x *CppStoppedTrackingModelEvent) GetModelUuid() string {
	if x != nil {
		return x.ModelUuid
	}
	return ""
}

func (x *CppStoppedTrackingModelEvent) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

func (x *CppStoppedTrackingModelEvent) GetReason() CppStoppedTrackingModelEvent_StoppedTrackingModelReason {
	if x != nil {
		return x.Reason
	}
	return CppStoppedTrackingModelEvent_STOPPED_TRACKING_MODEL_REASON_UNSPECIFIED
}

type CppSuggestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSuggestion      *CurrentlyShownCppSuggestion `protobuf:"bytes,1,opt,name=cpp_suggestion,json=cppSuggestion,proto3" json:"cpp_suggestion,omitempty"`
	PointInTimeModel   *PointInTimeModel            `protobuf:"bytes,2,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	RecoverableCppData *RecoverableCppData          `protobuf:"bytes,3,opt,name=recoverable_cpp_data,json=recoverableCppData,proto3" json:"recoverable_cpp_data,omitempty"`
}

func (x *CppSuggestEvent) Reset() {
	*x = CppSuggestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppSuggestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppSuggestEvent) ProtoMessage() {}

func (x *CppSuggestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppSuggestEvent.ProtoReflect.Descriptor instead.
func (*CppSuggestEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{405}
}

func (x *CppSuggestEvent) GetCppSuggestion() *CurrentlyShownCppSuggestion {
	if x != nil {
		return x.CppSuggestion
	}
	return nil
}

func (x *CppSuggestEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CppSuggestEvent) GetRecoverableCppData() *RecoverableCppData {
	if x != nil {
		return x.RecoverableCppData
	}
	return nil
}

type RecoverableCppData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId       string              `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SuggestionText  string              `protobuf:"bytes,2,opt,name=suggestion_text,json=suggestionText,proto3" json:"suggestion_text,omitempty"`
	SuggestionRange *IRange             `protobuf:"bytes,3,opt,name=suggestion_range,json=suggestionRange,proto3" json:"suggestion_range,omitempty"`
	Position        *OneIndexedPosition `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *RecoverableCppData) Reset() {
	*x = RecoverableCppData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoverableCppData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoverableCppData) ProtoMessage() {}

func (x *RecoverableCppData) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoverableCppData.ProtoReflect.Descriptor instead.
func (*RecoverableCppData) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{406}
}

func (x *RecoverableCppData) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RecoverableCppData) GetSuggestionText() string {
	if x != nil {
		return x.SuggestionText
	}
	return ""
}

func (x *RecoverableCppData) GetSuggestionRange() *IRange {
	if x != nil {
		return x.SuggestionRange
	}
	return nil
}

func (x *RecoverableCppData) GetPosition() *OneIndexedPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type OneIndexedPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineNumberOneIndexed int32 `protobuf:"varint,1,opt,name=line_number_one_indexed,json=lineNumberOneIndexed,proto3" json:"line_number_one_indexed,omitempty"`
	ColumnOneIndexed     int32 `protobuf:"varint,2,opt,name=column_one_indexed,json=columnOneIndexed,proto3" json:"column_one_indexed,omitempty"`
}

func (x *OneIndexedPosition) Reset() {
	*x = OneIndexedPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneIndexedPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneIndexedPosition) ProtoMessage() {}

func (x *OneIndexedPosition) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneIndexedPosition.ProtoReflect.Descriptor instead.
func (*OneIndexedPosition) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{407}
}

func (x *OneIndexedPosition) GetLineNumberOneIndexed() int32 {
	if x != nil {
		return x.LineNumberOneIndexed
	}
	return 0
}

func (x *OneIndexedPosition) GetColumnOneIndexed() int32 {
	if x != nil {
		return x.ColumnOneIndexed
	}
	return 0
}

type CppLinterErrorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *PointInTimeModel `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	AddedErrors      []*LinterError    `protobuf:"bytes,2,rep,name=added_errors,json=addedErrors,proto3" json:"added_errors,omitempty"`
	RemovedErrors    []*LinterError    `protobuf:"bytes,3,rep,name=removed_errors,json=removedErrors,proto3" json:"removed_errors,omitempty"`
	Errors           []*LinterError    `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CppLinterErrorEvent) Reset() {
	*x = CppLinterErrorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppLinterErrorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppLinterErrorEvent) ProtoMessage() {}

func (x *CppLinterErrorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppLinterErrorEvent.ProtoReflect.Descriptor instead.
func (*CppLinterErrorEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{408}
}

func (x *CppLinterErrorEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CppLinterErrorEvent) GetAddedErrors() []*LinterError {
	if x != nil {
		return x.AddedErrors
	}
	return nil
}

func (x *CppLinterErrorEvent) GetRemovedErrors() []*LinterError {
	if x != nil {
		return x.RemovedErrors
	}
	return nil
}

func (x *CppLinterErrorEvent) GetErrors() []*LinterError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CppDebouncedCursorMovementEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *PointInTimeModel   `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	CursorPosition   *OneIndexedPosition `protobuf:"bytes,2,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
}

func (x *CppDebouncedCursorMovementEvent) Reset() {
	*x = CppDebouncedCursorMovementEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppDebouncedCursorMovementEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppDebouncedCursorMovementEvent) ProtoMessage() {}

func (x *CppDebouncedCursorMovementEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppDebouncedCursorMovementEvent.ProtoReflect.Descriptor instead.
func (*CppDebouncedCursorMovementEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{409}
}

func (x *CppDebouncedCursorMovementEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CppDebouncedCursorMovementEvent) GetCursorPosition() *OneIndexedPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

type CppEditorChangedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *PointInTimeModel   `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	CursorPosition   *OneIndexedPosition `protobuf:"bytes,2,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
	VisibleRanges    []*IRange           `protobuf:"bytes,3,rep,name=visible_ranges,json=visibleRanges,proto3" json:"visible_ranges,omitempty"`
	EditorId         string              `protobuf:"bytes,4,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
}

func (x *CppEditorChangedEvent) Reset() {
	*x = CppEditorChangedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppEditorChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppEditorChangedEvent) ProtoMessage() {}

func (x *CppEditorChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppEditorChangedEvent.ProtoReflect.Descriptor instead.
func (*CppEditorChangedEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{410}
}

func (x *CppEditorChangedEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CppEditorChangedEvent) GetCursorPosition() *OneIndexedPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

func (x *CppEditorChangedEvent) GetVisibleRanges() []*IRange {
	if x != nil {
		return x.VisibleRanges
	}
	return nil
}

func (x *CppEditorChangedEvent) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

type CppCopyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClipboardContents string `protobuf:"bytes,1,opt,name=clipboard_contents,json=clipboardContents,proto3" json:"clipboard_contents,omitempty"`
}

func (x *CppCopyEvent) Reset() {
	*x = CppCopyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppCopyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppCopyEvent) ProtoMessage() {}

func (x *CppCopyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppCopyEvent.ProtoReflect.Descriptor instead.
func (*CppCopyEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{411}
}

func (x *CppCopyEvent) GetClipboardContents() string {
	if x != nil {
		return x.ClipboardContents
	}
	return ""
}

type CppChangeQuickActionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *PointInTimeModel `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	Added            []*CppQuickAction `protobuf:"bytes,2,rep,name=added,proto3" json:"added,omitempty"`
	Removed          []*CppQuickAction `protobuf:"bytes,3,rep,name=removed,proto3" json:"removed,omitempty"`
	Actions          []*CppQuickAction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *CppChangeQuickActionEvent) Reset() {
	*x = CppChangeQuickActionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppChangeQuickActionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppChangeQuickActionEvent) ProtoMessage() {}

func (x *CppChangeQuickActionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppChangeQuickActionEvent.ProtoReflect.Descriptor instead.
func (*CppChangeQuickActionEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{412}
}

func (x *CppChangeQuickActionEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CppChangeQuickActionEvent) GetAdded() []*CppQuickAction {
	if x != nil {
		return x.Added
	}
	return nil
}

func (x *CppChangeQuickActionEvent) GetRemoved() []*CppQuickAction {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *CppChangeQuickActionEvent) GetActions() []*CppQuickAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CppQuickAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Edits       []*CppQuickAction_Edit `protobuf:"bytes,2,rep,name=edits,proto3" json:"edits,omitempty"`
	IsPreferred *bool                  `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3,oneof" json:"is_preferred,omitempty"`
	Command     *CppQuickActionCommand `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *CppQuickAction) Reset() {
	*x = CppQuickAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppQuickAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppQuickAction) ProtoMessage() {}

func (x *CppQuickAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppQuickAction.ProtoReflect.Descriptor instead.
func (*CppQuickAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{413}
}

func (x *CppQuickAction) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CppQuickAction) GetEdits() []*CppQuickAction_Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

func (x *CppQuickAction) GetIsPreferred() bool {
	if x != nil && x.IsPreferred != nil {
		return *x.IsPreferred
	}
	return false
}

func (x *CppQuickAction) GetCommand() *CppQuickActionCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type CppQuickActionCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Id        string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *CppQuickActionCommand) Reset() {
	*x = CppQuickActionCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppQuickActionCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppQuickActionCommand) ProtoMessage() {}

func (x *CppQuickActionCommand) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppQuickActionCommand.ProtoReflect.Descriptor instead.
func (*CppQuickActionCommand) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{414}
}

func (x *CppQuickActionCommand) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CppQuickActionCommand) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CppQuickActionCommand) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type CppQuickActionFireEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel   *PointInTimeModel      `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	QuickActionCommand *CppQuickActionCommand `protobuf:"bytes,2,opt,name=quick_action_command,json=quickActionCommand,proto3" json:"quick_action_command,omitempty"`
	QuickActionEvent   *CppQuickAction        `protobuf:"bytes,3,opt,name=quick_action_event,json=quickActionEvent,proto3" json:"quick_action_event,omitempty"`
}

func (x *CppQuickActionFireEvent) Reset() {
	*x = CppQuickActionFireEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppQuickActionFireEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppQuickActionFireEvent) ProtoMessage() {}

func (x *CppQuickActionFireEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppQuickActionFireEvent.ProtoReflect.Descriptor instead.
func (*CppQuickActionFireEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{415}
}

func (x *CppQuickActionFireEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CppQuickActionFireEvent) GetQuickActionCommand() *CppQuickActionCommand {
	if x != nil {
		return x.QuickActionCommand
	}
	return nil
}

func (x *CppQuickActionFireEvent) GetQuickActionEvent() *CppQuickAction {
	if x != nil {
		return x.QuickActionEvent
	}
	return nil
}

type ModelOpenedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *PointInTimeModel `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *ModelOpenedEvent) Reset() {
	*x = ModelOpenedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOpenedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOpenedEvent) ProtoMessage() {}

func (x *ModelOpenedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOpenedEvent.ProtoReflect.Descriptor instead.
func (*ModelOpenedEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{416}
}

func (x *ModelOpenedEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type CmdKEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel    *PointInTimeModel              `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	RequestId           string                         `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PromptBarId         *string                        `protobuf:"bytes,20,opt,name=prompt_bar_id,json=promptBarId,proto3,oneof" json:"prompt_bar_id,omitempty"`
	SubmitPrompt        *CmdKEvent_SubmitPrompt        `protobuf:"bytes,3,opt,name=submit_prompt,json=submitPrompt,proto3" json:"submit_prompt,omitempty"`
	EndOfGeneration     *CmdKEvent_EndOfGeneration     `protobuf:"bytes,4,opt,name=end_of_generation,json=endOfGeneration,proto3" json:"end_of_generation,omitempty"`
	InterruptGeneration *CmdKEvent_InterruptGeneration `protobuf:"bytes,5,opt,name=interrupt_generation,json=interruptGeneration,proto3" json:"interrupt_generation,omitempty"`
	AcceptAll           *CmdKEvent_AcceptDiffs         `protobuf:"bytes,6,opt,name=accept_all,json=acceptAll,proto3" json:"accept_all,omitempty"`
	RejectAll           *CmdKEvent_RejectDiffs         `protobuf:"bytes,7,opt,name=reject_all,json=rejectAll,proto3" json:"reject_all,omitempty"`
	RejectPartialDiff   *CmdKEvent_RejectPartialDiff   `protobuf:"bytes,8,opt,name=reject_partial_diff,json=rejectPartialDiff,proto3" json:"reject_partial_diff,omitempty"`
	AcceptPartialDiff   *CmdKEvent_AcceptPartialDiff   `protobuf:"bytes,9,opt,name=accept_partial_diff,json=acceptPartialDiff,proto3" json:"accept_partial_diff,omitempty"`
}

func (x *CmdKEvent) Reset() {
	*x = CmdKEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent) ProtoMessage() {}

func (x *CmdKEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent.ProtoReflect.Descriptor instead.
func (*CmdKEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417}
}

func (x *CmdKEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *CmdKEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CmdKEvent) GetPromptBarId() string {
	if x != nil && x.PromptBarId != nil {
		return *x.PromptBarId
	}
	return ""
}

func (x *CmdKEvent) GetSubmitPrompt() *CmdKEvent_SubmitPrompt {
	if x != nil {
		return x.SubmitPrompt
	}
	return nil
}

func (x *CmdKEvent) GetEndOfGeneration() *CmdKEvent_EndOfGeneration {
	if x != nil {
		return x.EndOfGeneration
	}
	return nil
}

func (x *CmdKEvent) GetInterruptGeneration() *CmdKEvent_InterruptGeneration {
	if x != nil {
		return x.InterruptGeneration
	}
	return nil
}

func (x *CmdKEvent) GetAcceptAll() *CmdKEvent_AcceptDiffs {
	if x != nil {
		return x.AcceptAll
	}
	return nil
}

func (x *CmdKEvent) GetRejectAll() *CmdKEvent_RejectDiffs {
	if x != nil {
		return x.RejectAll
	}
	return nil
}

func (x *CmdKEvent) GetRejectPartialDiff() *CmdKEvent_RejectPartialDiff {
	if x != nil {
		return x.RejectPartialDiff
	}
	return nil
}

func (x *CmdKEvent) GetAcceptPartialDiff() *CmdKEvent_AcceptPartialDiff {
	if x != nil {
		return x.AcceptPartialDiff
	}
	return nil
}

type ChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId                    string                                  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SubmitPrompt                 *ChatEvent_SubmitPrompt                 `protobuf:"bytes,2,opt,name=submit_prompt,json=submitPrompt,proto3" json:"submit_prompt,omitempty"`
	EndOfAnyGeneration           *ChatEvent_EndOfAnyGeneration           `protobuf:"bytes,3,opt,name=end_of_any_generation,json=endOfAnyGeneration,proto3" json:"end_of_any_generation,omitempty"`
	EndOfUninterruptedGeneration *ChatEvent_EndOfUninterruptedGeneration `protobuf:"bytes,4,opt,name=end_of_uninterrupted_generation,json=endOfUninterruptedGeneration,proto3" json:"end_of_uninterrupted_generation,omitempty"`
}

func (x *ChatEvent) Reset() {
	*x = ChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent) ProtoMessage() {}

func (x *ChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent.ProtoReflect.Descriptor instead.
func (*ChatEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{418}
}

func (x *ChatEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ChatEvent) GetSubmitPrompt() *ChatEvent_SubmitPrompt {
	if x != nil {
		return x.SubmitPrompt
	}
	return nil
}

func (x *ChatEvent) GetEndOfAnyGeneration() *ChatEvent_EndOfAnyGeneration {
	if x != nil {
		return x.EndOfAnyGeneration
	}
	return nil
}

func (x *ChatEvent) GetEndOfUninterruptedGeneration() *ChatEvent_EndOfUninterruptedGeneration {
	if x != nil {
		return x.EndOfUninterruptedGeneration
	}
	return nil
}

type AiRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestType AiRequestEvent_RequestType `protobuf:"varint,1,opt,name=request_type,json=requestType,proto3,enum=aiserver.v1.AiRequestEvent_RequestType" json:"request_type,omitempty"`
	RequestId   string                     `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *AiRequestEvent) Reset() {
	*x = AiRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AiRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiRequestEvent) ProtoMessage() {}

func (x *AiRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiRequestEvent.ProtoReflect.Descriptor instead.
func (*AiRequestEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{419}
}

func (x *AiRequestEvent) GetRequestType() AiRequestEvent_RequestType {
	if x != nil {
		return x.RequestType
	}
	return AiRequestEvent_REQUEST_TYPE_UNSPECIFIED
}

func (x *AiRequestEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ScrollEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *PointInTimeModel `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	VisibleRanges    []*IRange         `protobuf:"bytes,2,rep,name=visible_ranges,json=visibleRanges,proto3" json:"visible_ranges,omitempty"`
	EditorId         string            `protobuf:"bytes,3,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
}

func (x *ScrollEvent) Reset() {
	*x = ScrollEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollEvent) ProtoMessage() {}

func (x *ScrollEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollEvent.ProtoReflect.Descriptor instead.
func (*ScrollEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{420}
}

func (x *ScrollEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *ScrollEvent) GetVisibleRanges() []*IRange {
	if x != nil {
		return x.VisibleRanges
	}
	return nil
}

func (x *ScrollEvent) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

type EditorCloseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EditorId string `protobuf:"bytes,1,opt,name=editor_id,json=editorId,proto3" json:"editor_id,omitempty"`
}

func (x *EditorCloseEvent) Reset() {
	*x = EditorCloseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditorCloseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorCloseEvent) ProtoMessage() {}

func (x *EditorCloseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorCloseEvent.ProtoReflect.Descriptor instead.
func (*EditorCloseEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{421}
}

func (x *EditorCloseEvent) GetEditorId() string {
	if x != nil {
		return x.EditorId
	}
	return ""
}

type TabCloseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel *MaybeDefinedPointInTimeModel `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *TabCloseEvent) Reset() {
	*x = TabCloseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabCloseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabCloseEvent) ProtoMessage() {}

func (x *TabCloseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabCloseEvent.ProtoReflect.Descriptor instead.
func (*TabCloseEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{422}
}

func (x *TabCloseEvent) GetPointInTimeModel() *MaybeDefinedPointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type MaybeDefinedPointInTimeModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelUuid    *string `protobuf:"bytes,1,opt,name=model_uuid,json=modelUuid,proto3,oneof" json:"model_uuid,omitempty"`
	ModelVersion int32   `protobuf:"varint,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
	RelativePath string  `protobuf:"bytes,3,opt,name=relative_path,json=relativePath,proto3" json:"relative_path,omitempty"`
}

func (x *MaybeDefinedPointInTimeModel) Reset() {
	*x = MaybeDefinedPointInTimeModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaybeDefinedPointInTimeModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaybeDefinedPointInTimeModel) ProtoMessage() {}

func (x *MaybeDefinedPointInTimeModel) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaybeDefinedPointInTimeModel.ProtoReflect.Descriptor instead.
func (*MaybeDefinedPointInTimeModel) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{423}
}

func (x *MaybeDefinedPointInTimeModel) GetModelUuid() string {
	if x != nil && x.ModelUuid != nil {
		return *x.ModelUuid
	}
	return ""
}

func (x *MaybeDefinedPointInTimeModel) GetModelVersion() int32 {
	if x != nil {
		return x.ModelVersion
	}
	return 0
}

func (x *MaybeDefinedPointInTimeModel) GetRelativePath() string {
	if x != nil {
		return x.RelativePath
	}
	return ""
}

type CppPartialAcceptEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSuggestion    *CurrentlyShownCppSuggestion `protobuf:"bytes,1,opt,name=cpp_suggestion,json=cppSuggestion,proto3" json:"cpp_suggestion,omitempty"`
	Edit             *Edit                        `protobuf:"bytes,2,opt,name=edit,proto3" json:"edit,omitempty"`
	PointInTimeModel *PointInTimeModel            `protobuf:"bytes,3,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *CppPartialAcceptEvent) Reset() {
	*x = CppPartialAcceptEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppPartialAcceptEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppPartialAcceptEvent) ProtoMessage() {}

func (x *CppPartialAcceptEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppPartialAcceptEvent.ProtoReflect.Descriptor instead.
func (*CppPartialAcceptEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{424}
}

func (x *CppPartialAcceptEvent) GetCppSuggestion() *CurrentlyShownCppSuggestion {
	if x != nil {
		return x.CppSuggestion
	}
	return nil
}

func (x *CppPartialAcceptEvent) GetEdit() *Edit {
	if x != nil {
		return x.Edit
	}
	return nil
}

func (x *CppPartialAcceptEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Range *IRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Edit) Reset() {
	*x = Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edit) ProtoMessage() {}

func (x *Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edit.ProtoReflect.Descriptor instead.
func (*Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{425}
}

func (x *Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Edit) GetRange() *IRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type AcceptCursorPredictionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorPrediction *CursorPrediction `protobuf:"bytes,1,opt,name=cursor_prediction,json=cursorPrediction,proto3" json:"cursor_prediction,omitempty"`
	PointInTimeModel *PointInTimeModel `protobuf:"bytes,2,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *AcceptCursorPredictionEvent) Reset() {
	*x = AcceptCursorPredictionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptCursorPredictionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptCursorPredictionEvent) ProtoMessage() {}

func (x *AcceptCursorPredictionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptCursorPredictionEvent.ProtoReflect.Descriptor instead.
func (*AcceptCursorPredictionEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{426}
}

func (x *AcceptCursorPredictionEvent) GetCursorPrediction() *CursorPrediction {
	if x != nil {
		return x.CursorPrediction
	}
	return nil
}

func (x *AcceptCursorPredictionEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type CursorPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId    string                                  `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	PredictionId int32                                   `protobuf:"varint,2,opt,name=prediction_id,json=predictionId,proto3" json:"prediction_id,omitempty"`
	LineNumber   int32                                   `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Source       CursorPrediction_CursorPredictionSource `protobuf:"varint,4,opt,name=source,proto3,enum=aiserver.v1.CursorPrediction_CursorPredictionSource" json:"source,omitempty"`
}

func (x *CursorPrediction) Reset() {
	*x = CursorPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorPrediction) ProtoMessage() {}

func (x *CursorPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorPrediction.ProtoReflect.Descriptor instead.
func (*CursorPrediction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{427}
}

func (x *CursorPrediction) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CursorPrediction) GetPredictionId() int32 {
	if x != nil {
		return x.PredictionId
	}
	return 0
}

func (x *CursorPrediction) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *CursorPrediction) GetSource() CursorPrediction_CursorPredictionSource {
	if x != nil {
		return x.Source
	}
	return CursorPrediction_CURSOR_PREDICTION_SOURCE_UNSPECIFIED
}

type RejectCursorPredictionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorPrediction *CursorPrediction `protobuf:"bytes,1,opt,name=cursor_prediction,json=cursorPrediction,proto3" json:"cursor_prediction,omitempty"`
	PointInTimeModel *PointInTimeModel `protobuf:"bytes,2,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *RejectCursorPredictionEvent) Reset() {
	*x = RejectCursorPredictionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCursorPredictionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCursorPredictionEvent) ProtoMessage() {}

func (x *RejectCursorPredictionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCursorPredictionEvent.ProtoReflect.Descriptor instead.
func (*RejectCursorPredictionEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{428}
}

func (x *RejectCursorPredictionEvent) GetCursorPrediction() *CursorPrediction {
	if x != nil {
		return x.CursorPrediction
	}
	return nil
}

func (x *RejectCursorPredictionEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type SuggestCursorPredictionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CursorPrediction *CursorPrediction `protobuf:"bytes,1,opt,name=cursor_prediction,json=cursorPrediction,proto3" json:"cursor_prediction,omitempty"`
	PointInTimeModel *PointInTimeModel `protobuf:"bytes,2,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
}

func (x *SuggestCursorPredictionEvent) Reset() {
	*x = SuggestCursorPredictionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestCursorPredictionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestCursorPredictionEvent) ProtoMessage() {}

func (x *SuggestCursorPredictionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestCursorPredictionEvent.ProtoReflect.Descriptor instead.
func (*SuggestCursorPredictionEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{429}
}

func (x *SuggestCursorPredictionEvent) GetCursorPrediction() *CursorPrediction {
	if x != nil {
		return x.CursorPrediction
	}
	return nil
}

func (x *SuggestCursorPredictionEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

type CppTriggerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenerationUuid string `protobuf:"bytes,1,opt,name=generation_uuid,json=generationUuid,proto3" json:"generation_uuid,omitempty"`
	ModelVersion   int32  `protobuf:"varint,2,opt,name=model_version,json=modelVersion,proto3" json:"model_version,omitempty"`
}

func (x *CppTriggerEvent) Reset() {
	*x = CppTriggerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppTriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppTriggerEvent) ProtoMessage() {}

func (x *CppTriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppTriggerEvent.ProtoReflect.Descriptor instead.
func (*CppTriggerEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{430}
}

func (x *CppTriggerEvent) GetGenerationUuid() string {
	if x != nil {
		return x.GenerationUuid
	}
	return ""
}

func (x *CppTriggerEvent) GetModelVersion() int32 {
	if x != nil {
		return x.ModelVersion
	}
	return 0
}

type FinishedCppGenerationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointInTimeModel   *PointInTimeModel   `protobuf:"bytes,1,opt,name=point_in_time_model,json=pointInTimeModel,proto3" json:"point_in_time_model,omitempty"`
	RecoverableCppData *RecoverableCppData `protobuf:"bytes,2,opt,name=recoverable_cpp_data,json=recoverableCppData,proto3" json:"recoverable_cpp_data,omitempty"`
}

func (x *FinishedCppGenerationEvent) Reset() {
	*x = FinishedCppGenerationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishedCppGenerationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishedCppGenerationEvent) ProtoMessage() {}

func (x *FinishedCppGenerationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishedCppGenerationEvent.ProtoReflect.Descriptor instead.
func (*FinishedCppGenerationEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{431}
}

func (x *FinishedCppGenerationEvent) GetPointInTimeModel() *PointInTimeModel {
	if x != nil {
		return x.PointInTimeModel
	}
	return nil
}

func (x *FinishedCppGenerationEvent) GetRecoverableCppData() *RecoverableCppData {
	if x != nil {
		return x.RecoverableCppData
	}
	return nil
}

type BackgroundFilesEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*BackgroundFilesEvent_BackgroundFile `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *BackgroundFilesEvent) Reset() {
	*x = BackgroundFilesEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundFilesEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundFilesEvent) ProtoMessage() {}

func (x *BackgroundFilesEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundFilesEvent.ProtoReflect.Descriptor instead.
func (*BackgroundFilesEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{432}
}

func (x *BackgroundFilesEvent) GetFiles() []*BackgroundFilesEvent_BackgroundFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type CppTerminalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminalId      int32                             `protobuf:"varint,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	TerminalPath    string                            `protobuf:"bytes,2,opt,name=terminal_path,json=terminalPath,proto3" json:"terminal_path,omitempty"`
	TerminalCwd     *string                           `protobuf:"bytes,6,opt,name=terminal_cwd,json=terminalCwd,proto3,oneof" json:"terminal_cwd,omitempty"`
	TerminalInput   *CppTerminalEvent_TerminalInput   `protobuf:"bytes,3,opt,name=terminal_input,json=terminalInput,proto3" json:"terminal_input,omitempty"`
	CommandStarted  *CppTerminalEvent_CommandStarted  `protobuf:"bytes,4,opt,name=command_started,json=commandStarted,proto3" json:"command_started,omitempty"`
	CommandFinished *CppTerminalEvent_CommandFinished `protobuf:"bytes,5,opt,name=command_finished,json=commandFinished,proto3" json:"command_finished,omitempty"`
}

func (x *CppTerminalEvent) Reset() {
	*x = CppTerminalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppTerminalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppTerminalEvent) ProtoMessage() {}

func (x *CppTerminalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppTerminalEvent.ProtoReflect.Descriptor instead.
func (*CppTerminalEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{433}
}

func (x *CppTerminalEvent) GetTerminalId() int32 {
	if x != nil {
		return x.TerminalId
	}
	return 0
}

func (x *CppTerminalEvent) GetTerminalPath() string {
	if x != nil {
		return x.TerminalPath
	}
	return ""
}

func (x *CppTerminalEvent) GetTerminalCwd() string {
	if x != nil && x.TerminalCwd != nil {
		return *x.TerminalCwd
	}
	return ""
}

func (x *CppTerminalEvent) GetTerminalInput() *CppTerminalEvent_TerminalInput {
	if x != nil {
		return x.TerminalInput
	}
	return nil
}

func (x *CppTerminalEvent) GetCommandStarted() *CppTerminalEvent_CommandStarted {
	if x != nil {
		return x.CommandStarted
	}
	return nil
}

func (x *CppTerminalEvent) GetCommandFinished() *CppTerminalEvent_CommandFinished {
	if x != nil {
		return x.CommandFinished
	}
	return nil
}

type CppGitContextEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                          `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RootFsPath            string                          `protobuf:"bytes,2,opt,name=root_fs_path,json=rootFsPath,proto3" json:"root_fs_path,omitempty"`
	Head                  *CppGitContextEvent_Head        `protobuf:"bytes,3,opt,name=head,proto3,oneof" json:"head,omitempty"`
	Refs                  []*CppGitContextEvent_Ref       `protobuf:"bytes,4,rep,name=refs,proto3" json:"refs,omitempty"`
	Remotes               []*CppGitContextEvent_Remote    `protobuf:"bytes,5,rep,name=remotes,proto3" json:"remotes,omitempty"`
	Submodules            []*CppGitContextEvent_Submodule `protobuf:"bytes,6,rep,name=submodules,proto3" json:"submodules,omitempty"`
	RebaseCommit          *CppGitContextEvent_Commit      `protobuf:"bytes,7,opt,name=rebase_commit,json=rebaseCommit,proto3,oneof" json:"rebase_commit,omitempty"`
	MergeChanges          []*CppGitContextEvent_Change    `protobuf:"bytes,8,rep,name=merge_changes,json=mergeChanges,proto3" json:"merge_changes,omitempty"`
	IndexChanges          []*CppGitContextEvent_Change    `protobuf:"bytes,9,rep,name=index_changes,json=indexChanges,proto3" json:"index_changes,omitempty"`
	WorkingTreeChanges    []*CppGitContextEvent_Change    `protobuf:"bytes,10,rep,name=working_tree_changes,json=workingTreeChanges,proto3" json:"working_tree_changes,omitempty"`
}

func (x *CppGitContextEvent) Reset() {
	*x = CppGitContextEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent) ProtoMessage() {}

func (x *CppGitContextEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434}
}

func (x *CppGitContextEvent) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CppGitContextEvent) GetRootFsPath() string {
	if x != nil {
		return x.RootFsPath
	}
	return ""
}

func (x *CppGitContextEvent) GetHead() *CppGitContextEvent_Head {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *CppGitContextEvent) GetRefs() []*CppGitContextEvent_Ref {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *CppGitContextEvent) GetRemotes() []*CppGitContextEvent_Remote {
	if x != nil {
		return x.Remotes
	}
	return nil
}

func (x *CppGitContextEvent) GetSubmodules() []*CppGitContextEvent_Submodule {
	if x != nil {
		return x.Submodules
	}
	return nil
}

func (x *CppGitContextEvent) GetRebaseCommit() *CppGitContextEvent_Commit {
	if x != nil {
		return x.RebaseCommit
	}
	return nil
}

func (x *CppGitContextEvent) GetMergeChanges() []*CppGitContextEvent_Change {
	if x != nil {
		return x.MergeChanges
	}
	return nil
}

func (x *CppGitContextEvent) GetIndexChanges() []*CppGitContextEvent_Change {
	if x != nil {
		return x.IndexChanges
	}
	return nil
}

func (x *CppGitContextEvent) GetWorkingTreeChanges() []*CppGitContextEvent_Change {
	if x != nil {
		return x.WorkingTreeChanges
	}
	return nil
}

type CppHistoryAppendEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelChange        *ModelChange           `protobuf:"bytes,1,opt,name=model_change,json=modelChange,proto3" json:"model_change,omitempty"`
	AcceptEvent        *CppAcceptEvent        `protobuf:"bytes,2,opt,name=accept_event,json=acceptEvent,proto3" json:"accept_event,omitempty"`
	RejectEvent        *CppRejectEvent        `protobuf:"bytes,3,opt,name=reject_event,json=rejectEvent,proto3" json:"reject_event,omitempty"`
	ManualTriggerEvent *CppManualTriggerEvent `protobuf:"bytes,4,opt,name=manual_trigger_event,json=manualTriggerEvent,proto3" json:"manual_trigger_event,omitempty"`
	FinalModelHash     *string                `protobuf:"bytes,10,opt,name=final_model_hash,json=finalModelHash,proto3,oneof" json:"final_model_hash,omitempty"`
}

func (x *CppHistoryAppendEvent) Reset() {
	*x = CppHistoryAppendEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppHistoryAppendEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppHistoryAppendEvent) ProtoMessage() {}

func (x *CppHistoryAppendEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppHistoryAppendEvent.ProtoReflect.Descriptor instead.
func (*CppHistoryAppendEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{435}
}

func (x *CppHistoryAppendEvent) GetModelChange() *ModelChange {
	if x != nil {
		return x.ModelChange
	}
	return nil
}

func (x *CppHistoryAppendEvent) GetAcceptEvent() *CppAcceptEvent {
	if x != nil {
		return x.AcceptEvent
	}
	return nil
}

func (x *CppHistoryAppendEvent) GetRejectEvent() *CppRejectEvent {
	if x != nil {
		return x.RejectEvent
	}
	return nil
}

func (x *CppHistoryAppendEvent) GetManualTriggerEvent() *CppManualTriggerEvent {
	if x != nil {
		return x.ManualTriggerEvent
	}
	return nil
}

func (x *CppHistoryAppendEvent) GetFinalModelHash() string {
	if x != nil && x.FinalModelHash != nil {
		return *x.FinalModelHash
	}
	return ""
}

type CppAcceptEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSuggestion *CppSuggestion `protobuf:"bytes,1,opt,name=cpp_suggestion,json=cppSuggestion,proto3" json:"cpp_suggestion,omitempty"`
}

func (x *CppAcceptEvent) Reset() {
	*x = CppAcceptEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppAcceptEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppAcceptEvent) ProtoMessage() {}

func (x *CppAcceptEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppAcceptEvent.ProtoReflect.Descriptor instead.
func (*CppAcceptEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{436}
}

func (x *CppAcceptEvent) GetCppSuggestion() *CppSuggestion {
	if x != nil {
		return x.CppSuggestion
	}
	return nil
}

type CppSuggestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SuggestionText            string                    `protobuf:"bytes,1,opt,name=suggestion_text,json=suggestionText,proto3" json:"suggestion_text,omitempty"`
	Range                     *IRange                   `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Seen                      bool                      `protobuf:"varint,5,opt,name=seen,proto3" json:"seen,omitempty"`
	EditorSelectionBeforePeek *SelectionWithOrientation `protobuf:"bytes,6,opt,name=editor_selection_before_peek,json=editorSelectionBeforePeek,proto3" json:"editor_selection_before_peek,omitempty"`
}

func (x *CppSuggestion) Reset() {
	*x = CppSuggestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppSuggestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppSuggestion) ProtoMessage() {}

func (x *CppSuggestion) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppSuggestion.ProtoReflect.Descriptor instead.
func (*CppSuggestion) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{437}
}

func (x *CppSuggestion) GetSuggestionText() string {
	if x != nil {
		return x.SuggestionText
	}
	return ""
}

func (x *CppSuggestion) GetRange() *IRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CppSuggestion) GetSeen() bool {
	if x != nil {
		return x.Seen
	}
	return false
}

func (x *CppSuggestion) GetEditorSelectionBeforePeek() *SelectionWithOrientation {
	if x != nil {
		return x.EditorSelectionBeforePeek
	}
	return nil
}

type SelectionWithOrientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectionStartLineNumber int32 `protobuf:"varint,1,opt,name=selection_start_line_number,json=selectionStartLineNumber,proto3" json:"selection_start_line_number,omitempty"`
	SelectionStartColumn     int32 `protobuf:"varint,2,opt,name=selection_start_column,json=selectionStartColumn,proto3" json:"selection_start_column,omitempty"`
	PositionLineNumber       int32 `protobuf:"varint,3,opt,name=position_line_number,json=positionLineNumber,proto3" json:"position_line_number,omitempty"`
	PositionColumn           int32 `protobuf:"varint,4,opt,name=position_column,json=positionColumn,proto3" json:"position_column,omitempty"`
}

func (x *SelectionWithOrientation) Reset() {
	*x = SelectionWithOrientation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectionWithOrientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectionWithOrientation) ProtoMessage() {}

func (x *SelectionWithOrientation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectionWithOrientation.ProtoReflect.Descriptor instead.
func (*SelectionWithOrientation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{438}
}

func (x *SelectionWithOrientation) GetSelectionStartLineNumber() int32 {
	if x != nil {
		return x.SelectionStartLineNumber
	}
	return 0
}

func (x *SelectionWithOrientation) GetSelectionStartColumn() int32 {
	if x != nil {
		return x.SelectionStartColumn
	}
	return 0
}

func (x *SelectionWithOrientation) GetPositionLineNumber() int32 {
	if x != nil {
		return x.PositionLineNumber
	}
	return 0
}

func (x *SelectionWithOrientation) GetPositionColumn() int32 {
	if x != nil {
		return x.PositionColumn
	}
	return 0
}

type CppRejectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CppSuggestion *CppSuggestion `protobuf:"bytes,1,opt,name=cpp_suggestion,json=cppSuggestion,proto3" json:"cpp_suggestion,omitempty"`
}

func (x *CppRejectEvent) Reset() {
	*x = CppRejectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppRejectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppRejectEvent) ProtoMessage() {}

func (x *CppRejectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppRejectEvent.ProtoReflect.Descriptor instead.
func (*CppRejectEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{439}
}

func (x *CppRejectEvent) GetCppSuggestion() *CppSuggestion {
	if x != nil {
		return x.CppSuggestion
	}
	return nil
}

type CppManualTriggerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *CursorPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CppManualTriggerEvent) Reset() {
	*x = CppManualTriggerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppManualTriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppManualTriggerEvent) ProtoMessage() {}

func (x *CppManualTriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppManualTriggerEvent.ProtoReflect.Descriptor instead.
func (*CppManualTriggerEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{440}
}

func (x *CppManualTriggerEvent) GetPosition() *CursorPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type EditHistoryAppendChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *EditHistoryAppendChangesResponse) Reset() {
	*x = EditHistoryAppendChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditHistoryAppendChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditHistoryAppendChangesResponse) ProtoMessage() {}

func (x *EditHistoryAppendChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditHistoryAppendChangesResponse.ProtoReflect.Descriptor instead.
func (*EditHistoryAppendChangesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{441}
}

func (x *EditHistoryAppendChangesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DevOnlyGetPastRequestIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count *int32 `protobuf:"varint,1,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Page  *int32 `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
}

func (x *DevOnlyGetPastRequestIdsRequest) Reset() {
	*x = DevOnlyGetPastRequestIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevOnlyGetPastRequestIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevOnlyGetPastRequestIdsRequest) ProtoMessage() {}

func (x *DevOnlyGetPastRequestIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevOnlyGetPastRequestIdsRequest.ProtoReflect.Descriptor instead.
func (*DevOnlyGetPastRequestIdsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{442}
}

func (x *DevOnlyGetPastRequestIdsRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *DevOnlyGetPastRequestIdsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type DevOnlyGetPastRequestIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PastRequests []*DevOnlyPastRequest `protobuf:"bytes,1,rep,name=past_requests,json=pastRequests,proto3" json:"past_requests,omitempty"`
	TotalCount   int32                 `protobuf:"varint,10,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	HasMore      bool                  `protobuf:"varint,11,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
}

func (x *DevOnlyGetPastRequestIdsResponse) Reset() {
	*x = DevOnlyGetPastRequestIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevOnlyGetPastRequestIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevOnlyGetPastRequestIdsResponse) ProtoMessage() {}

func (x *DevOnlyGetPastRequestIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevOnlyGetPastRequestIdsResponse.ProtoReflect.Descriptor instead.
func (*DevOnlyGetPastRequestIdsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{443}
}

func (x *DevOnlyGetPastRequestIdsResponse) GetPastRequests() []*DevOnlyPastRequest {
	if x != nil {
		return x.PastRequests
	}
	return nil
}

func (x *DevOnlyGetPastRequestIdsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *DevOnlyGetPastRequestIdsResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type DevOnlyPastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DateTime            string `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	ModelName           string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	FeatureName         string `protobuf:"bytes,4,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	S3Uri               string `protobuf:"bytes,5,opt,name=s3_uri,json=s3Uri,proto3" json:"s3_uri,omitempty"`
	Status              string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	NumPromptTokens     int32  `protobuf:"varint,7,opt,name=num_prompt_tokens,json=numPromptTokens,proto3" json:"num_prompt_tokens,omitempty"`
	NumCompletionTokens int32  `protobuf:"varint,8,opt,name=num_completion_tokens,json=numCompletionTokens,proto3" json:"num_completion_tokens,omitempty"`
	ApiCallMethod       string `protobuf:"bytes,9,opt,name=api_call_method,json=apiCallMethod,proto3" json:"api_call_method,omitempty"`
}

func (x *DevOnlyPastRequest) Reset() {
	*x = DevOnlyPastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevOnlyPastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevOnlyPastRequest) ProtoMessage() {}

func (x *DevOnlyPastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevOnlyPastRequest.ProtoReflect.Descriptor instead.
func (*DevOnlyPastRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{444}
}

func (x *DevOnlyPastRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DevOnlyPastRequest) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *DevOnlyPastRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *DevOnlyPastRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *DevOnlyPastRequest) GetS3Uri() string {
	if x != nil {
		return x.S3Uri
	}
	return ""
}

func (x *DevOnlyPastRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DevOnlyPastRequest) GetNumPromptTokens() int32 {
	if x != nil {
		return x.NumPromptTokens
	}
	return 0
}

func (x *DevOnlyPastRequest) GetNumCompletionTokens() int32 {
	if x != nil {
		return x.NumCompletionTokens
	}
	return 0
}

func (x *DevOnlyPastRequest) GetApiCallMethod() string {
	if x != nil {
		return x.ApiCallMethod
	}
	return ""
}

type GetFilesForComposerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conversation      []*ConversationMessage `protobuf:"bytes,1,rep,name=conversation,proto3" json:"conversation,omitempty"`
	Files             []*CurrentFileInfo     `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	RerankResults     *bool                  `protobuf:"varint,3,opt,name=rerank_results,json=rerankResults,proto3,oneof" json:"rerank_results,omitempty"`
	FileSearchResults *FullFileSearchResult  `protobuf:"bytes,4,opt,name=file_search_results,json=fileSearchResults,proto3" json:"file_search_results,omitempty"`
	CodeSearchResults *CodeSearchResult      `protobuf:"bytes,5,opt,name=code_search_results,json=codeSearchResults,proto3" json:"code_search_results,omitempty"`
	RerankResultsV2   *bool                  `protobuf:"varint,6,opt,name=rerank_results_v2,json=rerankResultsV2,proto3,oneof" json:"rerank_results_v2,omitempty"`
	LongContextMode   *bool                  `protobuf:"varint,7,opt,name=long_context_mode,json=longContextMode,proto3,oneof" json:"long_context_mode,omitempty"`
	IsEval            *bool                  `protobuf:"varint,8,opt,name=is_eval,json=isEval,proto3,oneof" json:"is_eval,omitempty"`
	RequestId         *string                `protobuf:"bytes,9,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
	ModelDetails      *ModelDetails          `protobuf:"bytes,10,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
}

func (x *GetFilesForComposerRequest) Reset() {
	*x = GetFilesForComposerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesForComposerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesForComposerRequest) ProtoMessage() {}

func (x *GetFilesForComposerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesForComposerRequest.ProtoReflect.Descriptor instead.
func (*GetFilesForComposerRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{445}
}

func (x *GetFilesForComposerRequest) GetConversation() []*ConversationMessage {
	if x != nil {
		return x.Conversation
	}
	return nil
}

func (x *GetFilesForComposerRequest) GetFiles() []*CurrentFileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GetFilesForComposerRequest) GetRerankResults() bool {
	if x != nil && x.RerankResults != nil {
		return *x.RerankResults
	}
	return false
}

func (x *GetFilesForComposerRequest) GetFileSearchResults() *FullFileSearchResult {
	if x != nil {
		return x.FileSearchResults
	}
	return nil
}

func (x *GetFilesForComposerRequest) GetCodeSearchResults() *CodeSearchResult {
	if x != nil {
		return x.CodeSearchResults
	}
	return nil
}

func (x *GetFilesForComposerRequest) GetRerankResultsV2() bool {
	if x != nil && x.RerankResultsV2 != nil {
		return *x.RerankResultsV2
	}
	return false
}

func (x *GetFilesForComposerRequest) GetLongContextMode() bool {
	if x != nil && x.LongContextMode != nil {
		return *x.LongContextMode
	}
	return false
}

func (x *GetFilesForComposerRequest) GetIsEval() bool {
	if x != nil && x.IsEval != nil {
		return *x.IsEval
	}
	return false
}

func (x *GetFilesForComposerRequest) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *GetFilesForComposerRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

type GetFilesForComposerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePaths []string `protobuf:"bytes,1,rep,name=relative_workspace_paths,json=relativeWorkspacePaths,proto3" json:"relative_workspace_paths,omitempty"`
}

func (x *GetFilesForComposerResponse) Reset() {
	*x = GetFilesForComposerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilesForComposerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilesForComposerResponse) ProtoMessage() {}

func (x *GetFilesForComposerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilesForComposerResponse.ProtoReflect.Descriptor instead.
func (*GetFilesForComposerResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{446}
}

func (x *GetFilesForComposerResponse) GetRelativeWorkspacePaths() []string {
	if x != nil {
		return x.RelativeWorkspacePaths
	}
	return nil
}

type TryParseTypeScriptTreeSitterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceRelativePath string `protobuf:"bytes,1,opt,name=workspace_relative_path,json=workspaceRelativePath,proto3" json:"workspace_relative_path,omitempty"`
	Text                  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TryParseTypeScriptTreeSitterRequest) Reset() {
	*x = TryParseTypeScriptTreeSitterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryParseTypeScriptTreeSitterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryParseTypeScriptTreeSitterRequest) ProtoMessage() {}

func (x *TryParseTypeScriptTreeSitterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryParseTypeScriptTreeSitterRequest.ProtoReflect.Descriptor instead.
func (*TryParseTypeScriptTreeSitterRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{447}
}

func (x *TryParseTypeScriptTreeSitterRequest) GetWorkspaceRelativePath() string {
	if x != nil {
		return x.WorkspaceRelativePath
	}
	return ""
}

func (x *TryParseTypeScriptTreeSitterRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TryParseTypeScriptTreeSitterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TryParseTypeScriptTreeSitterResponse) Reset() {
	*x = TryParseTypeScriptTreeSitterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TryParseTypeScriptTreeSitterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryParseTypeScriptTreeSitterResponse) ProtoMessage() {}

func (x *TryParseTypeScriptTreeSitterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryParseTypeScriptTreeSitterResponse.ProtoReflect.Descriptor instead.
func (*TryParseTypeScriptTreeSitterResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{448}
}

func (x *TryParseTypeScriptTreeSitterResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type NameTabRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ConversationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *NameTabRequest) Reset() {
	*x = NameTabRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameTabRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameTabRequest) ProtoMessage() {}

func (x *NameTabRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameTabRequest.ProtoReflect.Descriptor instead.
func (*NameTabRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{449}
}

func (x *NameTabRequest) GetMessages() []*ConversationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type NameTabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameTabResponse) Reset() {
	*x = NameTabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameTabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameTabResponse) ProtoMessage() {}

func (x *NameTabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameTabResponse.ProtoReflect.Descriptor instead.
func (*NameTabResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{450}
}

func (x *NameTabResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TestModelStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *TestModelStatusRequest) Reset() {
	*x = TestModelStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestModelStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestModelStatusRequest) ProtoMessage() {}

func (x *TestModelStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestModelStatusRequest.ProtoReflect.Descriptor instead.
func (*TestModelStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{451}
}

func (x *TestModelStatusRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type TestModelStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                 string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Latency              float32 `protobuf:"fixed32,2,opt,name=latency,proto3" json:"latency,omitempty"`
	Ttft                 float32 `protobuf:"fixed32,3,opt,name=ttft,proto3" json:"ttft,omitempty"`
	MaxTimeBetweenChunks float32 `protobuf:"fixed32,4,opt,name=max_time_between_chunks,json=maxTimeBetweenChunks,proto3" json:"max_time_between_chunks,omitempty"`
	ServerTiming         string  `protobuf:"bytes,5,opt,name=server_timing,json=serverTiming,proto3" json:"server_timing,omitempty"`
}

func (x *TestModelStatusResponse) Reset() {
	*x = TestModelStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestModelStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestModelStatusResponse) ProtoMessage() {}

func (x *TestModelStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestModelStatusResponse.ProtoReflect.Descriptor instead.
func (*TestModelStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{452}
}

func (x *TestModelStatusResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TestModelStatusResponse) GetLatency() float32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *TestModelStatusResponse) GetTtft() float32 {
	if x != nil {
		return x.Ttft
	}
	return 0
}

func (x *TestModelStatusResponse) GetMaxTimeBetweenChunks() float32 {
	if x != nil {
		return x.MaxTimeBetweenChunks
	}
	return 0
}

func (x *TestModelStatusResponse) GetServerTiming() string {
	if x != nil {
		return x.ServerTiming
	}
	return ""
}

type FastRepoInitHandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository              *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	RootHash                string          `protobuf:"bytes,2,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	PotentialLegacyRepoName string          `protobuf:"bytes,3,opt,name=potential_legacy_repo_name,json=potentialLegacyRepoName,proto3" json:"potential_legacy_repo_name,omitempty"`
}

func (x *FastRepoInitHandshakeRequest) Reset() {
	*x = FastRepoInitHandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastRepoInitHandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRepoInitHandshakeRequest) ProtoMessage() {}

func (x *FastRepoInitHandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRepoInitHandshakeRequest.ProtoReflect.Descriptor instead.
func (*FastRepoInitHandshakeRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{453}
}

func (x *FastRepoInitHandshakeRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FastRepoInitHandshakeRequest) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *FastRepoInitHandshakeRequest) GetPotentialLegacyRepoName() string {
	if x != nil {
		return x.PotentialLegacyRepoName
	}
	return ""
}

type FastRepoInitHandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   FastRepoInitHandshakeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.FastRepoInitHandshakeResponse_Status" json:"status,omitempty"`
	RepoName string                               `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *FastRepoInitHandshakeResponse) Reset() {
	*x = FastRepoInitHandshakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastRepoInitHandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRepoInitHandshakeResponse) ProtoMessage() {}

func (x *FastRepoInitHandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRepoInitHandshakeResponse.ProtoReflect.Descriptor instead.
func (*FastRepoInitHandshakeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{454}
}

func (x *FastRepoInitHandshakeResponse) GetStatus() FastRepoInitHandshakeResponse_Status {
	if x != nil {
		return x.Status
	}
	return FastRepoInitHandshakeResponse_STATUS_UNSPECIFIED
}

func (x *FastRepoInitHandshakeResponse) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type SyncMerkleSubtreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository       *RepositoryInfo  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	LocalPartialPath *PartialPathItem `protobuf:"bytes,2,opt,name=local_partial_path,json=localPartialPath,proto3" json:"local_partial_path,omitempty"`
}

func (x *SyncMerkleSubtreeRequest) Reset() {
	*x = SyncMerkleSubtreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMerkleSubtreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMerkleSubtreeRequest) ProtoMessage() {}

func (x *SyncMerkleSubtreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMerkleSubtreeRequest.ProtoReflect.Descriptor instead.
func (*SyncMerkleSubtreeRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{455}
}

func (x *SyncMerkleSubtreeRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *SyncMerkleSubtreeRequest) GetLocalPartialPath() *PartialPathItem {
	if x != nil {
		return x.LocalPartialPath
	}
	return nil
}

type PartialPathItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	HashOfNode            string `protobuf:"bytes,2,opt,name=hash_of_node,json=hashOfNode,proto3" json:"hash_of_node,omitempty"`
}

func (x *PartialPathItem) Reset() {
	*x = PartialPathItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialPathItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialPathItem) ProtoMessage() {}

func (x *PartialPathItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialPathItem.ProtoReflect.Descriptor instead.
func (*PartialPathItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{456}
}

func (x *PartialPathItem) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *PartialPathItem) GetHashOfNode() string {
	if x != nil {
		return x.HashOfNode
	}
	return ""
}

type SyncMerkleSubtreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match    bool                                `protobuf:"varint,1,opt,name=match,proto3" json:"match,omitempty"`
	Mismatch *SyncMerkleSubtreeResponse_Mismatch `protobuf:"bytes,2,opt,name=mismatch,proto3" json:"mismatch,omitempty"`
}

func (x *SyncMerkleSubtreeResponse) Reset() {
	*x = SyncMerkleSubtreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMerkleSubtreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMerkleSubtreeResponse) ProtoMessage() {}

func (x *SyncMerkleSubtreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMerkleSubtreeResponse.ProtoReflect.Descriptor instead.
func (*SyncMerkleSubtreeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{457}
}

func (x *SyncMerkleSubtreeResponse) GetMatch() bool {
	if x != nil {
		return x.Match
	}
	return false
}

func (x *SyncMerkleSubtreeResponse) GetMismatch() *SyncMerkleSubtreeResponse_Mismatch {
	if x != nil {
		return x.Mismatch
	}
	return nil
}

type FastUpdateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository     *RepositoryInfo                  `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Directory      *PartialPathItem                 `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
	LocalFile      *FastUpdateFileRequest_LocalFile `protobuf:"bytes,3,opt,name=local_file,json=localFile,proto3" json:"local_file,omitempty"`
	AncestorSpline []*PartialPathItem               `protobuf:"bytes,4,rep,name=ancestor_spline,json=ancestorSpline,proto3" json:"ancestor_spline,omitempty"`
	UpdateType     FastUpdateFileRequest_UpdateType `protobuf:"varint,5,opt,name=update_type,json=updateType,proto3,enum=aiserver.v1.FastUpdateFileRequest_UpdateType" json:"update_type,omitempty"`
}

func (x *FastUpdateFileRequest) Reset() {
	*x = FastUpdateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastUpdateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastUpdateFileRequest) ProtoMessage() {}

func (x *FastUpdateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastUpdateFileRequest.ProtoReflect.Descriptor instead.
func (*FastUpdateFileRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{458}
}

func (x *FastUpdateFileRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *FastUpdateFileRequest) GetDirectory() *PartialPathItem {
	if x != nil {
		return x.Directory
	}
	return nil
}

func (x *FastUpdateFileRequest) GetLocalFile() *FastUpdateFileRequest_LocalFile {
	if x != nil {
		return x.LocalFile
	}
	return nil
}

func (x *FastUpdateFileRequest) GetAncestorSpline() []*PartialPathItem {
	if x != nil {
		return x.AncestorSpline
	}
	return nil
}

func (x *FastUpdateFileRequest) GetUpdateType() FastUpdateFileRequest_UpdateType {
	if x != nil {
		return x.UpdateType
	}
	return FastUpdateFileRequest_UPDATE_TYPE_UNSPECIFIED
}

type FastUpdateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status FastUpdateFileResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.FastUpdateFileResponse_Status" json:"status,omitempty"`
}

func (x *FastUpdateFileResponse) Reset() {
	*x = FastUpdateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastUpdateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastUpdateFileResponse) ProtoMessage() {}

func (x *FastUpdateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastUpdateFileResponse.ProtoReflect.Descriptor instead.
func (*FastUpdateFileResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{459}
}

func (x *FastUpdateFileResponse) GetStatus() FastUpdateFileResponse_Status {
	if x != nil {
		return x.Status
	}
	return FastUpdateFileResponse_STATUS_UNSPECIFIED
}

type SearchRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query               string          `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Repository          *RepositoryInfo `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	TopK                int32           `protobuf:"varint,3,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	ModelDetails        *ModelDetails   `protobuf:"bytes,4,opt,name=model_details,json=modelDetails,proto3" json:"model_details,omitempty"`
	Rerank              bool            `protobuf:"varint,5,opt,name=rerank,proto3" json:"rerank,omitempty"`
	ContextCacheRequest *bool           `protobuf:"varint,6,opt,name=context_cache_request,json=contextCacheRequest,proto3,oneof" json:"context_cache_request,omitempty"`
	GlobFilter          *string         `protobuf:"bytes,7,opt,name=glob_filter,json=globFilter,proto3,oneof" json:"glob_filter,omitempty"`
	NotGlobFilter       *string         `protobuf:"bytes,8,opt,name=not_glob_filter,json=notGlobFilter,proto3,oneof" json:"not_glob_filter,omitempty"`
}

func (x *SearchRepositoryRequest) Reset() {
	*x = SearchRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryRequest) ProtoMessage() {}

func (x *SearchRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryRequest.ProtoReflect.Descriptor instead.
func (*SearchRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{460}
}

func (x *SearchRepositoryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *SearchRepositoryRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchRepositoryRequest) GetModelDetails() *ModelDetails {
	if x != nil {
		return x.ModelDetails
	}
	return nil
}

func (x *SearchRepositoryRequest) GetRerank() bool {
	if x != nil {
		return x.Rerank
	}
	return false
}

func (x *SearchRepositoryRequest) GetContextCacheRequest() bool {
	if x != nil && x.ContextCacheRequest != nil {
		return *x.ContextCacheRequest
	}
	return false
}

func (x *SearchRepositoryRequest) GetGlobFilter() string {
	if x != nil && x.GlobFilter != nil {
		return *x.GlobFilter
	}
	return ""
}

func (x *SearchRepositoryRequest) GetNotGlobFilter() string {
	if x != nil && x.NotGlobFilter != nil {
		return *x.NotGlobFilter
	}
	return ""
}

type SearchRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeResults []*CodeResult `protobuf:"bytes,1,rep,name=code_results,json=codeResults,proto3" json:"code_results,omitempty"`
}

func (x *SearchRepositoryResponse) Reset() {
	*x = SearchRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryResponse) ProtoMessage() {}

func (x *SearchRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryResponse.ProtoReflect.Descriptor instead.
func (*SearchRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{461}
}

func (x *SearchRepositoryResponse) GetCodeResults() []*CodeResult {
	if x != nil {
		return x.CodeResults
	}
	return nil
}

type RemoveRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *RemoveRepositoryRequest) Reset() {
	*x = RemoveRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRepositoryRequest) ProtoMessage() {}

func (x *RemoveRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRepositoryRequest.ProtoReflect.Descriptor instead.
func (*RemoveRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{462}
}

func (x *RemoveRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RemoveRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status RemoveRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.RemoveRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *RemoveRepositoryResponse) Reset() {
	*x = RemoveRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRepositoryResponse) ProtoMessage() {}

func (x *RemoveRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRepositoryResponse.ProtoReflect.Descriptor instead.
func (*RemoveRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{463}
}

func (x *RemoveRepositoryResponse) GetStatus() RemoveRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return RemoveRepositoryResponse_STATUS_UNSPECIFIED
}

type EnsureIndexCreatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *EnsureIndexCreatedRequest) Reset() {
	*x = EnsureIndexCreatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureIndexCreatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureIndexCreatedRequest) ProtoMessage() {}

func (x *EnsureIndexCreatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureIndexCreatedRequest.ProtoReflect.Descriptor instead.
func (*EnsureIndexCreatedRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{464}
}

func (x *EnsureIndexCreatedRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type EnsureIndexCreatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnsureIndexCreatedResponse) Reset() {
	*x = EnsureIndexCreatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureIndexCreatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureIndexCreatedResponse) ProtoMessage() {}

func (x *EnsureIndexCreatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureIndexCreatedResponse.ProtoReflect.Descriptor instead.
func (*EnsureIndexCreatedResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{465}
}

type GetHighLevelFolderDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Readmes                        []*GetHighLevelFolderDescriptionRequest_Readme `protobuf:"bytes,1,rep,name=readmes,proto3" json:"readmes,omitempty"`
	TopLevelRelativeWorkspacePaths []string                                       `protobuf:"bytes,2,rep,name=top_level_relative_workspace_paths,json=topLevelRelativeWorkspacePaths,proto3" json:"top_level_relative_workspace_paths,omitempty"`
	WorkspaceRootPath              string                                         `protobuf:"bytes,4,opt,name=workspace_root_path,json=workspaceRootPath,proto3" json:"workspace_root_path,omitempty"`
}

func (x *GetHighLevelFolderDescriptionRequest) Reset() {
	*x = GetHighLevelFolderDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHighLevelFolderDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHighLevelFolderDescriptionRequest) ProtoMessage() {}

func (x *GetHighLevelFolderDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHighLevelFolderDescriptionRequest.ProtoReflect.Descriptor instead.
func (*GetHighLevelFolderDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{466}
}

func (x *GetHighLevelFolderDescriptionRequest) GetReadmes() []*GetHighLevelFolderDescriptionRequest_Readme {
	if x != nil {
		return x.Readmes
	}
	return nil
}

func (x *GetHighLevelFolderDescriptionRequest) GetTopLevelRelativeWorkspacePaths() []string {
	if x != nil {
		return x.TopLevelRelativeWorkspacePaths
	}
	return nil
}

func (x *GetHighLevelFolderDescriptionRequest) GetWorkspaceRootPath() string {
	if x != nil {
		return x.WorkspaceRootPath
	}
	return ""
}

type GetHighLevelFolderDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *GetHighLevelFolderDescriptionResponse) Reset() {
	*x = GetHighLevelFolderDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHighLevelFolderDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHighLevelFolderDescriptionResponse) ProtoMessage() {}

func (x *GetHighLevelFolderDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHighLevelFolderDescriptionResponse.ProtoReflect.Descriptor instead.
func (*GetHighLevelFolderDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{467}
}

func (x *GetHighLevelFolderDescriptionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetEmbeddingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Texts []string `protobuf:"bytes,1,rep,name=texts,proto3" json:"texts,omitempty"`
}

func (x *GetEmbeddingsRequest) Reset() {
	*x = GetEmbeddingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmbeddingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsRequest) ProtoMessage() {}

func (x *GetEmbeddingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsRequest.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{468}
}

func (x *GetEmbeddingsRequest) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

type GetEmbeddingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embeddings []*GetEmbeddingsResponse_Embedding `protobuf:"bytes,2,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
}

func (x *GetEmbeddingsResponse) Reset() {
	*x = GetEmbeddingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmbeddingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsResponse) ProtoMessage() {}

func (x *GetEmbeddingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsResponse.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{469}
}

func (x *GetEmbeddingsResponse) GetEmbeddings() []*GetEmbeddingsResponse_Embedding {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

type SearchRepositoryDeepContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query           string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	TopK            int32    `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	TopReflectionsK int32    `protobuf:"varint,3,opt,name=top_reflections_k,json=topReflectionsK,proto3" json:"top_reflections_k,omitempty"`
	IndexIds        []string `protobuf:"bytes,4,rep,name=index_ids,json=indexIds,proto3" json:"index_ids,omitempty"`
	UseModelOnFiles bool     `protobuf:"varint,5,opt,name=use_model_on_files,json=useModelOnFiles,proto3" json:"use_model_on_files,omitempty"`
	UseReflections  bool     `protobuf:"varint,6,opt,name=use_reflections,json=useReflections,proto3" json:"use_reflections,omitempty"`
}

func (x *SearchRepositoryDeepContextRequest) Reset() {
	*x = SearchRepositoryDeepContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRepositoryDeepContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRepositoryDeepContextRequest) ProtoMessage() {}

func (x *SearchRepositoryDeepContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRepositoryDeepContextRequest.ProtoReflect.Descriptor instead.
func (*SearchRepositoryDeepContextRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{470}
}

func (x *SearchRepositoryDeepContextRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRepositoryDeepContextRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchRepositoryDeepContextRequest) GetTopReflectionsK() int32 {
	if x != nil {
		return x.TopReflectionsK
	}
	return 0
}

func (x *SearchRepositoryDeepContextRequest) GetIndexIds() []string {
	if x != nil {
		return x.IndexIds
	}
	return nil
}

func (x *SearchRepositoryDeepContextRequest) GetUseModelOnFiles() bool {
	if x != nil {
		return x.UseModelOnFiles
	}
	return false
}

func (x *SearchRepositoryDeepContextRequest) GetUseReflections() bool {
	if x != nil {
		return x.UseReflections
	}
	return false
}

type RepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *RepositoryStatusRequest) Reset() {
	*x = RepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusRequest) ProtoMessage() {}

func (x *RepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*RepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{471}
}

func (x *RepositoryStatusRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type RepositoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotFound               *RepositoryStatusResponse_NotFound               `protobuf:"bytes,1,opt,name=not_found,json=notFound,proto3" json:"not_found,omitempty"`
	Uploading              *RepositoryStatusResponse_Uploading              `protobuf:"bytes,2,opt,name=uploading,proto3" json:"uploading,omitempty"`
	Syncing                *RepositoryStatusResponse_Syncing                `protobuf:"bytes,3,opt,name=syncing,proto3" json:"syncing,omitempty"`
	Synced                 *RepositoryStatusResponse_Synced                 `protobuf:"bytes,4,opt,name=synced,proto3" json:"synced,omitempty"`
	NotSubscribed          *RepositoryStatusResponse_NotSubscribed          `protobuf:"bytes,5,opt,name=not_subscribed,json=notSubscribed,proto3" json:"not_subscribed,omitempty"`
	TooBig                 *RepositoryStatusResponse_TooBig                 `protobuf:"bytes,6,opt,name=too_big,json=tooBig,proto3" json:"too_big,omitempty"`
	AuthTokenNotFound      *RepositoryStatusResponse_AuthTokenNotFound      `protobuf:"bytes,7,opt,name=auth_token_not_found,json=authTokenNotFound,proto3" json:"auth_token_not_found,omitempty"`
	AuthTokenNotAuthorized *RepositoryStatusResponse_AuthTokenNotAuthorized `protobuf:"bytes,8,opt,name=auth_token_not_authorized,json=authTokenNotAuthorized,proto3" json:"auth_token_not_authorized,omitempty"`
	ErrorUploading         *RepositoryStatusResponse_EmptyMessage           `protobuf:"bytes,10,opt,name=error_uploading,json=errorUploading,proto3" json:"error_uploading,omitempty"`
	ErrorSyncing           *RepositoryStatusResponse_EmptyMessage           `protobuf:"bytes,11,opt,name=error_syncing,json=errorSyncing,proto3" json:"error_syncing,omitempty"`
	IsOwner                *bool                                            `protobuf:"varint,9,opt,name=is_owner,json=isOwner,proto3,oneof" json:"is_owner,omitempty"`
}

func (x *RepositoryStatusResponse) Reset() {
	*x = RepositoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse) ProtoMessage() {}

func (x *RepositoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472}
}

func (x *RepositoryStatusResponse) GetNotFound() *RepositoryStatusResponse_NotFound {
	if x != nil {
		return x.NotFound
	}
	return nil
}

func (x *RepositoryStatusResponse) GetUploading() *RepositoryStatusResponse_Uploading {
	if x != nil {
		return x.Uploading
	}
	return nil
}

func (x *RepositoryStatusResponse) GetSyncing() *RepositoryStatusResponse_Syncing {
	if x != nil {
		return x.Syncing
	}
	return nil
}

func (x *RepositoryStatusResponse) GetSynced() *RepositoryStatusResponse_Synced {
	if x != nil {
		return x.Synced
	}
	return nil
}

func (x *RepositoryStatusResponse) GetNotSubscribed() *RepositoryStatusResponse_NotSubscribed {
	if x != nil {
		return x.NotSubscribed
	}
	return nil
}

func (x *RepositoryStatusResponse) GetTooBig() *RepositoryStatusResponse_TooBig {
	if x != nil {
		return x.TooBig
	}
	return nil
}

func (x *RepositoryStatusResponse) GetAuthTokenNotFound() *RepositoryStatusResponse_AuthTokenNotFound {
	if x != nil {
		return x.AuthTokenNotFound
	}
	return nil
}

func (x *RepositoryStatusResponse) GetAuthTokenNotAuthorized() *RepositoryStatusResponse_AuthTokenNotAuthorized {
	if x != nil {
		return x.AuthTokenNotAuthorized
	}
	return nil
}

func (x *RepositoryStatusResponse) GetErrorUploading() *RepositoryStatusResponse_EmptyMessage {
	if x != nil {
		return x.ErrorUploading
	}
	return nil
}

func (x *RepositoryStatusResponse) GetErrorSyncing() *RepositoryStatusResponse_EmptyMessage {
	if x != nil {
		return x.ErrorSyncing
	}
	return nil
}

func (x *RepositoryStatusResponse) GetIsOwner() bool {
	if x != nil && x.IsOwner != nil {
		return *x.IsOwner
	}
	return false
}

type BatchRepositoryStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*RepositoryStatusRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchRepositoryStatusRequest) Reset() {
	*x = BatchRepositoryStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRepositoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRepositoryStatusRequest) ProtoMessage() {}

func (x *BatchRepositoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRepositoryStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchRepositoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{473}
}

func (x *BatchRepositoryStatusRequest) GetRequests() []*RepositoryStatusRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchRepositoryStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*RepositoryStatusResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BatchRepositoryStatusResponse) Reset() {
	*x = BatchRepositoryStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRepositoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRepositoryStatusResponse) ProtoMessage() {}

func (x *BatchRepositoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRepositoryStatusResponse.ProtoReflect.Descriptor instead.
func (*BatchRepositoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{474}
}

func (x *BatchRepositoryStatusResponse) GetResponses() []*RepositoryStatusResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type GetUploadLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3,oneof" json:"repository,omitempty"`
}

func (x *GetUploadLimitsRequest) Reset() {
	*x = GetUploadLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadLimitsRequest) ProtoMessage() {}

func (x *GetUploadLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetUploadLimitsRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{475}
}

func (x *GetUploadLimitsRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type GetUploadLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftLimit int32 `protobuf:"varint,1,opt,name=soft_limit,json=softLimit,proto3" json:"soft_limit,omitempty"`
	HardLimit int32 `protobuf:"varint,2,opt,name=hard_limit,json=hardLimit,proto3" json:"hard_limit,omitempty"`
}

func (x *GetUploadLimitsResponse) Reset() {
	*x = GetUploadLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploadLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploadLimitsResponse) ProtoMessage() {}

func (x *GetUploadLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploadLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetUploadLimitsResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{476}
}

func (x *GetUploadLimitsResponse) GetSoftLimit() int32 {
	if x != nil {
		return x.SoftLimit
	}
	return 0
}

func (x *GetUploadLimitsResponse) GetHardLimit() int32 {
	if x != nil {
		return x.HardLimit
	}
	return 0
}

type GetNumFilesToSendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GetNumFilesToSendRequest) Reset() {
	*x = GetNumFilesToSendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNumFilesToSendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNumFilesToSendRequest) ProtoMessage() {}

func (x *GetNumFilesToSendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNumFilesToSendRequest.ProtoReflect.Descriptor instead.
func (*GetNumFilesToSendRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{477}
}

func (x *GetNumFilesToSendRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type GetNumFilesToSendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumFiles int32 `protobuf:"varint,1,opt,name=num_files,json=numFiles,proto3" json:"num_files,omitempty"`
}

func (x *GetNumFilesToSendResponse) Reset() {
	*x = GetNumFilesToSendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNumFilesToSendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNumFilesToSendResponse) ProtoMessage() {}

func (x *GetNumFilesToSendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNumFilesToSendResponse.ProtoReflect.Descriptor instead.
func (*GetNumFilesToSendResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{478}
}

func (x *GetNumFilesToSendResponse) GetNumFiles() int32 {
	if x != nil {
		return x.NumFiles
	}
	return 0
}

type GetAvailableChunkingStrategiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *GetAvailableChunkingStrategiesRequest) Reset() {
	*x = GetAvailableChunkingStrategiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableChunkingStrategiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableChunkingStrategiesRequest) ProtoMessage() {}

func (x *GetAvailableChunkingStrategiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableChunkingStrategiesRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableChunkingStrategiesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{479}
}

func (x *GetAvailableChunkingStrategiesRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type GetAvailableChunkingStrategiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkingStrategies []ChunkingStrategy `protobuf:"varint,1,rep,packed,name=chunking_strategies,json=chunkingStrategies,proto3,enum=aiserver.v1.ChunkingStrategy" json:"chunking_strategies,omitempty"`
}

func (x *GetAvailableChunkingStrategiesResponse) Reset() {
	*x = GetAvailableChunkingStrategiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableChunkingStrategiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableChunkingStrategiesResponse) ProtoMessage() {}

func (x *GetAvailableChunkingStrategiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableChunkingStrategiesResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableChunkingStrategiesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{480}
}

func (x *GetAvailableChunkingStrategiesResponse) GetChunkingStrategies() []ChunkingStrategy {
	if x != nil {
		return x.ChunkingStrategies
	}
	return nil
}

type AdminRemoveRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodebaseId int32 `protobuf:"varint,1,opt,name=codebase_id,json=codebaseId,proto3" json:"codebase_id,omitempty"`
}

func (x *AdminRemoveRepositoryRequest) Reset() {
	*x = AdminRemoveRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRemoveRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRemoveRepositoryRequest) ProtoMessage() {}

func (x *AdminRemoveRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRemoveRepositoryRequest.ProtoReflect.Descriptor instead.
func (*AdminRemoveRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{481}
}

func (x *AdminRemoveRepositoryRequest) GetCodebaseId() int32 {
	if x != nil {
		return x.CodebaseId
	}
	return 0
}

type AdminRemoveRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminRemoveRepositoryResponse) Reset() {
	*x = AdminRemoveRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminRemoveRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRemoveRepositoryResponse) ProtoMessage() {}

func (x *AdminRemoveRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRemoveRepositoryResponse.ProtoReflect.Descriptor instead.
func (*AdminRemoveRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{482}
}

type RepositoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoriesRequest) Reset() {
	*x = RepositoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoriesRequest) ProtoMessage() {}

func (x *RepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoriesRequest.ProtoReflect.Descriptor instead.
func (*RepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{483}
}

type RepositoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*RepositoryInfo `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *RepositoriesResponse) Reset() {
	*x = RepositoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoriesResponse) ProtoMessage() {}

func (x *RepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoriesResponse.ProtoReflect.Descriptor instead.
func (*RepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{484}
}

func (x *RepositoriesResponse) GetRepositories() []*RepositoryInfo {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{485}
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginUrl string `protobuf:"bytes,1,opt,name=login_url,json=loginUrl,proto3" json:"login_url,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{486}
}

func (x *LoginResponse) GetLoginUrl() string {
	if x != nil {
		return x.LoginUrl
	}
	return ""
}

type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{487}
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LogoutResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.LogoutResponse_Status" json:"status,omitempty"`
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{488}
}

func (x *LogoutResponse) GetStatus() LogoutResponse_Status {
	if x != nil {
		return x.Status
	}
	return LogoutResponse_STATUS_UNSPECIFIED
}

type IsLoggedInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsLoggedInRequest) Reset() {
	*x = IsLoggedInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoggedInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoggedInRequest) ProtoMessage() {}

func (x *IsLoggedInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoggedInRequest.ProtoReflect.Descriptor instead.
func (*IsLoggedInRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{489}
}

type IsLoggedInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggedIn bool `protobuf:"varint,1,opt,name=logged_in,json=loggedIn,proto3" json:"logged_in,omitempty"`
}

func (x *IsLoggedInResponse) Reset() {
	*x = IsLoggedInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoggedInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoggedInResponse) ProtoMessage() {}

func (x *IsLoggedInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoggedInResponse.ProtoReflect.Descriptor instead.
func (*IsLoggedInResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{490}
}

func (x *IsLoggedInResponse) GetLoggedIn() bool {
	if x != nil {
		return x.LoggedIn
	}
	return false
}

type PollLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PollLoginRequest) Reset() {
	*x = PollLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollLoginRequest) ProtoMessage() {}

func (x *PollLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollLoginRequest.ProtoReflect.Descriptor instead.
func (*PollLoginRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{491}
}

type PollLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status PollLoginResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.PollLoginResponse_Status" json:"status,omitempty"`
}

func (x *PollLoginResponse) Reset() {
	*x = PollLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollLoginResponse) ProtoMessage() {}

func (x *PollLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollLoginResponse.ProtoReflect.Descriptor instead.
func (*PollLoginResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{492}
}

func (x *PollLoginResponse) GetStatus() PollLoginResponse_Status {
	if x != nil {
		return x.Status
	}
	return PollLoginResponse_STATUS_UNSPECIFIED
}

type UpgradeScopeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes []string `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *UpgradeScopeRequest) Reset() {
	*x = UpgradeScopeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeScopeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeScopeRequest) ProtoMessage() {}

func (x *UpgradeScopeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeScopeRequest.ProtoReflect.Descriptor instead.
func (*UpgradeScopeRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{493}
}

func (x *UpgradeScopeRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type UpgradeScopeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UpgradeScopeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.UpgradeScopeResponse_Status" json:"status,omitempty"`
}

func (x *UpgradeScopeResponse) Reset() {
	*x = UpgradeScopeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeScopeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeScopeResponse) ProtoMessage() {}

func (x *UpgradeScopeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeScopeResponse.ProtoReflect.Descriptor instead.
func (*UpgradeScopeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{494}
}

func (x *UpgradeScopeResponse) GetStatus() UpgradeScopeResponse_Status {
	if x != nil {
		return x.Status
	}
	return UpgradeScopeResponse_STATUS_UNSPECIFIED
}

type SyncRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodebaseId int32 `protobuf:"varint,1,opt,name=codebase_id,json=codebaseId,proto3" json:"codebase_id,omitempty"`
}

func (x *SyncRepositoryRequest) Reset() {
	*x = SyncRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRepositoryRequest) ProtoMessage() {}

func (x *SyncRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRepositoryRequest.ProtoReflect.Descriptor instead.
func (*SyncRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{495}
}

func (x *SyncRepositoryRequest) GetCodebaseId() int32 {
	if x != nil {
		return x.CodebaseId
	}
	return 0
}

type SyncRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SyncRepositoryResponse) Reset() {
	*x = SyncRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRepositoryResponse) ProtoMessage() {}

func (x *SyncRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRepositoryResponse.ProtoReflect.Descriptor instead.
func (*SyncRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{496}
}

type UploadRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *UploadRepositoryRequest) Reset() {
	*x = UploadRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRepositoryRequest) ProtoMessage() {}

func (x *UploadRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UploadRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{497}
}

func (x *UploadRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type UploadRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UploadRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.UploadRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *UploadRepositoryResponse) Reset() {
	*x = UploadRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadRepositoryResponse) ProtoMessage() {}

func (x *UploadRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadRepositoryResponse.ProtoReflect.Descriptor instead.
func (*UploadRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{498}
}

func (x *UploadRepositoryResponse) GetStatus() UploadRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return UploadRepositoryResponse_STATUS_UNSPECIFIED
}

type SubscribeRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *SubscribeRepositoryRequest) Reset() {
	*x = SubscribeRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRepositoryRequest) ProtoMessage() {}

func (x *SubscribeRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRepositoryRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{499}
}

func (x *SubscribeRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type SubscribeRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SubscribeRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.SubscribeRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *SubscribeRepositoryResponse) Reset() {
	*x = SubscribeRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRepositoryResponse) ProtoMessage() {}

func (x *SubscribeRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRepositoryResponse.ProtoReflect.Descriptor instead.
func (*SubscribeRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{500}
}

func (x *SubscribeRepositoryResponse) GetStatus() SubscribeRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return SubscribeRepositoryResponse_STATUS_UNSPECIFIED
}

type UnsubscribeRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository *RepositoryInfo `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *UnsubscribeRepositoryRequest) Reset() {
	*x = UnsubscribeRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRepositoryRequest) ProtoMessage() {}

func (x *UnsubscribeRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRepositoryRequest.ProtoReflect.Descriptor instead.
func (*UnsubscribeRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{501}
}

func (x *UnsubscribeRepositoryRequest) GetRepository() *RepositoryInfo {
	if x != nil {
		return x.Repository
	}
	return nil
}

type UnsubscribeRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status UnsubscribeRepositoryResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=aiserver.v1.UnsubscribeRepositoryResponse_Status" json:"status,omitempty"`
}

func (x *UnsubscribeRepositoryResponse) Reset() {
	*x = UnsubscribeRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribeRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeRepositoryResponse) ProtoMessage() {}

func (x *UnsubscribeRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeRepositoryResponse.ProtoReflect.Descriptor instead.
func (*UnsubscribeRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{502}
}

func (x *UnsubscribeRepositoryResponse) GetStatus() UnsubscribeRepositoryResponse_Status {
	if x != nil {
		return x.Status
	}
	return UnsubscribeRepositoryResponse_STATUS_UNSPECIFIED
}

type AvailableModelsResponse_AvailableModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultOn         bool   `protobuf:"varint,2,opt,name=default_on,json=defaultOn,proto3" json:"default_on,omitempty"`
	IsLongContextOnly *bool  `protobuf:"varint,3,opt,name=is_long_context_only,json=isLongContextOnly,proto3,oneof" json:"is_long_context_only,omitempty"`
	IsChatOnly        *bool  `protobuf:"varint,4,opt,name=is_chat_only,json=isChatOnly,proto3,oneof" json:"is_chat_only,omitempty"`
}

func (x *AvailableModelsResponse_AvailableModel) Reset() {
	*x = AvailableModelsResponse_AvailableModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableModelsResponse_AvailableModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableModelsResponse_AvailableModel) ProtoMessage() {}

func (x *AvailableModelsResponse_AvailableModel) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableModelsResponse_AvailableModel.ProtoReflect.Descriptor instead.
func (*AvailableModelsResponse_AvailableModel) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AvailableModelsResponse_AvailableModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AvailableModelsResponse_AvailableModel) GetDefaultOn() bool {
	if x != nil {
		return x.DefaultOn
	}
	return false
}

func (x *AvailableModelsResponse_AvailableModel) GetIsLongContextOnly() bool {
	if x != nil && x.IsLongContextOnly != nil {
		return *x.IsLongContextOnly
	}
	return false
}

func (x *AvailableModelsResponse_AvailableModel) GetIsChatOnly() bool {
	if x != nil && x.IsChatOnly != nil {
		return *x.IsChatOnly
	}
	return false
}

type CurrentFileInfo_NotebookCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CurrentFileInfo_NotebookCell) Reset() {
	*x = CurrentFileInfo_NotebookCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentFileInfo_NotebookCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentFileInfo_NotebookCell) ProtoMessage() {}

func (x *CurrentFileInfo_NotebookCell) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentFileInfo_NotebookCell.ProtoReflect.Descriptor instead.
func (*CurrentFileInfo_NotebookCell) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{8, 0}
}

type DataframeInfo_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DataframeInfo_Column) Reset() {
	*x = DataframeInfo_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataframeInfo_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataframeInfo_Column) ProtoMessage() {}

func (x *DataframeInfo_Column) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataframeInfo_Column.ProtoReflect.Descriptor instead.
func (*DataframeInfo_Column) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{12, 0}
}

func (x *DataframeInfo_Column) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DataframeInfo_Column) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Diagnostic_RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range   *CursorRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Diagnostic_RelatedInformation) Reset() {
	*x = Diagnostic_RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diagnostic_RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic_RelatedInformation) ProtoMessage() {}

func (x *Diagnostic_RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic_RelatedInformation.ProtoReflect.Descriptor instead.
func (*Diagnostic_RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Diagnostic_RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Diagnostic_RelatedInformation) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type ConversationMessage_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                                               `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32                                                `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string                                             `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	SummarizationStrategy *ConversationMessage_CodeChunk_SummarizationStrategy `protobuf:"varint,4,opt,name=summarization_strategy,json=summarizationStrategy,proto3,enum=aiserver.v1.ConversationMessage_CodeChunk_SummarizationStrategy,oneof" json:"summarization_strategy,omitempty"`
	LanguageIdentifier    string                                               `protobuf:"bytes,5,opt,name=language_identifier,json=languageIdentifier,proto3" json:"language_identifier,omitempty"`
	Intent                *ConversationMessage_CodeChunk_Intent                `protobuf:"varint,6,opt,name=intent,proto3,enum=aiserver.v1.ConversationMessage_CodeChunk_Intent,oneof" json:"intent,omitempty"`
}

func (x *ConversationMessage_CodeChunk) Reset() {
	*x = ConversationMessage_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_CodeChunk) ProtoMessage() {}

func (x *ConversationMessage_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_CodeChunk.ProtoReflect.Descriptor instead.
func (*ConversationMessage_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ConversationMessage_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ConversationMessage_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *ConversationMessage_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *ConversationMessage_CodeChunk) GetSummarizationStrategy() ConversationMessage_CodeChunk_SummarizationStrategy {
	if x != nil && x.SummarizationStrategy != nil {
		return *x.SummarizationStrategy
	}
	return ConversationMessage_CodeChunk_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED
}

func (x *ConversationMessage_CodeChunk) GetLanguageIdentifier() string {
	if x != nil {
		return x.LanguageIdentifier
	}
	return ""
}

func (x *ConversationMessage_CodeChunk) GetIntent() ConversationMessage_CodeChunk_Intent {
	if x != nil && x.Intent != nil {
		return *x.Intent
	}
	return ConversationMessage_CodeChunk_INTENT_UNSPECIFIED
}

type ConversationMessage_ApproximateLintError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	StartLine   int32  `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine     int32  `protobuf:"varint,4,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	StartColumn int32  `protobuf:"varint,5,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumn   int32  `protobuf:"varint,6,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *ConversationMessage_ApproximateLintError) Reset() {
	*x = ConversationMessage_ApproximateLintError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_ApproximateLintError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_ApproximateLintError) ProtoMessage() {}

func (x *ConversationMessage_ApproximateLintError) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_ApproximateLintError.ProtoReflect.Descriptor instead.
func (*ConversationMessage_ApproximateLintError) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 1}
}

func (x *ConversationMessage_ApproximateLintError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConversationMessage_ApproximateLintError) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConversationMessage_ApproximateLintError) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *ConversationMessage_ApproximateLintError) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *ConversationMessage_ApproximateLintError) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *ConversationMessage_ApproximateLintError) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type ConversationMessage_Lints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lints                   *GetLintsForChangeResponse `protobuf:"bytes,1,opt,name=lints,proto3" json:"lints,omitempty"`
	ChatCodeblockModelValue string                     `protobuf:"bytes,2,opt,name=chat_codeblock_model_value,json=chatCodeblockModelValue,proto3" json:"chat_codeblock_model_value,omitempty"`
}

func (x *ConversationMessage_Lints) Reset() {
	*x = ConversationMessage_Lints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_Lints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_Lints) ProtoMessage() {}

func (x *ConversationMessage_Lints) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_Lints.ProtoReflect.Descriptor instead.
func (*ConversationMessage_Lints) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 2}
}

func (x *ConversationMessage_Lints) GetLints() *GetLintsForChangeResponse {
	if x != nil {
		return x.Lints
	}
	return nil
}

func (x *ConversationMessage_Lints) GetChatCodeblockModelValue() string {
	if x != nil {
		return x.ChatCodeblockModelValue
	}
	return ""
}

type ConversationMessage_ToolResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolCallId         string                                      `protobuf:"bytes,1,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
	ToolName           string                                      `protobuf:"bytes,2,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`
	ToolIndex          uint32                                      `protobuf:"varint,3,opt,name=tool_index,json=toolIndex,proto3" json:"tool_index,omitempty"`
	Args               string                                      `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty"`
	RawArgs            string                                      `protobuf:"bytes,5,opt,name=raw_args,json=rawArgs,proto3" json:"raw_args,omitempty"`
	AttachedCodeChunks []*ConversationMessage_ToolResult_CodeChunk `protobuf:"bytes,6,rep,name=attached_code_chunks,json=attachedCodeChunks,proto3" json:"attached_code_chunks,omitempty"`
	Content            *string                                     `protobuf:"bytes,7,opt,name=content,proto3,oneof" json:"content,omitempty"`
}

func (x *ConversationMessage_ToolResult) Reset() {
	*x = ConversationMessage_ToolResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_ToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_ToolResult) ProtoMessage() {}

func (x *ConversationMessage_ToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_ToolResult.ProtoReflect.Descriptor instead.
func (*ConversationMessage_ToolResult) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 3}
}

func (x *ConversationMessage_ToolResult) GetToolCallId() string {
	if x != nil {
		return x.ToolCallId
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetToolIndex() uint32 {
	if x != nil {
		return x.ToolIndex
	}
	return 0
}

func (x *ConversationMessage_ToolResult) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetRawArgs() string {
	if x != nil {
		return x.RawArgs
	}
	return ""
}

func (x *ConversationMessage_ToolResult) GetAttachedCodeChunks() []*ConversationMessage_ToolResult_CodeChunk {
	if x != nil {
		return x.AttachedCodeChunks
	}
	return nil
}

func (x *ConversationMessage_ToolResult) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

type ConversationMessage_ToolResult_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                                                          `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32                                                           `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string                                                        `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	SummarizationStrategy *ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy `protobuf:"varint,4,opt,name=summarization_strategy,json=summarizationStrategy,proto3,enum=aiserver.v1.ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy,oneof" json:"summarization_strategy,omitempty"`
	LanguageIdentifier    string                                                          `protobuf:"bytes,5,opt,name=language_identifier,json=languageIdentifier,proto3" json:"language_identifier,omitempty"`
	Intent                *ConversationMessage_ToolResult_CodeChunk_Intent                `protobuf:"varint,6,opt,name=intent,proto3,enum=aiserver.v1.ConversationMessage_ToolResult_CodeChunk_Intent,oneof" json:"intent,omitempty"`
}

func (x *ConversationMessage_ToolResult_CodeChunk) Reset() {
	*x = ConversationMessage_ToolResult_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationMessage_ToolResult_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationMessage_ToolResult_CodeChunk) ProtoMessage() {}

func (x *ConversationMessage_ToolResult_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationMessage_ToolResult_CodeChunk.ProtoReflect.Descriptor instead.
func (*ConversationMessage_ToolResult_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{15, 3, 0}
}

func (x *ConversationMessage_ToolResult_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ConversationMessage_ToolResult_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *ConversationMessage_ToolResult_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *ConversationMessage_ToolResult_CodeChunk) GetSummarizationStrategy() ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy {
	if x != nil && x.SummarizationStrategy != nil {
		return *x.SummarizationStrategy
	}
	return ConversationMessage_ToolResult_CodeChunk_SUMMARIZATION_STRATEGY_NONE_UNSPECIFIED
}

func (x *ConversationMessage_ToolResult_CodeChunk) GetLanguageIdentifier() string {
	if x != nil {
		return x.LanguageIdentifier
	}
	return ""
}

func (x *ConversationMessage_ToolResult_CodeChunk) GetIntent() ConversationMessage_ToolResult_CodeChunk_Intent {
	if x != nil && x.Intent != nil {
		return *x.Intent
	}
	return ConversationMessage_ToolResult_CodeChunk_INTENT_UNSPECIFIED
}

type CodeBlock_Signatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranges []*CursorRange `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *CodeBlock_Signatures) Reset() {
	*x = CodeBlock_Signatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock_Signatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock_Signatures) ProtoMessage() {}

func (x *CodeBlock_Signatures) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock_Signatures.ProtoReflect.Descriptor instead.
func (*CodeBlock_Signatures) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CodeBlock_Signatures) GetRanges() []*CursorRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type FileDiff_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Lines   []string `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *FileDiff_Chunk) Reset() {
	*x = FileDiff_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDiff_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDiff_Chunk) ProtoMessage() {}

func (x *FileDiff_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDiff_Chunk.ProtoReflect.Descriptor instead.
func (*FileDiff_Chunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{19, 0}
}

func (x *FileDiff_Chunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *FileDiff_Chunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type SimpleFileDiff_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldLines []string   `protobuf:"bytes,1,rep,name=old_lines,json=oldLines,proto3" json:"old_lines,omitempty"`
	NewLines []string   `protobuf:"bytes,2,rep,name=new_lines,json=newLines,proto3" json:"new_lines,omitempty"`
	OldRange *LineRange `protobuf:"bytes,3,opt,name=old_range,json=oldRange,proto3" json:"old_range,omitempty"`
	NewRange *LineRange `protobuf:"bytes,4,opt,name=new_range,json=newRange,proto3" json:"new_range,omitempty"`
}

func (x *SimpleFileDiff_Chunk) Reset() {
	*x = SimpleFileDiff_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleFileDiff_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleFileDiff_Chunk) ProtoMessage() {}

func (x *SimpleFileDiff_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleFileDiff_Chunk.ProtoReflect.Descriptor instead.
func (*SimpleFileDiff_Chunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{22, 0}
}

func (x *SimpleFileDiff_Chunk) GetOldLines() []string {
	if x != nil {
		return x.OldLines
	}
	return nil
}

func (x *SimpleFileDiff_Chunk) GetNewLines() []string {
	if x != nil {
		return x.NewLines
	}
	return nil
}

func (x *SimpleFileDiff_Chunk) GetOldRange() *LineRange {
	if x != nil {
		return x.OldRange
	}
	return nil
}

func (x *SimpleFileDiff_Chunk) GetNewRange() *LineRange {
	if x != nil {
		return x.NewRange
	}
	return nil
}

type ImageProto_Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *ImageProto_Dimension) Reset() {
	*x = ImageProto_Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProto_Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProto_Dimension) ProtoMessage() {}

func (x *ImageProto_Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProto_Dimension.ProtoReflect.Descriptor instead.
func (*ImageProto_Dimension) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ImageProto_Dimension) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageProto_Dimension) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetLintsForChangeResponse_Lint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                          string                                     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity                         string                                     `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	RelativeWorkspacePath            string                                     `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumberOneIndexed        int32                                      `protobuf:"varint,4,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32                                      `protobuf:"varint,5,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32                                      `protobuf:"varint,6,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32                                      `protobuf:"varint,7,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
	QuickFixes                       []*GetLintsForChangeResponse_Lint_QuickFix `protobuf:"bytes,9,rep,name=quick_fixes,json=quickFixes,proto3" json:"quick_fixes,omitempty"`
}

func (x *GetLintsForChangeResponse_Lint) Reset() {
	*x = GetLintsForChangeResponse_Lint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLintsForChangeResponse_Lint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLintsForChangeResponse_Lint) ProtoMessage() {}

func (x *GetLintsForChangeResponse_Lint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLintsForChangeResponse_Lint.ProtoReflect.Descriptor instead.
func (*GetLintsForChangeResponse_Lint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GetLintsForChangeResponse_Lint) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint) GetQuickFixes() []*GetLintsForChangeResponse_Lint_QuickFix {
	if x != nil {
		return x.QuickFixes
	}
	return nil
}

type GetLintsForChangeResponse_Lint_QuickFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string                                          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string                                          `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	IsPreferred bool                                            `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	Edits       []*GetLintsForChangeResponse_Lint_QuickFix_Edit `protobuf:"bytes,4,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *GetLintsForChangeResponse_Lint_QuickFix) Reset() {
	*x = GetLintsForChangeResponse_Lint_QuickFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLintsForChangeResponse_Lint_QuickFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLintsForChangeResponse_Lint_QuickFix) ProtoMessage() {}

func (x *GetLintsForChangeResponse_Lint_QuickFix) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLintsForChangeResponse_Lint_QuickFix.ProtoReflect.Descriptor instead.
func (*GetLintsForChangeResponse_Lint_QuickFix) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{28, 0, 0}
}

func (x *GetLintsForChangeResponse_Lint_QuickFix) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint_QuickFix) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint_QuickFix) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *GetLintsForChangeResponse_Lint_QuickFix) GetEdits() []*GetLintsForChangeResponse_Lint_QuickFix_Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type GetLintsForChangeResponse_Lint_QuickFix_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath            string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                             string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	StartLineNumberOneIndexed        int32  `protobuf:"varint,3,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32  `protobuf:"varint,4,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32  `protobuf:"varint,5,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32  `protobuf:"varint,6,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) Reset() {
	*x = GetLintsForChangeResponse_Lint_QuickFix_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLintsForChangeResponse_Lint_QuickFix_Edit) ProtoMessage() {}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLintsForChangeResponse_Lint_QuickFix_Edit.ProtoReflect.Descriptor instead.
func (*GetLintsForChangeResponse_Lint_QuickFix_Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{28, 0, 0, 0}
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *GetLintsForChangeResponse_Lint_QuickFix_Edit) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

type LinterError_RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Range   *CursorRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *LinterError_RelatedInformation) Reset() {
	*x = LinterError_RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinterError_RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinterError_RelatedInformation) ProtoMessage() {}

func (x *LinterError_RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinterError_RelatedInformation.ProtoReflect.Descriptor instead.
func (*LinterError_RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{35, 0}
}

func (x *LinterError_RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LinterError_RelatedInformation) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type DebugInfo_Breakpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineNumber            int32    `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	LinesBeforeBreakpoint []string `protobuf:"bytes,3,rep,name=lines_before_breakpoint,json=linesBeforeBreakpoint,proto3" json:"lines_before_breakpoint,omitempty"`
	LinesAfterBreakpoint  []string `protobuf:"bytes,4,rep,name=lines_after_breakpoint,json=linesAfterBreakpoint,proto3" json:"lines_after_breakpoint,omitempty"`
	ExceptionInfo         *string  `protobuf:"bytes,5,opt,name=exception_info,json=exceptionInfo,proto3,oneof" json:"exception_info,omitempty"`
}

func (x *DebugInfo_Breakpoint) Reset() {
	*x = DebugInfo_Breakpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo_Breakpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo_Breakpoint) ProtoMessage() {}

func (x *DebugInfo_Breakpoint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo_Breakpoint.ProtoReflect.Descriptor instead.
func (*DebugInfo_Breakpoint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{37, 0}
}

func (x *DebugInfo_Breakpoint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *DebugInfo_Breakpoint) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DebugInfo_Breakpoint) GetLinesBeforeBreakpoint() []string {
	if x != nil {
		return x.LinesBeforeBreakpoint
	}
	return nil
}

func (x *DebugInfo_Breakpoint) GetLinesAfterBreakpoint() []string {
	if x != nil {
		return x.LinesAfterBreakpoint
	}
	return nil
}

func (x *DebugInfo_Breakpoint) GetExceptionInfo() string {
	if x != nil && x.ExceptionInfo != nil {
		return *x.ExceptionInfo
	}
	return ""
}

type DebugInfo_CallStackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                            `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	LineNumber            int32                             `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	FunctionName          string                            `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Scopes                []*DebugInfo_CallStackFrame_Scope `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *DebugInfo_CallStackFrame) Reset() {
	*x = DebugInfo_CallStackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo_CallStackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo_CallStackFrame) ProtoMessage() {}

func (x *DebugInfo_CallStackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo_CallStackFrame.ProtoReflect.Descriptor instead.
func (*DebugInfo_CallStackFrame) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{37, 1}
}

func (x *DebugInfo_CallStackFrame) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *DebugInfo_CallStackFrame) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *DebugInfo_CallStackFrame) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *DebugInfo_CallStackFrame) GetScopes() []*DebugInfo_CallStackFrame_Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type DebugInfo_CallStackFrame_Scope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Variables []*DebugInfo_CallStackFrame_Scope_Variable `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *DebugInfo_CallStackFrame_Scope) Reset() {
	*x = DebugInfo_CallStackFrame_Scope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo_CallStackFrame_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo_CallStackFrame_Scope) ProtoMessage() {}

func (x *DebugInfo_CallStackFrame_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo_CallStackFrame_Scope.ProtoReflect.Descriptor instead.
func (*DebugInfo_CallStackFrame_Scope) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{37, 1, 0}
}

func (x *DebugInfo_CallStackFrame_Scope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DebugInfo_CallStackFrame_Scope) GetVariables() []*DebugInfo_CallStackFrame_Scope_Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type DebugInfo_CallStackFrame_Scope_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type  *string `protobuf:"bytes,3,opt,name=type,proto3,oneof" json:"type,omitempty"`
}

func (x *DebugInfo_CallStackFrame_Scope_Variable) Reset() {
	*x = DebugInfo_CallStackFrame_Scope_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugInfo_CallStackFrame_Scope_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo_CallStackFrame_Scope_Variable) ProtoMessage() {}

func (x *DebugInfo_CallStackFrame_Scope_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo_CallStackFrame_Scope_Variable.ProtoReflect.Descriptor instead.
func (*DebugInfo_CallStackFrame_Scope_Variable) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{37, 1, 0, 0}
}

func (x *DebugInfo_CallStackFrame_Scope_Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DebugInfo_CallStackFrame_Scope_Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DebugInfo_CallStackFrame_Scope_Variable) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type ContainerTreeNode_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocString  string                                   `protobuf:"bytes,1,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	Header     string                                   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Trailer    string                                   `protobuf:"bytes,3,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Children   []*ContainerTreeNode                     `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	References []*ContainerTreeNode_Container_Reference `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
	Score      float64                                  `protobuf:"fixed64,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ContainerTreeNode_Container) Reset() {
	*x = ContainerTreeNode_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Container) ProtoMessage() {}

func (x *ContainerTreeNode_Container) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Container.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Container) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42, 0}
}

func (x *ContainerTreeNode_Container) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ContainerTreeNode_Container) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *ContainerTreeNode_Container) GetTrailer() string {
	if x != nil {
		return x.Trailer
	}
	return ""
}

func (x *ContainerTreeNode_Container) GetChildren() []*ContainerTreeNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ContainerTreeNode_Container) GetReferences() []*ContainerTreeNode_Container_Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ContainerTreeNode_Container) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ContainerTreeNode_Blob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *ContainerTreeNode_Blob) Reset() {
	*x = ContainerTreeNode_Blob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Blob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Blob) ProtoMessage() {}

func (x *ContainerTreeNode_Blob) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Blob.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Blob) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42, 1}
}

func (x *ContainerTreeNode_Blob) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ContainerTreeNode_Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocString  string                                `protobuf:"bytes,1,opt,name=doc_string,json=docString,proto3" json:"doc_string,omitempty"`
	Value      string                                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	References []*ContainerTreeNode_Symbol_Reference `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
	Score      float64                               `protobuf:"fixed64,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ContainerTreeNode_Symbol) Reset() {
	*x = ContainerTreeNode_Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Symbol) ProtoMessage() {}

func (x *ContainerTreeNode_Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Symbol.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Symbol) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42, 2}
}

func (x *ContainerTreeNode_Symbol) GetDocString() string {
	if x != nil {
		return x.DocString
	}
	return ""
}

func (x *ContainerTreeNode_Symbol) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContainerTreeNode_Symbol) GetReferences() []*ContainerTreeNode_Symbol_Reference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ContainerTreeNode_Symbol) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type ContainerTreeNode_Container_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                 string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	RelativeWorkspacePath string `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *ContainerTreeNode_Container_Reference) Reset() {
	*x = ContainerTreeNode_Container_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Container_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Container_Reference) ProtoMessage() {}

func (x *ContainerTreeNode_Container_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Container_Reference.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Container_Reference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42, 0, 0}
}

func (x *ContainerTreeNode_Container_Reference) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContainerTreeNode_Container_Reference) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type ContainerTreeNode_Symbol_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                 string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	RelativeWorkspacePath string `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *ContainerTreeNode_Symbol_Reference) Reset() {
	*x = ContainerTreeNode_Symbol_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerTreeNode_Symbol_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerTreeNode_Symbol_Reference) ProtoMessage() {}

func (x *ContainerTreeNode_Symbol_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerTreeNode_Symbol_Reference.ProtoReflect.Descriptor instead.
func (*ContainerTreeNode_Symbol_Reference) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{42, 2, 0}
}

func (x *ContainerTreeNode_Symbol_Reference) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContainerTreeNode_Symbol_Reference) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type StreamChatResponse_ChunkIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string    `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	StartLine int32     `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32     `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	Text      string    `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	ChunkType ChunkType `protobuf:"varint,5,opt,name=chunk_type,json=chunkType,proto3,enum=aiserver.v1.ChunkType" json:"chunk_type,omitempty"`
}

func (x *StreamChatResponse_ChunkIdentity) Reset() {
	*x = StreamChatResponse_ChunkIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatResponse_ChunkIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatResponse_ChunkIdentity) ProtoMessage() {}

func (x *StreamChatResponse_ChunkIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatResponse_ChunkIdentity.ProtoReflect.Descriptor instead.
func (*StreamChatResponse_ChunkIdentity) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{43, 0}
}

func (x *StreamChatResponse_ChunkIdentity) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StreamChatResponse_ChunkIdentity) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *StreamChatResponse_ChunkIdentity) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *StreamChatResponse_ChunkIdentity) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChatResponse_ChunkIdentity) GetChunkType() ChunkType {
	if x != nil {
		return x.ChunkType
	}
	return ChunkType_CHUNK_TYPE_UNSPECIFIED
}

type GetComposerChatRequest_RedDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string           `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RedRanges             []*SimplestRange `protobuf:"bytes,2,rep,name=red_ranges,json=redRanges,proto3" json:"red_ranges,omitempty"`
	RedRangesReversed     []*SimplestRange `protobuf:"bytes,3,rep,name=red_ranges_reversed,json=redRangesReversed,proto3" json:"red_ranges_reversed,omitempty"`
	StartHash             string           `protobuf:"bytes,4,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	EndHash               string           `protobuf:"bytes,5,opt,name=end_hash,json=endHash,proto3" json:"end_hash,omitempty"`
}

func (x *GetComposerChatRequest_RedDiff) Reset() {
	*x = GetComposerChatRequest_RedDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetComposerChatRequest_RedDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetComposerChatRequest_RedDiff) ProtoMessage() {}

func (x *GetComposerChatRequest_RedDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetComposerChatRequest_RedDiff.ProtoReflect.Descriptor instead.
func (*GetComposerChatRequest_RedDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{55, 0}
}

func (x *GetComposerChatRequest_RedDiff) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetComposerChatRequest_RedDiff) GetRedRanges() []*SimplestRange {
	if x != nil {
		return x.RedRanges
	}
	return nil
}

func (x *GetComposerChatRequest_RedDiff) GetRedRangesReversed() []*SimplestRange {
	if x != nil {
		return x.RedRangesReversed
	}
	return nil
}

func (x *GetComposerChatRequest_RedDiff) GetStartHash() string {
	if x != nil {
		return x.StartHash
	}
	return ""
}

func (x *GetComposerChatRequest_RedDiff) GetEndHash() string {
	if x != nil {
		return x.EndHash
	}
	return ""
}

type StreamChatContextRequest_CodeContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks       []*CodeBlock  `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	ScoredChunks []*CodeResult `protobuf:"bytes,2,rep,name=scored_chunks,json=scoredChunks,proto3" json:"scored_chunks,omitempty"`
}

func (x *StreamChatContextRequest_CodeContext) Reset() {
	*x = StreamChatContextRequest_CodeContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatContextRequest_CodeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatContextRequest_CodeContext) ProtoMessage() {}

func (x *StreamChatContextRequest_CodeContext) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatContextRequest_CodeContext.ProtoReflect.Descriptor instead.
func (*StreamChatContextRequest_CodeContext) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{57, 0}
}

func (x *StreamChatContextRequest_CodeContext) GetChunks() []*CodeBlock {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *StreamChatContextRequest_CodeContext) GetScoredChunks() []*CodeResult {
	if x != nil {
		return x.ScoredChunks
	}
	return nil
}

type StreamChatContextResponse_UsedCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeResults []*CodeResult `protobuf:"bytes,1,rep,name=code_results,json=codeResults,proto3" json:"code_results,omitempty"`
}

func (x *StreamChatContextResponse_UsedCode) Reset() {
	*x = StreamChatContextResponse_UsedCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatContextResponse_UsedCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatContextResponse_UsedCode) ProtoMessage() {}

func (x *StreamChatContextResponse_UsedCode) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatContextResponse_UsedCode.ProtoReflect.Descriptor instead.
func (*StreamChatContextResponse_UsedCode) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{63, 0}
}

func (x *StreamChatContextResponse_UsedCode) GetCodeResults() []*CodeResult {
	if x != nil {
		return x.CodeResults
	}
	return nil
}

type StreamChatContextResponse_CodeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32  `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber         int32  `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
}

func (x *StreamChatContextResponse_CodeLink) Reset() {
	*x = StreamChatContextResponse_CodeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatContextResponse_CodeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatContextResponse_CodeLink) ProtoMessage() {}

func (x *StreamChatContextResponse_CodeLink) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatContextResponse_CodeLink.ProtoReflect.Descriptor instead.
func (*StreamChatContextResponse_CodeLink) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{63, 1}
}

func (x *StreamChatContextResponse_CodeLink) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamChatContextResponse_CodeLink) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StreamChatContextResponse_CodeLink) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

type StreamChatContextResponse_ChunkIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string    `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	StartLine int32     `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32     `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	Text      string    `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	ChunkType ChunkType `protobuf:"varint,5,opt,name=chunk_type,json=chunkType,proto3,enum=aiserver.v1.ChunkType" json:"chunk_type,omitempty"`
}

func (x *StreamChatContextResponse_ChunkIdentity) Reset() {
	*x = StreamChatContextResponse_ChunkIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatContextResponse_ChunkIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatContextResponse_ChunkIdentity) ProtoMessage() {}

func (x *StreamChatContextResponse_ChunkIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatContextResponse_ChunkIdentity.ProtoReflect.Descriptor instead.
func (*StreamChatContextResponse_ChunkIdentity) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{63, 2}
}

func (x *StreamChatContextResponse_ChunkIdentity) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StreamChatContextResponse_ChunkIdentity) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *StreamChatContextResponse_ChunkIdentity) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *StreamChatContextResponse_ChunkIdentity) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamChatContextResponse_ChunkIdentity) GetChunkType() ChunkType {
	if x != nil {
		return x.ChunkType
	}
	return ChunkType_CHUNK_TYPE_UNSPECIFIED
}

type IsolatedTreesitterResponse_TreesitterSymbolNameItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolName    string                                                                  `protobuf:"bytes,1,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	StartPosition *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition `protobuf:"bytes,2,opt,name=start_position,json=startPosition,proto3,oneof" json:"start_position,omitempty"`
	EndPosition   *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition `protobuf:"bytes,3,opt,name=end_position,json=endPosition,proto3,oneof" json:"end_position,omitempty"`
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem) Reset() {
	*x = IsolatedTreesitterResponse_TreesitterSymbolNameItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsolatedTreesitterResponse_TreesitterSymbolNameItem) ProtoMessage() {}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsolatedTreesitterResponse_TreesitterSymbolNameItem.ProtoReflect.Descriptor instead.
func (*IsolatedTreesitterResponse_TreesitterSymbolNameItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{78, 0}
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem) GetStartPosition() *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem) GetEndPosition() *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Row    int32 `protobuf:"varint,1,opt,name=row,proto3" json:"row,omitempty"`
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) Reset() {
	*x = IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) ProtoMessage() {}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition.ProtoReflect.Descriptor instead.
func (*IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{78, 0, 0}
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) GetRow() int32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type StreamBranchGeminiRequest_PastThought struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TimeInUnixSeconds float64 `protobuf:"fixed64,2,opt,name=time_in_unix_seconds,json=timeInUnixSeconds,proto3" json:"time_in_unix_seconds,omitempty"`
}

func (x *StreamBranchGeminiRequest_PastThought) Reset() {
	*x = StreamBranchGeminiRequest_PastThought{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiRequest_PastThought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiRequest_PastThought) ProtoMessage() {}

func (x *StreamBranchGeminiRequest_PastThought) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiRequest_PastThought.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiRequest_PastThought) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{89, 0}
}

func (x *StreamBranchGeminiRequest_PastThought) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamBranchGeminiRequest_PastThought) GetTimeInUnixSeconds() float64 {
	if x != nil {
		return x.TimeInUnixSeconds
	}
	return 0
}

type StreamBranchGeminiRequest_BranchDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileDiffs []*StreamBranchGeminiRequest_BranchDiff_FileDiff `protobuf:"bytes,1,rep,name=file_diffs,json=fileDiffs,proto3" json:"file_diffs,omitempty"`
	Commits   []*Commit                                        `protobuf:"bytes,2,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *StreamBranchGeminiRequest_BranchDiff) Reset() {
	*x = StreamBranchGeminiRequest_BranchDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiRequest_BranchDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiRequest_BranchDiff) ProtoMessage() {}

func (x *StreamBranchGeminiRequest_BranchDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiRequest_BranchDiff.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiRequest_BranchDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{89, 1}
}

func (x *StreamBranchGeminiRequest_BranchDiff) GetFileDiffs() []*StreamBranchGeminiRequest_BranchDiff_FileDiff {
	if x != nil {
		return x.FileDiffs
	}
	return nil
}

func (x *StreamBranchGeminiRequest_BranchDiff) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type StreamBranchGeminiRequest_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamBranchGeminiRequest_File) Reset() {
	*x = StreamBranchGeminiRequest_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiRequest_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiRequest_File) ProtoMessage() {}

func (x *StreamBranchGeminiRequest_File) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiRequest_File.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiRequest_File) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{89, 2}
}

func (x *StreamBranchGeminiRequest_File) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamBranchGeminiRequest_File) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamBranchGeminiRequest_FileWithPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string  `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                  string  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Priority              float32 `protobuf:"fixed32,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *StreamBranchGeminiRequest_FileWithPriority) Reset() {
	*x = StreamBranchGeminiRequest_FileWithPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiRequest_FileWithPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiRequest_FileWithPriority) ProtoMessage() {}

func (x *StreamBranchGeminiRequest_FileWithPriority) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiRequest_FileWithPriority.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiRequest_FileWithPriority) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{89, 3}
}

func (x *StreamBranchGeminiRequest_FileWithPriority) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamBranchGeminiRequest_FileWithPriority) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamBranchGeminiRequest_FileWithPriority) GetPriority() float32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type StreamBranchGeminiRequest_BranchDiff_FileDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Diff     string `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
	TooBig   bool   `protobuf:"varint,3,opt,name=too_big,json=tooBig,proto3" json:"too_big,omitempty"`
}

func (x *StreamBranchGeminiRequest_BranchDiff_FileDiff) Reset() {
	*x = StreamBranchGeminiRequest_BranchDiff_FileDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[541]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchGeminiRequest_BranchDiff_FileDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchGeminiRequest_BranchDiff_FileDiff) ProtoMessage() {}

func (x *StreamBranchGeminiRequest_BranchDiff_FileDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[541]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchGeminiRequest_BranchDiff_FileDiff.ProtoReflect.Descriptor instead.
func (*StreamBranchGeminiRequest_BranchDiff_FileDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{89, 1, 0}
}

func (x *StreamBranchGeminiRequest_BranchDiff_FileDiff) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StreamBranchGeminiRequest_BranchDiff_FileDiff) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

func (x *StreamBranchGeminiRequest_BranchDiff_FileDiff) GetTooBig() bool {
	if x != nil {
		return x.TooBig
	}
	return false
}

type StreamBranchFileSelectionsResponse_FileInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Instruction           string `protobuf:"bytes,2,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *StreamBranchFileSelectionsResponse_FileInstruction) Reset() {
	*x = StreamBranchFileSelectionsResponse_FileInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[542]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamBranchFileSelectionsResponse_FileInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamBranchFileSelectionsResponse_FileInstruction) ProtoMessage() {}

func (x *StreamBranchFileSelectionsResponse_FileInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[542]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamBranchFileSelectionsResponse_FileInstruction.ProtoReflect.Descriptor instead.
func (*StreamBranchFileSelectionsResponse_FileInstruction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{92, 0}
}

func (x *StreamBranchFileSelectionsResponse_FileInstruction) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamBranchFileSelectionsResponse_FileInstruction) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

type CmdKDebugInfo_UnsavedFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *CmdKDebugInfo_UnsavedFiles) Reset() {
	*x = CmdKDebugInfo_UnsavedFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[543]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKDebugInfo_UnsavedFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKDebugInfo_UnsavedFiles) ProtoMessage() {}

func (x *CmdKDebugInfo_UnsavedFiles) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[543]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKDebugInfo_UnsavedFiles.ProtoReflect.Descriptor instead.
func (*CmdKDebugInfo_UnsavedFiles) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{96, 0}
}

func (x *CmdKDebugInfo_UnsavedFiles) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CmdKDebugInfo_UnsavedFiles) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type CmdKDebugInfo_OpenEditor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	EditorGroupIndex      int32  `protobuf:"varint,2,opt,name=editor_group_index,json=editorGroupIndex,proto3" json:"editor_group_index,omitempty"`
	EditorGroupId         int32  `protobuf:"varint,3,opt,name=editor_group_id,json=editorGroupId,proto3" json:"editor_group_id,omitempty"`
	IsActive              bool   `protobuf:"varint,4,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *CmdKDebugInfo_OpenEditor) Reset() {
	*x = CmdKDebugInfo_OpenEditor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[544]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKDebugInfo_OpenEditor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKDebugInfo_OpenEditor) ProtoMessage() {}

func (x *CmdKDebugInfo_OpenEditor) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[544]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKDebugInfo_OpenEditor.ProtoReflect.Descriptor instead.
func (*CmdKDebugInfo_OpenEditor) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{96, 1}
}

func (x *CmdKDebugInfo_OpenEditor) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *CmdKDebugInfo_OpenEditor) GetEditorGroupIndex() int32 {
	if x != nil {
		return x.EditorGroupIndex
	}
	return 0
}

func (x *CmdKDebugInfo_OpenEditor) GetEditorGroupId() int32 {
	if x != nil {
		return x.EditorGroupId
	}
	return 0
}

func (x *CmdKDebugInfo_OpenEditor) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CmdKDebugInfo_CppFileDiffHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName    string   `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	DiffHistory []string `protobuf:"bytes,2,rep,name=diff_history,json=diffHistory,proto3" json:"diff_history,omitempty"`
}

func (x *CmdKDebugInfo_CppFileDiffHistory) Reset() {
	*x = CmdKDebugInfo_CppFileDiffHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[545]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKDebugInfo_CppFileDiffHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKDebugInfo_CppFileDiffHistory) ProtoMessage() {}

func (x *CmdKDebugInfo_CppFileDiffHistory) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[545]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKDebugInfo_CppFileDiffHistory.ProtoReflect.Descriptor instead.
func (*CmdKDebugInfo_CppFileDiffHistory) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{96, 2}
}

func (x *CmdKDebugInfo_CppFileDiffHistory) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CmdKDebugInfo_CppFileDiffHistory) GetDiffHistory() []string {
	if x != nil {
		return x.DiffHistory
	}
	return nil
}

type CmdKDebugInfo_PastThought struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text              string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TimeInUnixSeconds float64 `protobuf:"fixed64,2,opt,name=time_in_unix_seconds,json=timeInUnixSeconds,proto3" json:"time_in_unix_seconds,omitempty"`
}

func (x *CmdKDebugInfo_PastThought) Reset() {
	*x = CmdKDebugInfo_PastThought{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[546]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKDebugInfo_PastThought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKDebugInfo_PastThought) ProtoMessage() {}

func (x *CmdKDebugInfo_PastThought) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[546]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKDebugInfo_PastThought.ProtoReflect.Descriptor instead.
func (*CmdKDebugInfo_PastThought) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{96, 3}
}

func (x *CmdKDebugInfo_PastThought) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CmdKDebugInfo_PastThought) GetTimeInUnixSeconds() float64 {
	if x != nil {
		return x.TimeInUnixSeconds
	}
	return 0
}

type StreamInlineLongCompletionRequest_ContextBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextType StreamInlineLongCompletionRequest_ContextBlock_ContextType `protobuf:"varint,1,opt,name=context_type,json=contextType,proto3,enum=aiserver.v1.StreamInlineLongCompletionRequest_ContextBlock_ContextType" json:"context_type,omitempty"`
	Blocks      []*CodeBlock                                               `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *StreamInlineLongCompletionRequest_ContextBlock) Reset() {
	*x = StreamInlineLongCompletionRequest_ContextBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[547]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamInlineLongCompletionRequest_ContextBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInlineLongCompletionRequest_ContextBlock) ProtoMessage() {}

func (x *StreamInlineLongCompletionRequest_ContextBlock) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[547]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInlineLongCompletionRequest_ContextBlock.ProtoReflect.Descriptor instead.
func (*StreamInlineLongCompletionRequest_ContextBlock) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{103, 0}
}

func (x *StreamInlineLongCompletionRequest_ContextBlock) GetContextType() StreamInlineLongCompletionRequest_ContextBlock_ContextType {
	if x != nil {
		return x.ContextType
	}
	return StreamInlineLongCompletionRequest_ContextBlock_CONTEXT_TYPE_UNSPECIFIED
}

func (x *StreamInlineLongCompletionRequest_ContextBlock) GetBlocks() []*CodeBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type StreamCmdKResponse_EditStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber           int32   `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EditId                    int32   `protobuf:"varint,2,opt,name=edit_id,json=editId,proto3" json:"edit_id,omitempty"`
	MaxEndLineNumberExclusive *int32  `protobuf:"varint,3,opt,name=max_end_line_number_exclusive,json=maxEndLineNumberExclusive,proto3,oneof" json:"max_end_line_number_exclusive,omitempty"`
	FilePath                  *string `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
}

func (x *StreamCmdKResponse_EditStart) Reset() {
	*x = StreamCmdKResponse_EditStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[548]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCmdKResponse_EditStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCmdKResponse_EditStart) ProtoMessage() {}

func (x *StreamCmdKResponse_EditStart) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[548]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCmdKResponse_EditStart.ProtoReflect.Descriptor instead.
func (*StreamCmdKResponse_EditStart) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{106, 0}
}

func (x *StreamCmdKResponse_EditStart) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StreamCmdKResponse_EditStart) GetEditId() int32 {
	if x != nil {
		return x.EditId
	}
	return 0
}

func (x *StreamCmdKResponse_EditStart) GetMaxEndLineNumberExclusive() int32 {
	if x != nil && x.MaxEndLineNumberExclusive != nil {
		return *x.MaxEndLineNumberExclusive
	}
	return 0
}

func (x *StreamCmdKResponse_EditStart) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

type StreamCmdKResponse_EditStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	EditId   int32   `protobuf:"varint,2,opt,name=edit_id,json=editId,proto3" json:"edit_id,omitempty"`
	FilePath *string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
}

func (x *StreamCmdKResponse_EditStream) Reset() {
	*x = StreamCmdKResponse_EditStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[549]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCmdKResponse_EditStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCmdKResponse_EditStream) ProtoMessage() {}

func (x *StreamCmdKResponse_EditStream) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[549]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCmdKResponse_EditStream.ProtoReflect.Descriptor instead.
func (*StreamCmdKResponse_EditStream) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{106, 1}
}

func (x *StreamCmdKResponse_EditStream) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *StreamCmdKResponse_EditStream) GetEditId() int32 {
	if x != nil {
		return x.EditId
	}
	return 0
}

func (x *StreamCmdKResponse_EditStream) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

type StreamCmdKResponse_EditEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndLineNumberExclusive int32   `protobuf:"varint,1,opt,name=end_line_number_exclusive,json=endLineNumberExclusive,proto3" json:"end_line_number_exclusive,omitempty"`
	EditId                 int32   `protobuf:"varint,2,opt,name=edit_id,json=editId,proto3" json:"edit_id,omitempty"`
	FilePath               *string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3,oneof" json:"file_path,omitempty"`
}

func (x *StreamCmdKResponse_EditEnd) Reset() {
	*x = StreamCmdKResponse_EditEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[550]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCmdKResponse_EditEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCmdKResponse_EditEnd) ProtoMessage() {}

func (x *StreamCmdKResponse_EditEnd) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[550]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCmdKResponse_EditEnd.ProtoReflect.Descriptor instead.
func (*StreamCmdKResponse_EditEnd) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{106, 2}
}

func (x *StreamCmdKResponse_EditEnd) GetEndLineNumberExclusive() int32 {
	if x != nil {
		return x.EndLineNumberExclusive
	}
	return 0
}

func (x *StreamCmdKResponse_EditEnd) GetEditId() int32 {
	if x != nil {
		return x.EditId
	}
	return 0
}

func (x *StreamCmdKResponse_EditEnd) GetFilePath() string {
	if x != nil && x.FilePath != nil {
		return *x.FilePath
	}
	return ""
}

type StreamCmdKResponse_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamCmdKResponse_Chat) Reset() {
	*x = StreamCmdKResponse_Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[551]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCmdKResponse_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCmdKResponse_Chat) ProtoMessage() {}

func (x *StreamCmdKResponse_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[551]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCmdKResponse_Chat.ProtoReflect.Descriptor instead.
func (*StreamCmdKResponse_Chat) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{106, 3}
}

func (x *StreamCmdKResponse_Chat) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamCmdKResponse_StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *StreamCmdKResponse_StatusUpdate) Reset() {
	*x = StreamCmdKResponse_StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[552]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCmdKResponse_StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCmdKResponse_StatusUpdate) ProtoMessage() {}

func (x *StreamCmdKResponse_StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[552]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCmdKResponse_StatusUpdate.ProtoReflect.Descriptor instead.
func (*StreamCmdKResponse_StatusUpdate) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{106, 4}
}

func (x *StreamCmdKResponse_StatusUpdate) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

type StreamSlashEditFollowUpWithPreviousEditsResponse_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_Chat) Reset() {
	*x = StreamSlashEditFollowUpWithPreviousEditsResponse_Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[553]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSlashEditFollowUpWithPreviousEditsResponse_Chat) ProtoMessage() {}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[553]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSlashEditFollowUpWithPreviousEditsResponse_Chat.ProtoReflect.Descriptor instead.
func (*StreamSlashEditFollowUpWithPreviousEditsResponse_Chat) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{109, 0}
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_Chat) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousEdits []*SlashEditPreviousEdit `protobuf:"bytes,1,rep,name=previous_edits,json=previousEdits,proto3" json:"previous_edits,omitempty"`
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate) Reset() {
	*x = StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[554]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate) ProtoMessage() {}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[554]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate.ProtoReflect.Descriptor instead.
func (*StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{109, 1}
}

func (x *StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate) GetPreviousEdits() []*SlashEditPreviousEdit {
	if x != nil {
		return x.PreviousEdits
	}
	return nil
}

type DocumentSymbol_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber int32 `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	StartColumn     int32 `protobuf:"varint,2,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndLineNumber   int32 `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	EndColumn       int32 `protobuf:"varint,4,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
}

func (x *DocumentSymbol_Range) Reset() {
	*x = DocumentSymbol_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[555]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentSymbol_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentSymbol_Range) ProtoMessage() {}

func (x *DocumentSymbol_Range) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[555]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentSymbol_Range.ProtoReflect.Descriptor instead.
func (*DocumentSymbol_Range) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{113, 0}
}

func (x *DocumentSymbol_Range) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *DocumentSymbol_Range) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *DocumentSymbol_Range) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *DocumentSymbol_Range) GetEndColumn() int32 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

type CheckQueuePositionResponse_CustomLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckQueuePositionResponse_CustomLink) Reset() {
	*x = CheckQueuePositionResponse_CustomLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[556]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQueuePositionResponse_CustomLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQueuePositionResponse_CustomLink) ProtoMessage() {}

func (x *CheckQueuePositionResponse_CustomLink) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[556]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQueuePositionResponse_CustomLink.ProtoReflect.Descriptor instead.
func (*CheckQueuePositionResponse_CustomLink) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{126, 0}
}

func (x *CheckQueuePositionResponse_CustomLink) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CheckQueuePositionResponse_CustomLink) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UsageEventDetails_Chat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIntent string `protobuf:"bytes,1,opt,name=model_intent,json=modelIntent,proto3" json:"model_intent,omitempty"`
}

func (x *UsageEventDetails_Chat) Reset() {
	*x = UsageEventDetails_Chat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[557]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_Chat) ProtoMessage() {}

func (x *UsageEventDetails_Chat) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[557]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_Chat.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_Chat) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 0}
}

func (x *UsageEventDetails_Chat) GetModelIntent() string {
	if x != nil {
		return x.ModelIntent
	}
	return ""
}

type UsageEventDetails_ContextChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIntent string `protobuf:"bytes,1,opt,name=model_intent,json=modelIntent,proto3" json:"model_intent,omitempty"`
}

func (x *UsageEventDetails_ContextChat) Reset() {
	*x = UsageEventDetails_ContextChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[558]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_ContextChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_ContextChat) ProtoMessage() {}

func (x *UsageEventDetails_ContextChat) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[558]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_ContextChat.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_ContextChat) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 1}
}

func (x *UsageEventDetails_ContextChat) GetModelIntent() string {
	if x != nil {
		return x.ModelIntent
	}
	return ""
}

type UsageEventDetails_CmdK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIntent string `protobuf:"bytes,1,opt,name=model_intent,json=modelIntent,proto3" json:"model_intent,omitempty"`
}

func (x *UsageEventDetails_CmdK) Reset() {
	*x = UsageEventDetails_CmdK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[559]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_CmdK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_CmdK) ProtoMessage() {}

func (x *UsageEventDetails_CmdK) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[559]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_CmdK.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_CmdK) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 2}
}

func (x *UsageEventDetails_CmdK) GetModelIntent() string {
	if x != nil {
		return x.ModelIntent
	}
	return ""
}

type UsageEventDetails_TerminalCmdK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIntent string `protobuf:"bytes,1,opt,name=model_intent,json=modelIntent,proto3" json:"model_intent,omitempty"`
}

func (x *UsageEventDetails_TerminalCmdK) Reset() {
	*x = UsageEventDetails_TerminalCmdK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[560]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_TerminalCmdK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_TerminalCmdK) ProtoMessage() {}

func (x *UsageEventDetails_TerminalCmdK) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[560]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_TerminalCmdK.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_TerminalCmdK) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 3}
}

func (x *UsageEventDetails_TerminalCmdK) GetModelIntent() string {
	if x != nil {
		return x.ModelIntent
	}
	return ""
}

type UsageEventDetails_AiReviewAcceptedComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UsageEventDetails_AiReviewAcceptedComment) Reset() {
	*x = UsageEventDetails_AiReviewAcceptedComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[561]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_AiReviewAcceptedComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_AiReviewAcceptedComment) ProtoMessage() {}

func (x *UsageEventDetails_AiReviewAcceptedComment) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[561]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_AiReviewAcceptedComment.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_AiReviewAcceptedComment) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 4}
}

type UsageEventDetails_InterpreterChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIntent string `protobuf:"bytes,1,opt,name=model_intent,json=modelIntent,proto3" json:"model_intent,omitempty"`
}

func (x *UsageEventDetails_InterpreterChat) Reset() {
	*x = UsageEventDetails_InterpreterChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[562]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_InterpreterChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_InterpreterChat) ProtoMessage() {}

func (x *UsageEventDetails_InterpreterChat) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[562]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_InterpreterChat.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_InterpreterChat) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 5}
}

func (x *UsageEventDetails_InterpreterChat) GetModelIntent() string {
	if x != nil {
		return x.ModelIntent
	}
	return ""
}

type UsageEventDetails_SlashEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIntent string `protobuf:"bytes,1,opt,name=model_intent,json=modelIntent,proto3" json:"model_intent,omitempty"`
}

func (x *UsageEventDetails_SlashEdit) Reset() {
	*x = UsageEventDetails_SlashEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[563]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventDetails_SlashEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventDetails_SlashEdit) ProtoMessage() {}

func (x *UsageEventDetails_SlashEdit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[563]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventDetails_SlashEdit.ProtoReflect.Descriptor instead.
func (*UsageEventDetails_SlashEdit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{127, 6}
}

func (x *UsageEventDetails_SlashEdit) GetModelIntent() string {
	if x != nil {
		return x.ModelIntent
	}
	return ""
}

type DoThisForMeCheckResponse_SkipAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoThisForMeCheckResponse_SkipAction) Reset() {
	*x = DoThisForMeCheckResponse_SkipAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[564]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeCheckResponse_SkipAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeCheckResponse_SkipAction) ProtoMessage() {}

func (x *DoThisForMeCheckResponse_SkipAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[564]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeCheckResponse_SkipAction.ProtoReflect.Descriptor instead.
func (*DoThisForMeCheckResponse_SkipAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{131, 0}
}

type DoThisForMeCheckResponse_EditAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *DoThisForMeCheckResponse_EditAction) Reset() {
	*x = DoThisForMeCheckResponse_EditAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[565]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeCheckResponse_EditAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeCheckResponse_EditAction) ProtoMessage() {}

func (x *DoThisForMeCheckResponse_EditAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[565]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeCheckResponse_EditAction.ProtoReflect.Descriptor instead.
func (*DoThisForMeCheckResponse_EditAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{131, 1}
}

func (x *DoThisForMeCheckResponse_EditAction) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type DoThisForMeCheckResponse_CreateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *DoThisForMeCheckResponse_CreateAction) Reset() {
	*x = DoThisForMeCheckResponse_CreateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[566]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeCheckResponse_CreateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeCheckResponse_CreateAction) ProtoMessage() {}

func (x *DoThisForMeCheckResponse_CreateAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[566]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeCheckResponse_CreateAction.ProtoReflect.Descriptor instead.
func (*DoThisForMeCheckResponse_CreateAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{131, 2}
}

func (x *DoThisForMeCheckResponse_CreateAction) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type DoThisForMeCheckResponse_RunAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *DoThisForMeCheckResponse_RunAction) Reset() {
	*x = DoThisForMeCheckResponse_RunAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[567]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeCheckResponse_RunAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeCheckResponse_RunAction) ProtoMessage() {}

func (x *DoThisForMeCheckResponse_RunAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[567]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeCheckResponse_RunAction.ProtoReflect.Descriptor instead.
func (*DoThisForMeCheckResponse_RunAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{131, 3}
}

func (x *DoThisForMeCheckResponse_RunAction) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type DoThisForMeResponse_UpdateStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DoThisForMeResponse_UpdateStatus) Reset() {
	*x = DoThisForMeResponse_UpdateStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[568]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoThisForMeResponse_UpdateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoThisForMeResponse_UpdateStatus) ProtoMessage() {}

func (x *DoThisForMeResponse_UpdateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[568]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoThisForMeResponse_UpdateStatus.ProtoReflect.Descriptor instead.
func (*DoThisForMeResponse_UpdateStatus) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{134, 0}
}

func (x *DoThisForMeResponse_UpdateStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type StreamChatToolformerResponse_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamChatToolformerResponse_Output) Reset() {
	*x = StreamChatToolformerResponse_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[569]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatToolformerResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatToolformerResponse_Output) ProtoMessage() {}

func (x *StreamChatToolformerResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[569]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatToolformerResponse_Output.ProtoReflect.Descriptor instead.
func (*StreamChatToolformerResponse_Output) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{135, 0}
}

func (x *StreamChatToolformerResponse_Output) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type StreamChatToolformerResponse_ToolAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserFacingText string    `protobuf:"bytes,1,opt,name=user_facing_text,json=userFacingText,proto3" json:"user_facing_text,omitempty"`
	RawModelOutput string    `protobuf:"bytes,3,opt,name=raw_model_output,json=rawModelOutput,proto3" json:"raw_model_output,omitempty"`
	ToolCall       *ToolCall `protobuf:"bytes,2,opt,name=tool_call,json=toolCall,proto3" json:"tool_call,omitempty"`
	MoreToCome     bool      `protobuf:"varint,4,opt,name=more_to_come,json=moreToCome,proto3" json:"more_to_come,omitempty"`
}

func (x *StreamChatToolformerResponse_ToolAction) Reset() {
	*x = StreamChatToolformerResponse_ToolAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[570]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatToolformerResponse_ToolAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatToolformerResponse_ToolAction) ProtoMessage() {}

func (x *StreamChatToolformerResponse_ToolAction) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[570]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatToolformerResponse_ToolAction.ProtoReflect.Descriptor instead.
func (*StreamChatToolformerResponse_ToolAction) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{135, 1}
}

func (x *StreamChatToolformerResponse_ToolAction) GetUserFacingText() string {
	if x != nil {
		return x.UserFacingText
	}
	return ""
}

func (x *StreamChatToolformerResponse_ToolAction) GetRawModelOutput() string {
	if x != nil {
		return x.RawModelOutput
	}
	return ""
}

func (x *StreamChatToolformerResponse_ToolAction) GetToolCall() *ToolCall {
	if x != nil {
		return x.ToolCall
	}
	return nil
}

func (x *StreamChatToolformerResponse_ToolAction) GetMoreToCome() bool {
	if x != nil {
		return x.MoreToCome
	}
	return false
}

type StreamChatToolformerResponse_Thought struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *StreamChatToolformerResponse_Thought) Reset() {
	*x = StreamChatToolformerResponse_Thought{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[571]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamChatToolformerResponse_Thought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChatToolformerResponse_Thought) ProtoMessage() {}

func (x *StreamChatToolformerResponse_Thought) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[571]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChatToolformerResponse_Thought.ProtoReflect.Descriptor instead.
func (*StreamChatToolformerResponse_Thought) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{135, 2}
}

func (x *StreamChatToolformerResponse_Thought) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GetSymbolsParams_LineRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumber        int32 `protobuf:"varint,1,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumberInclusive int32 `protobuf:"varint,2,opt,name=end_line_number_inclusive,json=endLineNumberInclusive,proto3" json:"end_line_number_inclusive,omitempty"`
}

func (x *GetSymbolsParams_LineRange) Reset() {
	*x = GetSymbolsParams_LineRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[572]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSymbolsParams_LineRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSymbolsParams_LineRange) ProtoMessage() {}

func (x *GetSymbolsParams_LineRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[572]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSymbolsParams_LineRange.ProtoReflect.Descriptor instead.
func (*GetSymbolsParams_LineRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{150, 0}
}

func (x *GetSymbolsParams_LineRange) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *GetSymbolsParams_LineRange) GetEndLineNumberInclusive() int32 {
	if x != nil {
		return x.EndLineNumberInclusive
	}
	return 0
}

type SearchToolFileSearchResult_Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineNumber int32  `protobuf:"varint,1,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SearchToolFileSearchResult_Line) Reset() {
	*x = SearchToolFileSearchResult_Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[573]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchToolFileSearchResult_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchToolFileSearchResult_Line) ProtoMessage() {}

func (x *SearchToolFileSearchResult_Line) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[573]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchToolFileSearchResult_Line.ProtoReflect.Descriptor instead.
func (*SearchToolFileSearchResult_Line) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{162, 0}
}

func (x *SearchToolFileSearchResult_Line) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *SearchToolFileSearchResult_Line) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type GotodefToolFileSearchResult_Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineNumber int32  `protobuf:"varint,1,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Text       string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *GotodefToolFileSearchResult_Line) Reset() {
	*x = GotodefToolFileSearchResult_Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[574]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GotodefToolFileSearchResult_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GotodefToolFileSearchResult_Line) ProtoMessage() {}

func (x *GotodefToolFileSearchResult_Line) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[574]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GotodefToolFileSearchResult_Line.ProtoReflect.Descriptor instead.
func (*GotodefToolFileSearchResult_Line) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{165, 0}
}

func (x *GotodefToolFileSearchResult_Line) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *GotodefToolFileSearchResult_Line) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type EditResult_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                                    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity           string                                    `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	StartLineNumber    int32                                     `protobuf:"varint,3,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber      int32                                     `protobuf:"varint,4,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	RelatedInformation []*EditResult_Feedback_RelatedInformation `protobuf:"bytes,5,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
}

func (x *EditResult_Feedback) Reset() {
	*x = EditResult_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[575]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditResult_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditResult_Feedback) ProtoMessage() {}

func (x *EditResult_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[575]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditResult_Feedback.ProtoReflect.Descriptor instead.
func (*EditResult_Feedback) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{166, 0}
}

func (x *EditResult_Feedback) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EditResult_Feedback) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *EditResult_Feedback) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *EditResult_Feedback) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *EditResult_Feedback) GetRelatedInformation() []*EditResult_Feedback_RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

type EditResult_Feedback_RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message               string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StartLineNumber       int32  `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber         int32  `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	RelativeWorkspacePath string `protobuf:"bytes,4,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *EditResult_Feedback_RelatedInformation) Reset() {
	*x = EditResult_Feedback_RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[576]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditResult_Feedback_RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditResult_Feedback_RelatedInformation) ProtoMessage() {}

func (x *EditResult_Feedback_RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[576]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditResult_Feedback_RelatedInformation.ProtoReflect.Descriptor instead.
func (*EditResult_Feedback_RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{166, 0, 0}
}

func (x *EditResult_Feedback_RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *EditResult_Feedback_RelatedInformation) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *EditResult_Feedback_RelatedInformation) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *EditResult_Feedback_RelatedInformation) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type AddTestResult_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message            string                                       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity           string                                       `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	StartLineNumber    int32                                        `protobuf:"varint,3,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber      int32                                        `protobuf:"varint,4,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	RelatedInformation []*AddTestResult_Feedback_RelatedInformation `protobuf:"bytes,5,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
}

func (x *AddTestResult_Feedback) Reset() {
	*x = AddTestResult_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[577]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTestResult_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestResult_Feedback) ProtoMessage() {}

func (x *AddTestResult_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[577]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestResult_Feedback.ProtoReflect.Descriptor instead.
func (*AddTestResult_Feedback) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{170, 0}
}

func (x *AddTestResult_Feedback) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddTestResult_Feedback) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *AddTestResult_Feedback) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *AddTestResult_Feedback) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *AddTestResult_Feedback) GetRelatedInformation() []*AddTestResult_Feedback_RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

type AddTestResult_Feedback_RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message               string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StartLineNumber       int32  `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber         int32  `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
	RelativeWorkspacePath string `protobuf:"bytes,4,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *AddTestResult_Feedback_RelatedInformation) Reset() {
	*x = AddTestResult_Feedback_RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[578]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTestResult_Feedback_RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTestResult_Feedback_RelatedInformation) ProtoMessage() {}

func (x *AddTestResult_Feedback_RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[578]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTestResult_Feedback_RelatedInformation.ProtoReflect.Descriptor instead.
func (*AddTestResult_Feedback_RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{170, 0, 0}
}

func (x *AddTestResult_Feedback_RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AddTestResult_Feedback_RelatedInformation) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *AddTestResult_Feedback_RelatedInformation) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *AddTestResult_Feedback_RelatedInformation) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type GetTestsResult_Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Lines []string `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *GetTestsResult_Test) Reset() {
	*x = GetTestsResult_Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[579]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestsResult_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestsResult_Test) ProtoMessage() {}

func (x *GetTestsResult_Test) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[579]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestsResult_Test.ProtoReflect.Descriptor instead.
func (*GetTestsResult_Test) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{174, 0}
}

func (x *GetTestsResult_Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTestsResult_Test) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type SemanticSearchResult_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string          `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Score                 float32         `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Content               string          `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Range                 *SimpleRange    `protobuf:"bytes,4,opt,name=range,proto3" json:"range,omitempty"`
	OriginalContent       *string         `protobuf:"bytes,5,opt,name=original_content,json=originalContent,proto3,oneof" json:"original_content,omitempty"`
	DetailedLines         []*DetailedLine `protobuf:"bytes,6,rep,name=detailed_lines,json=detailedLines,proto3" json:"detailed_lines,omitempty"`
}

func (x *SemanticSearchResult_Item) Reset() {
	*x = SemanticSearchResult_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[580]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticSearchResult_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticSearchResult_Item) ProtoMessage() {}

func (x *SemanticSearchResult_Item) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[580]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticSearchResult_Item.ProtoReflect.Descriptor instead.
func (*SemanticSearchResult_Item) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{176, 0}
}

func (x *SemanticSearchResult_Item) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *SemanticSearchResult_Item) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SemanticSearchResult_Item) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SemanticSearchResult_Item) GetRange() *SimpleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *SemanticSearchResult_Item) GetOriginalContent() string {
	if x != nil && x.OriginalContent != nil {
		return *x.OriginalContent
	}
	return ""
}

func (x *SemanticSearchResult_Item) GetDetailedLines() []*DetailedLine {
	if x != nil {
		return x.DetailedLines
	}
	return nil
}

type GetProjectStructureResult_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Outline               string `protobuf:"bytes,2,opt,name=outline,proto3" json:"outline,omitempty"`
}

func (x *GetProjectStructureResult_File) Reset() {
	*x = GetProjectStructureResult_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[581]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectStructureResult_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectStructureResult_File) ProtoMessage() {}

func (x *GetProjectStructureResult_File) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[581]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectStructureResult_File.ProtoReflect.Descriptor instead.
func (*GetProjectStructureResult_File) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{178, 0}
}

func (x *GetProjectStructureResult_File) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetProjectStructureResult_File) GetOutline() string {
	if x != nil {
		return x.Outline
	}
	return ""
}

type PushAiThoughtRequest_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptedHallucinatedFunctionEvent *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent `protobuf:"bytes,1,opt,name=accepted_hallucinated_function_event,json=acceptedHallucinatedFunctionEvent,proto3" json:"accepted_hallucinated_function_event,omitempty"`
}

func (x *PushAiThoughtRequest_Metadata) Reset() {
	*x = PushAiThoughtRequest_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[582]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushAiThoughtRequest_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushAiThoughtRequest_Metadata) ProtoMessage() {}

func (x *PushAiThoughtRequest_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[582]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushAiThoughtRequest_Metadata.ProtoReflect.Descriptor instead.
func (*PushAiThoughtRequest_Metadata) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{185, 0}
}

func (x *PushAiThoughtRequest_Metadata) GetAcceptedHallucinatedFunctionEvent() *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent {
	if x != nil {
		return x.AcceptedHallucinatedFunctionEvent
	}
	return nil
}

type PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImplementationUuid       string `protobuf:"bytes,1,opt,name=implementation_uuid,json=implementationUuid,proto3" json:"implementation_uuid,omitempty"`
	HallucinatedFunctionUuid string `protobuf:"bytes,2,opt,name=hallucinated_function_uuid,json=hallucinatedFunctionUuid,proto3" json:"hallucinated_function_uuid,omitempty"`
	Implementation           string `protobuf:"bytes,3,opt,name=implementation,proto3" json:"implementation,omitempty"`
	Source                   string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	ImplementationReqid      string `protobuf:"bytes,5,opt,name=implementation_reqid,json=implementationReqid,proto3" json:"implementation_reqid,omitempty"`
	PlanReqid                string `protobuf:"bytes,6,opt,name=plan_reqid,json=planReqid,proto3" json:"plan_reqid,omitempty"`
	ReflectionReqid          string `protobuf:"bytes,7,opt,name=reflection_reqid,json=reflectionReqid,proto3" json:"reflection_reqid,omitempty"`
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) Reset() {
	*x = PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[583]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) ProtoMessage() {}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[583]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent.ProtoReflect.Descriptor instead.
func (*PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{185, 0, 0}
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetImplementationUuid() string {
	if x != nil {
		return x.ImplementationUuid
	}
	return ""
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetHallucinatedFunctionUuid() string {
	if x != nil {
		return x.HallucinatedFunctionUuid
	}
	return ""
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetImplementation() string {
	if x != nil {
		return x.Implementation
	}
	return ""
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetImplementationReqid() string {
	if x != nil {
		return x.ImplementationReqid
	}
	return ""
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetPlanReqid() string {
	if x != nil {
		return x.PlanReqid
	}
	return ""
}

func (x *PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent) GetReflectionReqid() string {
	if x != nil {
		return x.ReflectionReqid
	}
	return ""
}

type TaskInstruction_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *TaskInstruction_CodeChunk) Reset() {
	*x = TaskInstruction_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[584]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInstruction_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInstruction_CodeChunk) ProtoMessage() {}

func (x *TaskInstruction_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[584]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInstruction_CodeChunk.ProtoReflect.Descriptor instead.
func (*TaskInstruction_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{205, 0}
}

func (x *TaskInstruction_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *TaskInstruction_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *TaskInstruction_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type TaskStreamLogResponse_InfoUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HumanReadableTitle *string     `protobuf:"bytes,1,opt,name=human_readable_title,json=humanReadableTitle,proto3,oneof" json:"human_readable_title,omitempty"`
	TaskStatus         *TaskStatus `protobuf:"varint,2,opt,name=task_status,json=taskStatus,proto3,enum=aiserver.v1.TaskStatus,oneof" json:"task_status,omitempty"`
}

func (x *TaskStreamLogResponse_InfoUpdate) Reset() {
	*x = TaskStreamLogResponse_InfoUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[585]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamLogResponse_InfoUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamLogResponse_InfoUpdate) ProtoMessage() {}

func (x *TaskStreamLogResponse_InfoUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[585]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamLogResponse_InfoUpdate.ProtoReflect.Descriptor instead.
func (*TaskStreamLogResponse_InfoUpdate) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{212, 0}
}

func (x *TaskStreamLogResponse_InfoUpdate) GetHumanReadableTitle() string {
	if x != nil && x.HumanReadableTitle != nil {
		return *x.HumanReadableTitle
	}
	return ""
}

func (x *TaskStreamLogResponse_InfoUpdate) GetTaskStatus() TaskStatus {
	if x != nil && x.TaskStatus != nil {
		return *x.TaskStatus
	}
	return TaskStatus_TASK_STATUS_UNSPECIFIED
}

type TaskUserMessage_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *TaskUserMessage_CodeChunk) Reset() {
	*x = TaskUserMessage_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[586]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUserMessage_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUserMessage_CodeChunk) ProtoMessage() {}

func (x *TaskUserMessage_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[586]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUserMessage_CodeChunk.ProtoReflect.Descriptor instead.
func (*TaskUserMessage_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{217, 0}
}

func (x *TaskUserMessage_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *TaskUserMessage_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *TaskUserMessage_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type IndexFileData_NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Stage   string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *IndexFileData_NodeData) Reset() {
	*x = IndexFileData_NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[587]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexFileData_NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexFileData_NodeData) ProtoMessage() {}

func (x *IndexFileData_NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[587]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexFileData_NodeData.ProtoReflect.Descriptor instead.
func (*IndexFileData_NodeData) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{227, 0}
}

func (x *IndexFileData_NodeData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *IndexFileData_NodeData) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *IndexFileData_NodeData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *IndexFileData_NodeData) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type ListenExperimentalIndexResponse_ReadyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexId string                          `protobuf:"bytes,1,opt,name=index_id,json=indexId,proto3" json:"index_id,omitempty"`
	Request *ListenExperimentalIndexRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *ListenExperimentalIndexResponse_ReadyItem) Reset() {
	*x = ListenExperimentalIndexResponse_ReadyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[588]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexResponse_ReadyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexResponse_ReadyItem) ProtoMessage() {}

func (x *ListenExperimentalIndexResponse_ReadyItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[588]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexResponse_ReadyItem.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexResponse_ReadyItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{229, 0}
}

func (x *ListenExperimentalIndexResponse_ReadyItem) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *ListenExperimentalIndexResponse_ReadyItem) GetRequest() *ListenExperimentalIndexRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type ListenExperimentalIndexResponse_RegisterItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *RegisterFileToIndexResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Request  *RegisterFileToIndexRequest  `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	ReqUuid  string                       `protobuf:"bytes,3,opt,name=req_uuid,json=reqUuid,proto3" json:"req_uuid,omitempty"`
}

func (x *ListenExperimentalIndexResponse_RegisterItem) Reset() {
	*x = ListenExperimentalIndexResponse_RegisterItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[589]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexResponse_RegisterItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexResponse_RegisterItem) ProtoMessage() {}

func (x *ListenExperimentalIndexResponse_RegisterItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[589]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexResponse_RegisterItem.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexResponse_RegisterItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{229, 1}
}

func (x *ListenExperimentalIndexResponse_RegisterItem) GetResponse() *RegisterFileToIndexResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_RegisterItem) GetRequest() *RegisterFileToIndexRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_RegisterItem) GetReqUuid() string {
	if x != nil {
		return x.ReqUuid
	}
	return ""
}

type ListenExperimentalIndexResponse_ChooseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ChooseCodeReferencesResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Request  *ChooseCodeReferencesRequest  `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	ReqUuid  string                        `protobuf:"bytes,3,opt,name=req_uuid,json=reqUuid,proto3" json:"req_uuid,omitempty"`
}

func (x *ListenExperimentalIndexResponse_ChooseItem) Reset() {
	*x = ListenExperimentalIndexResponse_ChooseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[590]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexResponse_ChooseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexResponse_ChooseItem) ProtoMessage() {}

func (x *ListenExperimentalIndexResponse_ChooseItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[590]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexResponse_ChooseItem.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexResponse_ChooseItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{229, 2}
}

func (x *ListenExperimentalIndexResponse_ChooseItem) GetResponse() *ChooseCodeReferencesResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_ChooseItem) GetRequest() *ChooseCodeReferencesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_ChooseItem) GetReqUuid() string {
	if x != nil {
		return x.ReqUuid
	}
	return ""
}

type ListenExperimentalIndexResponse_SummarizeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *SummarizeWithReferencesResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Request  *SummarizeWithReferencesRequest  `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	ReqUuid  string                           `protobuf:"bytes,3,opt,name=req_uuid,json=reqUuid,proto3" json:"req_uuid,omitempty"`
}

func (x *ListenExperimentalIndexResponse_SummarizeItem) Reset() {
	*x = ListenExperimentalIndexResponse_SummarizeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[591]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexResponse_SummarizeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexResponse_SummarizeItem) ProtoMessage() {}

func (x *ListenExperimentalIndexResponse_SummarizeItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[591]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexResponse_SummarizeItem.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexResponse_SummarizeItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{229, 3}
}

func (x *ListenExperimentalIndexResponse_SummarizeItem) GetResponse() *SummarizeWithReferencesResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_SummarizeItem) GetRequest() *SummarizeWithReferencesRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_SummarizeItem) GetReqUuid() string {
	if x != nil {
		return x.ReqUuid
	}
	return ""
}

type ListenExperimentalIndexResponse_ErrorItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string                          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StatusCode int32                           `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Register   *RegisterFileToIndexRequest     `protobuf:"bytes,3,opt,name=register,proto3" json:"register,omitempty"`
	Choose     *ChooseCodeReferencesRequest    `protobuf:"bytes,4,opt,name=choose,proto3" json:"choose,omitempty"`
	Summarize  *SummarizeWithReferencesRequest `protobuf:"bytes,5,opt,name=summarize,proto3" json:"summarize,omitempty"`
	ReqUuid    string                          `protobuf:"bytes,6,opt,name=req_uuid,json=reqUuid,proto3" json:"req_uuid,omitempty"`
}

func (x *ListenExperimentalIndexResponse_ErrorItem) Reset() {
	*x = ListenExperimentalIndexResponse_ErrorItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[592]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenExperimentalIndexResponse_ErrorItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenExperimentalIndexResponse_ErrorItem) ProtoMessage() {}

func (x *ListenExperimentalIndexResponse_ErrorItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[592]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenExperimentalIndexResponse_ErrorItem.ProtoReflect.Descriptor instead.
func (*ListenExperimentalIndexResponse_ErrorItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{229, 4}
}

func (x *ListenExperimentalIndexResponse_ErrorItem) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListenExperimentalIndexResponse_ErrorItem) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ListenExperimentalIndexResponse_ErrorItem) GetRegister() *RegisterFileToIndexRequest {
	if x != nil {
		return x.Register
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_ErrorItem) GetChoose() *ChooseCodeReferencesRequest {
	if x != nil {
		return x.Choose
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_ErrorItem) GetSummarize() *SummarizeWithReferencesRequest {
	if x != nil {
		return x.Summarize
	}
	return nil
}

func (x *ListenExperimentalIndexResponse_ErrorItem) GetReqUuid() string {
	if x != nil {
		return x.ReqUuid
	}
	return ""
}

type ChooseCodeReferencesResponse_FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId        string                                                    `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	NodeResponses []*ChooseCodeReferencesResponse_FileResponse_NodeResponse `protobuf:"bytes,2,rep,name=node_responses,json=nodeResponses,proto3" json:"node_responses,omitempty"`
}

func (x *ChooseCodeReferencesResponse_FileResponse) Reset() {
	*x = ChooseCodeReferencesResponse_FileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[593]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesResponse_FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesResponse_FileResponse) ProtoMessage() {}

func (x *ChooseCodeReferencesResponse_FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[593]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesResponse_FileResponse.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesResponse_FileResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{237, 0}
}

func (x *ChooseCodeReferencesResponse_FileResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ChooseCodeReferencesResponse_FileResponse) GetNodeResponses() []*ChooseCodeReferencesResponse_FileResponse_NodeResponse {
	if x != nil {
		return x.NodeResponses
	}
	return nil
}

type ChooseCodeReferencesResponse_NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId       string                  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Actions      []*CodeSymbolWithAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	Skipped      bool                    `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Dependencies []string                `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *ChooseCodeReferencesResponse_NodeResponse) Reset() {
	*x = ChooseCodeReferencesResponse_NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[594]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesResponse_NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesResponse_NodeResponse) ProtoMessage() {}

func (x *ChooseCodeReferencesResponse_NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[594]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesResponse_NodeResponse.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesResponse_NodeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{237, 1}
}

func (x *ChooseCodeReferencesResponse_NodeResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ChooseCodeReferencesResponse_NodeResponse) GetActions() []*CodeSymbolWithAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ChooseCodeReferencesResponse_NodeResponse) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ChooseCodeReferencesResponse_NodeResponse) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type ChooseCodeReferencesResponse_FileResponse_NodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId       string                  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Actions      []*CodeSymbolWithAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	Skipped      bool                    `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	Dependencies []string                `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) Reset() {
	*x = ChooseCodeReferencesResponse_FileResponse_NodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[595]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesResponse_FileResponse_NodeResponse) ProtoMessage() {}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[595]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesResponse_FileResponse_NodeResponse.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesResponse_FileResponse_NodeResponse) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{237, 0, 0}
}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) GetActions() []*CodeSymbolWithAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *ChooseCodeReferencesResponse_FileResponse_NodeResponse) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type ChooseCodeReferencesRequest_FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *ChooseCodeReferencesRequest_FileRequest) Reset() {
	*x = ChooseCodeReferencesRequest_FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[596]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesRequest_FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesRequest_FileRequest) ProtoMessage() {}

func (x *ChooseCodeReferencesRequest_FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[596]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesRequest_FileRequest.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesRequest_FileRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{238, 0}
}

func (x *ChooseCodeReferencesRequest_FileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type ChooseCodeReferencesRequest_NodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *ChooseCodeReferencesRequest_NodeRequest) Reset() {
	*x = ChooseCodeReferencesRequest_NodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[597]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseCodeReferencesRequest_NodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseCodeReferencesRequest_NodeRequest) ProtoMessage() {}

func (x *ChooseCodeReferencesRequest_NodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[597]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseCodeReferencesRequest_NodeRequest.ProtoReflect.Descriptor instead.
func (*ChooseCodeReferencesRequest_NodeRequest) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{238, 1}
}

func (x *ChooseCodeReferencesRequest_NodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type SummarizeWithReferencesResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summary string `protobuf:"bytes,1,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *SummarizeWithReferencesResponse_Success) Reset() {
	*x = SummarizeWithReferencesResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[598]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeWithReferencesResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeWithReferencesResponse_Success) ProtoMessage() {}

func (x *SummarizeWithReferencesResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[598]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeWithReferencesResponse_Success.ProtoReflect.Descriptor instead.
func (*SummarizeWithReferencesResponse_Success) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{239, 0}
}

func (x *SummarizeWithReferencesResponse_Success) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type SummarizeWithReferencesResponse_Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *SummarizeWithReferencesResponse_Dependency) Reset() {
	*x = SummarizeWithReferencesResponse_Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[599]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummarizeWithReferencesResponse_Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummarizeWithReferencesResponse_Dependency) ProtoMessage() {}

func (x *SummarizeWithReferencesResponse_Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[599]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummarizeWithReferencesResponse_Dependency.ProtoReflect.Descriptor instead.
func (*SummarizeWithReferencesResponse_Dependency) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{239, 1}
}

func (x *SummarizeWithReferencesResponse_Dependency) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodeResult_NodeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Stage   string `protobuf:"bytes,2,opt,name=stage,proto3" json:"stage,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *NodeResult_NodeData) Reset() {
	*x = NodeResult_NodeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[600]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResult_NodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResult_NodeData) ProtoMessage() {}

func (x *NodeResult_NodeData) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[600]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResult_NodeData.ProtoReflect.Descriptor instead.
func (*NodeResult_NodeData) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{249, 0}
}

func (x *NodeResult_NodeData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeResult_NodeData) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *NodeResult_NodeData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NodeResult_NodeData) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type TaskStreamChatContextResponse_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TaskStreamChatContextResponse_Output) Reset() {
	*x = TaskStreamChatContextResponse_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[601]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_Output) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[601]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_Output.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_Output) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 0}
}

func (x *TaskStreamChatContextResponse_Output) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TaskStreamChatContextResponse_GatheringStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *TaskStreamChatContextResponse_GatheringStep) Reset() {
	*x = TaskStreamChatContextResponse_GatheringStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[602]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_GatheringStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_GatheringStep) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_GatheringStep) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[602]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_GatheringStep.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_GatheringStep) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 1}
}

func (x *TaskStreamChatContextResponse_GatheringStep) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskStreamChatContextResponse_GatheringStep) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TaskStreamChatContextResponse_GatheringStep) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type TaskStreamChatContextResponse_GatheringFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string       `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Range                 *SimpleRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	StepIndex             int32        `protobuf:"varint,3,opt,name=step_index,json=stepIndex,proto3" json:"step_index,omitempty"`
	Score                 float32      `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *TaskStreamChatContextResponse_GatheringFile) Reset() {
	*x = TaskStreamChatContextResponse_GatheringFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[603]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_GatheringFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_GatheringFile) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_GatheringFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[603]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_GatheringFile.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_GatheringFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 2}
}

func (x *TaskStreamChatContextResponse_GatheringFile) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *TaskStreamChatContextResponse_GatheringFile) GetRange() *SimpleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TaskStreamChatContextResponse_GatheringFile) GetStepIndex() int32 {
	if x != nil {
		return x.StepIndex
	}
	return 0
}

func (x *TaskStreamChatContextResponse_GatheringFile) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TaskStreamChatContextResponse_RerankingStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TaskStreamChatContextResponse_RerankingStep) Reset() {
	*x = TaskStreamChatContextResponse_RerankingStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[604]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_RerankingStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_RerankingStep) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_RerankingStep) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[604]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_RerankingStep.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_RerankingStep) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 3}
}

func (x *TaskStreamChatContextResponse_RerankingStep) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskStreamChatContextResponse_RerankingStep) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type TaskStreamChatContextResponse_RerankingFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string       `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Range                 *SimpleRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Reason                string       `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Failed                bool         `protobuf:"varint,4,opt,name=failed,proto3" json:"failed,omitempty"`
	Score                 float32      `protobuf:"fixed32,5,opt,name=score,proto3" json:"score,omitempty"`
	StepIndex             int32        `protobuf:"varint,6,opt,name=step_index,json=stepIndex,proto3" json:"step_index,omitempty"`
}

func (x *TaskStreamChatContextResponse_RerankingFile) Reset() {
	*x = TaskStreamChatContextResponse_RerankingFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[605]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_RerankingFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_RerankingFile) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_RerankingFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[605]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_RerankingFile.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_RerankingFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 4}
}

func (x *TaskStreamChatContextResponse_RerankingFile) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *TaskStreamChatContextResponse_RerankingFile) GetRange() *SimpleRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *TaskStreamChatContextResponse_RerankingFile) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TaskStreamChatContextResponse_RerankingFile) GetFailed() bool {
	if x != nil {
		return x.Failed
	}
	return false
}

func (x *TaskStreamChatContextResponse_RerankingFile) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *TaskStreamChatContextResponse_RerankingFile) GetStepIndex() int32 {
	if x != nil {
		return x.StepIndex
	}
	return 0
}

type TaskStreamChatContextResponse_ReasoningStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TaskStreamChatContextResponse_ReasoningStep) Reset() {
	*x = TaskStreamChatContextResponse_ReasoningStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[606]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_ReasoningStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_ReasoningStep) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_ReasoningStep) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[606]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_ReasoningStep.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_ReasoningStep) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 5}
}

func (x *TaskStreamChatContextResponse_ReasoningStep) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskStreamChatContextResponse_ReasoningStep) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type TaskStreamChatContextResponse_ReasoningSubstep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarkdownExplanation string `protobuf:"bytes,1,opt,name=markdown_explanation,json=markdownExplanation,proto3" json:"markdown_explanation,omitempty"`
	StepIndex           int32  `protobuf:"varint,2,opt,name=step_index,json=stepIndex,proto3" json:"step_index,omitempty"`
}

func (x *TaskStreamChatContextResponse_ReasoningSubstep) Reset() {
	*x = TaskStreamChatContextResponse_ReasoningSubstep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[607]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStreamChatContextResponse_ReasoningSubstep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStreamChatContextResponse_ReasoningSubstep) ProtoMessage() {}

func (x *TaskStreamChatContextResponse_ReasoningSubstep) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[607]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStreamChatContextResponse_ReasoningSubstep.ProtoReflect.Descriptor instead.
func (*TaskStreamChatContextResponse_ReasoningSubstep) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{276, 6}
}

func (x *TaskStreamChatContextResponse_ReasoningSubstep) GetMarkdownExplanation() string {
	if x != nil {
		return x.MarkdownExplanation
	}
	return ""
}

func (x *TaskStreamChatContextResponse_ReasoningSubstep) GetStepIndex() int32 {
	if x != nil {
		return x.StepIndex
	}
	return 0
}

type ModelQueryResponse_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query              string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	SuccessfulParse    bool     `protobuf:"varint,2,opt,name=successful_parse,json=successfulParse,proto3" json:"successful_parse,omitempty"`
	GoodFileExtensions []string `protobuf:"bytes,3,rep,name=good_file_extensions,json=goodFileExtensions,proto3" json:"good_file_extensions,omitempty"`
	BadFileExtensions  []string `protobuf:"bytes,4,rep,name=bad_file_extensions,json=badFileExtensions,proto3" json:"bad_file_extensions,omitempty"`
	GoodPaths          []string `protobuf:"bytes,5,rep,name=good_paths,json=goodPaths,proto3" json:"good_paths,omitempty"`
	BadPaths           []string `protobuf:"bytes,6,rep,name=bad_paths,json=badPaths,proto3" json:"bad_paths,omitempty"`
}

func (x *ModelQueryResponse_Query) Reset() {
	*x = ModelQueryResponse_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[608]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQueryResponse_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQueryResponse_Query) ProtoMessage() {}

func (x *ModelQueryResponse_Query) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[608]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQueryResponse_Query.ProtoReflect.Descriptor instead.
func (*ModelQueryResponse_Query) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{281, 0}
}

func (x *ModelQueryResponse_Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ModelQueryResponse_Query) GetSuccessfulParse() bool {
	if x != nil {
		return x.SuccessfulParse
	}
	return false
}

func (x *ModelQueryResponse_Query) GetGoodFileExtensions() []string {
	if x != nil {
		return x.GoodFileExtensions
	}
	return nil
}

func (x *ModelQueryResponse_Query) GetBadFileExtensions() []string {
	if x != nil {
		return x.BadFileExtensions
	}
	return nil
}

func (x *ModelQueryResponse_Query) GetGoodPaths() []string {
	if x != nil {
		return x.GoodPaths
	}
	return nil
}

func (x *ModelQueryResponse_Query) GetBadPaths() []string {
	if x != nil {
		return x.BadPaths
	}
	return nil
}

type ModelQueryResponseV2_QueryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Glob  string `protobuf:"bytes,2,opt,name=glob,proto3" json:"glob,omitempty"`
	Index int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ModelQueryResponseV2_QueryItem) Reset() {
	*x = ModelQueryResponseV2_QueryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[609]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelQueryResponseV2_QueryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelQueryResponseV2_QueryItem) ProtoMessage() {}

func (x *ModelQueryResponseV2_QueryItem) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[609]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelQueryResponseV2_QueryItem.ProtoReflect.Descriptor instead.
func (*ModelQueryResponseV2_QueryItem) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{282, 0}
}

func (x *ModelQueryResponseV2_QueryItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ModelQueryResponseV2_QueryItem) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

func (x *ModelQueryResponseV2_QueryItem) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ContextOptions_AllDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableDocs []*ContextOptions_AllDocumentation_Documentation `protobuf:"bytes,1,rep,name=available_docs,json=availableDocs,proto3" json:"available_docs,omitempty"`
}

func (x *ContextOptions_AllDocumentation) Reset() {
	*x = ContextOptions_AllDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[610]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions_AllDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions_AllDocumentation) ProtoMessage() {}

func (x *ContextOptions_AllDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[610]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions_AllDocumentation.ProtoReflect.Descriptor instead.
func (*ContextOptions_AllDocumentation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284, 0}
}

func (x *ContextOptions_AllDocumentation) GetAvailableDocs() []*ContextOptions_AllDocumentation_Documentation {
	if x != nil {
		return x.AvailableDocs
	}
	return nil
}

type ContextOptions_CurrentFileContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string           `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string           `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	CursorPosition        *CursorPosition  `protobuf:"bytes,3,opt,name=cursor_position,json=cursorPosition,proto3" json:"cursor_position,omitempty"`
	Dataframes            []*DataframeInfo `protobuf:"bytes,4,rep,name=dataframes,proto3" json:"dataframes,omitempty"`
	LanguageId            string           `protobuf:"bytes,5,opt,name=language_id,json=languageId,proto3" json:"language_id,omitempty"`
	Selection             *CursorRange     `protobuf:"bytes,6,opt,name=selection,proto3" json:"selection,omitempty"`
}

func (x *ContextOptions_CurrentFileContents) Reset() {
	*x = ContextOptions_CurrentFileContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[611]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions_CurrentFileContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions_CurrentFileContents) ProtoMessage() {}

func (x *ContextOptions_CurrentFileContents) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[611]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions_CurrentFileContents.ProtoReflect.Descriptor instead.
func (*ContextOptions_CurrentFileContents) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284, 1}
}

func (x *ContextOptions_CurrentFileContents) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ContextOptions_CurrentFileContents) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *ContextOptions_CurrentFileContents) GetCursorPosition() *CursorPosition {
	if x != nil {
		return x.CursorPosition
	}
	return nil
}

func (x *ContextOptions_CurrentFileContents) GetDataframes() []*DataframeInfo {
	if x != nil {
		return x.Dataframes
	}
	return nil
}

func (x *ContextOptions_CurrentFileContents) GetLanguageId() string {
	if x != nil {
		return x.LanguageId
	}
	return ""
}

func (x *ContextOptions_CurrentFileContents) GetSelection() *CursorRange {
	if x != nil {
		return x.Selection
	}
	return nil
}

type ContextOptions_LinterDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                                         `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string                                         `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	Diagnostics           []*ContextOptions_LinterDiagnostics_Diagnostic `protobuf:"bytes,3,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *ContextOptions_LinterDiagnostics) Reset() {
	*x = ContextOptions_LinterDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[612]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions_LinterDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions_LinterDiagnostics) ProtoMessage() {}

func (x *ContextOptions_LinterDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[612]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions_LinterDiagnostics.ProtoReflect.Descriptor instead.
func (*ContextOptions_LinterDiagnostics) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284, 2}
}

func (x *ContextOptions_LinterDiagnostics) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ContextOptions_LinterDiagnostics) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *ContextOptions_LinterDiagnostics) GetDiagnostics() []*ContextOptions_LinterDiagnostics_Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type ContextOptions_GlobalContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContextOptions_GlobalContext) Reset() {
	*x = ContextOptions_GlobalContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[613]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions_GlobalContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions_GlobalContext) ProtoMessage() {}

func (x *ContextOptions_GlobalContext) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[613]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions_GlobalContext.ProtoReflect.Descriptor instead.
func (*ContextOptions_GlobalContext) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284, 3}
}

type ContextOptions_AllDocumentation_Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url        string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *ContextOptions_AllDocumentation_Documentation) Reset() {
	*x = ContextOptions_AllDocumentation_Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[614]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions_AllDocumentation_Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions_AllDocumentation_Documentation) ProtoMessage() {}

func (x *ContextOptions_AllDocumentation_Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[614]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions_AllDocumentation_Documentation.ProtoReflect.Descriptor instead.
func (*ContextOptions_AllDocumentation_Documentation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284, 0, 0}
}

func (x *ContextOptions_AllDocumentation_Documentation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContextOptions_AllDocumentation_Documentation) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ContextOptions_AllDocumentation_Documentation) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type ContextOptions_LinterDiagnostics_Diagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message               string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Source                string       `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Range                 *CursorRange `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	RelativeWorkspacePath string       `protobuf:"bytes,4,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) Reset() {
	*x = ContextOptions_LinterDiagnostics_Diagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[615]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOptions_LinterDiagnostics_Diagnostic) ProtoMessage() {}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[615]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOptions_LinterDiagnostics_Diagnostic.ProtoReflect.Descriptor instead.
func (*ContextOptions_LinterDiagnostics_Diagnostic) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{284, 2, 0}
}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) GetRange() *CursorRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *ContextOptions_LinterDiagnostics_Diagnostic) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

type IntentPredictionResponse_ChosenDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocIndices     []int32  `protobuf:"varint,1,rep,packed,name=doc_indices,json=docIndices,proto3" json:"doc_indices,omitempty"`
	DocIdentifiers []string `protobuf:"bytes,2,rep,name=doc_identifiers,json=docIdentifiers,proto3" json:"doc_identifiers,omitempty"`
	DocNames       []string `protobuf:"bytes,3,rep,name=doc_names,json=docNames,proto3" json:"doc_names,omitempty"`
}

func (x *IntentPredictionResponse_ChosenDocumentation) Reset() {
	*x = IntentPredictionResponse_ChosenDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[616]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentPredictionResponse_ChosenDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentPredictionResponse_ChosenDocumentation) ProtoMessage() {}

func (x *IntentPredictionResponse_ChosenDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[616]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentPredictionResponse_ChosenDocumentation.ProtoReflect.Descriptor instead.
func (*IntentPredictionResponse_ChosenDocumentation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{285, 0}
}

func (x *IntentPredictionResponse_ChosenDocumentation) GetDocIndices() []int32 {
	if x != nil {
		return x.DocIndices
	}
	return nil
}

func (x *IntentPredictionResponse_ChosenDocumentation) GetDocIdentifiers() []string {
	if x != nil {
		return x.DocIdentifiers
	}
	return nil
}

func (x *IntentPredictionResponse_ChosenDocumentation) GetDocNames() []string {
	if x != nil {
		return x.DocNames
	}
	return nil
}

type IntentPredictionResponse_ChosenFileContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntentPredictionResponse_ChosenFileContents) Reset() {
	*x = IntentPredictionResponse_ChosenFileContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[617]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentPredictionResponse_ChosenFileContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentPredictionResponse_ChosenFileContents) ProtoMessage() {}

func (x *IntentPredictionResponse_ChosenFileContents) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[617]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentPredictionResponse_ChosenFileContents.ProtoReflect.Descriptor instead.
func (*IntentPredictionResponse_ChosenFileContents) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{285, 1}
}

type IntentPredictionResponse_ChosenLinterDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosticIndices []int32 `protobuf:"varint,1,rep,packed,name=diagnostic_indices,json=diagnosticIndices,proto3" json:"diagnostic_indices,omitempty"`
}

func (x *IntentPredictionResponse_ChosenLinterDiagnostics) Reset() {
	*x = IntentPredictionResponse_ChosenLinterDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[618]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentPredictionResponse_ChosenLinterDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentPredictionResponse_ChosenLinterDiagnostics) ProtoMessage() {}

func (x *IntentPredictionResponse_ChosenLinterDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[618]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentPredictionResponse_ChosenLinterDiagnostics.ProtoReflect.Descriptor instead.
func (*IntentPredictionResponse_ChosenLinterDiagnostics) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{285, 2}
}

func (x *IntentPredictionResponse_ChosenLinterDiagnostics) GetDiagnosticIndices() []int32 {
	if x != nil {
		return x.DiagnosticIndices
	}
	return nil
}

type BlockDiffPatch_ModelWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines           []string `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	StartLineNumber int32    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	EndLineNumber   int32    `protobuf:"varint,3,opt,name=end_line_number,json=endLineNumber,proto3" json:"end_line_number,omitempty"`
}

func (x *BlockDiffPatch_ModelWindow) Reset() {
	*x = BlockDiffPatch_ModelWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[619]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDiffPatch_ModelWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDiffPatch_ModelWindow) ProtoMessage() {}

func (x *BlockDiffPatch_ModelWindow) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[619]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDiffPatch_ModelWindow.ProtoReflect.Descriptor instead.
func (*BlockDiffPatch_ModelWindow) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{297, 0}
}

func (x *BlockDiffPatch_ModelWindow) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *BlockDiffPatch_ModelWindow) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *BlockDiffPatch_ModelWindow) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

type BlockDiffPatch_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Range *IRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *BlockDiffPatch_Change) Reset() {
	*x = BlockDiffPatch_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[620]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDiffPatch_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDiffPatch_Change) ProtoMessage() {}

func (x *BlockDiffPatch_Change) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[620]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDiffPatch_Change.ProtoReflect.Descriptor instead.
func (*BlockDiffPatch_Change) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{297, 1}
}

func (x *BlockDiffPatch_Change) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BlockDiffPatch_Change) GetRange() *IRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type CppConfigResponse_MergeBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Limit  *int32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Radius *int32 `protobuf:"varint,3,opt,name=radius,proto3,oneof" json:"radius,omitempty"`
}

func (x *CppConfigResponse_MergeBehavior) Reset() {
	*x = CppConfigResponse_MergeBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[621]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppConfigResponse_MergeBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppConfigResponse_MergeBehavior) ProtoMessage() {}

func (x *CppConfigResponse_MergeBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[621]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppConfigResponse_MergeBehavior.ProtoReflect.Descriptor instead.
func (*CppConfigResponse_MergeBehavior) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{310, 0}
}

func (x *CppConfigResponse_MergeBehavior) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CppConfigResponse_MergeBehavior) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *CppConfigResponse_MergeBehavior) GetRadius() int32 {
	if x != nil && x.Radius != nil {
		return *x.Radius
	}
	return 0
}

type CppConfigResponse_ImportPredictionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsDisabledByBackend       bool `protobuf:"varint,1,opt,name=is_disabled_by_backend,json=isDisabledByBackend,proto3" json:"is_disabled_by_backend,omitempty"`
	ShouldTurnOnAutomatically bool `protobuf:"varint,2,opt,name=should_turn_on_automatically,json=shouldTurnOnAutomatically,proto3" json:"should_turn_on_automatically,omitempty"`
}

func (x *CppConfigResponse_ImportPredictionConfig) Reset() {
	*x = CppConfigResponse_ImportPredictionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[622]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppConfigResponse_ImportPredictionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppConfigResponse_ImportPredictionConfig) ProtoMessage() {}

func (x *CppConfigResponse_ImportPredictionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[622]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppConfigResponse_ImportPredictionConfig.ProtoReflect.Descriptor instead.
func (*CppConfigResponse_ImportPredictionConfig) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{310, 1}
}

func (x *CppConfigResponse_ImportPredictionConfig) GetIsDisabledByBackend() bool {
	if x != nil {
		return x.IsDisabledByBackend
	}
	return false
}

func (x *CppConfigResponse_ImportPredictionConfig) GetShouldTurnOnAutomatically() bool {
	if x != nil {
		return x.ShouldTurnOnAutomatically
	}
	return false
}

type StreamAiLintBugRequest_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	ContextLinesBefore    []string `protobuf:"bytes,4,rep,name=context_lines_before,json=contextLinesBefore,proto3" json:"context_lines_before,omitempty"`
	ContextLinesAfter     []string `protobuf:"bytes,5,rep,name=context_lines_after,json=contextLinesAfter,proto3" json:"context_lines_after,omitempty"`
}

func (x *StreamAiLintBugRequest_CodeChunk) Reset() {
	*x = StreamAiLintBugRequest_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[623]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiLintBugRequest_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiLintBugRequest_CodeChunk) ProtoMessage() {}

func (x *StreamAiLintBugRequest_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[623]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiLintBugRequest_CodeChunk.ProtoReflect.Descriptor instead.
func (*StreamAiLintBugRequest_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{324, 0}
}

func (x *StreamAiLintBugRequest_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamAiLintBugRequest_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StreamAiLintBugRequest_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *StreamAiLintBugRequest_CodeChunk) GetContextLinesBefore() []string {
	if x != nil {
		return x.ContextLinesBefore
	}
	return nil
}

func (x *StreamAiLintBugRequest_CodeChunk) GetContextLinesAfter() []string {
	if x != nil {
		return x.ContextLinesAfter
	}
	return nil
}

type StreamAiLintBugRequest_CodeChunkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunks             []*StreamAiLintBugRequest_CodeChunkList_CodeChunk `protobuf:"bytes,13,rep,name=chunks,proto3" json:"chunks,omitempty"`
	ReferredStartLines []int32                                           `protobuf:"varint,14,rep,packed,name=referred_start_lines,json=referredStartLines,proto3" json:"referred_start_lines,omitempty"`
	ReferredEndLines   []int32                                           `protobuf:"varint,15,rep,packed,name=referred_end_lines,json=referredEndLines,proto3" json:"referred_end_lines,omitempty"`
}

func (x *StreamAiLintBugRequest_CodeChunkList) Reset() {
	*x = StreamAiLintBugRequest_CodeChunkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[624]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiLintBugRequest_CodeChunkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiLintBugRequest_CodeChunkList) ProtoMessage() {}

func (x *StreamAiLintBugRequest_CodeChunkList) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[624]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiLintBugRequest_CodeChunkList.ProtoReflect.Descriptor instead.
func (*StreamAiLintBugRequest_CodeChunkList) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{324, 1}
}

func (x *StreamAiLintBugRequest_CodeChunkList) GetChunks() []*StreamAiLintBugRequest_CodeChunkList_CodeChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *StreamAiLintBugRequest_CodeChunkList) GetReferredStartLines() []int32 {
	if x != nil {
		return x.ReferredStartLines
	}
	return nil
}

func (x *StreamAiLintBugRequest_CodeChunkList) GetReferredEndLines() []int32 {
	if x != nil {
		return x.ReferredEndLines
	}
	return nil
}

type StreamAiLintBugRequest_DiscriminatorOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecificRules  bool `protobuf:"varint,1,opt,name=specific_rules,json=specificRules,proto3" json:"specific_rules,omitempty"`
	CompileErrors  bool `protobuf:"varint,2,opt,name=compile_errors,json=compileErrors,proto3" json:"compile_errors,omitempty"`
	ChangeBehavior bool `protobuf:"varint,3,opt,name=change_behavior,json=changeBehavior,proto3" json:"change_behavior,omitempty"`
	MatchCode      bool `protobuf:"varint,4,opt,name=match_code,json=matchCode,proto3" json:"match_code,omitempty"`
	Relevance      bool `protobuf:"varint,5,opt,name=relevance,proto3" json:"relevance,omitempty"`
	UserAwareness  bool `protobuf:"varint,6,opt,name=user_awareness,json=userAwareness,proto3" json:"user_awareness,omitempty"`
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) Reset() {
	*x = StreamAiLintBugRequest_DiscriminatorOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[625]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiLintBugRequest_DiscriminatorOptions) ProtoMessage() {}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[625]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiLintBugRequest_DiscriminatorOptions.ProtoReflect.Descriptor instead.
func (*StreamAiLintBugRequest_DiscriminatorOptions) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{324, 2}
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) GetSpecificRules() bool {
	if x != nil {
		return x.SpecificRules
	}
	return false
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) GetCompileErrors() bool {
	if x != nil {
		return x.CompileErrors
	}
	return false
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) GetChangeBehavior() bool {
	if x != nil {
		return x.ChangeBehavior
	}
	return false
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) GetMatchCode() bool {
	if x != nil {
		return x.MatchCode
	}
	return false
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) GetRelevance() bool {
	if x != nil {
		return x.Relevance
	}
	return false
}

func (x *StreamAiLintBugRequest_DiscriminatorOptions) GetUserAwareness() bool {
	if x != nil {
		return x.UserAwareness
	}
	return false
}

type StreamAiLintBugRequest_CodeChunkList_CodeChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumber       int32    `protobuf:"varint,2,opt,name=start_line_number,json=startLineNumber,proto3" json:"start_line_number,omitempty"`
	Lines                 []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	ContextLinesBefore    []string `protobuf:"bytes,4,rep,name=context_lines_before,json=contextLinesBefore,proto3" json:"context_lines_before,omitempty"`
	ContextLinesAfter     []string `protobuf:"bytes,5,rep,name=context_lines_after,json=contextLinesAfter,proto3" json:"context_lines_after,omitempty"`
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) Reset() {
	*x = StreamAiLintBugRequest_CodeChunkList_CodeChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[626]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAiLintBugRequest_CodeChunkList_CodeChunk) ProtoMessage() {}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[626]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAiLintBugRequest_CodeChunkList_CodeChunk.ProtoReflect.Descriptor instead.
func (*StreamAiLintBugRequest_CodeChunkList_CodeChunk) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{324, 1, 0}
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) GetStartLineNumber() int32 {
	if x != nil {
		return x.StartLineNumber
	}
	return 0
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) GetContextLinesBefore() []string {
	if x != nil {
		return x.ContextLinesBefore
	}
	return nil
}

func (x *StreamAiLintBugRequest_CodeChunkList_CodeChunk) GetContextLinesAfter() []string {
	if x != nil {
		return x.ContextLinesAfter
	}
	return nil
}

type FixMarkersRequest_Marker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines                   []string                                           `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	StartLine               int32                                              `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineInclusive        int32                                              `protobuf:"varint,3,opt,name=end_line_inclusive,json=endLineInclusive,proto3" json:"end_line_inclusive,omitempty"`
	Message                 string                                             `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	RelativeWorkspacePath   string                                             `protobuf:"bytes,5,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RelatedInformation      []*FixMarkersRequest_Marker_RelatedInformation     `protobuf:"bytes,6,rep,name=related_information,json=relatedInformation,proto3" json:"related_information,omitempty"`
	ContextRanges           []*FixMarkersRequest_Marker_ContextRange           `protobuf:"bytes,7,rep,name=context_ranges,json=contextRanges,proto3" json:"context_ranges,omitempty"`
	AncestorTypeDefinitions []*FixMarkersRequest_Marker_AncestorTypeDefinition `protobuf:"bytes,8,rep,name=ancestor_type_definitions,json=ancestorTypeDefinitions,proto3" json:"ancestor_type_definitions,omitempty"`
	InsertedSymbolTypes     []*FixMarkersRequest_Marker_InsertedSymbolType     `protobuf:"bytes,9,rep,name=inserted_symbol_types,json=insertedSymbolTypes,proto3" json:"inserted_symbol_types,omitempty"`
	QuickFixes              []*FixMarkersRequest_Marker_QuickFix               `protobuf:"bytes,10,rep,name=quick_fixes,json=quickFixes,proto3" json:"quick_fixes,omitempty"`
	StartColumn             int32                                              `protobuf:"varint,11,opt,name=start_column,json=startColumn,proto3" json:"start_column,omitempty"`
	EndColumnInclusive      int32                                              `protobuf:"varint,12,opt,name=end_column_inclusive,json=endColumnInclusive,proto3" json:"end_column_inclusive,omitempty"`
	ClassInformation        []*FixMarkersRequest_Marker_ClassInformation       `protobuf:"bytes,13,rep,name=class_information,json=classInformation,proto3" json:"class_information,omitempty"`
	FunctionSignatures      []*FixMarkersRequest_Marker_FunctionSignature      `protobuf:"bytes,14,rep,name=function_signatures,json=functionSignatures,proto3" json:"function_signatures,omitempty"`
	Snapshot                int32                                              `protobuf:"varint,15,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *FixMarkersRequest_Marker) Reset() {
	*x = FixMarkersRequest_Marker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[627]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker) ProtoMessage() {}

func (x *FixMarkersRequest_Marker) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[627]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0}
}

func (x *FixMarkersRequest_Marker) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersRequest_Marker) GetEndLineInclusive() int32 {
	if x != nil {
		return x.EndLineInclusive
	}
	return 0
}

func (x *FixMarkersRequest_Marker) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FixMarkersRequest_Marker) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FixMarkersRequest_Marker) GetRelatedInformation() []*FixMarkersRequest_Marker_RelatedInformation {
	if x != nil {
		return x.RelatedInformation
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetContextRanges() []*FixMarkersRequest_Marker_ContextRange {
	if x != nil {
		return x.ContextRanges
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetAncestorTypeDefinitions() []*FixMarkersRequest_Marker_AncestorTypeDefinition {
	if x != nil {
		return x.AncestorTypeDefinitions
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetInsertedSymbolTypes() []*FixMarkersRequest_Marker_InsertedSymbolType {
	if x != nil {
		return x.InsertedSymbolTypes
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetQuickFixes() []*FixMarkersRequest_Marker_QuickFix {
	if x != nil {
		return x.QuickFixes
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetStartColumn() int32 {
	if x != nil {
		return x.StartColumn
	}
	return 0
}

func (x *FixMarkersRequest_Marker) GetEndColumnInclusive() int32 {
	if x != nil {
		return x.EndColumnInclusive
	}
	return 0
}

func (x *FixMarkersRequest_Marker) GetClassInformation() []*FixMarkersRequest_Marker_ClassInformation {
	if x != nil {
		return x.ClassInformation
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetFunctionSignatures() []*FixMarkersRequest_Marker_FunctionSignature {
	if x != nil {
		return x.FunctionSignatures
	}
	return nil
}

func (x *FixMarkersRequest_Marker) GetSnapshot() int32 {
	if x != nil {
		return x.Snapshot
	}
	return 0
}

type FixMarkersRequest_Marker_RelatedInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message               string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	RelativeWorkspacePath string   `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	RelevantLines         []string `protobuf:"bytes,3,rep,name=relevant_lines,json=relevantLines,proto3" json:"relevant_lines,omitempty"`
	StartLine             int32    `protobuf:"varint,4,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
}

func (x *FixMarkersRequest_Marker_RelatedInformation) Reset() {
	*x = FixMarkersRequest_Marker_RelatedInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[628]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_RelatedInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_RelatedInformation) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_RelatedInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[628]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_RelatedInformation.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_RelatedInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 0}
}

func (x *FixMarkersRequest_Marker_RelatedInformation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FixMarkersRequest_Marker_RelatedInformation) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FixMarkersRequest_Marker_RelatedInformation) GetRelevantLines() []string {
	if x != nil {
		return x.RelevantLines
	}
	return nil
}

func (x *FixMarkersRequest_Marker_RelatedInformation) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

type FixMarkersRequest_Marker_ContextRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine        int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineInclusive int32 `protobuf:"varint,2,opt,name=end_line_inclusive,json=endLineInclusive,proto3" json:"end_line_inclusive,omitempty"`
}

func (x *FixMarkersRequest_Marker_ContextRange) Reset() {
	*x = FixMarkersRequest_Marker_ContextRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[629]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_ContextRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_ContextRange) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_ContextRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[629]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_ContextRange.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_ContextRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 1}
}

func (x *FixMarkersRequest_Marker_ContextRange) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersRequest_Marker_ContextRange) GetEndLineInclusive() int32 {
	if x != nil {
		return x.EndLineInclusive
	}
	return 0
}

type FixMarkersRequest_Marker_AncestorTypeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RelativeWorkspacePath string   `protobuf:"bytes,2,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLine             int32    `protobuf:"varint,3,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	Lines                 []string `protobuf:"bytes,4,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) Reset() {
	*x = FixMarkersRequest_Marker_AncestorTypeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[630]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_AncestorTypeDefinition) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[630]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_AncestorTypeDefinition.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_AncestorTypeDefinition) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 2}
}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersRequest_Marker_AncestorTypeDefinition) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type FixMarkersRequest_Marker_InsertedSymbolType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolName            string `protobuf:"bytes,1,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`
	SymbolType            string `protobuf:"bytes,2,opt,name=symbol_type,json=symbolType,proto3" json:"symbol_type,omitempty"`
	RelativeWorkspacePath string `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	SymbolLine            int32  `protobuf:"varint,4,opt,name=symbol_line,json=symbolLine,proto3" json:"symbol_line,omitempty"`
}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) Reset() {
	*x = FixMarkersRequest_Marker_InsertedSymbolType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[631]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_InsertedSymbolType) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[631]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_InsertedSymbolType.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_InsertedSymbolType) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 3}
}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) GetSymbolType() string {
	if x != nil {
		return x.SymbolType
	}
	return ""
}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FixMarkersRequest_Marker_InsertedSymbolType) GetSymbolLine() int32 {
	if x != nil {
		return x.SymbolLine
	}
	return 0
}

type FixMarkersRequest_Marker_QuickFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string                                    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string                                    `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	IsPreferred bool                                      `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	Edits       []*FixMarkersRequest_Marker_QuickFix_Edit `protobuf:"bytes,4,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *FixMarkersRequest_Marker_QuickFix) Reset() {
	*x = FixMarkersRequest_Marker_QuickFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[632]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_QuickFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_QuickFix) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_QuickFix) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[632]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_QuickFix.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_QuickFix) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 4}
}

func (x *FixMarkersRequest_Marker_QuickFix) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FixMarkersRequest_Marker_QuickFix) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *FixMarkersRequest_Marker_QuickFix) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *FixMarkersRequest_Marker_QuickFix) GetEdits() []*FixMarkersRequest_Marker_QuickFix_Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type FixMarkersRequest_Marker_ClassInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassName     string                                                   `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	StartLine     int32                                                    `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	TopLevelLines []int32                                                  `protobuf:"varint,3,rep,packed,name=top_level_lines,json=topLevelLines,proto3" json:"top_level_lines,omitempty"`
	Lines         []string                                                 `protobuf:"bytes,4,rep,name=lines,proto3" json:"lines,omitempty"`
	Constructors  []*FixMarkersRequest_Marker_ClassInformation_Constructor `protobuf:"bytes,5,rep,name=constructors,proto3" json:"constructors,omitempty"`
	Detail        string                                                   `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *FixMarkersRequest_Marker_ClassInformation) Reset() {
	*x = FixMarkersRequest_Marker_ClassInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[633]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_ClassInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_ClassInformation) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_ClassInformation) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[633]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_ClassInformation.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_ClassInformation) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 5}
}

func (x *FixMarkersRequest_Marker_ClassInformation) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *FixMarkersRequest_Marker_ClassInformation) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersRequest_Marker_ClassInformation) GetTopLevelLines() []int32 {
	if x != nil {
		return x.TopLevelLines
	}
	return nil
}

func (x *FixMarkersRequest_Marker_ClassInformation) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *FixMarkersRequest_Marker_ClassInformation) GetConstructors() []*FixMarkersRequest_Marker_ClassInformation_Constructor {
	if x != nil {
		return x.Constructors
	}
	return nil
}

func (x *FixMarkersRequest_Marker_ClassInformation) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type FixMarkersRequest_Marker_FunctionSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string                                                          `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Documentation string                                                          `protobuf:"bytes,2,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Parameters    []*FixMarkersRequest_Marker_FunctionSignature_FunctionParameter `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *FixMarkersRequest_Marker_FunctionSignature) Reset() {
	*x = FixMarkersRequest_Marker_FunctionSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[634]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_FunctionSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_FunctionSignature) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_FunctionSignature) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[634]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_FunctionSignature.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_FunctionSignature) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 6}
}

func (x *FixMarkersRequest_Marker_FunctionSignature) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FixMarkersRequest_Marker_FunctionSignature) GetDocumentation() string {
	if x != nil {
		return x.Documentation
	}
	return ""
}

func (x *FixMarkersRequest_Marker_FunctionSignature) GetParameters() []*FixMarkersRequest_Marker_FunctionSignature_FunctionParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type FixMarkersRequest_Marker_QuickFix_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLine             int32    `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineInclusive      int32    `protobuf:"varint,3,opt,name=end_line_inclusive,json=endLineInclusive,proto3" json:"end_line_inclusive,omitempty"`
	DeletedLines          []string `protobuf:"bytes,4,rep,name=deleted_lines,json=deletedLines,proto3" json:"deleted_lines,omitempty"`
	AddLines              []string `protobuf:"bytes,5,rep,name=add_lines,json=addLines,proto3" json:"add_lines,omitempty"`
	Snapshot              int32    `protobuf:"varint,6,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) Reset() {
	*x = FixMarkersRequest_Marker_QuickFix_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[635]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_QuickFix_Edit) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[635]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_QuickFix_Edit.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_QuickFix_Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 4, 0}
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) GetEndLineInclusive() int32 {
	if x != nil {
		return x.EndLineInclusive
	}
	return 0
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) GetDeletedLines() []string {
	if x != nil {
		return x.DeletedLines
	}
	return nil
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) GetAddLines() []string {
	if x != nil {
		return x.AddLines
	}
	return nil
}

func (x *FixMarkersRequest_Marker_QuickFix_Edit) GetSnapshot() int32 {
	if x != nil {
		return x.Snapshot
	}
	return 0
}

type FixMarkersRequest_Marker_ClassInformation_Constructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine        int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineInclusive int32 `protobuf:"varint,2,opt,name=end_line_inclusive,json=endLineInclusive,proto3" json:"end_line_inclusive,omitempty"`
}

func (x *FixMarkersRequest_Marker_ClassInformation_Constructor) Reset() {
	*x = FixMarkersRequest_Marker_ClassInformation_Constructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[636]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_ClassInformation_Constructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_ClassInformation_Constructor) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_ClassInformation_Constructor) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[636]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_ClassInformation_Constructor.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_ClassInformation_Constructor) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 5, 0}
}

func (x *FixMarkersRequest_Marker_ClassInformation_Constructor) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersRequest_Marker_ClassInformation_Constructor) GetEndLineInclusive() int32 {
	if x != nil {
		return x.EndLineInclusive
	}
	return 0
}

type FixMarkersRequest_Marker_FunctionSignature_FunctionParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Documentation string `protobuf:"bytes,2,opt,name=documentation,proto3" json:"documentation,omitempty"`
}

func (x *FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) Reset() {
	*x = FixMarkersRequest_Marker_FunctionSignature_FunctionParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[637]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) ProtoMessage() {}

func (x *FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[637]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersRequest_Marker_FunctionSignature_FunctionParameter.ProtoReflect.Descriptor instead.
func (*FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{337, 0, 6, 0}
}

func (x *FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FixMarkersRequest_Marker_FunctionSignature_FunctionParameter) GetDocumentation() string {
	if x != nil {
		return x.Documentation
	}
	return ""
}

type FixMarkersResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine        int32    `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLineExclusive int32    `protobuf:"varint,2,opt,name=end_line_exclusive,json=endLineExclusive,proto3" json:"end_line_exclusive,omitempty"`
	DeletedLines     []string `protobuf:"bytes,3,rep,name=deleted_lines,json=deletedLines,proto3" json:"deleted_lines,omitempty"`
	AddLines         []string `protobuf:"bytes,4,rep,name=add_lines,json=addLines,proto3" json:"add_lines,omitempty"`
}

func (x *FixMarkersResponse_Change) Reset() {
	*x = FixMarkersResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[638]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixMarkersResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixMarkersResponse_Change) ProtoMessage() {}

func (x *FixMarkersResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[638]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixMarkersResponse_Change.ProtoReflect.Descriptor instead.
func (*FixMarkersResponse_Change) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{338, 0}
}

func (x *FixMarkersResponse_Change) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *FixMarkersResponse_Change) GetEndLineExclusive() int32 {
	if x != nil {
		return x.EndLineExclusive
	}
	return 0
}

func (x *FixMarkersResponse_Change) GetDeletedLines() []string {
	if x != nil {
		return x.DeletedLines
	}
	return nil
}

func (x *FixMarkersResponse_Change) GetAddLines() []string {
	if x != nil {
		return x.AddLines
	}
	return nil
}

type GetCppEditClassificationResponse_ScoredEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edit     *SuggestedEdit                                        `protobuf:"bytes,1,opt,name=edit,proto3" json:"edit,omitempty"`
	LogProbs *GetCppEditClassificationResponse_ScoredEdit_LogProbs `protobuf:"bytes,2,opt,name=log_probs,json=logProbs,proto3" json:"log_probs,omitempty"`
}

func (x *GetCppEditClassificationResponse_ScoredEdit) Reset() {
	*x = GetCppEditClassificationResponse_ScoredEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[639]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCppEditClassificationResponse_ScoredEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCppEditClassificationResponse_ScoredEdit) ProtoMessage() {}

func (x *GetCppEditClassificationResponse_ScoredEdit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[639]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCppEditClassificationResponse_ScoredEdit.ProtoReflect.Descriptor instead.
func (*GetCppEditClassificationResponse_ScoredEdit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{362, 0}
}

func (x *GetCppEditClassificationResponse_ScoredEdit) GetEdit() *SuggestedEdit {
	if x != nil {
		return x.Edit
	}
	return nil
}

func (x *GetCppEditClassificationResponse_ScoredEdit) GetLogProbs() *GetCppEditClassificationResponse_ScoredEdit_LogProbs {
	if x != nil {
		return x.LogProbs
	}
	return nil
}

type GetCppEditClassificationResponse_ScoredEdit_LogProbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens        []string  `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	TokenLogprobs []float64 `protobuf:"fixed64,2,rep,packed,name=token_logprobs,json=tokenLogprobs,proto3" json:"token_logprobs,omitempty"`
}

func (x *GetCppEditClassificationResponse_ScoredEdit_LogProbs) Reset() {
	*x = GetCppEditClassificationResponse_ScoredEdit_LogProbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[640]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCppEditClassificationResponse_ScoredEdit_LogProbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCppEditClassificationResponse_ScoredEdit_LogProbs) ProtoMessage() {}

func (x *GetCppEditClassificationResponse_ScoredEdit_LogProbs) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[640]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCppEditClassificationResponse_ScoredEdit_LogProbs.ProtoReflect.Descriptor instead.
func (*GetCppEditClassificationResponse_ScoredEdit_LogProbs) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{362, 0, 0}
}

func (x *GetCppEditClassificationResponse_ScoredEdit_LogProbs) GetTokens() []string {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *GetCppEditClassificationResponse_ScoredEdit_LogProbs) GetTokenLogprobs() []float64 {
	if x != nil {
		return x.TokenLogprobs
	}
	return nil
}

type BackgroundCmdKEvalRequest_ProposedChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change       string                                           `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	LinterErrors []*BackgroundCmdKEvalRequest_ProposedChange_Lint `protobuf:"bytes,2,rep,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
}

func (x *BackgroundCmdKEvalRequest_ProposedChange) Reset() {
	*x = BackgroundCmdKEvalRequest_ProposedChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[641]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKEvalRequest_ProposedChange) ProtoMessage() {}

func (x *BackgroundCmdKEvalRequest_ProposedChange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[641]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKEvalRequest_ProposedChange.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKEvalRequest_ProposedChange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{376, 0}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange) GetChange() string {
	if x != nil {
		return x.Change
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange) GetLinterErrors() []*BackgroundCmdKEvalRequest_ProposedChange_Lint {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

type BackgroundCmdKEvalRequest_ProposedChange_Lint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                          string                                                    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity                         string                                                    `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	RelativeWorkspacePath            string                                                    `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumberOneIndexed        int32                                                     `protobuf:"varint,4,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32                                                     `protobuf:"varint,5,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32                                                     `protobuf:"varint,6,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32                                                     `protobuf:"varint,7,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
	QuickFixes                       []*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix `protobuf:"bytes,9,rep,name=quick_fixes,json=quickFixes,proto3" json:"quick_fixes,omitempty"`
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) Reset() {
	*x = BackgroundCmdKEvalRequest_ProposedChange_Lint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[642]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKEvalRequest_ProposedChange_Lint) ProtoMessage() {}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[642]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKEvalRequest_ProposedChange_Lint.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKEvalRequest_ProposedChange_Lint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{376, 0, 0}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint) GetQuickFixes() []*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix {
	if x != nil {
		return x.QuickFixes
	}
	return nil
}

type BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string                                                         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string                                                         `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	IsPreferred bool                                                           `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	Edits       []*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit `protobuf:"bytes,4,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) Reset() {
	*x = BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[643]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) ProtoMessage() {}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[643]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{376, 0, 0, 0}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix) GetEdits() []*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath            string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                             string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	StartLineNumberOneIndexed        int32  `protobuf:"varint,3,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32  `protobuf:"varint,4,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32  `protobuf:"varint,5,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32  `protobuf:"varint,6,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) Reset() {
	*x = BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[644]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) ProtoMessage() {}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[644]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{376, 0, 0, 0, 0}
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

type BackgroundCmdKRequest_ProposedChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change       string                                       `protobuf:"bytes,1,opt,name=change,proto3" json:"change,omitempty"`
	LinterErrors []*BackgroundCmdKRequest_ProposedChange_Lint `protobuf:"bytes,2,rep,name=linter_errors,json=linterErrors,proto3" json:"linter_errors,omitempty"`
}

func (x *BackgroundCmdKRequest_ProposedChange) Reset() {
	*x = BackgroundCmdKRequest_ProposedChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[645]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_ProposedChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_ProposedChange) ProtoMessage() {}

func (x *BackgroundCmdKRequest_ProposedChange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[645]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_ProposedChange.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_ProposedChange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 0}
}

func (x *BackgroundCmdKRequest_ProposedChange) GetChange() string {
	if x != nil {
		return x.Change
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange) GetLinterErrors() []*BackgroundCmdKRequest_ProposedChange_Lint {
	if x != nil {
		return x.LinterErrors
	}
	return nil
}

type BackgroundCmdKRequest_Lint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                          string                                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity                         string                                 `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	RelativeWorkspacePath            string                                 `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumberOneIndexed        int32                                  `protobuf:"varint,4,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32                                  `protobuf:"varint,5,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32                                  `protobuf:"varint,6,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32                                  `protobuf:"varint,7,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
	QuickFixes                       []*BackgroundCmdKRequest_Lint_QuickFix `protobuf:"bytes,9,rep,name=quick_fixes,json=quickFixes,proto3" json:"quick_fixes,omitempty"`
}

func (x *BackgroundCmdKRequest_Lint) Reset() {
	*x = BackgroundCmdKRequest_Lint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[646]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_Lint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_Lint) ProtoMessage() {}

func (x *BackgroundCmdKRequest_Lint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[646]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_Lint.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_Lint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 1}
}

func (x *BackgroundCmdKRequest_Lint) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint) GetQuickFixes() []*BackgroundCmdKRequest_Lint_QuickFix {
	if x != nil {
		return x.QuickFixes
	}
	return nil
}

type BackgroundCmdKRequest_UsefulType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLine             int32    `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	Text                  string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Score                 *float64 `protobuf:"fixed64,4,opt,name=score,proto3,oneof" json:"score,omitempty"`
}

func (x *BackgroundCmdKRequest_UsefulType) Reset() {
	*x = BackgroundCmdKRequest_UsefulType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[647]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_UsefulType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_UsefulType) ProtoMessage() {}

func (x *BackgroundCmdKRequest_UsefulType) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[647]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_UsefulType.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_UsefulType) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 2}
}

func (x *BackgroundCmdKRequest_UsefulType) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_UsefulType) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *BackgroundCmdKRequest_UsefulType) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BackgroundCmdKRequest_UsefulType) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type BackgroundCmdKRequest_RecentlyViewedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string                                                   `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string                                                   `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	VisibleRanges         []*BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange `protobuf:"bytes,3,rep,name=visible_ranges,json=visibleRanges,proto3" json:"visible_ranges,omitempty"`
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile) Reset() {
	*x = BackgroundCmdKRequest_RecentlyViewedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[648]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_RecentlyViewedFile) ProtoMessage() {}

func (x *BackgroundCmdKRequest_RecentlyViewedFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[648]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_RecentlyViewedFile.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_RecentlyViewedFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 3}
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile) GetVisibleRanges() []*BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange {
	if x != nil {
		return x.VisibleRanges
	}
	return nil
}

type BackgroundCmdKRequest_Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Diff                  string `protobuf:"bytes,2,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *BackgroundCmdKRequest_Diff) Reset() {
	*x = BackgroundCmdKRequest_Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[649]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_Diff) ProtoMessage() {}

func (x *BackgroundCmdKRequest_Diff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[649]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_Diff.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_Diff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 4}
}

func (x *BackgroundCmdKRequest_Diff) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_Diff) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

type BackgroundCmdKRequest_ProposedChange_Lint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                          string                                                `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Severity                         string                                                `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty"`
	RelativeWorkspacePath            string                                                `protobuf:"bytes,3,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	StartLineNumberOneIndexed        int32                                                 `protobuf:"varint,4,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32                                                 `protobuf:"varint,5,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32                                                 `protobuf:"varint,6,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32                                                 `protobuf:"varint,7,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
	QuickFixes                       []*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix `protobuf:"bytes,9,rep,name=quick_fixes,json=quickFixes,proto3" json:"quick_fixes,omitempty"`
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) Reset() {
	*x = BackgroundCmdKRequest_ProposedChange_Lint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[650]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_ProposedChange_Lint) ProtoMessage() {}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[650]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_ProposedChange_Lint.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_ProposedChange_Lint) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 0, 0}
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint) GetQuickFixes() []*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix {
	if x != nil {
		return x.QuickFixes
	}
	return nil
}

type BackgroundCmdKRequest_ProposedChange_Lint_QuickFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string                                                     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string                                                     `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	IsPreferred bool                                                       `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	Edits       []*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit `protobuf:"bytes,4,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) Reset() {
	*x = BackgroundCmdKRequest_ProposedChange_Lint_QuickFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[651]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) ProtoMessage() {}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[651]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_ProposedChange_Lint_QuickFix.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 0, 0, 0}
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix) GetEdits() []*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath            string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                             string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	StartLineNumberOneIndexed        int32  `protobuf:"varint,3,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32  `protobuf:"varint,4,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32  `protobuf:"varint,5,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32  `protobuf:"varint,6,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) Reset() {
	*x = BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[652]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) ProtoMessage() {}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[652]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 0, 0, 0, 0}
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

type BackgroundCmdKRequest_Lint_QuickFix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message     string                                      `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kind        string                                      `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	IsPreferred bool                                        `protobuf:"varint,3,opt,name=is_preferred,json=isPreferred,proto3" json:"is_preferred,omitempty"`
	Edits       []*BackgroundCmdKRequest_Lint_QuickFix_Edit `protobuf:"bytes,4,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *BackgroundCmdKRequest_Lint_QuickFix) Reset() {
	*x = BackgroundCmdKRequest_Lint_QuickFix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[653]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_Lint_QuickFix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_Lint_QuickFix) ProtoMessage() {}

func (x *BackgroundCmdKRequest_Lint_QuickFix) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[653]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_Lint_QuickFix.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_Lint_QuickFix) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 1, 0}
}

func (x *BackgroundCmdKRequest_Lint_QuickFix) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint_QuickFix) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint_QuickFix) GetIsPreferred() bool {
	if x != nil {
		return x.IsPreferred
	}
	return false
}

func (x *BackgroundCmdKRequest_Lint_QuickFix) GetEdits() []*BackgroundCmdKRequest_Lint_QuickFix_Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type BackgroundCmdKRequest_Lint_QuickFix_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath            string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Text                             string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	StartLineNumberOneIndexed        int32  `protobuf:"varint,3,opt,name=start_line_number_one_indexed,json=startLineNumberOneIndexed,proto3" json:"start_line_number_one_indexed,omitempty"`
	StartColumnOneIndexed            int32  `protobuf:"varint,4,opt,name=start_column_one_indexed,json=startColumnOneIndexed,proto3" json:"start_column_one_indexed,omitempty"`
	EndLineNumberInclusiveOneIndexed int32  `protobuf:"varint,5,opt,name=end_line_number_inclusive_one_indexed,json=endLineNumberInclusiveOneIndexed,proto3" json:"end_line_number_inclusive_one_indexed,omitempty"`
	EndColumnOneIndexed              int32  `protobuf:"varint,6,opt,name=end_column_one_indexed,json=endColumnOneIndexed,proto3" json:"end_column_one_indexed,omitempty"`
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) Reset() {
	*x = BackgroundCmdKRequest_Lint_QuickFix_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[654]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_Lint_QuickFix_Edit) ProtoMessage() {}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[654]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_Lint_QuickFix_Edit.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_Lint_QuickFix_Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 1, 0, 0}
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) GetStartLineNumberOneIndexed() int32 {
	if x != nil {
		return x.StartLineNumberOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) GetStartColumnOneIndexed() int32 {
	if x != nil {
		return x.StartColumnOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) GetEndLineNumberInclusiveOneIndexed() int32 {
	if x != nil {
		return x.EndLineNumberInclusiveOneIndexed
	}
	return 0
}

func (x *BackgroundCmdKRequest_Lint_QuickFix_Edit) GetEndColumnOneIndexed() int32 {
	if x != nil {
		return x.EndColumnOneIndexed
	}
	return 0
}

type BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineNumberInclusive int32  `protobuf:"varint,1,opt,name=start_line_number_inclusive,json=startLineNumberInclusive,proto3" json:"start_line_number_inclusive,omitempty"`
	EndLineNumberExclusive   int32  `protobuf:"varint,2,opt,name=end_line_number_exclusive,json=endLineNumberExclusive,proto3" json:"end_line_number_exclusive,omitempty"`
	ViewedAt                 *int32 `protobuf:"varint,3,opt,name=viewed_at,json=viewedAt,proto3,oneof" json:"viewed_at,omitempty"`
	GlobalOrderDescending    *int32 `protobuf:"varint,4,opt,name=global_order_descending,json=globalOrderDescending,proto3,oneof" json:"global_order_descending,omitempty"`
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) Reset() {
	*x = BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[655]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) ProtoMessage() {}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[655]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange.ProtoReflect.Descriptor instead.
func (*BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{378, 3, 0}
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) GetStartLineNumberInclusive() int32 {
	if x != nil {
		return x.StartLineNumberInclusive
	}
	return 0
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) GetEndLineNumberExclusive() int32 {
	if x != nil {
		return x.EndLineNumberExclusive
	}
	return 0
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) GetViewedAt() int32 {
	if x != nil && x.ViewedAt != nil {
		return *x.ViewedAt
	}
	return 0
}

func (x *BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange) GetGlobalOrderDescending() int32 {
	if x != nil && x.GlobalOrderDescending != nil {
		return *x.GlobalOrderDescending
	}
	return 0
}

type ContextToRank_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *ContextToRank_File) Reset() {
	*x = ContextToRank_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[656]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextToRank_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextToRank_File) ProtoMessage() {}

func (x *ContextToRank_File) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[656]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextToRank_File.ProtoReflect.Descriptor instead.
func (*ContextToRank_File) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{393, 0}
}

func (x *ContextToRank_File) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *ContextToRank_File) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type CppQuickAction_Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text  string  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Range *IRange `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *CppQuickAction_Edit) Reset() {
	*x = CppQuickAction_Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[657]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppQuickAction_Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppQuickAction_Edit) ProtoMessage() {}

func (x *CppQuickAction_Edit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[657]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppQuickAction_Edit.ProtoReflect.Descriptor instead.
func (*CppQuickAction_Edit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{413, 0}
}

func (x *CppQuickAction_Edit) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CppQuickAction_Edit) GetRange() *IRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type CmdKEvent_SubmitPrompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalRange *IRange `protobuf:"bytes,1,opt,name=original_range,json=originalRange,proto3" json:"original_range,omitempty"`
	OriginalText  string  `protobuf:"bytes,2,opt,name=original_text,json=originalText,proto3" json:"original_text,omitempty"`
	Prompt        string  `protobuf:"bytes,3,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *CmdKEvent_SubmitPrompt) Reset() {
	*x = CmdKEvent_SubmitPrompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[658]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_SubmitPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_SubmitPrompt) ProtoMessage() {}

func (x *CmdKEvent_SubmitPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[658]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_SubmitPrompt.ProtoReflect.Descriptor instead.
func (*CmdKEvent_SubmitPrompt) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 0}
}

func (x *CmdKEvent_SubmitPrompt) GetOriginalRange() *IRange {
	if x != nil {
		return x.OriginalRange
	}
	return nil
}

func (x *CmdKEvent_SubmitPrompt) GetOriginalText() string {
	if x != nil {
		return x.OriginalText
	}
	return ""
}

func (x *CmdKEvent_SubmitPrompt) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type CmdKEvent_EndOfGeneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdKEvent_EndOfGeneration) Reset() {
	*x = CmdKEvent_EndOfGeneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[659]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_EndOfGeneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_EndOfGeneration) ProtoMessage() {}

func (x *CmdKEvent_EndOfGeneration) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[659]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_EndOfGeneration.ProtoReflect.Descriptor instead.
func (*CmdKEvent_EndOfGeneration) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 1}
}

type CmdKEvent_InterruptGeneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdKEvent_InterruptGeneration) Reset() {
	*x = CmdKEvent_InterruptGeneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[660]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_InterruptGeneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_InterruptGeneration) ProtoMessage() {}

func (x *CmdKEvent_InterruptGeneration) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[660]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_InterruptGeneration.ProtoReflect.Descriptor instead.
func (*CmdKEvent_InterruptGeneration) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 2}
}

type CmdKEvent_AcceptDiffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdKEvent_AcceptDiffs) Reset() {
	*x = CmdKEvent_AcceptDiffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[661]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_AcceptDiffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_AcceptDiffs) ProtoMessage() {}

func (x *CmdKEvent_AcceptDiffs) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[661]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_AcceptDiffs.ProtoReflect.Descriptor instead.
func (*CmdKEvent_AcceptDiffs) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 3}
}

type CmdKEvent_RejectDiffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CmdKEvent_RejectDiffs) Reset() {
	*x = CmdKEvent_RejectDiffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[662]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_RejectDiffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_RejectDiffs) ProtoMessage() {}

func (x *CmdKEvent_RejectDiffs) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[662]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_RejectDiffs.ProtoReflect.Descriptor instead.
func (*CmdKEvent_RejectDiffs) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 4}
}

type CmdKEvent_RejectPartialDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GreenRange *IRange  `protobuf:"bytes,1,opt,name=green_range,json=greenRange,proto3" json:"green_range,omitempty"`
	GreenLines []string `protobuf:"bytes,2,rep,name=green_lines,json=greenLines,proto3" json:"green_lines,omitempty"`
	RedLines   []string `protobuf:"bytes,3,rep,name=red_lines,json=redLines,proto3" json:"red_lines,omitempty"`
}

func (x *CmdKEvent_RejectPartialDiff) Reset() {
	*x = CmdKEvent_RejectPartialDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[663]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_RejectPartialDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_RejectPartialDiff) ProtoMessage() {}

func (x *CmdKEvent_RejectPartialDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[663]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_RejectPartialDiff.ProtoReflect.Descriptor instead.
func (*CmdKEvent_RejectPartialDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 5}
}

func (x *CmdKEvent_RejectPartialDiff) GetGreenRange() *IRange {
	if x != nil {
		return x.GreenRange
	}
	return nil
}

func (x *CmdKEvent_RejectPartialDiff) GetGreenLines() []string {
	if x != nil {
		return x.GreenLines
	}
	return nil
}

func (x *CmdKEvent_RejectPartialDiff) GetRedLines() []string {
	if x != nil {
		return x.RedLines
	}
	return nil
}

type CmdKEvent_AcceptPartialDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GreenRange *IRange  `protobuf:"bytes,1,opt,name=green_range,json=greenRange,proto3" json:"green_range,omitempty"`
	GreenLines []string `protobuf:"bytes,2,rep,name=green_lines,json=greenLines,proto3" json:"green_lines,omitempty"`
	RedLines   []string `protobuf:"bytes,3,rep,name=red_lines,json=redLines,proto3" json:"red_lines,omitempty"`
}

func (x *CmdKEvent_AcceptPartialDiff) Reset() {
	*x = CmdKEvent_AcceptPartialDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[664]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdKEvent_AcceptPartialDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdKEvent_AcceptPartialDiff) ProtoMessage() {}

func (x *CmdKEvent_AcceptPartialDiff) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[664]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdKEvent_AcceptPartialDiff.ProtoReflect.Descriptor instead.
func (*CmdKEvent_AcceptPartialDiff) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{417, 6}
}

func (x *CmdKEvent_AcceptPartialDiff) GetGreenRange() *IRange {
	if x != nil {
		return x.GreenRange
	}
	return nil
}

func (x *CmdKEvent_AcceptPartialDiff) GetGreenLines() []string {
	if x != nil {
		return x.GreenLines
	}
	return nil
}

func (x *CmdKEvent_AcceptPartialDiff) GetRedLines() []string {
	if x != nil {
		return x.RedLines
	}
	return nil
}

type ChatEvent_SubmitPrompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt string `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (x *ChatEvent_SubmitPrompt) Reset() {
	*x = ChatEvent_SubmitPrompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[665]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_SubmitPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_SubmitPrompt) ProtoMessage() {}

func (x *ChatEvent_SubmitPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[665]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_SubmitPrompt.ProtoReflect.Descriptor instead.
func (*ChatEvent_SubmitPrompt) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{418, 0}
}

func (x *ChatEvent_SubmitPrompt) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type ChatEvent_EndOfAnyGeneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChatEvent_EndOfAnyGeneration) Reset() {
	*x = ChatEvent_EndOfAnyGeneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[666]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_EndOfAnyGeneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_EndOfAnyGeneration) ProtoMessage() {}

func (x *ChatEvent_EndOfAnyGeneration) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[666]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_EndOfAnyGeneration.ProtoReflect.Descriptor instead.
func (*ChatEvent_EndOfAnyGeneration) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{418, 1}
}

type ChatEvent_EndOfUninterruptedGeneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChatEvent_EndOfUninterruptedGeneration) Reset() {
	*x = ChatEvent_EndOfUninterruptedGeneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[667]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent_EndOfUninterruptedGeneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent_EndOfUninterruptedGeneration) ProtoMessage() {}

func (x *ChatEvent_EndOfUninterruptedGeneration) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[667]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent_EndOfUninterruptedGeneration.ProtoReflect.Descriptor instead.
func (*ChatEvent_EndOfUninterruptedGeneration) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{418, 2}
}

type BackgroundFilesEvent_BackgroundFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	Hash                  string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	FullPath              string `protobuf:"bytes,4,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
}

func (x *BackgroundFilesEvent_BackgroundFile) Reset() {
	*x = BackgroundFilesEvent_BackgroundFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[668]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundFilesEvent_BackgroundFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundFilesEvent_BackgroundFile) ProtoMessage() {}

func (x *BackgroundFilesEvent_BackgroundFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[668]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundFilesEvent_BackgroundFile.ProtoReflect.Descriptor instead.
func (*BackgroundFilesEvent_BackgroundFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{432, 0}
}

func (x *BackgroundFilesEvent_BackgroundFile) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *BackgroundFilesEvent_BackgroundFile) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

func (x *BackgroundFilesEvent_BackgroundFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BackgroundFilesEvent_BackgroundFile) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

type CppTerminalEvent_TerminalInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferedKeypresses []string `protobuf:"bytes,1,rep,name=buffered_keypresses,json=bufferedKeypresses,proto3" json:"buffered_keypresses,omitempty"`
}

func (x *CppTerminalEvent_TerminalInput) Reset() {
	*x = CppTerminalEvent_TerminalInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[669]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppTerminalEvent_TerminalInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppTerminalEvent_TerminalInput) ProtoMessage() {}

func (x *CppTerminalEvent_TerminalInput) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[669]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppTerminalEvent_TerminalInput.ProtoReflect.Descriptor instead.
func (*CppTerminalEvent_TerminalInput) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{433, 0}
}

func (x *CppTerminalEvent_TerminalInput) GetBufferedKeypresses() []string {
	if x != nil {
		return x.BufferedKeypresses
	}
	return nil
}

type CppTerminalEvent_CommandStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command                string  `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	StartedTimestampUnixMs float64 `protobuf:"fixed64,2,opt,name=started_timestamp_unix_ms,json=startedTimestampUnixMs,proto3" json:"started_timestamp_unix_ms,omitempty"`
	CommandWasTrimmed      bool    `protobuf:"varint,3,opt,name=command_was_trimmed,json=commandWasTrimmed,proto3" json:"command_was_trimmed,omitempty"`
}

func (x *CppTerminalEvent_CommandStarted) Reset() {
	*x = CppTerminalEvent_CommandStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[670]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppTerminalEvent_CommandStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppTerminalEvent_CommandStarted) ProtoMessage() {}

func (x *CppTerminalEvent_CommandStarted) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[670]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppTerminalEvent_CommandStarted.ProtoReflect.Descriptor instead.
func (*CppTerminalEvent_CommandStarted) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{433, 1}
}

func (x *CppTerminalEvent_CommandStarted) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CppTerminalEvent_CommandStarted) GetStartedTimestampUnixMs() float64 {
	if x != nil {
		return x.StartedTimestampUnixMs
	}
	return 0
}

func (x *CppTerminalEvent_CommandStarted) GetCommandWasTrimmed() bool {
	if x != nil {
		return x.CommandWasTrimmed
	}
	return false
}

type CppTerminalEvent_CommandFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command                 string  `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	ExitCode                *int32  `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3,oneof" json:"exit_code,omitempty"`
	Output                  string  `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	FinishedTimestampUnixMs float64 `protobuf:"fixed64,4,opt,name=finished_timestamp_unix_ms,json=finishedTimestampUnixMs,proto3" json:"finished_timestamp_unix_ms,omitempty"`
	CommandWasTrimmed       bool    `protobuf:"varint,5,opt,name=command_was_trimmed,json=commandWasTrimmed,proto3" json:"command_was_trimmed,omitempty"`
	OutputWasTrimmed        bool    `protobuf:"varint,6,opt,name=output_was_trimmed,json=outputWasTrimmed,proto3" json:"output_was_trimmed,omitempty"`
}

func (x *CppTerminalEvent_CommandFinished) Reset() {
	*x = CppTerminalEvent_CommandFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[671]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppTerminalEvent_CommandFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppTerminalEvent_CommandFinished) ProtoMessage() {}

func (x *CppTerminalEvent_CommandFinished) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[671]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppTerminalEvent_CommandFinished.ProtoReflect.Descriptor instead.
func (*CppTerminalEvent_CommandFinished) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{433, 2}
}

func (x *CppTerminalEvent_CommandFinished) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CppTerminalEvent_CommandFinished) GetExitCode() int32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

func (x *CppTerminalEvent_CommandFinished) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *CppTerminalEvent_CommandFinished) GetFinishedTimestampUnixMs() float64 {
	if x != nil {
		return x.FinishedTimestampUnixMs
	}
	return 0
}

func (x *CppTerminalEvent_CommandFinished) GetCommandWasTrimmed() bool {
	if x != nil {
		return x.CommandWasTrimmed
	}
	return false
}

func (x *CppTerminalEvent_CommandFinished) GetOutputWasTrimmed() bool {
	if x != nil {
		return x.OutputWasTrimmed
	}
	return false
}

type CppGitContextEvent_Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string                               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name        *string                              `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Commit      *string                              `protobuf:"bytes,3,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
	Remote      *string                              `protobuf:"bytes,4,opt,name=remote,proto3,oneof" json:"remote,omitempty"`
	UpstreamRef *CppGitContextEvent_Head_UpstreamRef `protobuf:"bytes,5,opt,name=upstream_ref,json=upstreamRef,proto3,oneof" json:"upstream_ref,omitempty"`
	Ahead       *int32                               `protobuf:"varint,6,opt,name=ahead,proto3,oneof" json:"ahead,omitempty"`
	Behind      *int32                               `protobuf:"varint,7,opt,name=behind,proto3,oneof" json:"behind,omitempty"`
}

func (x *CppGitContextEvent_Head) Reset() {
	*x = CppGitContextEvent_Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[672]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Head) ProtoMessage() {}

func (x *CppGitContextEvent_Head) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[672]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Head.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Head) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 0}
}

func (x *CppGitContextEvent_Head) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CppGitContextEvent_Head) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CppGitContextEvent_Head) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

func (x *CppGitContextEvent_Head) GetRemote() string {
	if x != nil && x.Remote != nil {
		return *x.Remote
	}
	return ""
}

func (x *CppGitContextEvent_Head) GetUpstreamRef() *CppGitContextEvent_Head_UpstreamRef {
	if x != nil {
		return x.UpstreamRef
	}
	return nil
}

func (x *CppGitContextEvent_Head) GetAhead() int32 {
	if x != nil && x.Ahead != nil {
		return *x.Ahead
	}
	return 0
}

func (x *CppGitContextEvent_Head) GetBehind() int32 {
	if x != nil && x.Behind != nil {
		return *x.Behind
	}
	return 0
}

type CppGitContextEvent_Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name   *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Commit *string `protobuf:"bytes,3,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
	Remote *string `protobuf:"bytes,4,opt,name=remote,proto3,oneof" json:"remote,omitempty"`
}

func (x *CppGitContextEvent_Ref) Reset() {
	*x = CppGitContextEvent_Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[673]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Ref) ProtoMessage() {}

func (x *CppGitContextEvent_Ref) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[673]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Ref.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Ref) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 1}
}

func (x *CppGitContextEvent_Ref) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CppGitContextEvent_Ref) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CppGitContextEvent_Ref) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

func (x *CppGitContextEvent_Ref) GetRemote() string {
	if x != nil && x.Remote != nil {
		return *x.Remote
	}
	return ""
}

type CppGitContextEvent_Remote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FetchUrl   *string `protobuf:"bytes,2,opt,name=fetch_url,json=fetchUrl,proto3,oneof" json:"fetch_url,omitempty"`
	PushUrl    *string `protobuf:"bytes,3,opt,name=push_url,json=pushUrl,proto3,oneof" json:"push_url,omitempty"`
	IsReadOnly bool    `protobuf:"varint,4,opt,name=is_read_only,json=isReadOnly,proto3" json:"is_read_only,omitempty"`
}

func (x *CppGitContextEvent_Remote) Reset() {
	*x = CppGitContextEvent_Remote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[674]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Remote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Remote) ProtoMessage() {}

func (x *CppGitContextEvent_Remote) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[674]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Remote.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Remote) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 2}
}

func (x *CppGitContextEvent_Remote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CppGitContextEvent_Remote) GetFetchUrl() string {
	if x != nil && x.FetchUrl != nil {
		return *x.FetchUrl
	}
	return ""
}

func (x *CppGitContextEvent_Remote) GetPushUrl() string {
	if x != nil && x.PushUrl != nil {
		return *x.PushUrl
	}
	return ""
}

func (x *CppGitContextEvent_Remote) GetIsReadOnly() bool {
	if x != nil {
		return x.IsReadOnly
	}
	return false
}

type CppGitContextEvent_Submodule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CppGitContextEvent_Submodule) Reset() {
	*x = CppGitContextEvent_Submodule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[675]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Submodule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Submodule) ProtoMessage() {}

func (x *CppGitContextEvent_Submodule) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[675]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Submodule.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Submodule) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 3}
}

func (x *CppGitContextEvent_Submodule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CppGitContextEvent_Submodule) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CppGitContextEvent_Submodule) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CppGitContextEvent_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string                                     `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Message     string                                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Parents     []string                                   `protobuf:"bytes,3,rep,name=parents,proto3" json:"parents,omitempty"`
	AuthorDate  *string                                    `protobuf:"bytes,4,opt,name=author_date,json=authorDate,proto3,oneof" json:"author_date,omitempty"`
	AuthorName  *string                                    `protobuf:"bytes,5,opt,name=author_name,json=authorName,proto3,oneof" json:"author_name,omitempty"`
	AuthorEmail *string                                    `protobuf:"bytes,6,opt,name=author_email,json=authorEmail,proto3,oneof" json:"author_email,omitempty"`
	CommitDate  *string                                    `protobuf:"bytes,7,opt,name=commit_date,json=commitDate,proto3,oneof" json:"commit_date,omitempty"`
	ShortStat   *CppGitContextEvent_Commit_CommitShortStat `protobuf:"bytes,8,opt,name=short_stat,json=shortStat,proto3,oneof" json:"short_stat,omitempty"`
}

func (x *CppGitContextEvent_Commit) Reset() {
	*x = CppGitContextEvent_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[676]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Commit) ProtoMessage() {}

func (x *CppGitContextEvent_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[676]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Commit.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Commit) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 4}
}

func (x *CppGitContextEvent_Commit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CppGitContextEvent_Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CppGitContextEvent_Commit) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

func (x *CppGitContextEvent_Commit) GetAuthorDate() string {
	if x != nil && x.AuthorDate != nil {
		return *x.AuthorDate
	}
	return ""
}

func (x *CppGitContextEvent_Commit) GetAuthorName() string {
	if x != nil && x.AuthorName != nil {
		return *x.AuthorName
	}
	return ""
}

func (x *CppGitContextEvent_Commit) GetAuthorEmail() string {
	if x != nil && x.AuthorEmail != nil {
		return *x.AuthorEmail
	}
	return ""
}

func (x *CppGitContextEvent_Commit) GetCommitDate() string {
	if x != nil && x.CommitDate != nil {
		return *x.CommitDate
	}
	return ""
}

func (x *CppGitContextEvent_Commit) GetShortStat() *CppGitContextEvent_Commit_CommitShortStat {
	if x != nil {
		return x.ShortStat
	}
	return nil
}

type CppGitContextEvent_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri         string  `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	OriginalUri string  `protobuf:"bytes,2,opt,name=original_uri,json=originalUri,proto3" json:"original_uri,omitempty"`
	RenameUri   *string `protobuf:"bytes,3,opt,name=rename_uri,json=renameUri,proto3,oneof" json:"rename_uri,omitempty"`
	Status      string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CppGitContextEvent_Change) Reset() {
	*x = CppGitContextEvent_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[677]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Change) ProtoMessage() {}

func (x *CppGitContextEvent_Change) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[677]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Change.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Change) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 5}
}

func (x *CppGitContextEvent_Change) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *CppGitContextEvent_Change) GetOriginalUri() string {
	if x != nil {
		return x.OriginalUri
	}
	return ""
}

func (x *CppGitContextEvent_Change) GetRenameUri() string {
	if x != nil && x.RenameUri != nil {
		return *x.RenameUri
	}
	return ""
}

func (x *CppGitContextEvent_Change) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CppGitContextEvent_Head_UpstreamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remote string  `protobuf:"bytes,1,opt,name=remote,proto3" json:"remote,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Commit *string `protobuf:"bytes,3,opt,name=commit,proto3,oneof" json:"commit,omitempty"`
}

func (x *CppGitContextEvent_Head_UpstreamRef) Reset() {
	*x = CppGitContextEvent_Head_UpstreamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[678]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Head_UpstreamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Head_UpstreamRef) ProtoMessage() {}

func (x *CppGitContextEvent_Head_UpstreamRef) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[678]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Head_UpstreamRef.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Head_UpstreamRef) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 0, 0}
}

func (x *CppGitContextEvent_Head_UpstreamRef) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *CppGitContextEvent_Head_UpstreamRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CppGitContextEvent_Head_UpstreamRef) GetCommit() string {
	if x != nil && x.Commit != nil {
		return *x.Commit
	}
	return ""
}

type CppGitContextEvent_Commit_CommitShortStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files      int32 `protobuf:"varint,1,opt,name=files,proto3" json:"files,omitempty"`
	Insertions int32 `protobuf:"varint,2,opt,name=insertions,proto3" json:"insertions,omitempty"`
	Deletions  int32 `protobuf:"varint,3,opt,name=deletions,proto3" json:"deletions,omitempty"`
}

func (x *CppGitContextEvent_Commit_CommitShortStat) Reset() {
	*x = CppGitContextEvent_Commit_CommitShortStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[679]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CppGitContextEvent_Commit_CommitShortStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CppGitContextEvent_Commit_CommitShortStat) ProtoMessage() {}

func (x *CppGitContextEvent_Commit_CommitShortStat) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[679]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CppGitContextEvent_Commit_CommitShortStat.ProtoReflect.Descriptor instead.
func (*CppGitContextEvent_Commit_CommitShortStat) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{434, 4, 0}
}

func (x *CppGitContextEvent_Commit_CommitShortStat) GetFiles() int32 {
	if x != nil {
		return x.Files
	}
	return 0
}

func (x *CppGitContextEvent_Commit_CommitShortStat) GetInsertions() int32 {
	if x != nil {
		return x.Insertions
	}
	return 0
}

func (x *CppGitContextEvent_Commit_CommitShortStat) GetDeletions() int32 {
	if x != nil {
		return x.Deletions
	}
	return 0
}

type SyncMerkleSubtreeResponse_Mismatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*PartialPathItem `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *SyncMerkleSubtreeResponse_Mismatch) Reset() {
	*x = SyncMerkleSubtreeResponse_Mismatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[680]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncMerkleSubtreeResponse_Mismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncMerkleSubtreeResponse_Mismatch) ProtoMessage() {}

func (x *SyncMerkleSubtreeResponse_Mismatch) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[680]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncMerkleSubtreeResponse_Mismatch.ProtoReflect.Descriptor instead.
func (*SyncMerkleSubtreeResponse_Mismatch) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{457, 0}
}

func (x *SyncMerkleSubtreeResponse_Mismatch) GetChildren() []*PartialPathItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type FastUpdateFileRequest_LocalFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File                             *File  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Hash                             string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	UnencryptedRelativeWorkspacePath string `protobuf:"bytes,3,opt,name=unencrypted_relative_workspace_path,json=unencryptedRelativeWorkspacePath,proto3" json:"unencrypted_relative_workspace_path,omitempty"`
}

func (x *FastUpdateFileRequest_LocalFile) Reset() {
	*x = FastUpdateFileRequest_LocalFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[681]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastUpdateFileRequest_LocalFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastUpdateFileRequest_LocalFile) ProtoMessage() {}

func (x *FastUpdateFileRequest_LocalFile) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[681]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastUpdateFileRequest_LocalFile.ProtoReflect.Descriptor instead.
func (*FastUpdateFileRequest_LocalFile) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{458, 0}
}

func (x *FastUpdateFileRequest_LocalFile) GetFile() *File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FastUpdateFileRequest_LocalFile) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FastUpdateFileRequest_LocalFile) GetUnencryptedRelativeWorkspacePath() string {
	if x != nil {
		return x.UnencryptedRelativeWorkspacePath
	}
	return ""
}

type GetHighLevelFolderDescriptionRequest_Readme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelativeWorkspacePath string `protobuf:"bytes,1,opt,name=relative_workspace_path,json=relativeWorkspacePath,proto3" json:"relative_workspace_path,omitempty"`
	Contents              string `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) Reset() {
	*x = GetHighLevelFolderDescriptionRequest_Readme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[682]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHighLevelFolderDescriptionRequest_Readme) ProtoMessage() {}

func (x *GetHighLevelFolderDescriptionRequest_Readme) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[682]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHighLevelFolderDescriptionRequest_Readme.ProtoReflect.Descriptor instead.
func (*GetHighLevelFolderDescriptionRequest_Readme) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{466, 0}
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) GetRelativeWorkspacePath() string {
	if x != nil {
		return x.RelativeWorkspacePath
	}
	return ""
}

func (x *GetHighLevelFolderDescriptionRequest_Readme) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type GetEmbeddingsResponse_Embedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embedding []float32 `protobuf:"fixed32,1,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
}

func (x *GetEmbeddingsResponse_Embedding) Reset() {
	*x = GetEmbeddingsResponse_Embedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[683]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmbeddingsResponse_Embedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmbeddingsResponse_Embedding) ProtoMessage() {}

func (x *GetEmbeddingsResponse_Embedding) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[683]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmbeddingsResponse_Embedding.ProtoReflect.Descriptor instead.
func (*GetEmbeddingsResponse_Embedding) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{469, 0}
}

func (x *GetEmbeddingsResponse_Embedding) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

type RepositoryStatusResponse_NotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_NotFound) Reset() {
	*x = RepositoryStatusResponse_NotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[684]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_NotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_NotFound) ProtoMessage() {}

func (x *RepositoryStatusResponse_NotFound) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[684]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_NotFound.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_NotFound) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 0}
}

type RepositoryStatusResponse_Uploading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress float32 `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *RepositoryStatusResponse_Uploading) Reset() {
	*x = RepositoryStatusResponse_Uploading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[685]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_Uploading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_Uploading) ProtoMessage() {}

func (x *RepositoryStatusResponse_Uploading) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[685]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_Uploading.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_Uploading) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 1}
}

func (x *RepositoryStatusResponse_Uploading) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type RepositoryStatusResponse_Syncing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch    string  `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	OldCommit string  `protobuf:"bytes,2,opt,name=old_commit,json=oldCommit,proto3" json:"old_commit,omitempty"`
	NewCommit string  `protobuf:"bytes,3,opt,name=new_commit,json=newCommit,proto3" json:"new_commit,omitempty"`
	Progress  float32 `protobuf:"fixed32,4,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *RepositoryStatusResponse_Syncing) Reset() {
	*x = RepositoryStatusResponse_Syncing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[686]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_Syncing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_Syncing) ProtoMessage() {}

func (x *RepositoryStatusResponse_Syncing) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[686]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_Syncing.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_Syncing) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 2}
}

func (x *RepositoryStatusResponse_Syncing) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RepositoryStatusResponse_Syncing) GetOldCommit() string {
	if x != nil {
		return x.OldCommit
	}
	return ""
}

func (x *RepositoryStatusResponse_Syncing) GetNewCommit() string {
	if x != nil {
		return x.NewCommit
	}
	return ""
}

func (x *RepositoryStatusResponse_Syncing) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type RepositoryStatusResponse_Synced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch string `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *RepositoryStatusResponse_Synced) Reset() {
	*x = RepositoryStatusResponse_Synced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[687]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_Synced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_Synced) ProtoMessage() {}

func (x *RepositoryStatusResponse_Synced) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[687]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_Synced.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_Synced) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 3}
}

func (x *RepositoryStatusResponse_Synced) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *RepositoryStatusResponse_Synced) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

type RepositoryStatusResponse_NotSubscribed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_NotSubscribed) Reset() {
	*x = RepositoryStatusResponse_NotSubscribed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[688]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_NotSubscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_NotSubscribed) ProtoMessage() {}

func (x *RepositoryStatusResponse_NotSubscribed) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[688]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_NotSubscribed.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_NotSubscribed) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 4}
}

type RepositoryStatusResponse_TooBig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSize int32 `protobuf:"varint,1,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *RepositoryStatusResponse_TooBig) Reset() {
	*x = RepositoryStatusResponse_TooBig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[689]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_TooBig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_TooBig) ProtoMessage() {}

func (x *RepositoryStatusResponse_TooBig) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[689]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_TooBig.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_TooBig) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 5}
}

func (x *RepositoryStatusResponse_TooBig) GetMaxSize() int32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type RepositoryStatusResponse_AuthTokenNotFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_AuthTokenNotFound) Reset() {
	*x = RepositoryStatusResponse_AuthTokenNotFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[690]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_AuthTokenNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_AuthTokenNotFound) ProtoMessage() {}

func (x *RepositoryStatusResponse_AuthTokenNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[690]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_AuthTokenNotFound.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_AuthTokenNotFound) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 6}
}

type RepositoryStatusResponse_AuthTokenNotAuthorized struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_AuthTokenNotAuthorized) Reset() {
	*x = RepositoryStatusResponse_AuthTokenNotAuthorized{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[691]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_AuthTokenNotAuthorized) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_AuthTokenNotAuthorized) ProtoMessage() {}

func (x *RepositoryStatusResponse_AuthTokenNotAuthorized) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[691]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_AuthTokenNotAuthorized.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_AuthTokenNotAuthorized) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 7}
}

type RepositoryStatusResponse_EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryStatusResponse_EmptyMessage) Reset() {
	*x = RepositoryStatusResponse_EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aiserver_v1_aiserver_proto_msgTypes[692]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryStatusResponse_EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryStatusResponse_EmptyMessage) ProtoMessage() {}

func (x *RepositoryStatusResponse_EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aiserver_v1_aiserver_proto_msgTypes[692]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryStatusResponse_EmptyMessage.ProtoReflect.Descriptor instead.
func (*RepositoryStatusResponse_EmptyMessage) Descriptor() ([]byte, []int) {
	return file_aiserver_v1_aiserver_proto_rawDescGZIP(), []int{472, 8}
}

var File_aiserver_v1_aiserver_proto protoreflect.FileDescriptor

var file_aiserver_v1_aiserver_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x8c, 0x01, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x01, 0x22, 0x3a,
	0x0a, 0x1b, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x22, 0xc8, 0x08, 0x0a, 0x16, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xec, 0x07, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x42, 0x41, 0x44, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x49, 0x44,
	0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x27, 0x0a,
	0x23, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0a, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0b, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0c, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x10, 0x0e, 0x12,
	0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x41, 0x49, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x10, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x55, 0x49,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x13, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x53, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x15, 0x12, 0x1f, 0x0a,
	0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x16, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x42, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x17, 0x12, 0x25,
	0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x4c, 0x41, 0x53, 0x48, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47,
	0x50, 0x54, 0x5f, 0x34, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x1b,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x1d, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43,
	0x4c, 0x41, 0x55, 0x44, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x47, 0x49, 0x54, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x1f, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x76, 0x0a, 0x16, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x17, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0xca, 0x01, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x6e, 0x12, 0x34, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x6f, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x22,
	0x86, 0x0e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52,
	0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x13,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x06, 0x69, 0x73, 0x42, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x27, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x22, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x57, 0x65, 0x62, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x07, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x69, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x10,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x61,
	0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x53,
	0x54, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0c, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0d, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x68, 0x42, 0x2a,
	0x0a, 0x28, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xa4, 0x06, 0x0a, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3f, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x4d, 0x32, 0x35, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x09, 0x74,
	0x6f, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x16, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x14, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x1a, 0x0e, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x43,
	0x65, 0x6c, 0x6c, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x92, 0x01, 0x0a, 0x09, 0x42, 0x4d, 0x32, 0x35, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x5c, 0x0a, 0x0d, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x22, 0x97, 0x02, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x2e, 0x0a, 0x06, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0b, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a,
	0x04, 0x0a, 0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x5b, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5e, 0x0a, 0x12,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbc, 0x01, 0x0a,
	0x12, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49,
	0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x41, 0x47,
	0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x41, 0x47, 0x4e,
	0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x41, 0x47,
	0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x22, 0xb4, 0x19, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x17, 0x63, 0x6f, 0x64, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x15, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66,
	0x66, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x08,
	0x67, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x17, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x12, 0x4f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x6d,
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x14, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6e,
	0x65, 0x77, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x27, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x22, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0xf9, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x45,
	0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x06, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xc2, 0x01, 0x0a, 0x14,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x1a, 0x82, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73,
	0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc0, 0x07, 0x0a, 0x0a, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x61, 0x77, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x67, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x90, 0x05, 0x0a, 0x09, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x4b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x48,
	0x00, 0x52, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x13, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x06,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x06, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49,
	0x10, 0x02, 0x22, 0xa0, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xad, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x9c, 0x01,
	0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x33,
	0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x1a, 0x37, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x0b,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66,
	0x22, 0xdd, 0x01, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x2b, 0x0a, 0x05,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x69, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x49, 0x46, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x54,
	0x4f, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x49, 0x46, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x02,
	0x22, 0xb1, 0x02, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x6c,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x33, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x19, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x9c, 0x01, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x64,
	0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb2, 0x08, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xd1, 0x07, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x52, 0x0a,
	0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x82, 0x04, 0x0a, 0x08, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4c, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x04, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40,
	0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x22,
	0xec, 0x03, 0x0a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x77, 0x0a, 0x2b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x26, 0x75,
	0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x6f, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x42, 0x2e,
	0x0a, 0x2c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x91,
	0x03, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x17, 0x6f, 0x72, 0x74, 0x68,
	0x6f, 0x67, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x67, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x22, 0x64, 0x0a, 0x0f, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x47, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x03, 0x52, 0x0a, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x69, 0x41, 0x70, 0x69, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x69, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x7d, 0x0a, 0x0a,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0c,
	0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd7, 0x04, 0x0a, 0x0b,
	0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x5c, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x5e,
	0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbc,
	0x01, 0x0a, 0x12, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53,
	0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49,
	0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x41,
	0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49,
	0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x69, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xfb, 0x06, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x92, 0x02, 0x0a, 0x0a, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x9d,
	0x03, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x1a, 0xc7, 0x01, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x3e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x53, 0x54, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x7d, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xe2, 0x06, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72,
	0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x04, 0x62, 0x6c, 0x6f,
	0x62, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x1a, 0xdd, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x59, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x1a, 0x2b, 0x0a, 0x04, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xff, 0x01,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x1a, 0x59, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xf1, 0x08, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1a, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f,
	0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x62, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x73, 0x42, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x12, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x06, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x07, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x73, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x77,
	0x65, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x65, 0x62, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x08, 0x52, 0x0b, 0x77,
	0x65, 0x62, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x48, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73,
	0x5f, 0x62, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f,
	0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x22, 0x48, 0x0a, 0x0b, 0x57, 0x65, 0x62, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0c, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x44, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x63, 0x0a, 0x16, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x17,
	0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x09,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x15, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xce, 0x0a, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x27, 0x63, 0x61, 0x6e,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x22, 0x63, 0x61,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x57, 0x65, 0x62, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x03, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x1b, 0x64, 0x69, 0x66, 0x66,
	0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x18, 0x64, 0x69, 0x66, 0x66,
	0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45, 0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x18, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x82, 0x02, 0x0a,
	0x07, 0x52, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x72, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x63,
	0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x77,
	0x65, 0x62, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xf2, 0x0b, 0x0a, 0x18, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73,
	0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x42, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x56, 0x32,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x27, 0x63, 0x61, 0x6e,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x63, 0x61, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x45,
	0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x7b, 0x0a, 0x0b,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x68, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x59, 0x0a,
	0x0a, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x14, 0x46, 0x75, 0x6c, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x5a,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x10, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xff, 0x08, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x17, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x4c, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x60,
	0x0a, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x03, 0x52, 0x0d,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x04, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x46, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x64,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x96, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x1d, 0x0a, 0x1b,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x19, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x64, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x64, 0x57, 0x61, 0x72,
	0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x22, 0xf5, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x11,
	0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x10, 0x73, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0x47, 0x0a, 0x10, 0x53, 0x75, 0x72, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4c, 0x0a, 0x20, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0xae, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x4c, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x10,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4b, 0x0a, 0x22, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x41, 0x0a,
	0x1d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x1a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x17, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x6c, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x64, 0x69, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x75, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75, 0x70, 0x55, 0x6e, 0x74, 0x69, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0x7e, 0x0a, 0x19, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x73,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0x94, 0x04, 0x0a, 0x1a, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x9d, 0x03, 0x0a, 0x18, 0x54, 0x72, 0x65, 0x65, 0x73,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x53, 0x69, 0x74, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x69, 0x74, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x1a, 0x3e, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x34, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x64, 0x5f, 0x66, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x69, 0x64, 0x46, 0x69, 0x74, 0x22, 0xaf,
	0x05, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x68, 0x0a, 0x12, 0x72, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52,
	0x11, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x41, 0x4c,
	0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x22, 0x0a, 0x1e, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x52,
	0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f,
	0x47, 0x50, 0x54, 0x34, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x14, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x75, 0x70,
	0x79, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x70, 0x74, 0x34, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x70, 0x74,
	0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x70, 0x74,
	0x34, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x67, 0x70, 0x74, 0x34, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x1f, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x22, 0x0a,
	0x20, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x6f, 0x45, 0x6e, 0x74,
	0x69, 0x72, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xb4, 0x0a, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x74,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x60, 0x0a, 0x13, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x69, 0x66, 0x66, 0x52,
	0x10, 0x64, 0x69, 0x66, 0x66, 0x54, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x55, 0x0a, 0x1c, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x1a, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0c, 0x63, 0x72, 0x75, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x52, 0x0a, 0x0b, 0x50, 0x61, 0x73,
	0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0xec, 0x01,
	0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x69, 0x66, 0x66, 0x12, 0x59, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44,
	0x69, 0x66, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69,
	0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x1a, 0x52, 0x0a, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0x7a, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x0e, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xff, 0x01, 0x0a,
	0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x6b, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf,
	0x04, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x86, 0x06, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x50, 0x54, 0x46, 0x6f,
	0x75, 0x72, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33,
	0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e,
	0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x44,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xf5, 0x07, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6d,
	0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x66, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x90, 0x09, 0x0a, 0x0d, 0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x74, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x0d,
	0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x55, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x75, 0x6e,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x6e,
	0x69, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x5d, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x69, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x69, 0x63, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x1a, 0x62, 0x0a, 0x0c,
	0x55, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0xb7, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x64, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x54, 0x0a, 0x12, 0x43, 0x70,
	0x70, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x52, 0x0a, 0x0b, 0x50, 0x61, 0x73, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x10, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x46,
	0x0a, 0x12, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbb, 0x04,
	0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xf9, 0x01, 0x0a, 0x16,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x97, 0x07, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x63, 0x6d, 0x64, 0x5f,
	0x6b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x63, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x66, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xcf, 0x05, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x47, 0x0a,
	0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xfa, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6a, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x47, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x4e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x01, 0x22, 0x94, 0x12, 0x0a, 0x10, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63,
	0x6d, 0x64, 0x5f, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x43, 0x6d,
	0x64, 0x49, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x55, 0x70, 0x55, 0x6e,
	0x74, 0x69, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1d, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x54,
	0x75, 0x72, 0x62, 0x6f, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x03, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1b, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x68,
	0x0a, 0x30, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x29, 0x69, 0x73, 0x41, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x15, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x46,
	0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x15, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x66, 0x61, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a,
	0x24, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x1f, 0x75,
	0x73, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x22, 0x82, 0x08, 0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x41, 0x53, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x45, 0x50,
	0x53, 0x45, 0x45, 0x4b, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x41, 0x53, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x04, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x50, 0x54, 0x34, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x50, 0x54, 0x34, 0x5f, 0x4e, 0x4f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x07, 0x12, 0x2e, 0x0a,
	0x2a, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x08, 0x12, 0x1e, 0x0a,
	0x1a, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x09, 0x12, 0x1f, 0x0a,
	0x1b, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x49, 0x4b, 0x55, 0x10, 0x0a, 0x12, 0x26,
	0x0a, 0x22, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x50, 0x54, 0x34, 0x4f, 0x5f, 0x4e, 0x4f,
	0x53, 0x50, 0x45, 0x43, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x50, 0x54, 0x34, 0x4f, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27,
	0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x41, 0x53,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x33, 0x33, 0x42, 0x10,
	0x0e, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x4e, 0x45,
	0x54, 0x5f, 0x33, 0x35, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x4e, 0x4e, 0x45, 0x54, 0x5f, 0x33, 0x35, 0x5f, 0x52,
	0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x10, 0x12, 0x2e, 0x0a, 0x2a, 0x46, 0x41, 0x53, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x53,
	0x45, 0x45, 0x4b, 0x5f, 0x56, 0x32, 0x10, 0x11, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x41, 0x53, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x12, 0x12, 0x30, 0x0a, 0x2c, 0x46, 0x41, 0x53,
	0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x50, 0x31, 0x36, 0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x46,
	0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x53, 0x45, 0x45, 0x4b, 0x5f, 0x33, 0x33,
	0x42, 0x5f, 0x56, 0x32, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x56, 0x34, 0x10, 0x15, 0x12, 0x26,
	0x0a, 0x22, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41,
	0x4c, 0x5f, 0x56, 0x35, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41, 0x4c, 0x5f, 0x56, 0x36, 0x10, 0x17, 0x12, 0x26,
	0x0a, 0x22, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x41,
	0x4c, 0x5f, 0x56, 0x37, 0x10, 0x18, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x75,
	0x70, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x75, 0x72,
	0x62, 0x6f, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x33, 0x0a, 0x31, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x11, 0x53, 0x6c,
	0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x4b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x6d, 0x64, 0x4b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x07, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x0a, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x09, 0x65, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x64,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x42, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x4b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x52,
	0x07, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6d, 0x64, 0x4b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6d,
	0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0xe9, 0x01, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x19, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x1a, 0x69, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x8d, 0x01, 0x0a,
	0x07, 0x45, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x1a, 0x0a, 0x04,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x2a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x29, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64,
	0x69, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x64,
	0x69, 0x74, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69,
	0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x30, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x04,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04,
	0x63, 0x68, 0x61, 0x74, 0x12, 0x73, 0x0a, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x54, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x1a, 0x0a, 0x04, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x5a, 0x0a, 0x0d, 0x45, 0x64, 0x69, 0x74, 0x73, 0x54, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61,
	0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x64, 0x69, 0x74,
	0x73, 0x22, 0x8d, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x69, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x22, 0xb7, 0x03, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x26,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x1f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x54, 0x6f,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x54, 0x6f, 0x44,
	0x65, 0x66, 0x12, 0x54, 0x0a, 0x19, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x48, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x2c, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x27, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x54,
	0x6f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x16,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x75, 0x72, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x72, 0x69, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0d, 0x75, 0x72, 0x69, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb0, 0x09, 0x0a, 0x0e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0x9d, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xb0, 0x05, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x07, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56, 0x41, 0x52,
	0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10,
	0x0e, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x10, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x12, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x14, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x15, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x16, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x59, 0x4d,
	0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x18,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x1a, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x55,
	0x72, 0x69, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x0c, 0x48, 0x6f,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x69, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x43, 0x70, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x21, 0x53, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x43, 0x70, 0x70, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x1d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f,
	0x6e, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x75,
	0x72, 0x6e, 0x4f, 0x6e, 0x43, 0x70, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x22, 0x85, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x6c, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x74,
	0x6c, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x69, 0x73, 0x42, 0x75, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x75, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x75, 0x67, 0x52, 0x04, 0x62, 0x75, 0x67, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x6c,
	0x64, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x67, 0x22, 0x82, 0x02,
	0x0a, 0x09, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x75, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x6c, 0x64, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x74, 0x6c, 0x64, 0x72, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x6c,
	0x64, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x4d, 0x41, 0x4e,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x49, 0x10, 0x02, 0x22, 0x67, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x22, 0xa2, 0x01, 0x0a,
	0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72,
	0x69, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x22, 0xb4, 0x04, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x14,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x54, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x10, 0x6e, 0x65, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68,
	0x69, 0x74, 0x48, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x28, 0x63,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x63,
	0x6f, 0x75, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x53, 0x6b, 0x69,
	0x70, 0x12, 0x4e, 0x0a, 0x13, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x53, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x40, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfd, 0x06, 0x0a, 0x11, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37,
	0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x4b,
	0x12, 0x51, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6d, 0x64, 0x4b, 0x12, 0x73, 0x0a, 0x1a, 0x61, 0x69, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x69, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x17, 0x61, 0x69, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x1a, 0x29, 0x0a, 0x04,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x30, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x29, 0x0a, 0x04, 0x43, 0x6d, 0x64,
	0x4b, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x1a, 0x31, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6d, 0x64, 0x4b, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x0a, 0x17, 0x41, 0x69, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x34, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x2e, 0x0a, 0x09, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x45, 0x64, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x75, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x7c, 0x0a, 0x1c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x17, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x04, 0x0a, 0x18, 0x44, 0x6f,
	0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73,
	0x6b, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54,
	0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x75, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x6b, 0x69, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x44, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x46, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x1a,
	0x25, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x44, 0x6f, 0x54, 0x68, 0x69,
	0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x91, 0x01,
	0x0a, 0x13, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69,
	0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x26, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xd5, 0x04, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x13, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07,
	0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x52, 0x07, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x1a, 0x1c, 0x0a, 0x06, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xb6, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x6f, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x6f,
	0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x65,
	0x1a, 0x1d, 0x0a, 0x07, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x08, 0x54, 0x6f,
	0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x0f, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x45, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0xd8, 0x0b, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54,
	0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x74, 0x6f, 0x64, 0x65,
	0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x67, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x45, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x64, 0x69,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x45, 0x64, 0x69,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x72, 0x75, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e,
	0x73, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x45,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x10, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x14, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x67, 0x0a, 0x1c, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x19, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x67, 0x0a, 0x1c, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x19, 0x72, 0x75, 0x6e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x45,
	0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x45, 0x64,
	0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x58, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x14, 0x72, 0x65,
	0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x47, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xf0, 0x04, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4d, 0x0a, 0x22, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x1c, 0x61,
	0x75, 0x74, 0x6f, 0x46, 0x69, 0x78, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x22, 0x7a,
	0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x44, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x52, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x6f,
	0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x0b, 0x0a, 0x09, 0x45, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x81, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x53, 0x61, 0x76,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc5, 0x02,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x1a, 0x72, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x72, 0x61, 0x62, 0x5f, 0x77, 0x68,
	0x6f, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x67, 0x72, 0x61, 0x62, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xa9, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x52,
	0x75, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x55, 0x75, 0x69, 0x64, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x4e, 0x65,
	0x77, 0x45, 0x64, 0x69, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4e, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x41, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x23, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x74, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xf3, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4e, 0x0a, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4b, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x11,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xda, 0x0b, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x04,
	0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x74, 0x6f, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x74, 0x6f, 0x64,
	0x65, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x67, 0x6f, 0x74, 0x6f, 0x64, 0x65,
	0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x45, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x6f, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x75, 0x6e, 0x64, 0x6f, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x42, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x61, 0x64, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x72, 0x75,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0e, 0x73, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x45, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x67, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x67, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a, 0x1c,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x67, 0x0a, 0x1c,
	0x72, 0x75, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x19, 0x72, 0x75, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x45,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x72,
	0x65, 0x61, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e,
	0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4d, 0x61, 0x79, 0x42, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x22, 0xb8, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x1a, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x18, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x1a, 0x3b,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x0d, 0x47,
	0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x74, 0x6f,
	0x64, 0x65, 0x66, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xff, 0x01, 0x0a, 0x1b, 0x47, 0x6f, 0x74, 0x6f, 0x64, 0x65, 0x66, 0x54, 0x6f, 0x6f, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x6b, 0x0a, 0x1a, 0x70, 0x6f, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x74, 0x6f, 0x64,
	0x65, 0x66, 0x54, 0x6f, 0x6f, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x18, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xd3, 0x05, 0x0a, 0x0a, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x6c,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x12, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0xb7,
	0x03, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xba, 0x01, 0x0a, 0x12,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x55, 0x6e, 0x64,
	0x6f, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x22, 0x0b, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x71, 0x0a,
	0x0d, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x22, 0x8d, 0x04, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x1a, 0xba, 0x03, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xba, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x27, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a,
	0x0e, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x7a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x30, 0x0a, 0x04, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x35, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x07, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0xa5, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x0b, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x41, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x72, 0x6f, 0x6f, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x1a, 0x58, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x71, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x22, 0x35, 0x0a, 0x19, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x43, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x36, 0x0a, 0x0f,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x05, 0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x41, 0x69, 0x54,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x43, 0x0a, 0x10, 0x63, 0x6d, 0x64, 0x5f, 0x6b,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63,
	0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x41,
	0x69, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x1a, 0xfc, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x9d, 0x01, 0x0a, 0x24, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x41, 0x69, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x21, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x75,
	0x63, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0xcf, 0x02, 0x0a, 0x21, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x48, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x68,
	0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x68, 0x61, 0x6c, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x75, 0x73, 0x68, 0x41, 0x69, 0x54, 0x68, 0x6f,
	0x75, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x18,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x6f, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x41, 0x0a, 0x19, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x6f, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6f, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x64, 0x6f, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x96,
	0x03, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x69, 0x6d,
	0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x15, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x61, 0x62,
	0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x41,
	0x6e, 0x64, 0x42, 0x65, 0x6c, 0x6f, 0x77, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf7, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x4b, 0x46, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x66, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x4b, 0x46, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x61, 0x74, 0x65, 0x52, 0x04, 0x66,
	0x61, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x46, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x55, 0x50,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x4f,
	0x4d, 0x50, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6d, 0x64, 0x4b, 0x46, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a,
	0x19, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0xfd, 0x01,
	0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x4c, 0x69, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x96, 0x04,
	0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x19, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x26, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x23, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x14, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x29, 0x0a, 0x27, 0x5f,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x6b, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x09, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x5f, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x75, 0x62, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x62, 0x4e, 0x65, 0x77, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x50, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x5b,
	0x0a, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x16, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x72,
	0x75, 0x6e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x75, 0x62,
	0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74, 0x75,
	0x62, 0x4e, 0x65, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x1e,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x75,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x22,
	0x8d, 0x01, 0x0a, 0x22, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x2a, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x55,
	0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x23, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x4c, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xd2, 0x03, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58,
	0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x10, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2f,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x13, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x55, 0x75, 0x69, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x67,
	0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa6, 0x03, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x66,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0xab, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x12, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc4, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a,
	0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x07, 0x74, 0x68,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f,
	0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9b, 0x01, 0x0a,
	0x11, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x22, 0x24, 0x0a, 0x0e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x87, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x12,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a,
	0x74, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xb1, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x77, 0x61, 0x6e,
	0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x77, 0x61,
	0x6e, 0x74, 0x73, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x6f, 0x77, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x18, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x22, 0x3c, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22,
	0x3e, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22,
	0x71, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x6d,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x3b, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0xa7, 0x0b, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x05, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4f,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12,
	0x58, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x6d, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12,
	0x45, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xb2, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x55, 0x75, 0x69, 0x64, 0x1a, 0xb2, 0x01, 0x0a, 0x0a,
	0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x55, 0x75, 0x69, 0x64,
	0x1a, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x55, 0x75, 0x69, 0x64, 0x1a, 0xb3,
	0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x14, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x67,
	0x0a, 0x1e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xa2, 0x01, 0x0a, 0x14, 0x55, 0x52, 0x49, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xe1, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x4f, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x03, 0x22, 0xd9, 0x01, 0x0a, 0x1a, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x11, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x73, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x22,
	0xa1, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x08, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x08, 0x73, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x96, 0x05, 0x0a,
	0x1c, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0xb8, 0x02, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x6a, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x0c,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x1b, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x1a, 0x26, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x1a, 0x26, 0x0a, 0x0b, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x1f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x1a, 0x23, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x1a, 0x22, 0x0a,
	0x0a, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x72, 0x0a, 0x1e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x22, 0x34, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x55, 0x75, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x64, 0x0a, 0x1d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x1b, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x13, 0x55, 0x52, 0x49, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x52,
	0x49, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef,
	0x02, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x65,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x0b, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x6d, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x65, 0x0a, 0x10, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0a, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x1d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7a,
	0x0a, 0x1d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x13, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4b, 0x0a, 0x12, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x52, 0x10, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x22, 0x4f,
	0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22,
	0x94, 0x01, 0x0a, 0x19, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x5f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x1a, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x09, 0x64, 0x6f,
	0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x5e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x22,
	0xb8, 0x01, 0x0a, 0x14, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x1a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x22, 0x7a, 0x0a, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x73, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x75, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x22, 0xf9,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x0c, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x45,
	0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x45, 0x45,
	0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x45,
	0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x62,
	0x75, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x75, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x75, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x42, 0x75, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x55, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x55, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x55, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x41, 0x10, 0x06, 0x22, 0xef, 0x03,
	0x0a, 0x0a, 0x42, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x61, 0x77, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x69, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x54, 0x6f, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x29, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x64, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0xf1,
	0x06, 0x0a, 0x1c, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b,
	0x0a, 0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x0c, 0x6c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x61, 0x64, 0x76,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02,
	0x52, 0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xb8, 0x03, 0x0a, 0x1e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x08, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x03, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x22, 0xa9, 0x01,
	0x0a, 0x24, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0x98, 0x0b, 0x0a, 0x1d, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x5f, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0d, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12, 0x68, 0x0a, 0x11, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73,
	0x74, 0x65, 0x70, 0x52, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x65, 0x70, 0x1a, 0x1c, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x1a, 0x51, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0xac, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x1a, 0xdc, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x64,
	0x0a, 0x10, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xe5, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a,
	0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x0a,
	0x41, 0x70, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70,
	0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x45, 0x0a, 0x10, 0x52, 0x65,
	0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xa3, 0x06, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x75, 0x70, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x75,
	0x70, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x73, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x73, 0x22, 0x5b, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52,
	0x44, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0xbe, 0x02, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0xe6, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x6f,
	0x6f, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x67, 0x6f, 0x6f, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x6f, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x61, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56,
	0x32, 0x12, 0x41, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x56, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x1a, 0x49, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdd, 0x01,
	0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x96, 0x0a,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x59, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x15, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x5c, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x6c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x50,
	0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0xcc, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x73, 0x1a, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0xc4, 0x02, 0x0a, 0x13, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xec, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x5a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xa6, 0x01, 0x0a,
	0x0a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x0f, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb2, 0x05, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x14, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x68,
	0x6f, 0x73, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x14, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x12, 0x63, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79, 0x0a,
	0x19, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x17, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x7c, 0x0a,
	0x13, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x6f, 0x63, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x14, 0x0a, 0x12, 0x43,
	0x68, 0x6f, 0x73, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x48, 0x0a, 0x17, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x4c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x18,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x54, 0x75, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x2f,
	0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x3e, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x36, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x41, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x14, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x22, 0xd9, 0x0d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x44, 0x69,
	0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x67,
	0x68, 0x74, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07,
	0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x6c, 0x79, 0x41, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0b, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x63, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x07, 0x52, 0x0d, 0x63, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x56, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x22, 0x74, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x51, 0x55, 0x49, 0x45, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4c, 0x4f,
	0x55, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4f, 0x50, 0x10, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x61, 0x63,
	0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x70,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x17,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x43, 0x70, 0x70, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x66,
	0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x17,
	0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x15, 0x64,
	0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x73, 0x22, 0xe2, 0x03, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69,
	0x66, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3c,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x77, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x47, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x49, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x65, 0x0a, 0x10, 0x43, 0x70,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0x47, 0x0a, 0x13, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x4c, 0x73, 0x70,
	0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x3a, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a,
	0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8a, 0x06, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x15, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x13, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x15, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x14, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x0f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x0e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x74, 0x66,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x54, 0x74, 0x66, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x13, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x74, 0x74, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x43, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x6e,
	0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x22, 0xd5, 0x0d, 0x0a, 0x11, 0x43, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0c,
	0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x62, 0x65,
	0x6c, 0x6f, 0x77, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x48, 0x02, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x69, 0x73, 0x47, 0x68, 0x6f,
	0x73, 0x74, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x2a, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x22, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4c, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x70, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x49, 0x66, 0x4e, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0a, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x52, 0x0a, 0x26, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x22, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x76, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x76, 0x66, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x1f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x62, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x75,
	0x73, 0x65, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x75, 0x73, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x6f, 0x0a, 0x18, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x16, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x21, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64,
	0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x61, 0x73, 0x68, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x70, 0x70,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x43, 0x70, 0x70, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x55, 0x72, 0x6c, 0x1a, 0x70, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5f, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x22, 0x94, 0x02, 0x0a, 0x09, 0x48, 0x65, 0x75, 0x72,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x4c, 0x4f,
	0x54, 0x53, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x23,
	0x0a, 0x1f, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x04, 0x12, 0x39, 0x0a, 0x35, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43,
	0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x53, 0x5f,
	0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x69, 0x73, 0x5f, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x2d, 0x0a, 0x2b, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x22, 0x1d,
	0x0a, 0x1b, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a,
	0x1c, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x66, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x43, 0x70, 0x70, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x43, 0x70, 0x70, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x31, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x11, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x67, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x22, 0x6e, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x6e, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5c, 0x0a, 0x10, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x76, 0x0a, 0x1d,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x73,
	0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x88, 0x10, 0x0a, 0x16, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52,
	0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x54, 0x6f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x75, 0x67, 0x73, 0x12, 0x37, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x75, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x75, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x19, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x1c, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x52, 0x0a,
	0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x54, 0x0a, 0x18, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x16, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x72, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52, 0x14, 0x64, 0x69,
	0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x1a, 0xe7, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x1a, 0xae,
	0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x53, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0xe7, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x1a,
	0xf1, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x77, 0x61, 0x72, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe4, 0x04, 0x0a, 0x09, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74,
	0x42, 0x75, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a,
	0x10, 0x72, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x4b, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x4c, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x6c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x4c,
	0x69, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x6c, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x6f, 0x73, 0x74, 0x4c, 0x69, 0x6b, 0x65, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5a, 0x65, 0x72, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x64, 0x22,
	0x20, 0x0a, 0x0a, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x75, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e,
	0x74, 0x42, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03,
	0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75,
	0x67, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x41, 0x69, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x6c,
	0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5d, 0x0a, 0x1d, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x41, 0x69, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x6d, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x03,
	0x0a, 0x24, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x03, 0x62, 0x75, 0x67,
	0x12, 0x69, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0xa0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x4c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x44,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x03, 0x22, 0x27, 0x0a, 0x25, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x16, 0x0a, 0x11,
	0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe6, 0x14, 0x0a, 0x06, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x69, 0x0a, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x78, 0x0a, 0x19, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x15, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x52, 0x0a, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x63, 0x0a,
	0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xac, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x76,
	0x61, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x1a, 0x5b, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x16, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x1a, 0xaf, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4c, 0x69,
	0x6e, 0x65, 0x1a, 0x92, 0x03, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x1a, 0xe9, 0x01, 0x0a, 0x04,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0xea, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f,
	0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x5a, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x1a, 0x8b, 0x02, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0x4f, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x97, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x5c, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde,
	0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x6d, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x6b, 0x69, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x31, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x6d, 0x70, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x89, 0x05, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3e, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3b, 0x0a,
	0x19, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x61,
	0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x74, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x22, 0x60,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x42, 0x75, 0x67,
	0x22, 0x74, 0x0a, 0x10, 0x41, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x41, 0x69, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x28, 0x0a, 0x12, 0x54, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x29, 0x0a, 0x13, 0x54, 0x6f, 0x43,
	0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xa7, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x45, 0x45, 0x44,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x45, 0x45, 0x44, 0x42,
	0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x53, 0x5f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x53, 0x5f, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x22,
	0x0a, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x12, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x54, 0x68, 0x6f,
	0x75, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x41, 0x69, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x65, 0x62, 0x43, 0x6d, 0x64, 0x4b, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x57, 0x65, 0x62, 0x43, 0x6d, 0x64, 0x4b, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x6d,
	0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x09, 0x0a, 0x21, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x67,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x15, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x69, 0x66, 0x66, 0x50, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79,
	0x5f, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x41, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0c,
	0x6c, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x73, 0x70, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x46, 0x75, 0x6c, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x6c, 0x73, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x63, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x07, 0x52, 0x0d, 0x63, 0x70, 0x70,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x69, 0x73, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x6b, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x22, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x20,
	0x49, 0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3d, 0x0a, 0x21, 0x49, 0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x63, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x0d, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x65, 0x64, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xf6, 0x03, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x70,
	0x70, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x0b, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x09, 0x6e, 0x6f, 0x6f, 0x70,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x70, 0x70,
	0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x08, 0x6e, 0x6f, 0x6f, 0x70, 0x45, 0x64, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4e, 0x6f,
	0x6f, 0x70, 0x88, 0x01, 0x01, 0x1a, 0xe7, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64,
	0x45, 0x64, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x04,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x5e, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x64, 0x45, 0x64, 0x69,
	0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50,
	0x72, 0x6f, 0x62, 0x73, 0x1a, 0x49, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x62, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x6f, 0x70, 0x22,
	0x93, 0x05, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x64,
	0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x69, 0x74,
	0x44, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x60, 0x0a,
	0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4f,
	0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x38, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x69, 0x74,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x22, 0x4c, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x72,
	0x0a, 0x1c, 0x54, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x44, 0x69, 0x66, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x26, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0x5c, 0x0a, 0x1d, 0x54, 0x61,
	0x6b, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x28, 0x0a, 0x10, 0x42, 0x75, 0x6c,
	0x6b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xa2, 0x01, 0x0a, 0x25,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x22, 0x4b, 0x0a, 0x14, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66, 0x66, 0x22, 0x0f, 0x0a,
	0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe,
	0x10, 0x0a, 0x19, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64,
	0x4b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x75,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x72, 0x75, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6e, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x75, 0x6e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x6d, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0xfb, 0x08, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xef, 0x07, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x1d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x64, 0x0a,
	0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45,
	0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69,
	0x78, 0x65, 0x73, 0x1a, 0x91, 0x04, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x12, 0x5e, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x46, 0x69, 0x78, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58,
	0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4d, 0x44, 0x5f, 0x4b, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58,
	0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12,
	0x22, 0x0a, 0x1e, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x57, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x53, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59,
	0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x22,
	0x45, 0x0a, 0x1a, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64,
	0x4b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xdf, 0x1f, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64,
	0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x46,
	0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x64,
	0x69, 0x66, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x66,
	0x75, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x75,
	0x73, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x12, 0x36, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x1a, 0xef, 0x08, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4c,
	0x69, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x1a, 0xe7, 0x07, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f,
	0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x0b, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x52,
	0x0a, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x65, 0x73, 0x1a, 0x8d, 0x04, 0x0a, 0x08,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x05, 0x65, 0x64, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x74,
	0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x05,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x1a, 0xc9, 0x07, 0x0a, 0x04,
	0x4c, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4f, 0x0a,
	0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x0b, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6e,
	0x74, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x46, 0x69, 0x78, 0x52, 0x0a, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x46, 0x69, 0x78, 0x65, 0x73, 0x1a, 0xfe, 0x03, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x63, 0x6b,
	0x46, 0x69, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x46, 0x69, 0x78, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x25, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x66,
	0x75, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xe7, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x69, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x91, 0x02, 0x0a,
	0x0c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x19,
	0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x15, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x1a, 0x52, 0x0a, 0x04, 0x44, 0x69, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x69, 0x66, 0x66, 0x22, 0xa8, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x4c,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x53, 0x10, 0x05, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x41, 0x53, 0x45, 0x10, 0x07, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x54, 0x55, 0x4e, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x46, 0x55, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0a, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x16, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x19,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x89, 0x03, 0x0a, 0x1d, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x55, 0x0a, 0x15, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x75,
	0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x68, 0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd4, 0x02, 0x0a, 0x13, 0x48, 0x65, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48,
	0x65, 0x75, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x17, 0x48, 0x65, 0x75, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x45, 0x55, 0x52, 0x49, 0x53,
	0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x5c, 0x0a,
	0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x4a, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x19, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x22, 0xf3, 0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x60, 0x0a, 0x16, 0x61, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x50, 0x0a, 0x1d, 0x41, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x0e,
	0x41, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x41, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x03, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x71, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x6b, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x42, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x6d, 0x0a, 0x0e, 0x52, 0x61,
	0x6e, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4c, 0x4d, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x42,
	0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x33, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x66, 0x66, 0x1a, 0x5a,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6c, 0x0a, 0x27, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xeb, 0x07, 0x0a, 0x1f, 0x45, 0x64, 0x69,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a,
	0x21, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x79, 0x5f, 0x62, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x79, 0x42, 0x65, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x6e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43,
	0x59, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49,
	0x43, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x10, 0x03,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x99, 0x06, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x2b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x6c,
	0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x26, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x41, 0x66, 0x74, 0x65, 0x72, 0x54, 0x68, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x19, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x17, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x75, 0x6e,
	0x64, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x69,
	0x73, 0x55, 0x6e, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x72, 0x65, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x73, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a,
	0x26, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f,
	0x54, 0x68, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x49, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x28, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x2e, 0x0a, 0x2c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x64, 0x6f,
	0x69, 0x6e, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x6f, 0x69,
	0x6e, 0x67, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xc6, 0x12, 0x0a, 0x0f, 0x43, 0x70, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x77, 0x52, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x57, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x77, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70,
	0x70, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x19, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x73, 0x0a, 0x1f, 0x64, 0x65, 0x62, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x70, 0x70, 0x44, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x1c, 0x64, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x14, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x12, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x17, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x0b, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6d, 0x64, 0x4b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x61, 0x69, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x69, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x12, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x0f, 0x74, 0x61, 0x62, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x1e, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x1e, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x1b, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x1c, 0x73, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x70, 0x70, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x63, 0x70, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63,
	0x70, 0x70, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x43, 0x70, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43, 0x70, 0x70, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57,
	0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70,
	0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x11, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x67, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x15, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22,
	0xb2, 0x01, 0x0a, 0x11, 0x43, 0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x43, 0x70, 0x70, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0xcd, 0x03, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x6c, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x43, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x78, 0x74, 0x12, 0xa8, 0x01, 0x0a, 0x57, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x47, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x54, 0x68, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x54, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x74, 0x4e, 0x6f, 0x74, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x67, 0x0a,
	0x24, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x1f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x42, 0x27, 0x0a, 0x25, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0x7b, 0x0a, 0x10, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x43, 0x70, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x77, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x70, 0x70, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x43, 0x70, 0x70, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x70, 0x70, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xda, 0x01, 0x0a, 0x18, 0x43, 0x70, 0x70, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x65, 0x77, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0xa1, 0x03, 0x0a, 0x1c, 0x43, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42,
	0x49, 0x47, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x03, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x43, 0x70, 0x70, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0e, 0x63,
	0x70, 0x70, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x6e,
	0x43, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63,
	0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x51, 0x0a, 0x14, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x70, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x10,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x12, 0x4f, 0x6e, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x6e, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x43, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x1f, 0x43,
	0x70, 0x70, 0x44, 0x65, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x0f,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x02, 0x0a, 0x15, 0x43, 0x70, 0x70, 0x45, 0x64,
	0x69, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x48,
	0x0a, 0x0f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x22, 0x3d, 0x0a, 0x0c, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63,
	0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x8a, 0x02, 0x0a, 0x19, 0x43, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c,
	0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x05,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69,
	0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x64, 0x64, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c, 0x02,
	0x0a, 0x0e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x45, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x15,
	0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x17, 0x43, 0x70,
	0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x14, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x12, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x49, 0x0a, 0x12, 0x71, 0x75, 0x69,
	0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x65,
	0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xd0, 0x09, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x4b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x42, 0x61, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d,
	0x64, 0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x44, 0x69, 0x66, 0x66, 0x73, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64,
	0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x66,
	0x66, 0x73, 0x52, 0x09, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x58, 0x0a,
	0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x69, 0x66, 0x66, 0x52, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x12, 0x58, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x1a, 0x87, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x1a, 0x11, 0x0a, 0x0f, 0x45,
	0x6e, 0x64, 0x4f, 0x66, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x15,
	0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x73, 0x1a, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69,
	0x66, 0x66, 0x73, 0x1a, 0x87, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x87, 0x01,
	0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x34, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x5f, 0x62, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xac, 0x03, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x5c, 0x0a, 0x15, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x79,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x41, 0x6e, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7a,
	0x0a, 0x1f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x6e, 0x64, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x26, 0x0a, 0x0c, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x1a, 0x14, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x41, 0x6e, 0x79, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x0a, 0x1c, 0x45, 0x6e, 0x64, 0x4f,
	0x66, 0x55, 0x6e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x0e, 0x41, 0x69, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x02, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x3a, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74,
	0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0d, 0x54, 0x61, 0x62,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0x9b, 0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x43, 0x70, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0e,
	0x63, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x53, 0x68, 0x6f, 0x77,
	0x6e, 0x43, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x63, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52, 0x04,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0x45, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0xa6, 0x03, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x16,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52,
	0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x57,
	0x41, 0x59, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x55, 0x52, 0x53,
	0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x22, 0xb7, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x22, 0x5f, 0x0a, 0x0f, 0x43, 0x70, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x1a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x43,
	0x70, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x51, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x70, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x70, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x22, 0xf6, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x81, 0x07, 0x0a, 0x10,
	0x43, 0x70, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x77, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x77, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x70, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x1a, 0x40, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4d, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x69,
	0x6d, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x57, 0x61, 0x73, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x1a, 0x8e, 0x02,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78,
	0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x77, 0x61,
	0x73, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x57, 0x61, 0x73, 0x54, 0x72, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x61, 0x73, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x77, 0x64, 0x22,
	0xfc, 0x10, 0x0a, 0x12, 0x43, 0x70, 0x70, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20,
	0x0a, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x3d, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x47,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x47, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70,
	0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x47, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x58, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70,
	0x70, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x65, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0xa7, 0x03, 0x0a, 0x04,
	0x48, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0c, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x70, 0x70, 0x47, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x66, 0x48, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x68, 0x65, 0x61, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x05, 0x61, 0x68, 0x65, 0x61, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x06, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x61, 0x0a,
	0x0b, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x66,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x68, 0x65, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62,
	0x65, 0x68, 0x69, 0x6e, 0x64, 0x1a, 0x8b, 0x01, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x65, 0x74, 0x63, 0x68, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x75, 0x73, 0x68, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72,
	0x6c, 0x1a, 0x45, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xfd, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x47, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x48, 0x04, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x1a, 0x65, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x1a, 0x88, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x75, 0x72, 0x69, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xee,
	0x02, 0x0a, 0x15, 0x43, 0x70, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x53, 0x0a, 0x0e, 0x43, 0x70, 0x70, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x43, 0x70, 0x70, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x12, 0x66,
	0x0a, 0x1c, 0x65, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x65, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x50, 0x65, 0x65, 0x6b, 0x22, 0xea, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x22, 0x53, 0x0a, 0x0e, 0x43, 0x70, 0x70, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x70, 0x70, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x70, 0x70, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x20, 0x45, 0x64,
	0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x68, 0x0a, 0x1f, 0x44, 0x65, 0x76, 0x4f,
	0x6e, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x4f, 0x6e, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0c, 0x70, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x12, 0x44, 0x65,
	0x76, 0x4f, 0x6e, 0x6c, 0x79, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x33, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x33, 0x55, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x43, 0x61, 0x6c, 0x6c, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa2, 0x05, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x13, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a,
	0x13, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x11,
	0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x76,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x56, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x11, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x06, 0x69, 0x73, 0x45, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x76, 0x32, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x71, 0x0a, 0x23, 0x54, 0x72, 0x79, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x0a, 0x24, 0x54, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x4e, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x16, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x74, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x74, 0x66, 0x74,
	0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xb5, 0x01, 0x0a,
	0x1c, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x6f, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x1d, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x5f, 0x54, 0x4f,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x04, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x4a, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6b, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36,
	0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f,
	0x66, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x68, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4b, 0x0a, 0x08,
	0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x08, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x44, 0x0a, 0x08, 0x4d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22,
	0xfc, 0x04, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x45, 0x0a, 0x0f, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x4d, 0x0a, 0x23, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x75, 0x6e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6e,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x03, 0x22, 0xc3,
	0x01, 0x0a, 0x16, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x03, 0x22, 0xa3, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x67, 0x6c, 0x6f,
	0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x67, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x18, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x56, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xdb, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x58, 0x0a, 0x19, 0x45, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd4, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x61,
	0x64, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x6d, 0x65, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x22, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x74, 0x6f, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x5c, 0x0a, 0x06, 0x52, 0x65, 0x61,
	0x64, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x22, 0x90, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x29, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xee, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x6f, 0x70, 0x4b, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x8f, 0x0a, 0x0a,
	0x18, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x08, 0x6e, 0x6f,
	0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x44,
	0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x06, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x12, 0x45, 0x0a, 0x07, 0x74, 0x6f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x52,
	0x06, 0x74, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x77, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x1a, 0x0a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x27, 0x0a, 0x09,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x7b, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x38, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a, 0x0f, 0x0a, 0x0d,
	0x4e, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x1a, 0x23, 0x0a,
	0x06, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69,
	0x7a, 0x65, 0x1a, 0x13, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e,
	0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x18, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x64, 0x1a, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x60,
	0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x64, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x6f, 0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x68, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x57, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x38, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x64, 0x0a,
	0x25, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x78, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x13, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x12, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x22, 0x3f, 0x0a,
	0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x1f,
	0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x0e, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2c, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x0f, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb0,
	0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10,
	0x03, 0x22, 0x13, 0x0a, 0x11, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x12, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x6f, 0x6c,
	0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x01,
	0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x22, 0x2d, 0x0a, 0x13, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x22, 0x38, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0xed, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x04, 0x22, 0x59, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xed,
	0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x22, 0x5b,
	0x0a, 0x1c, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x1d,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x2a,
	0x6f, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x55, 0x4e,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x10, 0x03,
	0x2a, 0xdb, 0x04, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x54,
	0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x55,
	0x4e, 0x4b, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f,
	0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x44, 0x45, 0x46, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e,
	0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x49, 0x4c, 0x54,
	0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x08, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x52, 0x55,
	0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c,
	0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49,
	0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x4d,
	0x41, 0x4e, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x0e, 0x12, 0x26,
	0x0a, 0x22, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49,
	0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4d,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x49, 0x4c,
	0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x11,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x42,
	0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x13, 0x2a, 0x86,
	0x01, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xc7, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x72, 0x61,
	0x6e, 0x6b, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x22, 0x0a,
	0x1e, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4c, 0x55, 0x4c, 0x45, 0x41, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4d, 0x45, 0x41, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x52,
	0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x4c, 0x4c, 0x41, 0x4d, 0x41, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x52, 0x41, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x31, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23,
	0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x47, 0x50, 0x54, 0x5f, 0x33, 0x5f, 0x35, 0x5f, 0x4c, 0x4f, 0x47, 0x50, 0x52,
	0x4f, 0x42, 0x53, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4c, 0x55, 0x4c, 0x45,
	0x41, 0x5f, 0x48, 0x41, 0x49, 0x4b, 0x55, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x52,
	0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f,
	0x43, 0x4f, 0x48, 0x45, 0x52, 0x45, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x52, 0x41,
	0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x56,
	0x4f, 0x59, 0x41, 0x47, 0x45, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x52, 0x41, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x56, 0x4f,
	0x59, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x53, 0x10, 0x0a, 0x12, 0x1f, 0x0a,
	0x1b, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49,
	0x54, 0x48, 0x4d, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x0b, 0x12, 0x21,
	0x0a, 0x1d, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x5f, 0x41, 0x44, 0x41, 0x5f, 0x45, 0x4d, 0x42, 0x45, 0x44, 0x53, 0x10,
	0x0c, 0x2a, 0xb1, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x72, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43, 0x48, 0x55,
	0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43, 0x48, 0x55, 0x4e,
	0x4b, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x36, 0x30, 0x30, 0x5f, 0x54,
	0x4f, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x32, 0x34, 0x30, 0x30, 0x5f, 0x54,
	0x4f, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x34, 0x30, 0x30, 0x30, 0x5f, 0x54,
	0x4f, 0x4b, 0x53, 0x10, 0x04, 0x2a, 0xb3, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x74, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x54, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x54, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x41, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f,
	0x42, 0x55, 0x47, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x04, 0x2a, 0xa2, 0x03, 0x0a, 0x11,
	0x4c, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49,
	0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4c,
	0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x4e, 0x54,
	0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43,
	0x48, 0x55, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x4f, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x49, 0x4e,
	0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f,
	0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x42, 0x55, 0x47, 0x53, 0x10, 0x0a,
	0x2a, 0x54, 0x0a, 0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x48, 0x55, 0x4e, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x32, 0xd1, 0x64, 0x0a, 0x09, 0x41, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f,
	0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68,
	0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x72, 0x79, 0x52, 0x65, 0x61,
	0x6c, 0x6c, 0x79, 0x48, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x0f, 0x52, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x62, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x6d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x64, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x15,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x12, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65,
	0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65,
	0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x73, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x23, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x74, 0x12, 0x1b,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c,
	0x6f, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x27, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x6f, 0x45, 0x6e, 0x74, 0x69,
	0x72, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x6f, 0x45, 0x6e, 0x74, 0x69, 0x72, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x69, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6d, 0x69, 0x6e, 0x69, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x1a,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x65, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x47, 0x50, 0x54, 0x46, 0x6f, 0x75, 0x72, 0x45, 0x64, 0x69, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x47, 0x50, 0x54, 0x46, 0x6f, 0x75, 0x72, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x62, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1f, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x73, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x61, 0x73, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x59, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x1a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e,
	0x0a, 0x09, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45,
	0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x9f,
	0x01, 0x0a, 0x22, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x45, 0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x45, 0x64, 0x69, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x70, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x63, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41,
	0x69, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x19, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54,
	0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x43, 0x70, 0x70, 0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x43, 0x70, 0x70,
	0x4f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x4f, 0x6e, 0x43, 0x70, 0x70, 0x4f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x57, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x10, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x6f,
	0x54, 0x68, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x1c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x6f, 0x6f, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x0d,
	0x50, 0x75, 0x73, 0x68, 0x41, 0x69, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x21, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x41, 0x69, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x41, 0x69, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x6f, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44,
	0x6f, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x6f, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1a,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74,
	0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x75, 0x74, 0x68, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x4b, 0x46, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x4b, 0x46, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x4b, 0x46, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x53, 0x68,
	0x6f, 0x77, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8b, 0x01,
	0x0a, 0x1b, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x12, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x0f, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f, 0x70, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f,
	0x70, 0x6f, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65,
	0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68,
	0x61, 0x74, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x65,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x14, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x6f, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x67, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x64, 0x72,
	0x12, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x64, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x56, 0x32, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x70, 0x70, 0x12, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x4c, 0x0a, 0x09, 0x43, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d,
	0x0a, 0x14, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x09, 0x43, 0x70, 0x70, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x70, 0x41, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x75, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x12,
	0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42, 0x75, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x4c, 0x69, 0x6e, 0x74, 0x42,
	0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69,
	0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x48, 0x65, 0x6c, 0x70, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x69, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x41, 0x69, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x4c, 0x6f, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a,
	0x1d, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x31,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x67, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x13, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72,
	0x69, 0x6f, 0x6d, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x09, 0x41, 0x69, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0b, 0x54, 0x6f, 0x43, 0x61, 0x6d,
	0x65, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x43, 0x61, 0x6d, 0x65, 0x6c, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x68, 0x6f,
	0x75, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57,
	0x65, 0x62, 0x43, 0x6d, 0x64, 0x4b, 0x56, 0x31, 0x12, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x65, 0x62,
	0x43, 0x6d, 0x64, 0x4b, 0x56, 0x31, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x57, 0x65, 0x62, 0x43, 0x6d, 0x64, 0x4b, 0x56, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x65, 0x78, 0x74, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x19, 0x49,
	0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x54, 0x61, 0x6b, 0x65, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x29, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x6b, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x42, 0x75, 0x6c, 0x6b,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61, 0x6c,
	0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6d, 0x64, 0x4b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6d, 0x64, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x4d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x73, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x33, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x14,
	0x43, 0x70, 0x70, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x4f, 0x6e, 0x6c, 0x79, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x2c, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x4f, 0x6e, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x4f,
	0x6e, 0x6c, 0x79, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x1c, 0x54,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x53, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x12, 0x1b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x54, 0x61, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc6, 0x15, 0x0a, 0x11, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x70, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x49, 0x6e, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x46, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x12, 0x24, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32,
	0x12, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x12, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x48, 0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x65,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x23, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x25, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x54, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a,
	0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1e, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x1d, 0x2e,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20,
	0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x61,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x15, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x61, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0xd1, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x62, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6d, 0x7a, 0x2f, 0x65,
	0x76, 0x65, 0x72, 0x65, 0x73, 0x74, 0x6d, 0x7a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x69, 0x6f, 0x2f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41,
	0x58, 0x58, 0xaa, 0x02, 0x0b, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0b, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x17, 0x41, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x41, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aiserver_v1_aiserver_proto_rawDescOnce sync.Once
	file_aiserver_v1_aiserver_proto_rawDescData = file_aiserver_v1_aiserver_proto_rawDesc
)

func file_aiserver_v1_aiserver_proto_rawDescGZIP() []byte {
	file_aiserver_v1_aiserver_proto_rawDescOnce.Do(func() {
		file_aiserver_v1_aiserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_aiserver_v1_aiserver_proto_rawDescData)
	})
	return file_aiserver_v1_aiserver_proto_rawDescData
}

var file_aiserver_v1_aiserver_proto_enumTypes = make([]protoimpl.EnumInfo, 56)
var file_aiserver_v1_aiserver_proto_msgTypes = make([]protoimpl.MessageInfo, 693)
var file_aiserver_v1_aiserver_proto_goTypes = []any{
	(ChunkType)(0),                       // 0: aiserver.v1.ChunkType
	(BuiltinTool)(0),                     // 1: aiserver.v1.BuiltinTool
	(FeatureType)(0),                     // 2: aiserver.v1.FeatureType
	(TaskStatus)(0),                      // 3: aiserver.v1.TaskStatus
	(RerankerAlgorithm)(0),               // 4: aiserver.v1.RerankerAlgorithm
	(RechunkerChoice)(0),                 // 5: aiserver.v1.RechunkerChoice
	(LintGenerator)(0),                   // 6: aiserver.v1.LintGenerator
	(LintDiscriminator)(0),               // 7: aiserver.v1.LintDiscriminator
	(ChunkingStrategy)(0),                // 8: aiserver.v1.ChunkingStrategy
	(HealthCheckResponse_Status)(0),      // 9: aiserver.v1.HealthCheckResponse.Status
	(ThrowErrorCheckRequest_Error)(0),    // 10: aiserver.v1.ThrowErrorCheckRequest.Error
	(Diagnostic_DiagnosticSeverity)(0),   // 11: aiserver.v1.Diagnostic.DiagnosticSeverity
	(ConversationMessage_MessageType)(0), // 12: aiserver.v1.ConversationMessage.MessageType
	(ConversationMessage_CodeChunk_SummarizationStrategy)(0),            // 13: aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy
	(ConversationMessage_CodeChunk_Intent)(0),                           // 14: aiserver.v1.ConversationMessage.CodeChunk.Intent
	(ConversationMessage_ToolResult_CodeChunk_SummarizationStrategy)(0), // 15: aiserver.v1.ConversationMessage.ToolResult.CodeChunk.SummarizationStrategy
	(ConversationMessage_ToolResult_CodeChunk_Intent)(0),                // 16: aiserver.v1.ConversationMessage.ToolResult.CodeChunk.Intent
	(GitDiff_DiffType)(0), // 17: aiserver.v1.GitDiff.DiffType
	(UserResponseToSuggestedCodeBlock_UserResponseType)(0),          // 18: aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
	(LinterError_DiagnosticSeverity)(0),                             // 19: aiserver.v1.LinterError.DiagnosticSeverity
	(GetEvaluationPromptRequest_EvaluationPromptType)(0),            // 20: aiserver.v1.GetEvaluationPromptRequest.EvaluationPromptType
	(GetEvaluationPromptRequest_RerankingStrategy)(0),               // 21: aiserver.v1.GetEvaluationPromptRequest.RerankingStrategy
	(StreamInlineLongCompletionRequest_ContextBlock_ContextType)(0), // 22: aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock.ContextType
	(SlashEditRequest_FastApplyModelType)(0),                        // 23: aiserver.v1.SlashEditRequest.FastApplyModelType
	(DocumentSymbol_SymbolKind)(0),                                  // 24: aiserver.v1.DocumentSymbol.SymbolKind
	(ReviewChatMessage_ReviewChatMessageType)(0),                    // 25: aiserver.v1.ReviewChatMessage.ReviewChatMessageType
	(EditParams_FrontendEditType)(0),                                // 26: aiserver.v1.EditParams.FrontendEditType
	(ReportCmdKFateRequest_Fate)(0),                                 // 27: aiserver.v1.ReportCmdKFateRequest.Fate
	(InterfaceAgentStatus_Status)(0),                                // 28: aiserver.v1.InterfaceAgentStatus.Status
	(CodeSymbolWithAction_CodeSymbolAction)(0),                      // 29: aiserver.v1.CodeSymbolWithAction.CodeSymbolAction
	(DocumentationQueryResponse_Status)(0),                          // 30: aiserver.v1.DocumentationQueryResponse.Status
	(ReportFeedbackRequest_FeedbackType)(0),                         // 31: aiserver.v1.ReportFeedbackRequest.FeedbackType
	(ReportBugRequest_BugType)(0),                                   // 32: aiserver.v1.ReportBugRequest.BugType
	(ModelQueryRequest_QueryType)(0),                                // 33: aiserver.v1.ModelQueryRequest.QueryType
	(StreamCppRequest_ControlToken)(0),                              // 34: aiserver.v1.StreamCppRequest.ControlToken
	(CppConfigResponse_Heuristic)(0),                                // 35: aiserver.v1.CppConfigResponse.Heuristic
	(LogLinterExplicitUserFeedbackRequest_LinterUserFeedback)(0),    // 36: aiserver.v1.LogLinterExplicitUserFeedbackRequest.LinterUserFeedback
	(ReportGenerationFeedbackRequest_FeedbackType)(0),               // 37: aiserver.v1.ReportGenerationFeedbackRequest.FeedbackType
	(BackgroundCmdKEvalRequest_Experiment)(0),                       // 38: aiserver.v1.BackgroundCmdKEvalRequest.Experiment
	(BackgroundCmdKRequest_Type)(0),                                 // 39: aiserver.v1.BackgroundCmdKRequest.Type
	(HeuristicsSelection_HeuristicsSelectionType)(0),                // 40: aiserver.v1.HeuristicsSelection.HeuristicsSelectionType
	(GetRankedContextFromContextBankRequest_RankWithOption)(0),      // 41: aiserver.v1.GetRankedContextFromContextBankRequest.RankWithOption
	(EditHistoryAppendChangesRequest_PrivacyModeStatus)(0),          // 42: aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus
	(CppStoppedTrackingModelEvent_StoppedTrackingModelReason)(0),    // 43: aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason
	(AiRequestEvent_RequestType)(0),                                 // 44: aiserver.v1.AiRequestEvent.RequestType
	(CursorPrediction_CursorPredictionSource)(0),                    // 45: aiserver.v1.CursorPrediction.CursorPredictionSource
	(FastRepoInitHandshakeResponse_Status)(0),                       // 46: aiserver.v1.FastRepoInitHandshakeResponse.Status
	(FastUpdateFileRequest_UpdateType)(0),                           // 47: aiserver.v1.FastUpdateFileRequest.UpdateType
	(FastUpdateFileResponse_Status)(0),                              // 48: aiserver.v1.FastUpdateFileResponse.Status
	(RemoveRepositoryResponse_Status)(0),                            // 49: aiserver.v1.RemoveRepositoryResponse.Status
	(LogoutResponse_Status)(0),                                      // 50: aiserver.v1.LogoutResponse.Status
	(PollLoginResponse_Status)(0),                                   // 51: aiserver.v1.PollLoginResponse.Status
	(UpgradeScopeResponse_Status)(0),                                // 52: aiserver.v1.UpgradeScopeResponse.Status
	(UploadRepositoryResponse_Status)(0),                            // 53: aiserver.v1.UploadRepositoryResponse.Status
	(SubscribeRepositoryResponse_Status)(0),                         // 54: aiserver.v1.SubscribeRepositoryResponse.Status
	(UnsubscribeRepositoryResponse_Status)(0),                       // 55: aiserver.v1.UnsubscribeRepositoryResponse.Status
	(*HealthCheckRequest)(nil),                                      // 56: aiserver.v1.HealthCheckRequest
	(*HealthCheckResponse)(nil),                                     // 57: aiserver.v1.HealthCheckResponse
	(*TimeLeftHealthCheckResponse)(nil),                             // 58: aiserver.v1.TimeLeftHealthCheckResponse
	(*ThrowErrorCheckRequest)(nil),                                  // 59: aiserver.v1.ThrowErrorCheckRequest
	(*ThrowErrorCheckResponse)(nil),                                 // 60: aiserver.v1.ThrowErrorCheckResponse
	(*AvailableModelsRequest)(nil),                                  // 61: aiserver.v1.AvailableModelsRequest
	(*AvailableModelsResponse)(nil),                                 // 62: aiserver.v1.AvailableModelsResponse
	(*GetChatRequest)(nil),                                          // 63: aiserver.v1.GetChatRequest
	(*CurrentFileInfo)(nil),                                         // 64: aiserver.v1.CurrentFileInfo
	(*BM25Chunk)(nil),                                               // 65: aiserver.v1.BM25Chunk
	(*SimplestRange)(nil),                                           // 66: aiserver.v1.SimplestRange
	(*CursorPosition)(nil),                                          // 67: aiserver.v1.CursorPosition
	(*DataframeInfo)(nil),                                           // 68: aiserver.v1.DataframeInfo
	(*CursorRange)(nil),                                             // 69: aiserver.v1.CursorRange
	(*Diagnostic)(nil),                                              // 70: aiserver.v1.Diagnostic
	(*ConversationMessage)(nil),                                     // 71: aiserver.v1.ConversationMessage
	(*CodeBlock)(nil),                                               // 72: aiserver.v1.CodeBlock
	(*DetailedLine)(nil),                                            // 73: aiserver.v1.DetailedLine
	(*Commit)(nil),                                                  // 74: aiserver.v1.Commit
	(*FileDiff)(nil),                                                // 75: aiserver.v1.FileDiff
	(*PullRequest)(nil),                                             // 76: aiserver.v1.PullRequest
	(*GitDiff)(nil),                                                 // 77: aiserver.v1.GitDiff
	(*SimpleFileDiff)(nil),                                          // 78: aiserver.v1.SimpleFileDiff
	(*LineRange)(nil),                                               // 79: aiserver.v1.LineRange
	(*InterpreterResult)(nil),                                       // 80: aiserver.v1.InterpreterResult
	(*ImageProto)(nil),                                              // 81: aiserver.v1.ImageProto
	(*FolderInfo)(nil),                                              // 82: aiserver.v1.FolderInfo
	(*FolderFileInfo)(nil),                                          // 83: aiserver.v1.FolderFileInfo
	(*GetLintsForChangeResponse)(nil),                               // 84: aiserver.v1.GetLintsForChangeResponse
	(*UserResponseToSuggestedCodeBlock)(nil),                        // 85: aiserver.v1.UserResponseToSuggestedCodeBlock
	(*RepositoryInfo)(nil),                                          // 86: aiserver.v1.RepositoryInfo
	(*ExplicitContext)(nil),                                         // 87: aiserver.v1.ExplicitContext
	(*ModelDetails)(nil),                                            // 88: aiserver.v1.ModelDetails
	(*AzureState)(nil),                                              // 89: aiserver.v1.AzureState
	(*LinterErrors)(nil),                                            // 90: aiserver.v1.LinterErrors
	(*LinterError)(nil),                                             // 91: aiserver.v1.LinterError
	(*ChatQuote)(nil),                                               // 92: aiserver.v1.ChatQuote
	(*DebugInfo)(nil),                                               // 93: aiserver.v1.DebugInfo
	(*ChatExternalLink)(nil),                                        // 94: aiserver.v1.ChatExternalLink
	(*CommitNote)(nil),                                              // 95: aiserver.v1.CommitNote
	(*ContextAST)(nil),                                              // 96: aiserver.v1.ContextAST
	(*ContainerTree)(nil),                                           // 97: aiserver.v1.ContainerTree
	(*ContainerTreeNode)(nil),                                       // 98: aiserver.v1.ContainerTreeNode
	(*StreamChatResponse)(nil),                                      // 99: aiserver.v1.StreamChatResponse
	(*DocumentationCitation)(nil),                                   // 100: aiserver.v1.DocumentationCitation
	(*DocumentationChunk)(nil),                                      // 101: aiserver.v1.DocumentationChunk
	(*DocsReference)(nil),                                           // 102: aiserver.v1.DocsReference
	(*WebCitation)(nil),                                             // 103: aiserver.v1.WebCitation
	(*WebReference)(nil),                                            // 104: aiserver.v1.WebReference
	(*StatusUpdates)(nil),                                           // 105: aiserver.v1.StatusUpdates
	(*StatusUpdate)(nil),                                            // 106: aiserver.v1.StatusUpdate
	(*RerankDocumentsRequest)(nil),                                  // 107: aiserver.v1.RerankDocumentsRequest
	(*Document)(nil),                                                // 108: aiserver.v1.Document
	(*RerankDocumentsResponse)(nil),                                 // 109: aiserver.v1.RerankDocumentsResponse
	(*DocumentIdsWithScores)(nil),                                   // 110: aiserver.v1.DocumentIdsWithScores
	(*GetComposerChatRequest)(nil),                                  // 111: aiserver.v1.GetComposerChatRequest
	(*ComposerExternalLink)(nil),                                    // 112: aiserver.v1.ComposerExternalLink
	(*StreamChatContextRequest)(nil),                                // 113: aiserver.v1.StreamChatContextRequest
	(*CodeResult)(nil),                                              // 114: aiserver.v1.CodeResult
	(*FullFileSearchResult)(nil),                                    // 115: aiserver.v1.FullFileSearchResult
	(*FileResult)(nil),                                              // 116: aiserver.v1.FileResult
	(*File)(nil),                                                    // 117: aiserver.v1.File
	(*CodeSearchResult)(nil),                                        // 118: aiserver.v1.CodeSearchResult
	(*StreamChatContextResponse)(nil),                               // 119: aiserver.v1.StreamChatContextResponse
	(*WarmComposerCacheResponse)(nil),                               // 120: aiserver.v1.WarmComposerCacheResponse
	(*GetChatTitleRequest)(nil),                                     // 121: aiserver.v1.GetChatTitleRequest
	(*GetChatTitleResponse)(nil),                                    // 122: aiserver.v1.GetChatTitleResponse
	(*GetCompletionRequest)(nil),                                    // 123: aiserver.v1.GetCompletionRequest
	(*UniqueFileIdentifier)(nil),                                    // 124: aiserver.v1.UniqueFileIdentifier
	(*SurroundingLines)(nil),                                        // 125: aiserver.v1.SurroundingLines
	(*GetCompletionResponse)(nil),                                   // 126: aiserver.v1.GetCompletionResponse
	(*GetSearchRequest)(nil),                                        // 127: aiserver.v1.GetSearchRequest
	(*GetSearchResponse)(nil),                                       // 128: aiserver.v1.GetSearchResponse
	(*FileSearchResult)(nil),                                        // 129: aiserver.v1.FileSearchResult
	(*StreamInlineEditsRequest)(nil),                                // 130: aiserver.v1.StreamInlineEditsRequest
	(*StreamInlineEditsResponse)(nil),                               // 131: aiserver.v1.StreamInlineEditsResponse
	(*SummarizeConversationResponse)(nil),                           // 132: aiserver.v1.SummarizeConversationResponse
	(*IsolatedTreesitterRequest)(nil),                               // 133: aiserver.v1.IsolatedTreesitterRequest
	(*IsolatedTreesitterResponse)(nil),                              // 134: aiserver.v1.IsolatedTreesitterResponse
	(*GetSimplePromptRequest)(nil),                                  // 135: aiserver.v1.GetSimplePromptRequest
	(*GetSimplePromptResponse)(nil),                                 // 136: aiserver.v1.GetSimplePromptResponse
	(*CheckLongFilesFitResponse)(nil),                               // 137: aiserver.v1.CheckLongFilesFitResponse
	(*GetEvaluationPromptRequest)(nil),                              // 138: aiserver.v1.GetEvaluationPromptRequest
	(*GetEvaluationPromptResponse)(nil),                             // 139: aiserver.v1.GetEvaluationPromptResponse
	(*GetUserInfoRequest)(nil),                                      // 140: aiserver.v1.GetUserInfoRequest
	(*GetUserInfoResponse)(nil),                                     // 141: aiserver.v1.GetUserInfoResponse
	(*UsageData)(nil),                                               // 142: aiserver.v1.UsageData
	(*ClearAndRedoEntireBucketRequest)(nil),                         // 143: aiserver.v1.ClearAndRedoEntireBucketRequest
	(*ClearAndRedoEntireBucketResponse)(nil),                        // 144: aiserver.v1.ClearAndRedoEntireBucketResponse
	(*StreamBranchGeminiRequest)(nil),                               // 145: aiserver.v1.StreamBranchGeminiRequest
	(*StreamBranchGeminiResponse)(nil),                              // 146: aiserver.v1.StreamBranchGeminiResponse
	(*StreamBranchFileSelectionsRequest)(nil),                       // 147: aiserver.v1.StreamBranchFileSelectionsRequest
	(*StreamBranchFileSelectionsResponse)(nil),                      // 148: aiserver.v1.StreamBranchFileSelectionsResponse
	(*StreamBackgroundEditRequest)(nil),                             // 149: aiserver.v1.StreamBackgroundEditRequest
	(*StreamGPTFourEditRequest)(nil),                                // 150: aiserver.v1.StreamGPTFourEditRequest
	(*StreamEditRequest)(nil),                                       // 151: aiserver.v1.StreamEditRequest
	(*CmdKDebugInfo)(nil),                                           // 152: aiserver.v1.CmdKDebugInfo
	(*CmdKExternalLink)(nil),                                        // 153: aiserver.v1.CmdKExternalLink
	(*PreloadEditRequest)(nil),                                      // 154: aiserver.v1.PreloadEditRequest
	(*PreloadEditResponse)(nil),                                     // 155: aiserver.v1.PreloadEditResponse
	(*StreamFastEditRequest)(nil),                                   // 156: aiserver.v1.StreamFastEditRequest
	(*StreamFastEditResponse)(nil),                                  // 157: aiserver.v1.StreamFastEditResponse
	(*StreamGenerateRequest)(nil),                                   // 158: aiserver.v1.StreamGenerateRequest
	(*StreamInlineLongCompletionRequest)(nil),                       // 159: aiserver.v1.StreamInlineLongCompletionRequest
	(*SlashEditRequest)(nil),                                        // 160: aiserver.v1.SlashEditRequest
	(*SlashEditResponse)(nil),                                       // 161: aiserver.v1.SlashEditResponse
	(*StreamCmdKResponse)(nil),                                      // 162: aiserver.v1.StreamCmdKResponse
	(*SlashEditFollowUpWithPreviousEditsRequest)(nil),               // 163: aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest
	(*SlashEditPreviousEdit)(nil),                                   // 164: aiserver.v1.SlashEditPreviousEdit
	(*StreamSlashEditFollowUpWithPreviousEditsResponse)(nil),        // 165: aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse
	(*StreamAiPreviewsRequest)(nil),                                 // 166: aiserver.v1.StreamAiPreviewsRequest
	(*StreamAiPreviewsIntent)(nil),                                  // 167: aiserver.v1.StreamAiPreviewsIntent
	(*DocumentSymbolWithText)(nil),                                  // 168: aiserver.v1.DocumentSymbolWithText
	(*DocumentSymbol)(nil),                                          // 169: aiserver.v1.DocumentSymbol
	(*UriComponents)(nil),                                           // 170: aiserver.v1.UriComponents
	(*HoverDetails)(nil),                                            // 171: aiserver.v1.HoverDetails
	(*StreamAiPreviewsResponse)(nil),                                // 172: aiserver.v1.StreamAiPreviewsResponse
	(*ShouldTurnOnCppOnboardingRequest)(nil),                        // 173: aiserver.v1.ShouldTurnOnCppOnboardingRequest
	(*ShouldTurnOnCppOnboardingResponse)(nil),                       // 174: aiserver.v1.ShouldTurnOnCppOnboardingResponse
	(*ReviewRequest)(nil),                                           // 175: aiserver.v1.ReviewRequest
	(*ReviewResponse)(nil),                                          // 176: aiserver.v1.ReviewResponse
	(*ReviewBug)(nil),                                               // 177: aiserver.v1.ReviewBug
	(*ReviewChatRequest)(nil),                                       // 178: aiserver.v1.ReviewChatRequest
	(*ReviewChatMessage)(nil),                                       // 179: aiserver.v1.ReviewChatMessage
	(*ReviewChatResponse)(nil),                                      // 180: aiserver.v1.ReviewChatResponse
	(*CheckQueuePositionRequest)(nil),                               // 181: aiserver.v1.CheckQueuePositionRequest
	(*CheckQueuePositionResponse)(nil),                              // 182: aiserver.v1.CheckQueuePositionResponse
	(*UsageEventDetails)(nil),                                       // 183: aiserver.v1.UsageEventDetails
	(*CheckUsageBasedPriceRequest)(nil),                             // 184: aiserver.v1.CheckUsageBasedPriceRequest
	(*CheckUsageBasedPriceResponse)(nil),                            // 185: aiserver.v1.CheckUsageBasedPriceResponse
	(*DoThisForMeCheckRequest)(nil),                                 // 186: aiserver.v1.DoThisForMeCheckRequest
	(*DoThisForMeCheckResponse)(nil),                                // 187: aiserver.v1.DoThisForMeCheckResponse
	(*DoThisForMeRequest)(nil),                                      // 188: aiserver.v1.DoThisForMeRequest
	(*DoThisForMeResponseWrapped)(nil),                              // 189: aiserver.v1.DoThisForMeResponseWrapped
	(*DoThisForMeResponse)(nil),                                     // 190: aiserver.v1.DoThisForMeResponse
	(*StreamChatToolformerResponse)(nil),                            // 191: aiserver.v1.StreamChatToolformerResponse
	(*ToolCall)(nil),                                                // 192: aiserver.v1.ToolCall
	(*BuiltinToolCall)(nil),                                         // 193: aiserver.v1.BuiltinToolCall
	(*SearchParams)(nil),                                            // 194: aiserver.v1.SearchParams
	(*ReadChunkParams)(nil),                                         // 195: aiserver.v1.ReadChunkParams
	(*GotodefParams)(nil),                                           // 196: aiserver.v1.GotodefParams
	(*EditParams)(nil),                                              // 197: aiserver.v1.EditParams
	(*UndoEditParams)(nil),                                          // 198: aiserver.v1.UndoEditParams
	(*EndParams)(nil),                                               // 199: aiserver.v1.EndParams
	(*NewFileParams)(nil),                                           // 200: aiserver.v1.NewFileParams
	(*AddTestParams)(nil),                                           // 201: aiserver.v1.AddTestParams
	(*RunTestParams)(nil),                                           // 202: aiserver.v1.RunTestParams
	(*DeleteTestParams)(nil),                                        // 203: aiserver.v1.DeleteTestParams
	(*SaveFileParams)(nil),                                          // 204: aiserver.v1.SaveFileParams
	(*GetTestsParams)(nil),                                          // 205: aiserver.v1.GetTestsParams
	(*GetSymbolsParams)(nil),                                        // 206: aiserver.v1.GetSymbolsParams
	(*SemanticSearchParams)(nil),                                    // 207: aiserver.v1.SemanticSearchParams
	(*GetProjectStructureParams)(nil),                               // 208: aiserver.v1.GetProjectStructureParams
	(*CreateRmFilesParams)(nil),                                     // 209: aiserver.v1.CreateRmFilesParams
	(*RunTerminalCommandsParams)(nil),                               // 210: aiserver.v1.RunTerminalCommandsParams
	(*NewEditParams)(nil),                                           // 211: aiserver.v1.NewEditParams
	(*ReadWithLinterParams)(nil),                                    // 212: aiserver.v1.ReadWithLinterParams
	(*CustomToolCall)(nil),                                          // 213: aiserver.v1.CustomToolCall
	(*StreamChatToolformerContinueRequest)(nil),                     // 214: aiserver.v1.StreamChatToolformerContinueRequest
	(*ToolResult)(nil),                                              // 215: aiserver.v1.ToolResult
	(*BuiltinToolResult)(nil),                                       // 216: aiserver.v1.BuiltinToolResult
	(*SearchResult)(nil),                                            // 217: aiserver.v1.SearchResult
	(*SearchToolFileSearchResult)(nil),                              // 218: aiserver.v1.SearchToolFileSearchResult
	(*ReadChunkResult)(nil),                                         // 219: aiserver.v1.ReadChunkResult
	(*GotodefResult)(nil),                                           // 220: aiserver.v1.GotodefResult
	(*GotodefToolFileSearchResult)(nil),                             // 221: aiserver.v1.GotodefToolFileSearchResult
	(*EditResult)(nil),                                              // 222: aiserver.v1.EditResult
	(*UndoEditResult)(nil),                                          // 223: aiserver.v1.UndoEditResult
	(*EndResult)(nil),                                               // 224: aiserver.v1.EndResult
	(*NewFileResult)(nil),                                           // 225: aiserver.v1.NewFileResult
	(*AddTestResult)(nil),                                           // 226: aiserver.v1.AddTestResult
	(*RunTestResult)(nil),                                           // 227: aiserver.v1.RunTestResult
	(*DeleteTestResult)(nil),                                        // 228: aiserver.v1.DeleteTestResult
	(*SaveFileResult)(nil),                                          // 229: aiserver.v1.SaveFileResult
	(*GetTestsResult)(nil),                                          // 230: aiserver.v1.GetTestsResult
	(*GetSymbolsResult)(nil),                                        // 231: aiserver.v1.GetSymbolsResult
	(*SemanticSearchResult)(nil),                                    // 232: aiserver.v1.SemanticSearchResult
	(*SimpleRange)(nil),                                             // 233: aiserver.v1.SimpleRange
	(*GetProjectStructureResult)(nil),                               // 234: aiserver.v1.GetProjectStructureResult
	(*CreateRmFilesResult)(nil),                                     // 235: aiserver.v1.CreateRmFilesResult
	(*RunTerminalCommandsResult)(nil),                               // 236: aiserver.v1.RunTerminalCommandsResult
	(*NewEditResult)(nil),                                           // 237: aiserver.v1.NewEditResult
	(*ReadWithLinterResult)(nil),                                    // 238: aiserver.v1.ReadWithLinterResult
	(*CustomToolResult)(nil),                                        // 239: aiserver.v1.CustomToolResult
	(*ErrorToolResult)(nil),                                         // 240: aiserver.v1.ErrorToolResult
	(*PushAiThoughtRequest)(nil),                                    // 241: aiserver.v1.PushAiThoughtRequest
	(*PushAiThoughtResponse)(nil),                                   // 242: aiserver.v1.PushAiThoughtResponse
	(*CheckDoableAsTaskRequest)(nil),                                // 243: aiserver.v1.CheckDoableAsTaskRequest
	(*CheckDoableAsTaskResponse)(nil),                               // 244: aiserver.v1.CheckDoableAsTaskResponse
	(*ReportGroundTruthCandidateRequest)(nil),                       // 245: aiserver.v1.ReportGroundTruthCandidateRequest
	(*ReportGroundTruthCandidateResponse)(nil),                      // 246: aiserver.v1.ReportGroundTruthCandidateResponse
	(*ReportCmdKFateRequest)(nil),                                   // 247: aiserver.v1.ReportCmdKFateRequest
	(*ReportCmdKFateResponse)(nil),                                  // 248: aiserver.v1.ReportCmdKFateResponse
	(*ShowWelcomeScreenRequest)(nil),                                // 249: aiserver.v1.ShowWelcomeScreenRequest
	(*ShowWelcomeScreenResponse)(nil),                               // 250: aiserver.v1.ShowWelcomeScreenResponse
	(*InterfaceAgentInitRequest)(nil),                               // 251: aiserver.v1.InterfaceAgentInitRequest
	(*InterfaceAgentClientState)(nil),                               // 252: aiserver.v1.InterfaceAgentClientState
	(*InterfaceAgentInitResponse)(nil),                              // 253: aiserver.v1.InterfaceAgentInitResponse
	(*StreamInterfaceAgentStatusRequest)(nil),                       // 254: aiserver.v1.StreamInterfaceAgentStatusRequest
	(*StreamInterfaceAgentStatusResponse)(nil),                      // 255: aiserver.v1.StreamInterfaceAgentStatusResponse
	(*InterfaceAgentStatus)(nil),                                    // 256: aiserver.v1.InterfaceAgentStatus
	(*TaskGetInterfaceAgentStatusRequest)(nil),                      // 257: aiserver.v1.TaskGetInterfaceAgentStatusRequest
	(*TaskGetInterfaceAgentStatusResponseWrapped)(nil),              // 258: aiserver.v1.TaskGetInterfaceAgentStatusResponseWrapped
	(*TaskGetInterfaceAgentStatusResponse)(nil),                     // 259: aiserver.v1.TaskGetInterfaceAgentStatusResponse
	(*TaskInitRequest)(nil),                                         // 260: aiserver.v1.TaskInitRequest
	(*TaskInstruction)(nil),                                         // 261: aiserver.v1.TaskInstruction
	(*TaskInitResponse)(nil),                                        // 262: aiserver.v1.TaskInitResponse
	(*TaskPauseRequest)(nil),                                        // 263: aiserver.v1.TaskPauseRequest
	(*TaskPauseResponse)(nil),                                       // 264: aiserver.v1.TaskPauseResponse
	(*TaskInfoRequest)(nil),                                         // 265: aiserver.v1.TaskInfoRequest
	(*TaskInfoResponse)(nil),                                        // 266: aiserver.v1.TaskInfoResponse
	(*TaskStreamLogRequest)(nil),                                    // 267: aiserver.v1.TaskStreamLogRequest
	(*TaskStreamLogResponse)(nil),                                   // 268: aiserver.v1.TaskStreamLogResponse
	(*TaskLogItem)(nil),                                             // 269: aiserver.v1.TaskLogItem
	(*TaskLogOutput)(nil),                                           // 270: aiserver.v1.TaskLogOutput
	(*TaskLogToolAction)(nil),                                       // 271: aiserver.v1.TaskLogToolAction
	(*TaskLogThought)(nil),                                          // 272: aiserver.v1.TaskLogThought
	(*TaskUserMessage)(nil),                                         // 273: aiserver.v1.TaskUserMessage
	(*TaskLogToolResult)(nil),                                       // 274: aiserver.v1.TaskLogToolResult
	(*TaskSendMessageRequest)(nil),                                  // 275: aiserver.v1.TaskSendMessageRequest
	(*TaskSendMessageResponse)(nil),                                 // 276: aiserver.v1.TaskSendMessageResponse
	(*TaskProvideResultRequest)(nil),                                // 277: aiserver.v1.TaskProvideResultRequest
	(*TaskProvideResultResponse)(nil),                               // 278: aiserver.v1.TaskProvideResultResponse
	(*CreateExperimentalIndexRequest)(nil),                          // 279: aiserver.v1.CreateExperimentalIndexRequest
	(*CreateExperimentalIndexResponse)(nil),                         // 280: aiserver.v1.CreateExperimentalIndexResponse
	(*ListExperimentalIndexFilesRequest)(nil),                       // 281: aiserver.v1.ListExperimentalIndexFilesRequest
	(*ListExperimentalIndexFilesResponse)(nil),                      // 282: aiserver.v1.ListExperimentalIndexFilesResponse
	(*IndexFileData)(nil),                                           // 283: aiserver.v1.IndexFileData
	(*ListenExperimentalIndexRequest)(nil),                          // 284: aiserver.v1.ListenExperimentalIndexRequest
	(*ListenExperimentalIndexResponse)(nil),                         // 285: aiserver.v1.ListenExperimentalIndexResponse
	(*RegisterFileToIndexResponse)(nil),                             // 286: aiserver.v1.RegisterFileToIndexResponse
	(*URIResolutionAttempt)(nil),                                    // 287: aiserver.v1.URIResolutionAttempt
	(*CodeSymbolWithAction)(nil),                                    // 288: aiserver.v1.CodeSymbolWithAction
	(*RegisterFileToIndexRequest)(nil),                              // 289: aiserver.v1.RegisterFileToIndexRequest
	(*SerializedContextNode)(nil),                                   // 290: aiserver.v1.SerializedContextNode
	(*FileCodeSnippets)(nil),                                        // 291: aiserver.v1.FileCodeSnippets
	(*CodeSnippet)(nil),                                             // 292: aiserver.v1.CodeSnippet
	(*ChooseCodeReferencesResponse)(nil),                            // 293: aiserver.v1.ChooseCodeReferencesResponse
	(*ChooseCodeReferencesRequest)(nil),                             // 294: aiserver.v1.ChooseCodeReferencesRequest
	(*SummarizeWithReferencesResponse)(nil),                         // 295: aiserver.v1.SummarizeWithReferencesResponse
	(*SummarizeWithReferencesRequest)(nil),                          // 296: aiserver.v1.SummarizeWithReferencesRequest
	(*RequestReceivedResponse)(nil),                                 // 297: aiserver.v1.RequestReceivedResponse
	(*SetupIndexDependenciesRequest)(nil),                           // 298: aiserver.v1.SetupIndexDependenciesRequest
	(*URIResolutionResult)(nil),                                     // 299: aiserver.v1.URIResolutionResult
	(*SetupIndexDependenciesResponse)(nil),                          // 300: aiserver.v1.SetupIndexDependenciesResponse
	(*ComputeIndexTopoSortRequest)(nil),                             // 301: aiserver.v1.ComputeIndexTopoSortRequest
	(*ComputeIndexTopoSortResponse)(nil),                            // 302: aiserver.v1.ComputeIndexTopoSortResponse
	(*StreamChatDeepContextRequest)(nil),                            // 303: aiserver.v1.StreamChatDeepContextRequest
	(*SearchRepositoryDeepContextResponse)(nil),                     // 304: aiserver.v1.SearchRepositoryDeepContextResponse
	(*NodeResult)(nil),                                              // 305: aiserver.v1.NodeResult
	(*ReflectionResult)(nil),                                        // 306: aiserver.v1.ReflectionResult
	(*ReflectionData)(nil),                                          // 307: aiserver.v1.ReflectionData
	(*StreamChatDeepContextResponse)(nil),                           // 308: aiserver.v1.StreamChatDeepContextResponse
	(*RegisterCodeReferencesRequest)(nil),                           // 309: aiserver.v1.RegisterCodeReferencesRequest
	(*SymbolActionResults)(nil),                                     // 310: aiserver.v1.SymbolActionResults
	(*SymbolActionResultReference)(nil),                             // 311: aiserver.v1.SymbolActionResultReference
	(*RegisterCodeReferencesResponse)(nil),                          // 312: aiserver.v1.RegisterCodeReferencesResponse
	(*ExtractPathsRequest)(nil),                                     // 313: aiserver.v1.ExtractPathsRequest
	(*ExtractPathsResponse)(nil),                                    // 314: aiserver.v1.ExtractPathsResponse
	(*DocumentationQueryRequest)(nil),                               // 315: aiserver.v1.DocumentationQueryRequest
	(*DocumentationQueryResponse)(nil),                              // 316: aiserver.v1.DocumentationQueryResponse
	(*AvailableDocsRequest)(nil),                                    // 317: aiserver.v1.AvailableDocsRequest
	(*AvailableDocsResponse)(nil),                                   // 318: aiserver.v1.AvailableDocsResponse
	(*DocumentationInfo)(nil),                                       // 319: aiserver.v1.DocumentationInfo
	(*DocumentationMetadata)(nil),                                   // 320: aiserver.v1.DocumentationMetadata
	(*ReportFeedbackRequest)(nil),                                   // 321: aiserver.v1.ReportFeedbackRequest
	(*ReportFeedbackResponse)(nil),                                  // 322: aiserver.v1.ReportFeedbackResponse
	(*ReportBugRequest)(nil),                                        // 323: aiserver.v1.ReportBugRequest
	(*BugContext)(nil),                                              // 324: aiserver.v1.BugContext
	(*LogFile)(nil),                                                 // 325: aiserver.v1.LogFile
	(*ReportBugResponse)(nil),                                       // 326: aiserver.v1.ReportBugResponse
	(*GenerateTldrRequest)(nil),                                     // 327: aiserver.v1.GenerateTldrRequest
	(*GenerateTldrResponse)(nil),                                    // 328: aiserver.v1.GenerateTldrResponse
	(*TaskStreamChatContextRequest)(nil),                            // 329: aiserver.v1.TaskStreamChatContextRequest
	(*AdvancedCodebaseContextOptions)(nil),                          // 330: aiserver.v1.AdvancedCodebaseContextOptions
	(*TaskStreamChatContextResponseWrapped)(nil),                    // 331: aiserver.v1.TaskStreamChatContextResponseWrapped
	(*TaskStreamChatContextResponse)(nil),                           // 332: aiserver.v1.TaskStreamChatContextResponse
	(*RerankerRequest)(nil),                                         // 333: aiserver.v1.RerankerRequest
	(*ApiDetails)(nil),                                              // 334: aiserver.v1.ApiDetails
	(*RerankerResponse)(nil),                                        // 335: aiserver.v1.RerankerResponse
	(*ModelQueryRequest)(nil),                                       // 336: aiserver.v1.ModelQueryRequest
	(*ModelQueryResponse)(nil),                                      // 337: aiserver.v1.ModelQueryResponse
	(*ModelQueryResponseV2)(nil),                                    // 338: aiserver.v1.ModelQueryResponseV2
	(*IntentPredictionRequest)(nil),                                 // 339: aiserver.v1.IntentPredictionRequest
	(*ContextOptions)(nil),                                          // 340: aiserver.v1.ContextOptions
	(*IntentPredictionResponse)(nil),                                // 341: aiserver.v1.IntentPredictionResponse
	(*StreamCursorTutorRequest)(nil),                                // 342: aiserver.v1.StreamCursorTutorRequest
	(*StreamCursorTutorResponse)(nil),                               // 343: aiserver.v1.StreamCursorTutorResponse
	(*CheckFeatureStatusRequest)(nil),                               // 344: aiserver.v1.CheckFeatureStatusRequest
	(*CheckFeatureStatusResponse)(nil),                              // 345: aiserver.v1.CheckFeatureStatusResponse
	(*GetEffectiveTokenLimitRequest)(nil),                           // 346: aiserver.v1.GetEffectiveTokenLimitRequest
	(*GetEffectiveTokenLimitResponse)(nil),                          // 347: aiserver.v1.GetEffectiveTokenLimitResponse
	(*ContextScoresRequest)(nil),                                    // 348: aiserver.v1.ContextScoresRequest
	(*ContextScoresResponse)(nil),                                   // 349: aiserver.v1.ContextScoresResponse
	(*StreamCppRequest)(nil),                                        // 350: aiserver.v1.StreamCppRequest
	(*CppContextItem)(nil),                                          // 351: aiserver.v1.CppContextItem
	(*CppFileDiffHistory)(nil),                                      // 352: aiserver.v1.CppFileDiffHistory
	(*BlockDiffPatch)(nil),                                          // 353: aiserver.v1.BlockDiffPatch
	(*IRange)(nil),                                                  // 354: aiserver.v1.IRange
	(*CppParameterHint)(nil),                                        // 355: aiserver.v1.CppParameterHint
	(*LspSubgraphFullContext)(nil),                                  // 356: aiserver.v1.LspSubgraphFullContext
	(*LspSubgraphPosition)(nil),                                     // 357: aiserver.v1.LspSubgraphPosition
	(*LspSubgraphContextItem)(nil),                                  // 358: aiserver.v1.LspSubgraphContextItem
	(*LspSubgraphRange)(nil),                                        // 359: aiserver.v1.LspSubgraphRange
	(*CppIntentInfo)(nil),                                           // 360: aiserver.v1.CppIntentInfo
	(*AdditionalFile)(nil),                                          // 361: aiserver.v1.AdditionalFile
	(*FilesyncUpdateWithModelVersion)(nil),                          // 362: aiserver.v1.FilesyncUpdateWithModelVersion
	(*SingleUpdateRequest)(nil),                                     // 363: aiserver.v1.SingleUpdateRequest
	(*StreamCppResponse)(nil),                                       // 364: aiserver.v1.StreamCppResponse
	(*CppConfigRequest)(nil),                                        // 365: aiserver.v1.CppConfigRequest
	(*CppConfigResponse)(nil),                                       // 366: aiserver.v1.CppConfigResponse
	(*CppEditHistoryStatusRequest)(nil),                             // 367: aiserver.v1.CppEditHistoryStatusRequest
	(*CppEditHistoryStatusResponse)(nil),                            // 368: aiserver.v1.CppEditHistoryStatusResponse
	(*CppAppendRequest)(nil),                                        // 369: aiserver.v1.CppAppendRequest
	(*CppAppendResponse)(nil),                                       // 370: aiserver.v1.CppAppendResponse
	(*CheckNumberConfigRequest)(nil),                                // 371: aiserver.v1.CheckNumberConfigRequest
	(*CheckNumberConfigResponse)(nil),                               // 372: aiserver.v1.CheckNumberConfigResponse
	(*StreamTerminalAutocompleteRequest)(nil),                       // 373: aiserver.v1.StreamTerminalAutocompleteRequest
	(*StreamTerminalAutocompleteResponse)(nil),                      // 374: aiserver.v1.StreamTerminalAutocompleteResponse
	(*StreamPseudocodeGeneratorRequest)(nil),                        // 375: aiserver.v1.StreamPseudocodeGeneratorRequest
	(*PseudocodeTarget)(nil),                                        // 376: aiserver.v1.PseudocodeTarget
	(*StreamPseudocodeGeneratorResponse)(nil),                       // 377: aiserver.v1.StreamPseudocodeGeneratorResponse
	(*StreamPseudocodeMapperRequest)(nil),                           // 378: aiserver.v1.StreamPseudocodeMapperRequest
	(*StreamPseudocodeMapperResponse)(nil),                          // 379: aiserver.v1.StreamPseudocodeMapperResponse
	(*StreamAiLintBugRequest)(nil),                                  // 380: aiserver.v1.StreamAiLintBugRequest
	(*AiLintBug)(nil),                                               // 381: aiserver.v1.AiLintBug
	(*LintDiscriminatorResult)(nil),                                 // 382: aiserver.v1.LintDiscriminatorResult
	(*LogprobsLintPayload)(nil),                                     // 383: aiserver.v1.LogprobsLintPayload
	(*AiLintRule)(nil),                                              // 384: aiserver.v1.AiLintRule
	(*StreamAiLintBugResponse)(nil),                                 // 385: aiserver.v1.StreamAiLintBugResponse
	(*StreamAiCursorHelpRequest)(nil),                               // 386: aiserver.v1.StreamAiCursorHelpRequest
	(*CursorHelpConversationMessage)(nil),                           // 387: aiserver.v1.CursorHelpConversationMessage
	(*StreamAiCursorHelpResponse)(nil),                              // 388: aiserver.v1.StreamAiCursorHelpResponse
	(*LogUserLintReplyRequest)(nil),                                 // 389: aiserver.v1.LogUserLintReplyRequest
	(*LogUserLintReplyResponse)(nil),                                // 390: aiserver.v1.LogUserLintReplyResponse
	(*LogLinterExplicitUserFeedbackRequest)(nil),                    // 391: aiserver.v1.LogLinterExplicitUserFeedbackRequest
	(*LogLinterExplicitUserFeedbackResponse)(nil),                   // 392: aiserver.v1.LogLinterExplicitUserFeedbackResponse
	(*FixMarkersRequest)(nil),                                       // 393: aiserver.v1.FixMarkersRequest
	(*FixMarkersResponse)(nil),                                      // 394: aiserver.v1.FixMarkersResponse
	(*ReportInlineActionRequest)(nil),                               // 395: aiserver.v1.ReportInlineActionRequest
	(*ReportInlineActionResponse)(nil),                              // 396: aiserver.v1.ReportInlineActionResponse
	(*StreamPriomptPromptRequest)(nil),                              // 397: aiserver.v1.StreamPriomptPromptRequest
	(*StreamPriomptPromptResponse)(nil),                             // 398: aiserver.v1.StreamPriomptPromptResponse
	(*StreamLintRequest)(nil),                                       // 399: aiserver.v1.StreamLintRequest
	(*StreamNewRuleRequest)(nil),                                    // 400: aiserver.v1.StreamNewRuleRequest
	(*AiProjectRequest)(nil),                                        // 401: aiserver.v1.AiProjectRequest
	(*AiProjectResponse)(nil),                                       // 402: aiserver.v1.AiProjectResponse
	(*ToCamelCaseRequest)(nil),                                      // 403: aiserver.v1.ToCamelCaseRequest
	(*ToCamelCaseResponse)(nil),                                     // 404: aiserver.v1.ToCamelCaseResponse
	(*ReportGenerationFeedbackRequest)(nil),                         // 405: aiserver.v1.ReportGenerationFeedbackRequest
	(*ReportGenerationFeedbackResponse)(nil),                        // 406: aiserver.v1.ReportGenerationFeedbackResponse
	(*GetThoughtAnnotationRequest)(nil),                             // 407: aiserver.v1.GetThoughtAnnotationRequest
	(*GetThoughtAnnotationResponse)(nil),                            // 408: aiserver.v1.GetThoughtAnnotationResponse
	(*AiThoughtAnnotation)(nil),                                     // 409: aiserver.v1.AiThoughtAnnotation
	(*StreamWebCmdKV1Request)(nil),                                  // 410: aiserver.v1.StreamWebCmdKV1Request
	(*StreamWebCmdKV1Response)(nil),                                 // 411: aiserver.v1.StreamWebCmdKV1Response
	(*StreamNextCursorPredictionRequest)(nil),                       // 412: aiserver.v1.StreamNextCursorPredictionRequest
	(*StreamNextCursorPredictionResponse)(nil),                      // 413: aiserver.v1.StreamNextCursorPredictionResponse
	(*IsCursorPredictionEnabledRequest)(nil),                        // 414: aiserver.v1.IsCursorPredictionEnabledRequest
	(*IsCursorPredictionEnabledResponse)(nil),                       // 415: aiserver.v1.IsCursorPredictionEnabledResponse
	(*GetCppEditClassificationRequest)(nil),                         // 416: aiserver.v1.GetCppEditClassificationRequest
	(*SuggestedEdit)(nil),                                           // 417: aiserver.v1.SuggestedEdit
	(*GetCppEditClassificationResponse)(nil),                        // 418: aiserver.v1.GetCppEditClassificationResponse
	(*GetTerminalCompletionRequest)(nil),                            // 419: aiserver.v1.GetTerminalCompletionRequest
	(*CurrentFolderFileOrFolder)(nil),                               // 420: aiserver.v1.CurrentFolderFileOrFolder
	(*GetTerminalCompletionResponse)(nil),                           // 421: aiserver.v1.GetTerminalCompletionResponse
	(*TakeNotesOnCommitDiffRequest)(nil),                            // 422: aiserver.v1.TakeNotesOnCommitDiffRequest
	(*CommitDiffString)(nil),                                        // 423: aiserver.v1.CommitDiffString
	(*TakeNotesOnCommitDiffResponse)(nil),                           // 424: aiserver.v1.TakeNotesOnCommitDiffResponse
	(*CommitNoteWithEmbeddings)(nil),                                // 425: aiserver.v1.CommitNoteWithEmbeddings
	(*BulkEmbedRequest)(nil),                                        // 426: aiserver.v1.BulkEmbedRequest
	(*BulkEmbedResponse)(nil),                                       // 427: aiserver.v1.BulkEmbedResponse
	(*EmbeddingResponse)(nil),                                       // 428: aiserver.v1.EmbeddingResponse
	(*ContinueChatRequestWithCommitsRequest)(nil),                   // 429: aiserver.v1.ContinueChatRequestWithCommitsRequest
	(*SimpleCommitWithDiff)(nil),                                    // 430: aiserver.v1.SimpleCommitWithDiff
	(*EmptyResponse)(nil),                                           // 431: aiserver.v1.EmptyResponse
	(*BackgroundCmdKEvalRequest)(nil),                               // 432: aiserver.v1.BackgroundCmdKEvalRequest
	(*BackgroundCmdKEvalResponse)(nil),                              // 433: aiserver.v1.BackgroundCmdKEvalResponse
	(*BackgroundCmdKRequest)(nil),                                   // 434: aiserver.v1.BackgroundCmdKRequest
	(*BackgroundCmdKResponse)(nil),                                  // 435: aiserver.v1.BackgroundCmdKResponse
	(*StreamCursorMotionRequest)(nil),                               // 436: aiserver.v1.StreamCursorMotionRequest
	(*StreamCursorMotionResponse)(nil),                              // 437: aiserver.v1.StreamCursorMotionResponse
	(*CalculateAutoSelectionRequest)(nil),                           // 438: aiserver.v1.CalculateAutoSelectionRequest
	(*HeuristicsSelection)(nil),                                     // 439: aiserver.v1.HeuristicsSelection
	(*CalculateAutoSelectionResponse)(nil),                          // 440: aiserver.v1.CalculateAutoSelectionResponse
	(*AutoSelectionResult)(nil),                                     // 441: aiserver.v1.AutoSelectionResult
	(*AutoSelectionInstructions)(nil),                               // 442: aiserver.v1.AutoSelectionInstructions
	(*GetAtSymbolSuggestionsRequest)(nil),                           // 443: aiserver.v1.GetAtSymbolSuggestionsRequest
	(*AtSymbolDependencyInformation)(nil),                           // 444: aiserver.v1.AtSymbolDependencyInformation
	(*AtSymbolOption)(nil),                                          // 445: aiserver.v1.AtSymbolOption
	(*GetAtSymbolSuggestionsResponse)(nil),                          // 446: aiserver.v1.GetAtSymbolSuggestionsResponse
	(*GetCodebaseQuestionsResponse)(nil),                            // 447: aiserver.v1.GetCodebaseQuestionsResponse
	(*GetRankedContextFromContextBankRequest)(nil),                  // 448: aiserver.v1.GetRankedContextFromContextBankRequest
	(*ContextToRank)(nil),                                           // 449: aiserver.v1.ContextToRank
	(*GetRankedContextFromContextBankResponse)(nil),                 // 450: aiserver.v1.GetRankedContextFromContextBankResponse
	(*EditHistoryAppendChangesRequest)(nil),                         // 451: aiserver.v1.EditHistoryAppendChangesRequest
	(*ModelChange)(nil),                                             // 452: aiserver.v1.ModelChange
	(*CursorSelection)(nil),                                         // 453: aiserver.v1.CursorSelection
	(*CppSessionEvent)(nil),                                         // 454: aiserver.v1.CppSessionEvent
	(*CppAcceptEventNew)(nil),                                       // 455: aiserver.v1.CppAcceptEventNew
	(*CurrentlyShownCppSuggestion)(nil),                             // 456: aiserver.v1.CurrentlyShownCppSuggestion
	(*PointInTimeModel)(nil),                                        // 457: aiserver.v1.PointInTimeModel
	(*CppRejectEventNew)(nil),                                       // 458: aiserver.v1.CppRejectEventNew
	(*CppManualTriggerEventNew)(nil),                                // 459: aiserver.v1.CppManualTriggerEventNew
	(*CppStoppedTrackingModelEvent)(nil),                            // 460: aiserver.v1.CppStoppedTrackingModelEvent
	(*CppSuggestEvent)(nil),                                         // 461: aiserver.v1.CppSuggestEvent
	(*RecoverableCppData)(nil),                                      // 462: aiserver.v1.RecoverableCppData
	(*OneIndexedPosition)(nil),                                      // 463: aiserver.v1.OneIndexedPosition
	(*CppLinterErrorEvent)(nil),                                     // 464: aiserver.v1.CppLinterErrorEvent
	(*CppDebouncedCursorMovementEvent)(nil),                         // 465: aiserver.v1.CppDebouncedCursorMovementEvent
	(*CppEditorChangedEvent)(nil),                                   // 466: aiserver.v1.CppEditorChangedEvent
	(*CppCopyEvent)(nil),                                            // 467: aiserver.v1.CppCopyEvent
	(*CppChangeQuickActionEvent)(nil),                               // 468: aiserver.v1.CppChangeQuickActionEvent
	(*CppQuickAction)(nil),                                          // 469: aiserver.v1.CppQuickAction
	(*CppQuickActionCommand)(nil),                                   // 470: aiserver.v1.CppQuickActionCommand
	(*CppQuickActionFireEvent)(nil),                                 // 471: aiserver.v1.CppQuickActionFireEvent
	(*ModelOpenedEvent)(nil),                                        // 472: aiserver.v1.ModelOpenedEvent
	(*CmdKEvent)(nil),                                               // 473: aiserver.v1.CmdKEvent
	(*ChatEvent)(nil),                                               // 474: aiserver.v1.ChatEvent
	(*AiRequestEvent)(nil),                                          // 475: aiserver.v1.AiRequestEvent
	(*ScrollEvent)(nil),                                             // 476: aiserver.v1.ScrollEvent
	(*EditorCloseEvent)(nil),                                        // 477: aiserver.v1.EditorCloseEvent
	(*TabCloseEvent)(nil),                                           // 478: aiserver.v1.TabCloseEvent
	(*MaybeDefinedPointInTimeModel)(nil),                            // 479: aiserver.v1.MaybeDefinedPointInTimeModel
	(*CppPartialAcceptEvent)(nil),                                   // 480: aiserver.v1.CppPartialAcceptEvent
	(*Edit)(nil),                                                    // 481: aiserver.v1.Edit
	(*AcceptCursorPredictionEvent)(nil),                             // 482: aiserver.v1.AcceptCursorPredictionEvent
	(*CursorPrediction)(nil),                                        // 483: aiserver.v1.CursorPrediction
	(*RejectCursorPredictionEvent)(nil),                             // 484: aiserver.v1.RejectCursorPredictionEvent
	(*SuggestCursorPredictionEvent)(nil),                            // 485: aiserver.v1.SuggestCursorPredictionEvent
	(*CppTriggerEvent)(nil),                                         // 486: aiserver.v1.CppTriggerEvent
	(*FinishedCppGenerationEvent)(nil),                              // 487: aiserver.v1.FinishedCppGenerationEvent
	(*BackgroundFilesEvent)(nil),                                    // 488: aiserver.v1.BackgroundFilesEvent
	(*CppTerminalEvent)(nil),                                        // 489: aiserver.v1.CppTerminalEvent
	(*CppGitContextEvent)(nil),                                      // 490: aiserver.v1.CppGitContextEvent
	(*CppHistoryAppendEvent)(nil),                                   // 491: aiserver.v1.CppHistoryAppendEvent
	(*CppAcceptEvent)(nil),                                          // 492: aiserver.v1.CppAcceptEvent
	(*CppSuggestion)(nil),                                           // 493: aiserver.v1.CppSuggestion
	(*SelectionWithOrientation)(nil),                                // 494: aiserver.v1.SelectionWithOrientation
	(*CppRejectEvent)(nil),                                          // 495: aiserver.v1.CppRejectEvent
	(*CppManualTriggerEvent)(nil),                                   // 496: aiserver.v1.CppManualTriggerEvent
	(*EditHistoryAppendChangesResponse)(nil),                        // 497: aiserver.v1.EditHistoryAppendChangesResponse
	(*DevOnlyGetPastRequestIdsRequest)(nil),                         // 498: aiserver.v1.DevOnlyGetPastRequestIdsRequest
	(*DevOnlyGetPastRequestIdsResponse)(nil),                        // 499: aiserver.v1.DevOnlyGetPastRequestIdsResponse
	(*DevOnlyPastRequest)(nil),                                      // 500: aiserver.v1.DevOnlyPastRequest
	(*GetFilesForComposerRequest)(nil),                              // 501: aiserver.v1.GetFilesForComposerRequest
	(*GetFilesForComposerResponse)(nil),                             // 502: aiserver.v1.GetFilesForComposerResponse
	(*TryParseTypeScriptTreeSitterRequest)(nil),                     // 503: aiserver.v1.TryParseTypeScriptTreeSitterRequest
	(*TryParseTypeScriptTreeSitterResponse)(nil),                    // 504: aiserver.v1.TryParseTypeScriptTreeSitterResponse
	(*NameTabRequest)(nil),                                          // 505: aiserver.v1.NameTabRequest
	(*NameTabResponse)(nil),                                         // 506: aiserver.v1.NameTabResponse
	(*TestModelStatusRequest)(nil),                                  // 507: aiserver.v1.TestModelStatusRequest
	(*TestModelStatusResponse)(nil),                                 // 508: aiserver.v1.TestModelStatusResponse
	(*FastRepoInitHandshakeRequest)(nil),                            // 509: aiserver.v1.FastRepoInitHandshakeRequest
	(*FastRepoInitHandshakeResponse)(nil),                           // 510: aiserver.v1.FastRepoInitHandshakeResponse
	(*SyncMerkleSubtreeRequest)(nil),                                // 511: aiserver.v1.SyncMerkleSubtreeRequest
	(*PartialPathItem)(nil),                                         // 512: aiserver.v1.PartialPathItem
	(*SyncMerkleSubtreeResponse)(nil),                               // 513: aiserver.v1.SyncMerkleSubtreeResponse
	(*FastUpdateFileRequest)(nil),                                   // 514: aiserver.v1.FastUpdateFileRequest
	(*FastUpdateFileResponse)(nil),                                  // 515: aiserver.v1.FastUpdateFileResponse
	(*SearchRepositoryRequest)(nil),                                 // 516: aiserver.v1.SearchRepositoryRequest
	(*SearchRepositoryResponse)(nil),                                // 517: aiserver.v1.SearchRepositoryResponse
	(*RemoveRepositoryRequest)(nil),                                 // 518: aiserver.v1.RemoveRepositoryRequest
	(*RemoveRepositoryResponse)(nil),                                // 519: aiserver.v1.RemoveRepositoryResponse
	(*EnsureIndexCreatedRequest)(nil),                               // 520: aiserver.v1.EnsureIndexCreatedRequest
	(*EnsureIndexCreatedResponse)(nil),                              // 521: aiserver.v1.EnsureIndexCreatedResponse
	(*GetHighLevelFolderDescriptionRequest)(nil),                    // 522: aiserver.v1.GetHighLevelFolderDescriptionRequest
	(*GetHighLevelFolderDescriptionResponse)(nil),                   // 523: aiserver.v1.GetHighLevelFolderDescriptionResponse
	(*GetEmbeddingsRequest)(nil),                                    // 524: aiserver.v1.GetEmbeddingsRequest
	(*GetEmbeddingsResponse)(nil),                                   // 525: aiserver.v1.GetEmbeddingsResponse
	(*SearchRepositoryDeepContextRequest)(nil),                      // 526: aiserver.v1.SearchRepositoryDeepContextRequest
	(*RepositoryStatusRequest)(nil),                                 // 527: aiserver.v1.RepositoryStatusRequest
	(*RepositoryStatusResponse)(nil),                                // 528: aiserver.v1.RepositoryStatusResponse
	(*BatchRepositoryStatusRequest)(nil),                            // 529: aiserver.v1.BatchRepositoryStatusRequest
	(*BatchRepositoryStatusResponse)(nil),                           // 530: aiserver.v1.BatchRepositoryStatusResponse
	(*GetUploadLimitsRequest)(nil),                                  // 531: aiserver.v1.GetUploadLimitsRequest
	(*GetUploadLimitsResponse)(nil),                                 // 532: aiserver.v1.GetUploadLimitsResponse
	(*GetNumFilesToSendRequest)(nil),                                // 533: aiserver.v1.GetNumFilesToSendRequest
	(*GetNumFilesToSendResponse)(nil),                               // 534: aiserver.v1.GetNumFilesToSendResponse
	(*GetAvailableChunkingStrategiesRequest)(nil),                   // 535: aiserver.v1.GetAvailableChunkingStrategiesRequest
	(*GetAvailableChunkingStrategiesResponse)(nil),                  // 536: aiserver.v1.GetAvailableChunkingStrategiesResponse
	(*AdminRemoveRepositoryRequest)(nil),                            // 537: aiserver.v1.AdminRemoveRepositoryRequest
	(*AdminRemoveRepositoryResponse)(nil),                           // 538: aiserver.v1.AdminRemoveRepositoryResponse
	(*RepositoriesRequest)(nil),                                     // 539: aiserver.v1.RepositoriesRequest
	(*RepositoriesResponse)(nil),                                    // 540: aiserver.v1.RepositoriesResponse
	(*LoginRequest)(nil),                                            // 541: aiserver.v1.LoginRequest
	(*LoginResponse)(nil),                                           // 542: aiserver.v1.LoginResponse
	(*LogoutRequest)(nil),                                           // 543: aiserver.v1.LogoutRequest
	(*LogoutResponse)(nil),                                          // 544: aiserver.v1.LogoutResponse
	(*IsLoggedInRequest)(nil),                                       // 545: aiserver.v1.IsLoggedInRequest
	(*IsLoggedInResponse)(nil),                                      // 546: aiserver.v1.IsLoggedInResponse
	(*PollLoginRequest)(nil),                                        // 547: aiserver.v1.PollLoginRequest
	(*PollLoginResponse)(nil),                                       // 548: aiserver.v1.PollLoginResponse
	(*UpgradeScopeRequest)(nil),                                     // 549: aiserver.v1.UpgradeScopeRequest
	(*UpgradeScopeResponse)(nil),                                    // 550: aiserver.v1.UpgradeScopeResponse
	(*SyncRepositoryRequest)(nil),                                   // 551: aiserver.v1.SyncRepositoryRequest
	(*SyncRepositoryResponse)(nil),                                  // 552: aiserver.v1.SyncRepositoryResponse
	(*UploadRepositoryRequest)(nil),                                 // 553: aiserver.v1.UploadRepositoryRequest
	(*UploadRepositoryResponse)(nil),                                // 554: aiserver.v1.UploadRepositoryResponse
	(*SubscribeRepositoryRequest)(nil),                              // 555: aiserver.v1.SubscribeRepositoryRequest
	(*SubscribeRepositoryResponse)(nil),                             // 556: aiserver.v1.SubscribeRepositoryResponse
	(*UnsubscribeRepositoryRequest)(nil),                            // 557: aiserver.v1.UnsubscribeRepositoryRequest
	(*UnsubscribeRepositoryResponse)(nil),                           // 558: aiserver.v1.UnsubscribeRepositoryResponse
	(*AvailableModelsResponse_AvailableModel)(nil),                  // 559: aiserver.v1.AvailableModelsResponse.AvailableModel
	(*CurrentFileInfo_NotebookCell)(nil),                            // 560: aiserver.v1.CurrentFileInfo.NotebookCell
	(*DataframeInfo_Column)(nil),                                    // 561: aiserver.v1.DataframeInfo.Column
	(*Diagnostic_RelatedInformation)(nil),                           // 562: aiserver.v1.Diagnostic.RelatedInformation
	(*ConversationMessage_CodeChunk)(nil),                           // 563: aiserver.v1.ConversationMessage.CodeChunk
	(*ConversationMessage_ApproximateLintError)(nil),                // 564: aiserver.v1.ConversationMessage.ApproximateLintError
	(*ConversationMessage_Lints)(nil),                               // 565: aiserver.v1.ConversationMessage.Lints
	(*ConversationMessage_ToolResult)(nil),                          // 566: aiserver.v1.ConversationMessage.ToolResult
	(*ConversationMessage_ToolResult_CodeChunk)(nil),                // 567: aiserver.v1.ConversationMessage.ToolResult.CodeChunk
	(*CodeBlock_Signatures)(nil),                                    // 568: aiserver.v1.CodeBlock.Signatures
	(*FileDiff_Chunk)(nil),                                          // 569: aiserver.v1.FileDiff.Chunk
	(*SimpleFileDiff_Chunk)(nil),                                    // 570: aiserver.v1.SimpleFileDiff.Chunk
	(*ImageProto_Dimension)(nil),                                    // 571: aiserver.v1.ImageProto.Dimension
	(*GetLintsForChangeResponse_Lint)(nil),                          // 572: aiserver.v1.GetLintsForChangeResponse.Lint
	(*GetLintsForChangeResponse_Lint_QuickFix)(nil),                 // 573: aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix
	(*GetLintsForChangeResponse_Lint_QuickFix_Edit)(nil),            // 574: aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit
	(*LinterError_RelatedInformation)(nil),                          // 575: aiserver.v1.LinterError.RelatedInformation
	(*DebugInfo_Breakpoint)(nil),                                    // 576: aiserver.v1.DebugInfo.Breakpoint
	(*DebugInfo_CallStackFrame)(nil),                                // 577: aiserver.v1.DebugInfo.CallStackFrame
	(*DebugInfo_CallStackFrame_Scope)(nil),                          // 578: aiserver.v1.DebugInfo.CallStackFrame.Scope
	(*DebugInfo_CallStackFrame_Scope_Variable)(nil),                 // 579: aiserver.v1.DebugInfo.CallStackFrame.Scope.Variable
	(*ContainerTreeNode_Container)(nil),                             // 580: aiserver.v1.ContainerTreeNode.Container
	(*ContainerTreeNode_Blob)(nil),                                  // 581: aiserver.v1.ContainerTreeNode.Blob
	(*ContainerTreeNode_Symbol)(nil),                                // 582: aiserver.v1.ContainerTreeNode.Symbol
	(*ContainerTreeNode_Container_Reference)(nil),                   // 583: aiserver.v1.ContainerTreeNode.Container.Reference
	(*ContainerTreeNode_Symbol_Reference)(nil),                      // 584: aiserver.v1.ContainerTreeNode.Symbol.Reference
	(*StreamChatResponse_ChunkIdentity)(nil),                        // 585: aiserver.v1.StreamChatResponse.ChunkIdentity
	(*GetComposerChatRequest_RedDiff)(nil),                          // 586: aiserver.v1.GetComposerChatRequest.RedDiff
	(*StreamChatContextRequest_CodeContext)(nil),                    // 587: aiserver.v1.StreamChatContextRequest.CodeContext
	(*StreamChatContextResponse_UsedCode)(nil),                      // 588: aiserver.v1.StreamChatContextResponse.UsedCode
	(*StreamChatContextResponse_CodeLink)(nil),                      // 589: aiserver.v1.StreamChatContextResponse.CodeLink
	(*StreamChatContextResponse_ChunkIdentity)(nil),                 // 590: aiserver.v1.StreamChatContextResponse.ChunkIdentity
	(*IsolatedTreesitterResponse_TreesitterSymbolNameItem)(nil),     // 591: aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem
	(*IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition)(nil), // 592: aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem.TreeSitterPosition
	(*StreamBranchGeminiRequest_PastThought)(nil),                                  // 593: aiserver.v1.StreamBranchGeminiRequest.PastThought
	(*StreamBranchGeminiRequest_BranchDiff)(nil),                                   // 594: aiserver.v1.StreamBranchGeminiRequest.BranchDiff
	(*StreamBranchGeminiRequest_File)(nil),                                         // 595: aiserver.v1.StreamBranchGeminiRequest.File
	(*StreamBranchGeminiRequest_FileWithPriority)(nil),                             // 596: aiserver.v1.StreamBranchGeminiRequest.FileWithPriority
	(*StreamBranchGeminiRequest_BranchDiff_FileDiff)(nil),                          // 597: aiserver.v1.StreamBranchGeminiRequest.BranchDiff.FileDiff
	(*StreamBranchFileSelectionsResponse_FileInstruction)(nil),                     // 598: aiserver.v1.StreamBranchFileSelectionsResponse.FileInstruction
	(*CmdKDebugInfo_UnsavedFiles)(nil),                                             // 599: aiserver.v1.CmdKDebugInfo.UnsavedFiles
	(*CmdKDebugInfo_OpenEditor)(nil),                                               // 600: aiserver.v1.CmdKDebugInfo.OpenEditor
	(*CmdKDebugInfo_CppFileDiffHistory)(nil),                                       // 601: aiserver.v1.CmdKDebugInfo.CppFileDiffHistory
	(*CmdKDebugInfo_PastThought)(nil),                                              // 602: aiserver.v1.CmdKDebugInfo.PastThought
	(*StreamInlineLongCompletionRequest_ContextBlock)(nil),                         // 603: aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock
	(*StreamCmdKResponse_EditStart)(nil),                                           // 604: aiserver.v1.StreamCmdKResponse.EditStart
	(*StreamCmdKResponse_EditStream)(nil),                                          // 605: aiserver.v1.StreamCmdKResponse.EditStream
	(*StreamCmdKResponse_EditEnd)(nil),                                             // 606: aiserver.v1.StreamCmdKResponse.EditEnd
	(*StreamCmdKResponse_Chat)(nil),                                                // 607: aiserver.v1.StreamCmdKResponse.Chat
	(*StreamCmdKResponse_StatusUpdate)(nil),                                        // 608: aiserver.v1.StreamCmdKResponse.StatusUpdate
	(*StreamSlashEditFollowUpWithPreviousEditsResponse_Chat)(nil),                  // 609: aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.Chat
	(*StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate)(nil),         // 610: aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.EditsToUpdate
	(*DocumentSymbol_Range)(nil),                                                   // 611: aiserver.v1.DocumentSymbol.Range
	(*CheckQueuePositionResponse_CustomLink)(nil),                                  // 612: aiserver.v1.CheckQueuePositionResponse.CustomLink
	(*UsageEventDetails_Chat)(nil),                                                 // 613: aiserver.v1.UsageEventDetails.Chat
	(*UsageEventDetails_ContextChat)(nil),                                          // 614: aiserver.v1.UsageEventDetails.ContextChat
	(*UsageEventDetails_CmdK)(nil),                                                 // 615: aiserver.v1.UsageEventDetails.CmdK
	(*UsageEventDetails_TerminalCmdK)(nil),                                         // 616: aiserver.v1.UsageEventDetails.TerminalCmdK
	(*UsageEventDetails_AiReviewAcceptedComment)(nil),                              // 617: aiserver.v1.UsageEventDetails.AiReviewAcceptedComment
	(*UsageEventDetails_InterpreterChat)(nil),                                      // 618: aiserver.v1.UsageEventDetails.InterpreterChat
	(*UsageEventDetails_SlashEdit)(nil),                                            // 619: aiserver.v1.UsageEventDetails.SlashEdit
	(*DoThisForMeCheckResponse_SkipAction)(nil),                                    // 620: aiserver.v1.DoThisForMeCheckResponse.SkipAction
	(*DoThisForMeCheckResponse_EditAction)(nil),                                    // 621: aiserver.v1.DoThisForMeCheckResponse.EditAction
	(*DoThisForMeCheckResponse_CreateAction)(nil),                                  // 622: aiserver.v1.DoThisForMeCheckResponse.CreateAction
	(*DoThisForMeCheckResponse_RunAction)(nil),                                     // 623: aiserver.v1.DoThisForMeCheckResponse.RunAction
	(*DoThisForMeResponse_UpdateStatus)(nil),                                       // 624: aiserver.v1.DoThisForMeResponse.UpdateStatus
	(*StreamChatToolformerResponse_Output)(nil),                                    // 625: aiserver.v1.StreamChatToolformerResponse.Output
	(*StreamChatToolformerResponse_ToolAction)(nil),                                // 626: aiserver.v1.StreamChatToolformerResponse.ToolAction
	(*StreamChatToolformerResponse_Thought)(nil),                                   // 627: aiserver.v1.StreamChatToolformerResponse.Thought
	(*GetSymbolsParams_LineRange)(nil),                                             // 628: aiserver.v1.GetSymbolsParams.LineRange
	(*SearchToolFileSearchResult_Line)(nil),                                        // 629: aiserver.v1.SearchToolFileSearchResult.Line
	(*GotodefToolFileSearchResult_Line)(nil),                                       // 630: aiserver.v1.GotodefToolFileSearchResult.Line
	(*EditResult_Feedback)(nil),                                                    // 631: aiserver.v1.EditResult.Feedback
	(*EditResult_Feedback_RelatedInformation)(nil),                                 // 632: aiserver.v1.EditResult.Feedback.RelatedInformation
	(*AddTestResult_Feedback)(nil),                                                 // 633: aiserver.v1.AddTestResult.Feedback
	(*AddTestResult_Feedback_RelatedInformation)(nil),                              // 634: aiserver.v1.AddTestResult.Feedback.RelatedInformation
	(*GetTestsResult_Test)(nil),                                                    // 635: aiserver.v1.GetTestsResult.Test
	(*SemanticSearchResult_Item)(nil),                                              // 636: aiserver.v1.SemanticSearchResult.Item
	(*GetProjectStructureResult_File)(nil),                                         // 637: aiserver.v1.GetProjectStructureResult.File
	(*PushAiThoughtRequest_Metadata)(nil),                                          // 638: aiserver.v1.PushAiThoughtRequest.Metadata
	(*PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent)(nil),        // 639: aiserver.v1.PushAiThoughtRequest.Metadata.AcceptedHallucinatedFunctionEvent
	(*TaskInstruction_CodeChunk)(nil),                                              // 640: aiserver.v1.TaskInstruction.CodeChunk
	(*TaskStreamLogResponse_InfoUpdate)(nil),                                       // 641: aiserver.v1.TaskStreamLogResponse.InfoUpdate
	(*TaskUserMessage_CodeChunk)(nil),                                              // 642: aiserver.v1.TaskUserMessage.CodeChunk
	(*IndexFileData_NodeData)(nil),                                                 // 643: aiserver.v1.IndexFileData.NodeData
	(*ListenExperimentalIndexResponse_ReadyItem)(nil),                              // 644: aiserver.v1.ListenExperimentalIndexResponse.ReadyItem
	(*ListenExperimentalIndexResponse_RegisterItem)(nil),                           // 645: aiserver.v1.ListenExperimentalIndexResponse.RegisterItem
	(*ListenExperimentalIndexResponse_ChooseItem)(nil),                             // 646: aiserver.v1.ListenExperimentalIndexResponse.ChooseItem
	(*ListenExperimentalIndexResponse_SummarizeItem)(nil),                          // 647: aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem
	(*ListenExperimentalIndexResponse_ErrorItem)(nil),                              // 648: aiserver.v1.ListenExperimentalIndexResponse.ErrorItem
	(*ChooseCodeReferencesResponse_FileResponse)(nil),                              // 649: aiserver.v1.ChooseCodeReferencesResponse.FileResponse
	(*ChooseCodeReferencesResponse_NodeResponse)(nil),                              // 650: aiserver.v1.ChooseCodeReferencesResponse.NodeResponse
	(*ChooseCodeReferencesResponse_FileResponse_NodeResponse)(nil),                 // 651: aiserver.v1.ChooseCodeReferencesResponse.FileResponse.NodeResponse
	(*ChooseCodeReferencesRequest_FileRequest)(nil),                                // 652: aiserver.v1.ChooseCodeReferencesRequest.FileRequest
	(*ChooseCodeReferencesRequest_NodeRequest)(nil),                                // 653: aiserver.v1.ChooseCodeReferencesRequest.NodeRequest
	(*SummarizeWithReferencesResponse_Success)(nil),                                // 654: aiserver.v1.SummarizeWithReferencesResponse.Success
	(*SummarizeWithReferencesResponse_Dependency)(nil),                             // 655: aiserver.v1.SummarizeWithReferencesResponse.Dependency
	(*NodeResult_NodeData)(nil),                                                    // 656: aiserver.v1.NodeResult.NodeData
	(*TaskStreamChatContextResponse_Output)(nil),                                   // 657: aiserver.v1.TaskStreamChatContextResponse.Output
	(*TaskStreamChatContextResponse_GatheringStep)(nil),                            // 658: aiserver.v1.TaskStreamChatContextResponse.GatheringStep
	(*TaskStreamChatContextResponse_GatheringFile)(nil),                            // 659: aiserver.v1.TaskStreamChatContextResponse.GatheringFile
	(*TaskStreamChatContextResponse_RerankingStep)(nil),                            // 660: aiserver.v1.TaskStreamChatContextResponse.RerankingStep
	(*TaskStreamChatContextResponse_RerankingFile)(nil),                            // 661: aiserver.v1.TaskStreamChatContextResponse.RerankingFile
	(*TaskStreamChatContextResponse_ReasoningStep)(nil),                            // 662: aiserver.v1.TaskStreamChatContextResponse.ReasoningStep
	(*TaskStreamChatContextResponse_ReasoningSubstep)(nil),                         // 663: aiserver.v1.TaskStreamChatContextResponse.ReasoningSubstep
	(*ModelQueryResponse_Query)(nil),                                               // 664: aiserver.v1.ModelQueryResponse.Query
	(*ModelQueryResponseV2_QueryItem)(nil),                                         // 665: aiserver.v1.ModelQueryResponseV2.QueryItem
	(*ContextOptions_AllDocumentation)(nil),                                        // 666: aiserver.v1.ContextOptions.AllDocumentation
	(*ContextOptions_CurrentFileContents)(nil),                                     // 667: aiserver.v1.ContextOptions.CurrentFileContents
	(*ContextOptions_LinterDiagnostics)(nil),                                       // 668: aiserver.v1.ContextOptions.LinterDiagnostics
	(*ContextOptions_GlobalContext)(nil),                                           // 669: aiserver.v1.ContextOptions.GlobalContext
	(*ContextOptions_AllDocumentation_Documentation)(nil),                          // 670: aiserver.v1.ContextOptions.AllDocumentation.Documentation
	(*ContextOptions_LinterDiagnostics_Diagnostic)(nil),                            // 671: aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic
	(*IntentPredictionResponse_ChosenDocumentation)(nil),                           // 672: aiserver.v1.IntentPredictionResponse.ChosenDocumentation
	(*IntentPredictionResponse_ChosenFileContents)(nil),                            // 673: aiserver.v1.IntentPredictionResponse.ChosenFileContents
	(*IntentPredictionResponse_ChosenLinterDiagnostics)(nil),                       // 674: aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics
	(*BlockDiffPatch_ModelWindow)(nil),                                             // 675: aiserver.v1.BlockDiffPatch.ModelWindow
	(*BlockDiffPatch_Change)(nil),                                                  // 676: aiserver.v1.BlockDiffPatch.Change
	(*CppConfigResponse_MergeBehavior)(nil),                                        // 677: aiserver.v1.CppConfigResponse.MergeBehavior
	(*CppConfigResponse_ImportPredictionConfig)(nil),                               // 678: aiserver.v1.CppConfigResponse.ImportPredictionConfig
	(*StreamAiLintBugRequest_CodeChunk)(nil),                                       // 679: aiserver.v1.StreamAiLintBugRequest.CodeChunk
	(*StreamAiLintBugRequest_CodeChunkList)(nil),                                   // 680: aiserver.v1.StreamAiLintBugRequest.CodeChunkList
	(*StreamAiLintBugRequest_DiscriminatorOptions)(nil),                            // 681: aiserver.v1.StreamAiLintBugRequest.DiscriminatorOptions
	(*StreamAiLintBugRequest_CodeChunkList_CodeChunk)(nil),                         // 682: aiserver.v1.StreamAiLintBugRequest.CodeChunkList.CodeChunk
	(*FixMarkersRequest_Marker)(nil),                                               // 683: aiserver.v1.FixMarkersRequest.Marker
	(*FixMarkersRequest_Marker_RelatedInformation)(nil),                            // 684: aiserver.v1.FixMarkersRequest.Marker.RelatedInformation
	(*FixMarkersRequest_Marker_ContextRange)(nil),                                  // 685: aiserver.v1.FixMarkersRequest.Marker.ContextRange
	(*FixMarkersRequest_Marker_AncestorTypeDefinition)(nil),                        // 686: aiserver.v1.FixMarkersRequest.Marker.AncestorTypeDefinition
	(*FixMarkersRequest_Marker_InsertedSymbolType)(nil),                            // 687: aiserver.v1.FixMarkersRequest.Marker.InsertedSymbolType
	(*FixMarkersRequest_Marker_QuickFix)(nil),                                      // 688: aiserver.v1.FixMarkersRequest.Marker.QuickFix
	(*FixMarkersRequest_Marker_ClassInformation)(nil),                              // 689: aiserver.v1.FixMarkersRequest.Marker.ClassInformation
	(*FixMarkersRequest_Marker_FunctionSignature)(nil),                             // 690: aiserver.v1.FixMarkersRequest.Marker.FunctionSignature
	(*FixMarkersRequest_Marker_QuickFix_Edit)(nil),                                 // 691: aiserver.v1.FixMarkersRequest.Marker.QuickFix.Edit
	(*FixMarkersRequest_Marker_ClassInformation_Constructor)(nil),                  // 692: aiserver.v1.FixMarkersRequest.Marker.ClassInformation.Constructor
	(*FixMarkersRequest_Marker_FunctionSignature_FunctionParameter)(nil),           // 693: aiserver.v1.FixMarkersRequest.Marker.FunctionSignature.FunctionParameter
	(*FixMarkersResponse_Change)(nil),                                              // 694: aiserver.v1.FixMarkersResponse.Change
	(*GetCppEditClassificationResponse_ScoredEdit)(nil),                            // 695: aiserver.v1.GetCppEditClassificationResponse.ScoredEdit
	(*GetCppEditClassificationResponse_ScoredEdit_LogProbs)(nil),                   // 696: aiserver.v1.GetCppEditClassificationResponse.ScoredEdit.LogProbs
	(*BackgroundCmdKEvalRequest_ProposedChange)(nil),                               // 697: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange
	(*BackgroundCmdKEvalRequest_ProposedChange_Lint)(nil),                          // 698: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint
	(*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix)(nil),                 // 699: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint.QuickFix
	(*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit)(nil),            // 700: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint.QuickFix.Edit
	(*BackgroundCmdKRequest_ProposedChange)(nil),                                   // 701: aiserver.v1.BackgroundCmdKRequest.ProposedChange
	(*BackgroundCmdKRequest_Lint)(nil),                                             // 702: aiserver.v1.BackgroundCmdKRequest.Lint
	(*BackgroundCmdKRequest_UsefulType)(nil),                                       // 703: aiserver.v1.BackgroundCmdKRequest.UsefulType
	(*BackgroundCmdKRequest_RecentlyViewedFile)(nil),                               // 704: aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile
	(*BackgroundCmdKRequest_Diff)(nil),                                             // 705: aiserver.v1.BackgroundCmdKRequest.Diff
	(*BackgroundCmdKRequest_ProposedChange_Lint)(nil),                              // 706: aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint
	(*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix)(nil),                     // 707: aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint.QuickFix
	(*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit)(nil),                // 708: aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint.QuickFix.Edit
	(*BackgroundCmdKRequest_Lint_QuickFix)(nil),                                    // 709: aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix
	(*BackgroundCmdKRequest_Lint_QuickFix_Edit)(nil),                               // 710: aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix.Edit
	(*BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange)(nil),                  // 711: aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile.VisibleRange
	(*ContextToRank_File)(nil),                                                     // 712: aiserver.v1.ContextToRank.File
	(*CppQuickAction_Edit)(nil),                                                    // 713: aiserver.v1.CppQuickAction.Edit
	(*CmdKEvent_SubmitPrompt)(nil),                                                 // 714: aiserver.v1.CmdKEvent.SubmitPrompt
	(*CmdKEvent_EndOfGeneration)(nil),                                              // 715: aiserver.v1.CmdKEvent.EndOfGeneration
	(*CmdKEvent_InterruptGeneration)(nil),                                          // 716: aiserver.v1.CmdKEvent.InterruptGeneration
	(*CmdKEvent_AcceptDiffs)(nil),                                                  // 717: aiserver.v1.CmdKEvent.AcceptDiffs
	(*CmdKEvent_RejectDiffs)(nil),                                                  // 718: aiserver.v1.CmdKEvent.RejectDiffs
	(*CmdKEvent_RejectPartialDiff)(nil),                                            // 719: aiserver.v1.CmdKEvent.RejectPartialDiff
	(*CmdKEvent_AcceptPartialDiff)(nil),                                            // 720: aiserver.v1.CmdKEvent.AcceptPartialDiff
	(*ChatEvent_SubmitPrompt)(nil),                                                 // 721: aiserver.v1.ChatEvent.SubmitPrompt
	(*ChatEvent_EndOfAnyGeneration)(nil),                                           // 722: aiserver.v1.ChatEvent.EndOfAnyGeneration
	(*ChatEvent_EndOfUninterruptedGeneration)(nil),                                 // 723: aiserver.v1.ChatEvent.EndOfUninterruptedGeneration
	(*BackgroundFilesEvent_BackgroundFile)(nil),                                    // 724: aiserver.v1.BackgroundFilesEvent.BackgroundFile
	(*CppTerminalEvent_TerminalInput)(nil),                                         // 725: aiserver.v1.CppTerminalEvent.TerminalInput
	(*CppTerminalEvent_CommandStarted)(nil),                                        // 726: aiserver.v1.CppTerminalEvent.CommandStarted
	(*CppTerminalEvent_CommandFinished)(nil),                                       // 727: aiserver.v1.CppTerminalEvent.CommandFinished
	(*CppGitContextEvent_Head)(nil),                                                // 728: aiserver.v1.CppGitContextEvent.Head
	(*CppGitContextEvent_Ref)(nil),                                                 // 729: aiserver.v1.CppGitContextEvent.Ref
	(*CppGitContextEvent_Remote)(nil),                                              // 730: aiserver.v1.CppGitContextEvent.Remote
	(*CppGitContextEvent_Submodule)(nil),                                           // 731: aiserver.v1.CppGitContextEvent.Submodule
	(*CppGitContextEvent_Commit)(nil),                                              // 732: aiserver.v1.CppGitContextEvent.Commit
	(*CppGitContextEvent_Change)(nil),                                              // 733: aiserver.v1.CppGitContextEvent.Change
	(*CppGitContextEvent_Head_UpstreamRef)(nil),                                    // 734: aiserver.v1.CppGitContextEvent.Head.UpstreamRef
	(*CppGitContextEvent_Commit_CommitShortStat)(nil),                              // 735: aiserver.v1.CppGitContextEvent.Commit.CommitShortStat
	(*SyncMerkleSubtreeResponse_Mismatch)(nil),                                     // 736: aiserver.v1.SyncMerkleSubtreeResponse.Mismatch
	(*FastUpdateFileRequest_LocalFile)(nil),                                        // 737: aiserver.v1.FastUpdateFileRequest.LocalFile
	(*GetHighLevelFolderDescriptionRequest_Readme)(nil),                            // 738: aiserver.v1.GetHighLevelFolderDescriptionRequest.Readme
	(*GetEmbeddingsResponse_Embedding)(nil),                                        // 739: aiserver.v1.GetEmbeddingsResponse.Embedding
	(*RepositoryStatusResponse_NotFound)(nil),                                      // 740: aiserver.v1.RepositoryStatusResponse.NotFound
	(*RepositoryStatusResponse_Uploading)(nil),                                     // 741: aiserver.v1.RepositoryStatusResponse.Uploading
	(*RepositoryStatusResponse_Syncing)(nil),                                       // 742: aiserver.v1.RepositoryStatusResponse.Syncing
	(*RepositoryStatusResponse_Synced)(nil),                                        // 743: aiserver.v1.RepositoryStatusResponse.Synced
	(*RepositoryStatusResponse_NotSubscribed)(nil),                                 // 744: aiserver.v1.RepositoryStatusResponse.NotSubscribed
	(*RepositoryStatusResponse_TooBig)(nil),                                        // 745: aiserver.v1.RepositoryStatusResponse.TooBig
	(*RepositoryStatusResponse_AuthTokenNotFound)(nil),                             // 746: aiserver.v1.RepositoryStatusResponse.AuthTokenNotFound
	(*RepositoryStatusResponse_AuthTokenNotAuthorized)(nil),                        // 747: aiserver.v1.RepositoryStatusResponse.AuthTokenNotAuthorized
	(*RepositoryStatusResponse_EmptyMessage)(nil),                                  // 748: aiserver.v1.RepositoryStatusResponse.EmptyMessage
}
var file_aiserver_v1_aiserver_proto_depIdxs = []int32{
	9,   // 0: aiserver.v1.HealthCheckResponse.status:type_name -> aiserver.v1.HealthCheckResponse.Status
	10,  // 1: aiserver.v1.ThrowErrorCheckRequest.error:type_name -> aiserver.v1.ThrowErrorCheckRequest.Error
	559, // 2: aiserver.v1.AvailableModelsResponse.models:type_name -> aiserver.v1.AvailableModelsResponse.AvailableModel
	64,  // 3: aiserver.v1.GetChatRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 4: aiserver.v1.GetChatRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 5: aiserver.v1.GetChatRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 6: aiserver.v1.GetChatRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 7: aiserver.v1.GetChatRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 8: aiserver.v1.GetChatRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 9: aiserver.v1.GetChatRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	92,  // 10: aiserver.v1.GetChatRequest.quotes:type_name -> aiserver.v1.ChatQuote
	93,  // 11: aiserver.v1.GetChatRequest.debug_info:type_name -> aiserver.v1.DebugInfo
	94,  // 12: aiserver.v1.GetChatRequest.external_links:type_name -> aiserver.v1.ChatExternalLink
	95,  // 13: aiserver.v1.GetChatRequest.commit_notes:type_name -> aiserver.v1.CommitNote
	96,  // 14: aiserver.v1.GetChatRequest.context_ast:type_name -> aiserver.v1.ContextAST
	560, // 15: aiserver.v1.CurrentFileInfo.cells:type_name -> aiserver.v1.CurrentFileInfo.NotebookCell
	65,  // 16: aiserver.v1.CurrentFileInfo.top_chunks:type_name -> aiserver.v1.BM25Chunk
	67,  // 17: aiserver.v1.CurrentFileInfo.cursor_position:type_name -> aiserver.v1.CursorPosition
	68,  // 18: aiserver.v1.CurrentFileInfo.dataframes:type_name -> aiserver.v1.DataframeInfo
	69,  // 19: aiserver.v1.CurrentFileInfo.selection:type_name -> aiserver.v1.CursorRange
	70,  // 20: aiserver.v1.CurrentFileInfo.diagnostics:type_name -> aiserver.v1.Diagnostic
	66,  // 21: aiserver.v1.BM25Chunk.range:type_name -> aiserver.v1.SimplestRange
	561, // 22: aiserver.v1.DataframeInfo.columns:type_name -> aiserver.v1.DataframeInfo.Column
	67,  // 23: aiserver.v1.CursorRange.start_position:type_name -> aiserver.v1.CursorPosition
	67,  // 24: aiserver.v1.CursorRange.end_position:type_name -> aiserver.v1.CursorPosition
	69,  // 25: aiserver.v1.Diagnostic.range:type_name -> aiserver.v1.CursorRange
	11,  // 26: aiserver.v1.Diagnostic.severity:type_name -> aiserver.v1.Diagnostic.DiagnosticSeverity
	562, // 27: aiserver.v1.Diagnostic.related_information:type_name -> aiserver.v1.Diagnostic.RelatedInformation
	12,  // 28: aiserver.v1.ConversationMessage.type:type_name -> aiserver.v1.ConversationMessage.MessageType
	563, // 29: aiserver.v1.ConversationMessage.attached_code_chunks:type_name -> aiserver.v1.ConversationMessage.CodeChunk
	72,  // 30: aiserver.v1.ConversationMessage.codebase_context_chunks:type_name -> aiserver.v1.CodeBlock
	74,  // 31: aiserver.v1.ConversationMessage.commits:type_name -> aiserver.v1.Commit
	76,  // 32: aiserver.v1.ConversationMessage.pull_requests:type_name -> aiserver.v1.PullRequest
	77,  // 33: aiserver.v1.ConversationMessage.git_diffs:type_name -> aiserver.v1.GitDiff
	78,  // 34: aiserver.v1.ConversationMessage.assistant_suggested_diffs:type_name -> aiserver.v1.SimpleFileDiff
	80,  // 35: aiserver.v1.ConversationMessage.interpreter_results:type_name -> aiserver.v1.InterpreterResult
	81,  // 36: aiserver.v1.ConversationMessage.images:type_name -> aiserver.v1.ImageProto
	564, // 37: aiserver.v1.ConversationMessage.approximate_lint_errors:type_name -> aiserver.v1.ConversationMessage.ApproximateLintError
	82,  // 38: aiserver.v1.ConversationMessage.attached_folders_new:type_name -> aiserver.v1.FolderInfo
	565, // 39: aiserver.v1.ConversationMessage.lints:type_name -> aiserver.v1.ConversationMessage.Lints
	85,  // 40: aiserver.v1.ConversationMessage.user_responses_to_suggested_code_blocks:type_name -> aiserver.v1.UserResponseToSuggestedCodeBlock
	566, // 41: aiserver.v1.ConversationMessage.tool_results:type_name -> aiserver.v1.ConversationMessage.ToolResult
	69,  // 42: aiserver.v1.CodeBlock.range:type_name -> aiserver.v1.CursorRange
	568, // 43: aiserver.v1.CodeBlock.signatures:type_name -> aiserver.v1.CodeBlock.Signatures
	73,  // 44: aiserver.v1.CodeBlock.detailed_lines:type_name -> aiserver.v1.DetailedLine
	75,  // 45: aiserver.v1.Commit.diff:type_name -> aiserver.v1.FileDiff
	569, // 46: aiserver.v1.FileDiff.chunks:type_name -> aiserver.v1.FileDiff.Chunk
	75,  // 47: aiserver.v1.PullRequest.diff:type_name -> aiserver.v1.FileDiff
	75,  // 48: aiserver.v1.GitDiff.diffs:type_name -> aiserver.v1.FileDiff
	17,  // 49: aiserver.v1.GitDiff.diff_type:type_name -> aiserver.v1.GitDiff.DiffType
	570, // 50: aiserver.v1.SimpleFileDiff.chunks:type_name -> aiserver.v1.SimpleFileDiff.Chunk
	571, // 51: aiserver.v1.ImageProto.dimension:type_name -> aiserver.v1.ImageProto.Dimension
	83,  // 52: aiserver.v1.FolderInfo.files:type_name -> aiserver.v1.FolderFileInfo
	572, // 53: aiserver.v1.GetLintsForChangeResponse.lints:type_name -> aiserver.v1.GetLintsForChangeResponse.Lint
	18,  // 54: aiserver.v1.UserResponseToSuggestedCodeBlock.user_response_type:type_name -> aiserver.v1.UserResponseToSuggestedCodeBlock.UserResponseType
	75,  // 55: aiserver.v1.UserResponseToSuggestedCodeBlock.user_modifications_to_suggested_code_blocks:type_name -> aiserver.v1.FileDiff
	89,  // 56: aiserver.v1.ModelDetails.azure_state:type_name -> aiserver.v1.AzureState
	91,  // 57: aiserver.v1.LinterErrors.errors:type_name -> aiserver.v1.LinterError
	69,  // 58: aiserver.v1.LinterError.range:type_name -> aiserver.v1.CursorRange
	575, // 59: aiserver.v1.LinterError.related_information:type_name -> aiserver.v1.LinterError.RelatedInformation
	19,  // 60: aiserver.v1.LinterError.severity:type_name -> aiserver.v1.LinterError.DiagnosticSeverity
	576, // 61: aiserver.v1.DebugInfo.breakpoint:type_name -> aiserver.v1.DebugInfo.Breakpoint
	577, // 62: aiserver.v1.DebugInfo.call_stack:type_name -> aiserver.v1.DebugInfo.CallStackFrame
	72,  // 63: aiserver.v1.DebugInfo.history:type_name -> aiserver.v1.CodeBlock
	97,  // 64: aiserver.v1.ContextAST.files:type_name -> aiserver.v1.ContainerTree
	98,  // 65: aiserver.v1.ContainerTree.nodes:type_name -> aiserver.v1.ContainerTreeNode
	580, // 66: aiserver.v1.ContainerTreeNode.container:type_name -> aiserver.v1.ContainerTreeNode.Container
	581, // 67: aiserver.v1.ContainerTreeNode.blob:type_name -> aiserver.v1.ContainerTreeNode.Blob
	582, // 68: aiserver.v1.ContainerTreeNode.symbol:type_name -> aiserver.v1.ContainerTreeNode.Symbol
	100, // 69: aiserver.v1.StreamChatResponse.document_citation:type_name -> aiserver.v1.DocumentationCitation
	585, // 70: aiserver.v1.StreamChatResponse.chunk_identity:type_name -> aiserver.v1.StreamChatResponse.ChunkIdentity
	102, // 71: aiserver.v1.StreamChatResponse.docs_reference:type_name -> aiserver.v1.DocsReference
	103, // 72: aiserver.v1.StreamChatResponse.web_citation:type_name -> aiserver.v1.WebCitation
	105, // 73: aiserver.v1.StreamChatResponse.status_updates:type_name -> aiserver.v1.StatusUpdates
	101, // 74: aiserver.v1.DocumentationCitation.chunks:type_name -> aiserver.v1.DocumentationChunk
	104, // 75: aiserver.v1.WebCitation.references:type_name -> aiserver.v1.WebReference
	106, // 76: aiserver.v1.StatusUpdates.updates:type_name -> aiserver.v1.StatusUpdate
	108, // 77: aiserver.v1.RerankDocumentsRequest.documents:type_name -> aiserver.v1.Document
	110, // 78: aiserver.v1.RerankDocumentsResponse.documents:type_name -> aiserver.v1.DocumentIdsWithScores
	71,  // 79: aiserver.v1.GetComposerChatRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	87,  // 80: aiserver.v1.GetComposerChatRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	88,  // 81: aiserver.v1.GetComposerChatRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 82: aiserver.v1.GetComposerChatRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	112, // 83: aiserver.v1.GetComposerChatRequest.external_links:type_name -> aiserver.v1.ComposerExternalLink
	71,  // 84: aiserver.v1.GetComposerChatRequest.project_context:type_name -> aiserver.v1.ConversationMessage
	586, // 85: aiserver.v1.GetComposerChatRequest.diffs_for_compressing_files:type_name -> aiserver.v1.GetComposerChatRequest.RedDiff
	90,  // 86: aiserver.v1.GetComposerChatRequest.multi_file_linter_errors:type_name -> aiserver.v1.LinterErrors
	64,  // 87: aiserver.v1.StreamChatContextRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 88: aiserver.v1.StreamChatContextRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 89: aiserver.v1.StreamChatContextRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 90: aiserver.v1.StreamChatContextRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 91: aiserver.v1.StreamChatContextRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 92: aiserver.v1.StreamChatContextRequest.model_details:type_name -> aiserver.v1.ModelDetails
	587, // 93: aiserver.v1.StreamChatContextRequest.code_context:type_name -> aiserver.v1.StreamChatContextRequest.CodeContext
	115, // 94: aiserver.v1.StreamChatContextRequest.file_search_results:type_name -> aiserver.v1.FullFileSearchResult
	118, // 95: aiserver.v1.StreamChatContextRequest.code_search_results:type_name -> aiserver.v1.CodeSearchResult
	90,  // 96: aiserver.v1.StreamChatContextRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	72,  // 97: aiserver.v1.CodeResult.code_block:type_name -> aiserver.v1.CodeBlock
	116, // 98: aiserver.v1.FullFileSearchResult.results:type_name -> aiserver.v1.FileResult
	117, // 99: aiserver.v1.FileResult.file:type_name -> aiserver.v1.File
	114, // 100: aiserver.v1.CodeSearchResult.results:type_name -> aiserver.v1.CodeResult
	100, // 101: aiserver.v1.StreamChatContextResponse.document_citation:type_name -> aiserver.v1.DocumentationCitation
	588, // 102: aiserver.v1.StreamChatContextResponse.used_code:type_name -> aiserver.v1.StreamChatContextResponse.UsedCode
	589, // 103: aiserver.v1.StreamChatContextResponse.code_link:type_name -> aiserver.v1.StreamChatContextResponse.CodeLink
	590, // 104: aiserver.v1.StreamChatContextResponse.chunk_identity:type_name -> aiserver.v1.StreamChatContextResponse.ChunkIdentity
	102, // 105: aiserver.v1.StreamChatContextResponse.docs_reference:type_name -> aiserver.v1.DocsReference
	71,  // 106: aiserver.v1.GetChatTitleRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	124, // 107: aiserver.v1.GetCompletionRequest.file_identifier:type_name -> aiserver.v1.UniqueFileIdentifier
	67,  // 108: aiserver.v1.GetCompletionRequest.cursor_position:type_name -> aiserver.v1.CursorPosition
	125, // 109: aiserver.v1.GetCompletionRequest.surrounding_lines:type_name -> aiserver.v1.SurroundingLines
	87,  // 110: aiserver.v1.GetCompletionRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	86,  // 111: aiserver.v1.GetSearchRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	129, // 112: aiserver.v1.GetSearchResponse.results:type_name -> aiserver.v1.FileSearchResult
	64,  // 113: aiserver.v1.StreamInlineEditsRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	86,  // 114: aiserver.v1.StreamInlineEditsRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 115: aiserver.v1.StreamInlineEditsRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	591, // 116: aiserver.v1.IsolatedTreesitterResponse.items:type_name -> aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem
	20,  // 117: aiserver.v1.GetEvaluationPromptRequest.prompt_type:type_name -> aiserver.v1.GetEvaluationPromptRequest.EvaluationPromptType
	64,  // 118: aiserver.v1.GetEvaluationPromptRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	21,  // 119: aiserver.v1.GetEvaluationPromptRequest.reranking_strategy:type_name -> aiserver.v1.GetEvaluationPromptRequest.RerankingStrategy
	142, // 120: aiserver.v1.GetUserInfoResponse.usage:type_name -> aiserver.v1.UsageData
	593, // 121: aiserver.v1.StreamBranchGeminiRequest.past_thoughts:type_name -> aiserver.v1.StreamBranchGeminiRequest.PastThought
	594, // 122: aiserver.v1.StreamBranchGeminiRequest.diff_to_base_branch:type_name -> aiserver.v1.StreamBranchGeminiRequest.BranchDiff
	74,  // 123: aiserver.v1.StreamBranchGeminiRequest.potentially_relevant_commits:type_name -> aiserver.v1.Commit
	595, // 124: aiserver.v1.StreamBranchGeminiRequest.files:type_name -> aiserver.v1.StreamBranchGeminiRequest.File
	596, // 125: aiserver.v1.StreamBranchGeminiRequest.context_graph_files:type_name -> aiserver.v1.StreamBranchGeminiRequest.FileWithPriority
	595, // 126: aiserver.v1.StreamBranchGeminiRequest.crucial_files:type_name -> aiserver.v1.StreamBranchGeminiRequest.File
	598, // 127: aiserver.v1.StreamBranchFileSelectionsResponse.file_instructions:type_name -> aiserver.v1.StreamBranchFileSelectionsResponse.FileInstruction
	64,  // 128: aiserver.v1.StreamBackgroundEditRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	86,  // 129: aiserver.v1.StreamBackgroundEditRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 130: aiserver.v1.StreamBackgroundEditRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	71,  // 131: aiserver.v1.StreamBackgroundEditRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	88,  // 132: aiserver.v1.StreamBackgroundEditRequest.model_details:type_name -> aiserver.v1.ModelDetails
	64,  // 133: aiserver.v1.StreamGPTFourEditRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 134: aiserver.v1.StreamGPTFourEditRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 135: aiserver.v1.StreamGPTFourEditRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 136: aiserver.v1.StreamGPTFourEditRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 137: aiserver.v1.StreamGPTFourEditRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 138: aiserver.v1.StreamGPTFourEditRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 139: aiserver.v1.StreamGPTFourEditRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	72,  // 140: aiserver.v1.StreamGPTFourEditRequest.prompt_code_blocks:type_name -> aiserver.v1.CodeBlock
	64,  // 141: aiserver.v1.StreamEditRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 142: aiserver.v1.StreamEditRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 143: aiserver.v1.StreamEditRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 144: aiserver.v1.StreamEditRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 145: aiserver.v1.StreamEditRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 146: aiserver.v1.StreamEditRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 147: aiserver.v1.StreamEditRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	72,  // 148: aiserver.v1.StreamEditRequest.prompt_code_blocks:type_name -> aiserver.v1.CodeBlock
	152, // 149: aiserver.v1.StreamEditRequest.cmd_k_debug_info:type_name -> aiserver.v1.CmdKDebugInfo
	151, // 150: aiserver.v1.StreamEditRequest.original_request:type_name -> aiserver.v1.StreamEditRequest
	81,  // 151: aiserver.v1.StreamEditRequest.images:type_name -> aiserver.v1.ImageProto
	153, // 152: aiserver.v1.StreamEditRequest.links:type_name -> aiserver.v1.CmdKExternalLink
	599, // 153: aiserver.v1.CmdKDebugInfo.unsaved_files:type_name -> aiserver.v1.CmdKDebugInfo.UnsavedFiles
	600, // 154: aiserver.v1.CmdKDebugInfo.open_editors:type_name -> aiserver.v1.CmdKDebugInfo.OpenEditor
	601, // 155: aiserver.v1.CmdKDebugInfo.file_diff_histories:type_name -> aiserver.v1.CmdKDebugInfo.CppFileDiffHistory
	602, // 156: aiserver.v1.CmdKDebugInfo.past_thoughts:type_name -> aiserver.v1.CmdKDebugInfo.PastThought
	151, // 157: aiserver.v1.PreloadEditRequest.req:type_name -> aiserver.v1.StreamEditRequest
	64,  // 158: aiserver.v1.StreamFastEditRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	86,  // 159: aiserver.v1.StreamFastEditRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 160: aiserver.v1.StreamFastEditRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 161: aiserver.v1.StreamFastEditRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 162: aiserver.v1.StreamFastEditRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 163: aiserver.v1.StreamFastEditRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	64,  // 164: aiserver.v1.StreamGenerateRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 165: aiserver.v1.StreamGenerateRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 166: aiserver.v1.StreamGenerateRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 167: aiserver.v1.StreamGenerateRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 168: aiserver.v1.StreamGenerateRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 169: aiserver.v1.StreamGenerateRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 170: aiserver.v1.StreamGenerateRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	72,  // 171: aiserver.v1.StreamGenerateRequest.prompt_code_blocks:type_name -> aiserver.v1.CodeBlock
	152, // 172: aiserver.v1.StreamGenerateRequest.cmd_k_debug_info:type_name -> aiserver.v1.CmdKDebugInfo
	158, // 173: aiserver.v1.StreamGenerateRequest.original_request:type_name -> aiserver.v1.StreamGenerateRequest
	64,  // 174: aiserver.v1.StreamInlineLongCompletionRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	86,  // 175: aiserver.v1.StreamInlineLongCompletionRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	603, // 176: aiserver.v1.StreamInlineLongCompletionRequest.context_blocks:type_name -> aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock
	87,  // 177: aiserver.v1.StreamInlineLongCompletionRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	88,  // 178: aiserver.v1.StreamInlineLongCompletionRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 179: aiserver.v1.StreamInlineLongCompletionRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	64,  // 180: aiserver.v1.SlashEditRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 181: aiserver.v1.SlashEditRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	87,  // 182: aiserver.v1.SlashEditRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	88,  // 183: aiserver.v1.SlashEditRequest.model_details:type_name -> aiserver.v1.ModelDetails
	79,  // 184: aiserver.v1.SlashEditRequest.edit_selection:type_name -> aiserver.v1.LineRange
	64,  // 185: aiserver.v1.SlashEditRequest.files:type_name -> aiserver.v1.CurrentFileInfo
	23,  // 186: aiserver.v1.SlashEditRequest.fast_apply_model_type:type_name -> aiserver.v1.SlashEditRequest.FastApplyModelType
	162, // 187: aiserver.v1.SlashEditResponse.cmd_k_response:type_name -> aiserver.v1.StreamCmdKResponse
	604, // 188: aiserver.v1.StreamCmdKResponse.edit_start:type_name -> aiserver.v1.StreamCmdKResponse.EditStart
	605, // 189: aiserver.v1.StreamCmdKResponse.edit_stream:type_name -> aiserver.v1.StreamCmdKResponse.EditStream
	606, // 190: aiserver.v1.StreamCmdKResponse.edit_end:type_name -> aiserver.v1.StreamCmdKResponse.EditEnd
	607, // 191: aiserver.v1.StreamCmdKResponse.chat:type_name -> aiserver.v1.StreamCmdKResponse.Chat
	608, // 192: aiserver.v1.StreamCmdKResponse.status_update:type_name -> aiserver.v1.StreamCmdKResponse.StatusUpdate
	71,  // 193: aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	88,  // 194: aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest.model_details:type_name -> aiserver.v1.ModelDetails
	164, // 195: aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest.previous_edits:type_name -> aiserver.v1.SlashEditPreviousEdit
	79,  // 196: aiserver.v1.SlashEditPreviousEdit.range:type_name -> aiserver.v1.LineRange
	609, // 197: aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.chat:type_name -> aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.Chat
	610, // 198: aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.edits_to_update:type_name -> aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.EditsToUpdate
	64,  // 199: aiserver.v1.StreamAiPreviewsRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	167, // 200: aiserver.v1.StreamAiPreviewsRequest.intent:type_name -> aiserver.v1.StreamAiPreviewsIntent
	88,  // 201: aiserver.v1.StreamAiPreviewsRequest.model_details:type_name -> aiserver.v1.ModelDetails
	168, // 202: aiserver.v1.StreamAiPreviewsIntent.main_symbols_to_analyze_from_go_to_def:type_name -> aiserver.v1.DocumentSymbolWithText
	171, // 203: aiserver.v1.StreamAiPreviewsIntent.main_symbol_hover_details:type_name -> aiserver.v1.HoverDetails
	168, // 204: aiserver.v1.StreamAiPreviewsIntent.related_symbols:type_name -> aiserver.v1.DocumentSymbolWithText
	168, // 205: aiserver.v1.StreamAiPreviewsIntent.main_symbols_to_analyze_from_implementations:type_name -> aiserver.v1.DocumentSymbolWithText
	169, // 206: aiserver.v1.DocumentSymbolWithText.symbol:type_name -> aiserver.v1.DocumentSymbol
	170, // 207: aiserver.v1.DocumentSymbolWithText.uri_components:type_name -> aiserver.v1.UriComponents
	24,  // 208: aiserver.v1.DocumentSymbol.kind:type_name -> aiserver.v1.DocumentSymbol.SymbolKind
	611, // 209: aiserver.v1.DocumentSymbol.range:type_name -> aiserver.v1.DocumentSymbol.Range
	611, // 210: aiserver.v1.DocumentSymbol.selection_range:type_name -> aiserver.v1.DocumentSymbol.Range
	169, // 211: aiserver.v1.DocumentSymbol.children:type_name -> aiserver.v1.DocumentSymbol
	79,  // 212: aiserver.v1.ReviewRequest.chunk_range:type_name -> aiserver.v1.LineRange
	177, // 213: aiserver.v1.ReviewResponse.bugs:type_name -> aiserver.v1.ReviewBug
	79,  // 214: aiserver.v1.ReviewChatRequest.chunk_range:type_name -> aiserver.v1.LineRange
	179, // 215: aiserver.v1.ReviewChatRequest.messages:type_name -> aiserver.v1.ReviewChatMessage
	25,  // 216: aiserver.v1.ReviewChatMessage.type:type_name -> aiserver.v1.ReviewChatMessage.ReviewChatMessageType
	88,  // 217: aiserver.v1.CheckQueuePositionRequest.model_details:type_name -> aiserver.v1.ModelDetails
	183, // 218: aiserver.v1.CheckQueuePositionResponse.usage_event_details:type_name -> aiserver.v1.UsageEventDetails
	612, // 219: aiserver.v1.CheckQueuePositionResponse.custom_link:type_name -> aiserver.v1.CheckQueuePositionResponse.CustomLink
	613, // 220: aiserver.v1.UsageEventDetails.chat:type_name -> aiserver.v1.UsageEventDetails.Chat
	614, // 221: aiserver.v1.UsageEventDetails.context_chat:type_name -> aiserver.v1.UsageEventDetails.ContextChat
	615, // 222: aiserver.v1.UsageEventDetails.cmd_k:type_name -> aiserver.v1.UsageEventDetails.CmdK
	616, // 223: aiserver.v1.UsageEventDetails.terminal_cmd_k:type_name -> aiserver.v1.UsageEventDetails.TerminalCmdK
	617, // 224: aiserver.v1.UsageEventDetails.ai_review_accepted_comment:type_name -> aiserver.v1.UsageEventDetails.AiReviewAcceptedComment
	618, // 225: aiserver.v1.UsageEventDetails.interpreter_chat:type_name -> aiserver.v1.UsageEventDetails.InterpreterChat
	619, // 226: aiserver.v1.UsageEventDetails.slash_edit:type_name -> aiserver.v1.UsageEventDetails.SlashEdit
	183, // 227: aiserver.v1.CheckUsageBasedPriceRequest.usage_event_details:type_name -> aiserver.v1.UsageEventDetails
	620, // 228: aiserver.v1.DoThisForMeCheckResponse.skip_action:type_name -> aiserver.v1.DoThisForMeCheckResponse.SkipAction
	621, // 229: aiserver.v1.DoThisForMeCheckResponse.edit_action:type_name -> aiserver.v1.DoThisForMeCheckResponse.EditAction
	622, // 230: aiserver.v1.DoThisForMeCheckResponse.create_action:type_name -> aiserver.v1.DoThisForMeCheckResponse.CreateAction
	623, // 231: aiserver.v1.DoThisForMeCheckResponse.run_action:type_name -> aiserver.v1.DoThisForMeCheckResponse.RunAction
	187, // 232: aiserver.v1.DoThisForMeRequest.action:type_name -> aiserver.v1.DoThisForMeCheckResponse
	190, // 233: aiserver.v1.DoThisForMeResponseWrapped.real_response:type_name -> aiserver.v1.DoThisForMeResponse
	624, // 234: aiserver.v1.DoThisForMeResponse.update_status:type_name -> aiserver.v1.DoThisForMeResponse.UpdateStatus
	625, // 235: aiserver.v1.StreamChatToolformerResponse.output:type_name -> aiserver.v1.StreamChatToolformerResponse.Output
	626, // 236: aiserver.v1.StreamChatToolformerResponse.tool_action:type_name -> aiserver.v1.StreamChatToolformerResponse.ToolAction
	627, // 237: aiserver.v1.StreamChatToolformerResponse.thought:type_name -> aiserver.v1.StreamChatToolformerResponse.Thought
	193, // 238: aiserver.v1.ToolCall.builtin_tool_call:type_name -> aiserver.v1.BuiltinToolCall
	213, // 239: aiserver.v1.ToolCall.custom_tool_call:type_name -> aiserver.v1.CustomToolCall
	1,   // 240: aiserver.v1.BuiltinToolCall.tool:type_name -> aiserver.v1.BuiltinTool
	194, // 241: aiserver.v1.BuiltinToolCall.search_params:type_name -> aiserver.v1.SearchParams
	195, // 242: aiserver.v1.BuiltinToolCall.read_chunk_params:type_name -> aiserver.v1.ReadChunkParams
	196, // 243: aiserver.v1.BuiltinToolCall.gotodef_params:type_name -> aiserver.v1.GotodefParams
	197, // 244: aiserver.v1.BuiltinToolCall.edit_params:type_name -> aiserver.v1.EditParams
	198, // 245: aiserver.v1.BuiltinToolCall.undo_edit_params:type_name -> aiserver.v1.UndoEditParams
	199, // 246: aiserver.v1.BuiltinToolCall.end_params:type_name -> aiserver.v1.EndParams
	200, // 247: aiserver.v1.BuiltinToolCall.new_file_params:type_name -> aiserver.v1.NewFileParams
	201, // 248: aiserver.v1.BuiltinToolCall.add_test_params:type_name -> aiserver.v1.AddTestParams
	202, // 249: aiserver.v1.BuiltinToolCall.run_test_params:type_name -> aiserver.v1.RunTestParams
	203, // 250: aiserver.v1.BuiltinToolCall.delete_test_params:type_name -> aiserver.v1.DeleteTestParams
	204, // 251: aiserver.v1.BuiltinToolCall.save_file_params:type_name -> aiserver.v1.SaveFileParams
	205, // 252: aiserver.v1.BuiltinToolCall.get_tests_params:type_name -> aiserver.v1.GetTestsParams
	206, // 253: aiserver.v1.BuiltinToolCall.get_symbols_params:type_name -> aiserver.v1.GetSymbolsParams
	207, // 254: aiserver.v1.BuiltinToolCall.semantic_search_params:type_name -> aiserver.v1.SemanticSearchParams
	208, // 255: aiserver.v1.BuiltinToolCall.get_project_structure_params:type_name -> aiserver.v1.GetProjectStructureParams
	209, // 256: aiserver.v1.BuiltinToolCall.create_rm_files_params:type_name -> aiserver.v1.CreateRmFilesParams
	210, // 257: aiserver.v1.BuiltinToolCall.run_terminal_commands_params:type_name -> aiserver.v1.RunTerminalCommandsParams
	211, // 258: aiserver.v1.BuiltinToolCall.new_edit_params:type_name -> aiserver.v1.NewEditParams
	212, // 259: aiserver.v1.BuiltinToolCall.read_with_linter_params:type_name -> aiserver.v1.ReadWithLinterParams
	26,  // 260: aiserver.v1.EditParams.frontend_edit_type:type_name -> aiserver.v1.EditParams.FrontendEditType
	628, // 261: aiserver.v1.GetSymbolsParams.line_range:type_name -> aiserver.v1.GetSymbolsParams.LineRange
	215, // 262: aiserver.v1.StreamChatToolformerContinueRequest.tool_result:type_name -> aiserver.v1.ToolResult
	216, // 263: aiserver.v1.ToolResult.builtin_tool_result:type_name -> aiserver.v1.BuiltinToolResult
	239, // 264: aiserver.v1.ToolResult.custom_tool_result:type_name -> aiserver.v1.CustomToolResult
	240, // 265: aiserver.v1.ToolResult.error_tool_result:type_name -> aiserver.v1.ErrorToolResult
	1,   // 266: aiserver.v1.BuiltinToolResult.tool:type_name -> aiserver.v1.BuiltinTool
	217, // 267: aiserver.v1.BuiltinToolResult.search_result:type_name -> aiserver.v1.SearchResult
	219, // 268: aiserver.v1.BuiltinToolResult.read_chunk_result:type_name -> aiserver.v1.ReadChunkResult
	220, // 269: aiserver.v1.BuiltinToolResult.gotodef_result:type_name -> aiserver.v1.GotodefResult
	222, // 270: aiserver.v1.BuiltinToolResult.edit_result:type_name -> aiserver.v1.EditResult
	223, // 271: aiserver.v1.BuiltinToolResult.undo_edit_result:type_name -> aiserver.v1.UndoEditResult
	224, // 272: aiserver.v1.BuiltinToolResult.end_result:type_name -> aiserver.v1.EndResult
	225, // 273: aiserver.v1.BuiltinToolResult.new_file_result:type_name -> aiserver.v1.NewFileResult
	226, // 274: aiserver.v1.BuiltinToolResult.add_test_result:type_name -> aiserver.v1.AddTestResult
	227, // 275: aiserver.v1.BuiltinToolResult.run_test_result:type_name -> aiserver.v1.RunTestResult
	228, // 276: aiserver.v1.BuiltinToolResult.delete_test_result:type_name -> aiserver.v1.DeleteTestResult
	229, // 277: aiserver.v1.BuiltinToolResult.save_file_result:type_name -> aiserver.v1.SaveFileResult
	230, // 278: aiserver.v1.BuiltinToolResult.get_tests_result:type_name -> aiserver.v1.GetTestsResult
	231, // 279: aiserver.v1.BuiltinToolResult.get_symbols_result:type_name -> aiserver.v1.GetSymbolsResult
	232, // 280: aiserver.v1.BuiltinToolResult.semantic_search_result:type_name -> aiserver.v1.SemanticSearchResult
	234, // 281: aiserver.v1.BuiltinToolResult.get_project_structure_result:type_name -> aiserver.v1.GetProjectStructureResult
	235, // 282: aiserver.v1.BuiltinToolResult.create_rm_files_result:type_name -> aiserver.v1.CreateRmFilesResult
	236, // 283: aiserver.v1.BuiltinToolResult.run_terminal_commands_result:type_name -> aiserver.v1.RunTerminalCommandsResult
	237, // 284: aiserver.v1.BuiltinToolResult.new_edit_result:type_name -> aiserver.v1.NewEditResult
	238, // 285: aiserver.v1.BuiltinToolResult.read_with_linter_result:type_name -> aiserver.v1.ReadWithLinterResult
	218, // 286: aiserver.v1.SearchResult.file_results:type_name -> aiserver.v1.SearchToolFileSearchResult
	629, // 287: aiserver.v1.SearchToolFileSearchResult.potentially_relevant_lines:type_name -> aiserver.v1.SearchToolFileSearchResult.Line
	221, // 288: aiserver.v1.GotodefResult.results:type_name -> aiserver.v1.GotodefToolFileSearchResult
	630, // 289: aiserver.v1.GotodefToolFileSearchResult.potentially_relevant_lines:type_name -> aiserver.v1.GotodefToolFileSearchResult.Line
	631, // 290: aiserver.v1.EditResult.structured_feedback:type_name -> aiserver.v1.EditResult.Feedback
	633, // 291: aiserver.v1.AddTestResult.feedback:type_name -> aiserver.v1.AddTestResult.Feedback
	635, // 292: aiserver.v1.GetTestsResult.tests:type_name -> aiserver.v1.GetTestsResult.Test
	169, // 293: aiserver.v1.GetSymbolsResult.symbols:type_name -> aiserver.v1.DocumentSymbol
	636, // 294: aiserver.v1.SemanticSearchResult.results:type_name -> aiserver.v1.SemanticSearchResult.Item
	637, // 295: aiserver.v1.GetProjectStructureResult.files:type_name -> aiserver.v1.GetProjectStructureResult.File
	70,  // 296: aiserver.v1.ReadWithLinterResult.diagnostics:type_name -> aiserver.v1.Diagnostic
	152, // 297: aiserver.v1.PushAiThoughtRequest.cmd_k_debug_info:type_name -> aiserver.v1.CmdKDebugInfo
	638, // 298: aiserver.v1.PushAiThoughtRequest.metadata:type_name -> aiserver.v1.PushAiThoughtRequest.Metadata
	88,  // 299: aiserver.v1.CheckDoableAsTaskRequest.model_details:type_name -> aiserver.v1.ModelDetails
	2,   // 300: aiserver.v1.ReportGroundTruthCandidateRequest.feature_type:type_name -> aiserver.v1.FeatureType
	79,  // 301: aiserver.v1.ReportGroundTruthCandidateRequest.selection_in_question:type_name -> aiserver.v1.LineRange
	27,  // 302: aiserver.v1.ReportCmdKFateRequest.fate:type_name -> aiserver.v1.ReportCmdKFateRequest.Fate
	88,  // 303: aiserver.v1.InterfaceAgentInitRequest.model_details:type_name -> aiserver.v1.ModelDetails
	252, // 304: aiserver.v1.InterfaceAgentInitRequest.interface_agent_client_state:type_name -> aiserver.v1.InterfaceAgentClientState
	256, // 305: aiserver.v1.StreamInterfaceAgentStatusResponse.status:type_name -> aiserver.v1.InterfaceAgentStatus
	28,  // 306: aiserver.v1.InterfaceAgentStatus.validate_configuration:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 307: aiserver.v1.InterfaceAgentStatus.stub_new_function:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 308: aiserver.v1.InterfaceAgentStatus.verify_spec:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 309: aiserver.v1.InterfaceAgentStatus.write_test_plan:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 310: aiserver.v1.InterfaceAgentStatus.write_tests:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 311: aiserver.v1.InterfaceAgentStatus.write_implementation:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 312: aiserver.v1.InterfaceAgentStatus.implement_new_function:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	28,  // 313: aiserver.v1.InterfaceAgentStatus.run_tests:type_name -> aiserver.v1.InterfaceAgentStatus.Status
	252, // 314: aiserver.v1.TaskGetInterfaceAgentStatusRequest.interface_agent_client_state:type_name -> aiserver.v1.InterfaceAgentClientState
	259, // 315: aiserver.v1.TaskGetInterfaceAgentStatusResponseWrapped.real_response:type_name -> aiserver.v1.TaskGetInterfaceAgentStatusResponse
	256, // 316: aiserver.v1.TaskGetInterfaceAgentStatusResponse.status:type_name -> aiserver.v1.InterfaceAgentStatus
	261, // 317: aiserver.v1.TaskInitRequest.instruction:type_name -> aiserver.v1.TaskInstruction
	88,  // 318: aiserver.v1.TaskInitRequest.model_details:type_name -> aiserver.v1.ModelDetails
	640, // 319: aiserver.v1.TaskInstruction.attached_code_chunks:type_name -> aiserver.v1.TaskInstruction.CodeChunk
	64,  // 320: aiserver.v1.TaskInstruction.current_file:type_name -> aiserver.v1.CurrentFileInfo
	86,  // 321: aiserver.v1.TaskInstruction.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 322: aiserver.v1.TaskInstruction.explicit_context:type_name -> aiserver.v1.ExplicitContext
	3,   // 323: aiserver.v1.TaskInfoResponse.task_status:type_name -> aiserver.v1.TaskStatus
	269, // 324: aiserver.v1.TaskStreamLogResponse.streamed_log_item:type_name -> aiserver.v1.TaskLogItem
	641, // 325: aiserver.v1.TaskStreamLogResponse.info_update:type_name -> aiserver.v1.TaskStreamLogResponse.InfoUpdate
	266, // 326: aiserver.v1.TaskStreamLogResponse.initial_task_info:type_name -> aiserver.v1.TaskInfoResponse
	270, // 327: aiserver.v1.TaskLogItem.output:type_name -> aiserver.v1.TaskLogOutput
	271, // 328: aiserver.v1.TaskLogItem.tool_action:type_name -> aiserver.v1.TaskLogToolAction
	272, // 329: aiserver.v1.TaskLogItem.thought:type_name -> aiserver.v1.TaskLogThought
	273, // 330: aiserver.v1.TaskLogItem.user_message:type_name -> aiserver.v1.TaskUserMessage
	261, // 331: aiserver.v1.TaskLogItem.instruction:type_name -> aiserver.v1.TaskInstruction
	274, // 332: aiserver.v1.TaskLogItem.tool_result:type_name -> aiserver.v1.TaskLogToolResult
	192, // 333: aiserver.v1.TaskLogToolAction.tool_call:type_name -> aiserver.v1.ToolCall
	642, // 334: aiserver.v1.TaskUserMessage.attached_code_chunks:type_name -> aiserver.v1.TaskUserMessage.CodeChunk
	215, // 335: aiserver.v1.TaskLogToolResult.tool_result:type_name -> aiserver.v1.ToolResult
	273, // 336: aiserver.v1.TaskSendMessageRequest.user_message:type_name -> aiserver.v1.TaskUserMessage
	215, // 337: aiserver.v1.TaskProvideResultRequest.tool_result:type_name -> aiserver.v1.ToolResult
	283, // 338: aiserver.v1.ListExperimentalIndexFilesResponse.files:type_name -> aiserver.v1.IndexFileData
	643, // 339: aiserver.v1.IndexFileData.nodes:type_name -> aiserver.v1.IndexFileData.NodeData
	644, // 340: aiserver.v1.ListenExperimentalIndexResponse.ready:type_name -> aiserver.v1.ListenExperimentalIndexResponse.ReadyItem
	645, // 341: aiserver.v1.ListenExperimentalIndexResponse.register:type_name -> aiserver.v1.ListenExperimentalIndexResponse.RegisterItem
	646, // 342: aiserver.v1.ListenExperimentalIndexResponse.choose:type_name -> aiserver.v1.ListenExperimentalIndexResponse.ChooseItem
	647, // 343: aiserver.v1.ListenExperimentalIndexResponse.summarize:type_name -> aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem
	648, // 344: aiserver.v1.ListenExperimentalIndexResponse.error:type_name -> aiserver.v1.ListenExperimentalIndexResponse.ErrorItem
	287, // 345: aiserver.v1.RegisterFileToIndexResponse.dependency_resolution_attempts:type_name -> aiserver.v1.URIResolutionAttempt
	283, // 346: aiserver.v1.RegisterFileToIndexResponse.file_data:type_name -> aiserver.v1.IndexFileData
	288, // 347: aiserver.v1.URIResolutionAttempt.symbol:type_name -> aiserver.v1.CodeSymbolWithAction
	29,  // 348: aiserver.v1.CodeSymbolWithAction.action:type_name -> aiserver.v1.CodeSymbolWithAction.CodeSymbolAction
	290, // 349: aiserver.v1.RegisterFileToIndexRequest.root_context_node:type_name -> aiserver.v1.SerializedContextNode
	290, // 350: aiserver.v1.SerializedContextNode.children:type_name -> aiserver.v1.SerializedContextNode
	291, // 351: aiserver.v1.SerializedContextNode.node_snippets:type_name -> aiserver.v1.FileCodeSnippets
	292, // 352: aiserver.v1.FileCodeSnippets.snippets:type_name -> aiserver.v1.CodeSnippet
	649, // 353: aiserver.v1.ChooseCodeReferencesResponse.file:type_name -> aiserver.v1.ChooseCodeReferencesResponse.FileResponse
	650, // 354: aiserver.v1.ChooseCodeReferencesResponse.node:type_name -> aiserver.v1.ChooseCodeReferencesResponse.NodeResponse
	652, // 355: aiserver.v1.ChooseCodeReferencesRequest.file:type_name -> aiserver.v1.ChooseCodeReferencesRequest.FileRequest
	653, // 356: aiserver.v1.ChooseCodeReferencesRequest.node:type_name -> aiserver.v1.ChooseCodeReferencesRequest.NodeRequest
	654, // 357: aiserver.v1.SummarizeWithReferencesResponse.success:type_name -> aiserver.v1.SummarizeWithReferencesResponse.Success
	655, // 358: aiserver.v1.SummarizeWithReferencesResponse.dependency:type_name -> aiserver.v1.SummarizeWithReferencesResponse.Dependency
	299, // 359: aiserver.v1.SetupIndexDependenciesRequest.dependency_resolution_results:type_name -> aiserver.v1.URIResolutionResult
	287, // 360: aiserver.v1.URIResolutionResult.request:type_name -> aiserver.v1.URIResolutionAttempt
	71,  // 361: aiserver.v1.StreamChatDeepContextRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	87,  // 362: aiserver.v1.StreamChatDeepContextRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	88,  // 363: aiserver.v1.StreamChatDeepContextRequest.model_details:type_name -> aiserver.v1.ModelDetails
	304, // 364: aiserver.v1.StreamChatDeepContextRequest.context_results:type_name -> aiserver.v1.SearchRepositoryDeepContextResponse
	305, // 365: aiserver.v1.SearchRepositoryDeepContextResponse.top_nodes:type_name -> aiserver.v1.NodeResult
	306, // 366: aiserver.v1.SearchRepositoryDeepContextResponse.reflections:type_name -> aiserver.v1.ReflectionResult
	656, // 367: aiserver.v1.NodeResult.node:type_name -> aiserver.v1.NodeResult.NodeData
	117, // 368: aiserver.v1.NodeResult.file:type_name -> aiserver.v1.File
	307, // 369: aiserver.v1.ReflectionResult.reflection:type_name -> aiserver.v1.ReflectionData
	310, // 370: aiserver.v1.RegisterCodeReferencesRequest.references:type_name -> aiserver.v1.SymbolActionResults
	288, // 371: aiserver.v1.SymbolActionResults.action:type_name -> aiserver.v1.CodeSymbolWithAction
	311, // 372: aiserver.v1.SymbolActionResults.references:type_name -> aiserver.v1.SymbolActionResultReference
	233, // 373: aiserver.v1.SymbolActionResultReference.range:type_name -> aiserver.v1.SimpleRange
	291, // 374: aiserver.v1.SymbolActionResultReference.reference:type_name -> aiserver.v1.FileCodeSnippets
	291, // 375: aiserver.v1.ExtractPathsRequest.file_code_snippets:type_name -> aiserver.v1.FileCodeSnippets
	288, // 376: aiserver.v1.ExtractPathsResponse.paths:type_name -> aiserver.v1.CodeSymbolWithAction
	101, // 377: aiserver.v1.DocumentationQueryResponse.doc_chunks:type_name -> aiserver.v1.DocumentationChunk
	30,  // 378: aiserver.v1.DocumentationQueryResponse.status:type_name -> aiserver.v1.DocumentationQueryResponse.Status
	319, // 379: aiserver.v1.AvailableDocsResponse.docs:type_name -> aiserver.v1.DocumentationInfo
	320, // 380: aiserver.v1.DocumentationInfo.metadata:type_name -> aiserver.v1.DocumentationMetadata
	31,  // 381: aiserver.v1.ReportFeedbackRequest.feedback_type:type_name -> aiserver.v1.ReportFeedbackRequest.FeedbackType
	32,  // 382: aiserver.v1.ReportBugRequest.bug_type:type_name -> aiserver.v1.ReportBugRequest.BugType
	324, // 383: aiserver.v1.ReportBugRequest.context:type_name -> aiserver.v1.BugContext
	64,  // 384: aiserver.v1.BugContext.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 385: aiserver.v1.BugContext.conversation:type_name -> aiserver.v1.ConversationMessage
	325, // 386: aiserver.v1.BugContext.logs:type_name -> aiserver.v1.LogFile
	152, // 387: aiserver.v1.BugContext.debug_info:type_name -> aiserver.v1.CmdKDebugInfo
	64,  // 388: aiserver.v1.TaskStreamChatContextRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 389: aiserver.v1.TaskStreamChatContextRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 390: aiserver.v1.TaskStreamChatContextRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 391: aiserver.v1.TaskStreamChatContextRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 392: aiserver.v1.TaskStreamChatContextRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 393: aiserver.v1.TaskStreamChatContextRequest.model_details:type_name -> aiserver.v1.ModelDetails
	90,  // 394: aiserver.v1.TaskStreamChatContextRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	330, // 395: aiserver.v1.TaskStreamChatContextRequest.advanced_codebase_context:type_name -> aiserver.v1.AdvancedCodebaseContextOptions
	4,   // 396: aiserver.v1.AdvancedCodebaseContextOptions.reranker:type_name -> aiserver.v1.RerankerAlgorithm
	5,   // 397: aiserver.v1.AdvancedCodebaseContextOptions.rechunker:type_name -> aiserver.v1.RechunkerChoice
	332, // 398: aiserver.v1.TaskStreamChatContextResponseWrapped.real_response:type_name -> aiserver.v1.TaskStreamChatContextResponse
	657, // 399: aiserver.v1.TaskStreamChatContextResponse.output:type_name -> aiserver.v1.TaskStreamChatContextResponse.Output
	658, // 400: aiserver.v1.TaskStreamChatContextResponse.gathering_step:type_name -> aiserver.v1.TaskStreamChatContextResponse.GatheringStep
	659, // 401: aiserver.v1.TaskStreamChatContextResponse.gathering_file:type_name -> aiserver.v1.TaskStreamChatContextResponse.GatheringFile
	660, // 402: aiserver.v1.TaskStreamChatContextResponse.reranking_step:type_name -> aiserver.v1.TaskStreamChatContextResponse.RerankingStep
	661, // 403: aiserver.v1.TaskStreamChatContextResponse.reranking_file:type_name -> aiserver.v1.TaskStreamChatContextResponse.RerankingFile
	662, // 404: aiserver.v1.TaskStreamChatContextResponse.reasoning_step:type_name -> aiserver.v1.TaskStreamChatContextResponse.ReasoningStep
	663, // 405: aiserver.v1.TaskStreamChatContextResponse.reasoning_substep:type_name -> aiserver.v1.TaskStreamChatContextResponse.ReasoningSubstep
	114, // 406: aiserver.v1.RerankerRequest.code_results:type_name -> aiserver.v1.CodeResult
	64,  // 407: aiserver.v1.RerankerRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 408: aiserver.v1.RerankerRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	334, // 409: aiserver.v1.RerankerRequest.api_details:type_name -> aiserver.v1.ApiDetails
	115, // 410: aiserver.v1.RerankerRequest.file_search_results:type_name -> aiserver.v1.FullFileSearchResult
	118, // 411: aiserver.v1.RerankerRequest.code_search_results:type_name -> aiserver.v1.CodeSearchResult
	114, // 412: aiserver.v1.RerankerResponse.results:type_name -> aiserver.v1.CodeResult
	64,  // 413: aiserver.v1.ModelQueryRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 414: aiserver.v1.ModelQueryRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 415: aiserver.v1.ModelQueryRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 416: aiserver.v1.ModelQueryRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 417: aiserver.v1.ModelQueryRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 418: aiserver.v1.ModelQueryRequest.model_details:type_name -> aiserver.v1.ModelDetails
	33,  // 419: aiserver.v1.ModelQueryRequest.query_type:type_name -> aiserver.v1.ModelQueryRequest.QueryType
	86,  // 420: aiserver.v1.ModelQueryRequest.repository_info:type_name -> aiserver.v1.RepositoryInfo
	664, // 421: aiserver.v1.ModelQueryResponse.queries:type_name -> aiserver.v1.ModelQueryResponse.Query
	665, // 422: aiserver.v1.ModelQueryResponseV2.query:type_name -> aiserver.v1.ModelQueryResponseV2.QueryItem
	71,  // 423: aiserver.v1.IntentPredictionRequest.messages:type_name -> aiserver.v1.ConversationMessage
	340, // 424: aiserver.v1.IntentPredictionRequest.context_options:type_name -> aiserver.v1.ContextOptions
	88,  // 425: aiserver.v1.IntentPredictionRequest.model_details:type_name -> aiserver.v1.ModelDetails
	666, // 426: aiserver.v1.ContextOptions.all_documentation:type_name -> aiserver.v1.ContextOptions.AllDocumentation
	667, // 427: aiserver.v1.ContextOptions.current_file_contents:type_name -> aiserver.v1.ContextOptions.CurrentFileContents
	668, // 428: aiserver.v1.ContextOptions.linter_diagnostics:type_name -> aiserver.v1.ContextOptions.LinterDiagnostics
	669, // 429: aiserver.v1.ContextOptions.global_context:type_name -> aiserver.v1.ContextOptions.GlobalContext
	672, // 430: aiserver.v1.IntentPredictionResponse.chosen_documentation:type_name -> aiserver.v1.IntentPredictionResponse.ChosenDocumentation
	673, // 431: aiserver.v1.IntentPredictionResponse.chosen_file_contents:type_name -> aiserver.v1.IntentPredictionResponse.ChosenFileContents
	674, // 432: aiserver.v1.IntentPredictionResponse.chosen_linter_diagnostics:type_name -> aiserver.v1.IntentPredictionResponse.ChosenLinterDiagnostics
	71,  // 433: aiserver.v1.StreamCursorTutorRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	88,  // 434: aiserver.v1.StreamCursorTutorRequest.model_details:type_name -> aiserver.v1.ModelDetails
	88,  // 435: aiserver.v1.GetEffectiveTokenLimitRequest.model_details:type_name -> aiserver.v1.ModelDetails
	64,  // 436: aiserver.v1.StreamCppRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	90,  // 437: aiserver.v1.StreamCppRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	351, // 438: aiserver.v1.StreamCppRequest.context_items:type_name -> aiserver.v1.CppContextItem
	352, // 439: aiserver.v1.StreamCppRequest.file_diff_histories:type_name -> aiserver.v1.CppFileDiffHistory
	352, // 440: aiserver.v1.StreamCppRequest.merged_diff_histories:type_name -> aiserver.v1.CppFileDiffHistory
	353, // 441: aiserver.v1.StreamCppRequest.block_diff_patches:type_name -> aiserver.v1.BlockDiffPatch
	355, // 442: aiserver.v1.StreamCppRequest.parameter_hints:type_name -> aiserver.v1.CppParameterHint
	356, // 443: aiserver.v1.StreamCppRequest.lsp_contexts:type_name -> aiserver.v1.LspSubgraphFullContext
	360, // 444: aiserver.v1.StreamCppRequest.cpp_intent_info:type_name -> aiserver.v1.CppIntentInfo
	361, // 445: aiserver.v1.StreamCppRequest.additional_files:type_name -> aiserver.v1.AdditionalFile
	34,  // 446: aiserver.v1.StreamCppRequest.control_token:type_name -> aiserver.v1.StreamCppRequest.ControlToken
	362, // 447: aiserver.v1.StreamCppRequest.filesync_updates:type_name -> aiserver.v1.FilesyncUpdateWithModelVersion
	675, // 448: aiserver.v1.BlockDiffPatch.start_model_window:type_name -> aiserver.v1.BlockDiffPatch.ModelWindow
	676, // 449: aiserver.v1.BlockDiffPatch.changes:type_name -> aiserver.v1.BlockDiffPatch.Change
	357, // 450: aiserver.v1.LspSubgraphFullContext.positions:type_name -> aiserver.v1.LspSubgraphPosition
	358, // 451: aiserver.v1.LspSubgraphFullContext.context_items:type_name -> aiserver.v1.LspSubgraphContextItem
	359, // 452: aiserver.v1.LspSubgraphContextItem.range:type_name -> aiserver.v1.LspSubgraphRange
	363, // 453: aiserver.v1.FilesyncUpdateWithModelVersion.updates:type_name -> aiserver.v1.SingleUpdateRequest
	233, // 454: aiserver.v1.SingleUpdateRequest.range:type_name -> aiserver.v1.SimpleRange
	79,  // 455: aiserver.v1.StreamCppResponse.range_to_replace:type_name -> aiserver.v1.LineRange
	677, // 456: aiserver.v1.CppConfigResponse.merge_behavior:type_name -> aiserver.v1.CppConfigResponse.MergeBehavior
	35,  // 457: aiserver.v1.CppConfigResponse.heuristics:type_name -> aiserver.v1.CppConfigResponse.Heuristic
	678, // 458: aiserver.v1.CppConfigResponse.import_prediction_config:type_name -> aiserver.v1.CppConfigResponse.ImportPredictionConfig
	352, // 459: aiserver.v1.StreamTerminalAutocompleteRequest.file_diff_histories:type_name -> aiserver.v1.CppFileDiffHistory
	64,  // 460: aiserver.v1.StreamPseudocodeGeneratorRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	376, // 461: aiserver.v1.StreamPseudocodeGeneratorRequest.target:type_name -> aiserver.v1.PseudocodeTarget
	233, // 462: aiserver.v1.PseudocodeTarget.range:type_name -> aiserver.v1.SimpleRange
	376, // 463: aiserver.v1.StreamPseudocodeMapperRequest.target:type_name -> aiserver.v1.PseudocodeTarget
	679, // 464: aiserver.v1.StreamAiLintBugRequest.chunks_to_analyze:type_name -> aiserver.v1.StreamAiLintBugRequest.CodeChunk
	87,  // 465: aiserver.v1.StreamAiLintBugRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	88,  // 466: aiserver.v1.StreamAiLintBugRequest.model_details:type_name -> aiserver.v1.ModelDetails
	381, // 467: aiserver.v1.StreamAiLintBugRequest.dismissed_bugs:type_name -> aiserver.v1.AiLintBug
	381, // 468: aiserver.v1.StreamAiLintBugRequest.active_bugs:type_name -> aiserver.v1.AiLintBug
	384, // 469: aiserver.v1.StreamAiLintBugRequest.lint_rules:type_name -> aiserver.v1.AiLintRule
	680, // 470: aiserver.v1.StreamAiLintBugRequest.clients:type_name -> aiserver.v1.StreamAiLintBugRequest.CodeChunkList
	7,   // 471: aiserver.v1.StreamAiLintBugRequest.force_enable_discriminators:type_name -> aiserver.v1.LintDiscriminator
	7,   // 472: aiserver.v1.StreamAiLintBugRequest.force_disable_discriminators:type_name -> aiserver.v1.LintDiscriminator
	6,   // 473: aiserver.v1.StreamAiLintBugRequest.force_enable_generators:type_name -> aiserver.v1.LintGenerator
	6,   // 474: aiserver.v1.StreamAiLintBugRequest.force_disable_generators:type_name -> aiserver.v1.LintGenerator
	681, // 475: aiserver.v1.StreamAiLintBugRequest.discriminator_options:type_name -> aiserver.v1.StreamAiLintBugRequest.DiscriminatorOptions
	233, // 476: aiserver.v1.AiLintBug.replace_range:type_name -> aiserver.v1.SimpleRange
	233, // 477: aiserver.v1.AiLintBug.reevaluate_range:type_name -> aiserver.v1.SimpleRange
	6,   // 478: aiserver.v1.AiLintBug.generator:type_name -> aiserver.v1.LintGenerator
	382, // 479: aiserver.v1.AiLintBug.discriminator_results:type_name -> aiserver.v1.LintDiscriminatorResult
	383, // 480: aiserver.v1.AiLintBug.logprobs_payload:type_name -> aiserver.v1.LogprobsLintPayload
	7,   // 481: aiserver.v1.LintDiscriminatorResult.discriminator:type_name -> aiserver.v1.LintDiscriminator
	381, // 482: aiserver.v1.StreamAiLintBugResponse.bug:type_name -> aiserver.v1.AiLintBug
	387, // 483: aiserver.v1.StreamAiCursorHelpRequest.messages:type_name -> aiserver.v1.CursorHelpConversationMessage
	88,  // 484: aiserver.v1.StreamAiCursorHelpRequest.model_details:type_name -> aiserver.v1.ModelDetails
	381, // 485: aiserver.v1.LogLinterExplicitUserFeedbackRequest.bug:type_name -> aiserver.v1.AiLintBug
	36,  // 486: aiserver.v1.LogLinterExplicitUserFeedbackRequest.user_feedback:type_name -> aiserver.v1.LogLinterExplicitUserFeedbackRequest.LinterUserFeedback
	683, // 487: aiserver.v1.FixMarkersRequest.markers:type_name -> aiserver.v1.FixMarkersRequest.Marker
	88,  // 488: aiserver.v1.FixMarkersRequest.model_details:type_name -> aiserver.v1.ModelDetails
	694, // 489: aiserver.v1.FixMarkersResponse.changes:type_name -> aiserver.v1.FixMarkersResponse.Change
	88,  // 490: aiserver.v1.StreamPriomptPromptRequest.model_details:type_name -> aiserver.v1.ModelDetails
	64,  // 491: aiserver.v1.StreamLintRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	71,  // 492: aiserver.v1.StreamLintRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	86,  // 493: aiserver.v1.StreamLintRequest.repositories:type_name -> aiserver.v1.RepositoryInfo
	87,  // 494: aiserver.v1.StreamLintRequest.explicit_context:type_name -> aiserver.v1.ExplicitContext
	72,  // 495: aiserver.v1.StreamLintRequest.code_blocks:type_name -> aiserver.v1.CodeBlock
	88,  // 496: aiserver.v1.StreamLintRequest.model_details:type_name -> aiserver.v1.ModelDetails
	88,  // 497: aiserver.v1.AiProjectRequest.model_details:type_name -> aiserver.v1.ModelDetails
	37,  // 498: aiserver.v1.ReportGenerationFeedbackRequest.feedback_type:type_name -> aiserver.v1.ReportGenerationFeedbackRequest.FeedbackType
	409, // 499: aiserver.v1.GetThoughtAnnotationResponse.thought_annotation:type_name -> aiserver.v1.AiThoughtAnnotation
	152, // 500: aiserver.v1.AiThoughtAnnotation.debug_info:type_name -> aiserver.v1.CmdKDebugInfo
	79,  // 501: aiserver.v1.StreamWebCmdKV1Request.selection_range:type_name -> aiserver.v1.LineRange
	88,  // 502: aiserver.v1.StreamWebCmdKV1Request.model_details:type_name -> aiserver.v1.ModelDetails
	81,  // 503: aiserver.v1.StreamWebCmdKV1Request.images:type_name -> aiserver.v1.ImageProto
	162, // 504: aiserver.v1.StreamWebCmdKV1Response.cmd_k_response:type_name -> aiserver.v1.StreamCmdKResponse
	64,  // 505: aiserver.v1.StreamNextCursorPredictionRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	90,  // 506: aiserver.v1.StreamNextCursorPredictionRequest.linter_errors:type_name -> aiserver.v1.LinterErrors
	351, // 507: aiserver.v1.StreamNextCursorPredictionRequest.context_items:type_name -> aiserver.v1.CppContextItem
	352, // 508: aiserver.v1.StreamNextCursorPredictionRequest.file_diff_histories:type_name -> aiserver.v1.CppFileDiffHistory
	352, // 509: aiserver.v1.StreamNextCursorPredictionRequest.merged_diff_histories:type_name -> aiserver.v1.CppFileDiffHistory
	353, // 510: aiserver.v1.StreamNextCursorPredictionRequest.block_diff_patches:type_name -> aiserver.v1.BlockDiffPatch
	355, // 511: aiserver.v1.StreamNextCursorPredictionRequest.parameter_hints:type_name -> aiserver.v1.CppParameterHint
	356, // 512: aiserver.v1.StreamNextCursorPredictionRequest.lsp_contexts:type_name -> aiserver.v1.LspSubgraphFullContext
	360, // 513: aiserver.v1.StreamNextCursorPredictionRequest.cpp_intent_info:type_name -> aiserver.v1.CppIntentInfo
	350, // 514: aiserver.v1.GetCppEditClassificationRequest.cpp_request:type_name -> aiserver.v1.StreamCppRequest
	417, // 515: aiserver.v1.GetCppEditClassificationRequest.suggested_edits:type_name -> aiserver.v1.SuggestedEdit
	233, // 516: aiserver.v1.SuggestedEdit.edit_range:type_name -> aiserver.v1.SimpleRange
	695, // 517: aiserver.v1.GetCppEditClassificationResponse.scored_edits:type_name -> aiserver.v1.GetCppEditClassificationResponse.ScoredEdit
	695, // 518: aiserver.v1.GetCppEditClassificationResponse.noop_edit:type_name -> aiserver.v1.GetCppEditClassificationResponse.ScoredEdit
	352, // 519: aiserver.v1.GetTerminalCompletionRequest.file_diff_histories:type_name -> aiserver.v1.CppFileDiffHistory
	88,  // 520: aiserver.v1.GetTerminalCompletionRequest.model_details:type_name -> aiserver.v1.ModelDetails
	420, // 521: aiserver.v1.GetTerminalCompletionRequest.current_folder_structure:type_name -> aiserver.v1.CurrentFolderFileOrFolder
	117, // 522: aiserver.v1.GetTerminalCompletionRequest.relevant_files:type_name -> aiserver.v1.File
	423, // 523: aiserver.v1.TakeNotesOnCommitDiffRequest.diff:type_name -> aiserver.v1.CommitDiffString
	425, // 524: aiserver.v1.TakeNotesOnCommitDiffResponse.notes:type_name -> aiserver.v1.CommitNoteWithEmbeddings
	428, // 525: aiserver.v1.BulkEmbedResponse.embeddings:type_name -> aiserver.v1.EmbeddingResponse
	430, // 526: aiserver.v1.ContinueChatRequestWithCommitsRequest.commits:type_name -> aiserver.v1.SimpleCommitWithDiff
	64,  // 527: aiserver.v1.BackgroundCmdKEvalRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	233, // 528: aiserver.v1.BackgroundCmdKEvalRequest.selection_range:type_name -> aiserver.v1.SimpleRange
	38,  // 529: aiserver.v1.BackgroundCmdKEvalRequest.experiment:type_name -> aiserver.v1.BackgroundCmdKEvalRequest.Experiment
	697, // 530: aiserver.v1.BackgroundCmdKEvalRequest.proposed_change_history:type_name -> aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange
	95,  // 531: aiserver.v1.BackgroundCmdKEvalRequest.commit_notes:type_name -> aiserver.v1.CommitNote
	72,  // 532: aiserver.v1.BackgroundCmdKEvalRequest.related_code_blocks:type_name -> aiserver.v1.CodeBlock
	64,  // 533: aiserver.v1.BackgroundCmdKRequest.current_file:type_name -> aiserver.v1.CurrentFileInfo
	233, // 534: aiserver.v1.BackgroundCmdKRequest.selection_range:type_name -> aiserver.v1.SimpleRange
	39,  // 535: aiserver.v1.BackgroundCmdKRequest.type:type_name -> aiserver.v1.BackgroundCmdKRequest.Type
	701, // 536: aiserver.v1.BackgroundCmdKRequest.proposed_change_history:type_name -> aiserver.v1.BackgroundCmdKRequest.ProposedChange
	72,  // 537: aiserver.v1.BackgroundCmdKRequest.related_code_blocks:type_name -> aiserver.v1.CodeBlock
	352, // 538: aiserver.v1.BackgroundCmdKRequest.diff_history:type_name -> aiserver.v1.CppFileDiffHistory
	702, // 539: aiserver.v1.BackgroundCmdKRequest.linter_errors:type_name -> aiserver.v1.BackgroundCmdKRequest.Lint
	703, // 540: aiserver.v1.BackgroundCmdKRequest.useful_types:type_name -> aiserver.v1.BackgroundCmdKRequest.UsefulType
	704, // 541: aiserver.v1.BackgroundCmdKRequest.recently_viewed_files:type_name -> aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile
	705, // 542: aiserver.v1.BackgroundCmdKRequest.recent_diffs:type_name -> aiserver.v1.BackgroundCmdKRequest.Diff
	64,  // 543: aiserver.v1.StreamCursorMotionRequest.current_file_info:type_name -> aiserver.v1.CurrentFileInfo
	233, // 544: aiserver.v1.StreamCursorMotionRequest.selection_range:type_name -> aiserver.v1.SimpleRange
	88,  // 545: aiserver.v1.StreamCursorMotionRequest.model_details:type_name -> aiserver.v1.ModelDetails
	64,  // 546: aiserver.v1.CalculateAutoSelectionRequest.current_file_info:type_name -> aiserver.v1.CurrentFileInfo
	67,  // 547: aiserver.v1.CalculateAutoSelectionRequest.cursor_position:type_name -> aiserver.v1.CursorPosition
	233, // 548: aiserver.v1.CalculateAutoSelectionRequest.selection_range:type_name -> aiserver.v1.SimpleRange
	88,  // 549: aiserver.v1.CalculateAutoSelectionRequest.model_details:type_name -> aiserver.v1.ModelDetails
	439, // 550: aiserver.v1.CalculateAutoSelectionRequest.heuristics_selections:type_name -> aiserver.v1.HeuristicsSelection
	40,  // 551: aiserver.v1.HeuristicsSelection.type:type_name -> aiserver.v1.HeuristicsSelection.HeuristicsSelectionType
	441, // 552: aiserver.v1.CalculateAutoSelectionResponse.results:type_name -> aiserver.v1.AutoSelectionResult
	442, // 553: aiserver.v1.AutoSelectionResult.instructions:type_name -> aiserver.v1.AutoSelectionInstructions
	64,  // 554: aiserver.v1.GetAtSymbolSuggestionsRequest.current_file_info:type_name -> aiserver.v1.CurrentFileInfo
	444, // 555: aiserver.v1.GetAtSymbolSuggestionsRequest.at_symbol_dependencies:type_name -> aiserver.v1.AtSymbolDependencyInformation
	445, // 556: aiserver.v1.GetAtSymbolSuggestionsRequest.at_symbol_options:type_name -> aiserver.v1.AtSymbolOption
	88,  // 557: aiserver.v1.GetAtSymbolSuggestionsRequest.model_details:type_name -> aiserver.v1.ModelDetails
	63,  // 558: aiserver.v1.GetRankedContextFromContextBankRequest.chat_request:type_name -> aiserver.v1.GetChatRequest
	449, // 559: aiserver.v1.GetRankedContextFromContextBankRequest.context_to_rank:type_name -> aiserver.v1.ContextToRank
	41,  // 560: aiserver.v1.GetRankedContextFromContextBankRequest.rank_with_option:type_name -> aiserver.v1.GetRankedContextFromContextBankRequest.RankWithOption
	712, // 561: aiserver.v1.ContextToRank.file:type_name -> aiserver.v1.ContextToRank.File
	77,  // 562: aiserver.v1.ContextToRank.working_diff:type_name -> aiserver.v1.GitDiff
	449, // 563: aiserver.v1.GetRankedContextFromContextBankResponse.ranked_context:type_name -> aiserver.v1.ContextToRank
	452, // 564: aiserver.v1.EditHistoryAppendChangesRequest.changes:type_name -> aiserver.v1.ModelChange
	454, // 565: aiserver.v1.EditHistoryAppendChangesRequest.session_events:type_name -> aiserver.v1.CppSessionEvent
	42,  // 566: aiserver.v1.EditHistoryAppendChangesRequest.privacy_mode_status:type_name -> aiserver.v1.EditHistoryAppendChangesRequest.PrivacyModeStatus
	491, // 567: aiserver.v1.EditHistoryAppendChangesRequest.events:type_name -> aiserver.v1.CppHistoryAppendEvent
	354, // 568: aiserver.v1.ModelChange.range:type_name -> aiserver.v1.IRange
	453, // 569: aiserver.v1.ModelChange.cursor_selections:type_name -> aiserver.v1.CursorSelection
	455, // 570: aiserver.v1.CppSessionEvent.accept_event:type_name -> aiserver.v1.CppAcceptEventNew
	458, // 571: aiserver.v1.CppSessionEvent.reject_event:type_name -> aiserver.v1.CppRejectEventNew
	459, // 572: aiserver.v1.CppSessionEvent.manual_trigger_event:type_name -> aiserver.v1.CppManualTriggerEventNew
	460, // 573: aiserver.v1.CppSessionEvent.stopped_tracking_model_event:type_name -> aiserver.v1.CppStoppedTrackingModelEvent
	461, // 574: aiserver.v1.CppSessionEvent.suggest_event:type_name -> aiserver.v1.CppSuggestEvent
	464, // 575: aiserver.v1.CppSessionEvent.linter_error_event:type_name -> aiserver.v1.CppLinterErrorEvent
	465, // 576: aiserver.v1.CppSessionEvent.debounced_cursor_movement_event:type_name -> aiserver.v1.CppDebouncedCursorMovementEvent
	466, // 577: aiserver.v1.CppSessionEvent.editor_changed_event:type_name -> aiserver.v1.CppEditorChangedEvent
	467, // 578: aiserver.v1.CppSessionEvent.copy_event:type_name -> aiserver.v1.CppCopyEvent
	468, // 579: aiserver.v1.CppSessionEvent.quick_action_event:type_name -> aiserver.v1.CppChangeQuickActionEvent
	471, // 580: aiserver.v1.CppSessionEvent.quick_action_fire_event:type_name -> aiserver.v1.CppQuickActionFireEvent
	472, // 581: aiserver.v1.CppSessionEvent.model_opened_event:type_name -> aiserver.v1.ModelOpenedEvent
	473, // 582: aiserver.v1.CppSessionEvent.cmd_k_event:type_name -> aiserver.v1.CmdKEvent
	474, // 583: aiserver.v1.CppSessionEvent.chat_event:type_name -> aiserver.v1.ChatEvent
	475, // 584: aiserver.v1.CppSessionEvent.ai_event:type_name -> aiserver.v1.AiRequestEvent
	476, // 585: aiserver.v1.CppSessionEvent.scroll_event:type_name -> aiserver.v1.ScrollEvent
	477, // 586: aiserver.v1.CppSessionEvent.editor_close_event:type_name -> aiserver.v1.EditorCloseEvent
	478, // 587: aiserver.v1.CppSessionEvent.tab_close_event:type_name -> aiserver.v1.TabCloseEvent
	480, // 588: aiserver.v1.CppSessionEvent.partial_accept_event:type_name -> aiserver.v1.CppPartialAcceptEvent
	482, // 589: aiserver.v1.CppSessionEvent.accept_cursor_prediction_event:type_name -> aiserver.v1.AcceptCursorPredictionEvent
	484, // 590: aiserver.v1.CppSessionEvent.reject_cursor_prediction_event:type_name -> aiserver.v1.RejectCursorPredictionEvent
	485, // 591: aiserver.v1.CppSessionEvent.suggest_cursor_prediction_event:type_name -> aiserver.v1.SuggestCursorPredictionEvent
	486, // 592: aiserver.v1.CppSessionEvent.cpp_trigger_event:type_name -> aiserver.v1.CppTriggerEvent
	487, // 593: aiserver.v1.CppSessionEvent.finished_cpp_generation_event:type_name -> aiserver.v1.FinishedCppGenerationEvent
	488, // 594: aiserver.v1.CppSessionEvent.background_files_event:type_name -> aiserver.v1.BackgroundFilesEvent
	489, // 595: aiserver.v1.CppSessionEvent.terminal_event:type_name -> aiserver.v1.CppTerminalEvent
	490, // 596: aiserver.v1.CppSessionEvent.git_context_event:type_name -> aiserver.v1.CppGitContextEvent
	456, // 597: aiserver.v1.CppAcceptEventNew.cpp_suggestion:type_name -> aiserver.v1.CurrentlyShownCppSuggestion
	457, // 598: aiserver.v1.CppAcceptEventNew.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	354, // 599: aiserver.v1.CurrentlyShownCppSuggestion.range_of_suggestion_in_current_model:type_name -> aiserver.v1.IRange
	456, // 600: aiserver.v1.CppRejectEventNew.cpp_suggestion:type_name -> aiserver.v1.CurrentlyShownCppSuggestion
	457, // 601: aiserver.v1.CppRejectEventNew.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	457, // 602: aiserver.v1.CppManualTriggerEventNew.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	43,  // 603: aiserver.v1.CppStoppedTrackingModelEvent.reason:type_name -> aiserver.v1.CppStoppedTrackingModelEvent.StoppedTrackingModelReason
	456, // 604: aiserver.v1.CppSuggestEvent.cpp_suggestion:type_name -> aiserver.v1.CurrentlyShownCppSuggestion
	457, // 605: aiserver.v1.CppSuggestEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	462, // 606: aiserver.v1.CppSuggestEvent.recoverable_cpp_data:type_name -> aiserver.v1.RecoverableCppData
	354, // 607: aiserver.v1.RecoverableCppData.suggestion_range:type_name -> aiserver.v1.IRange
	463, // 608: aiserver.v1.RecoverableCppData.position:type_name -> aiserver.v1.OneIndexedPosition
	457, // 609: aiserver.v1.CppLinterErrorEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	91,  // 610: aiserver.v1.CppLinterErrorEvent.added_errors:type_name -> aiserver.v1.LinterError
	91,  // 611: aiserver.v1.CppLinterErrorEvent.removed_errors:type_name -> aiserver.v1.LinterError
	91,  // 612: aiserver.v1.CppLinterErrorEvent.errors:type_name -> aiserver.v1.LinterError
	457, // 613: aiserver.v1.CppDebouncedCursorMovementEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	463, // 614: aiserver.v1.CppDebouncedCursorMovementEvent.cursor_position:type_name -> aiserver.v1.OneIndexedPosition
	457, // 615: aiserver.v1.CppEditorChangedEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	463, // 616: aiserver.v1.CppEditorChangedEvent.cursor_position:type_name -> aiserver.v1.OneIndexedPosition
	354, // 617: aiserver.v1.CppEditorChangedEvent.visible_ranges:type_name -> aiserver.v1.IRange
	457, // 618: aiserver.v1.CppChangeQuickActionEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	469, // 619: aiserver.v1.CppChangeQuickActionEvent.added:type_name -> aiserver.v1.CppQuickAction
	469, // 620: aiserver.v1.CppChangeQuickActionEvent.removed:type_name -> aiserver.v1.CppQuickAction
	469, // 621: aiserver.v1.CppChangeQuickActionEvent.actions:type_name -> aiserver.v1.CppQuickAction
	713, // 622: aiserver.v1.CppQuickAction.edits:type_name -> aiserver.v1.CppQuickAction.Edit
	470, // 623: aiserver.v1.CppQuickAction.command:type_name -> aiserver.v1.CppQuickActionCommand
	457, // 624: aiserver.v1.CppQuickActionFireEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	470, // 625: aiserver.v1.CppQuickActionFireEvent.quick_action_command:type_name -> aiserver.v1.CppQuickActionCommand
	469, // 626: aiserver.v1.CppQuickActionFireEvent.quick_action_event:type_name -> aiserver.v1.CppQuickAction
	457, // 627: aiserver.v1.ModelOpenedEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	457, // 628: aiserver.v1.CmdKEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	714, // 629: aiserver.v1.CmdKEvent.submit_prompt:type_name -> aiserver.v1.CmdKEvent.SubmitPrompt
	715, // 630: aiserver.v1.CmdKEvent.end_of_generation:type_name -> aiserver.v1.CmdKEvent.EndOfGeneration
	716, // 631: aiserver.v1.CmdKEvent.interrupt_generation:type_name -> aiserver.v1.CmdKEvent.InterruptGeneration
	717, // 632: aiserver.v1.CmdKEvent.accept_all:type_name -> aiserver.v1.CmdKEvent.AcceptDiffs
	718, // 633: aiserver.v1.CmdKEvent.reject_all:type_name -> aiserver.v1.CmdKEvent.RejectDiffs
	719, // 634: aiserver.v1.CmdKEvent.reject_partial_diff:type_name -> aiserver.v1.CmdKEvent.RejectPartialDiff
	720, // 635: aiserver.v1.CmdKEvent.accept_partial_diff:type_name -> aiserver.v1.CmdKEvent.AcceptPartialDiff
	721, // 636: aiserver.v1.ChatEvent.submit_prompt:type_name -> aiserver.v1.ChatEvent.SubmitPrompt
	722, // 637: aiserver.v1.ChatEvent.end_of_any_generation:type_name -> aiserver.v1.ChatEvent.EndOfAnyGeneration
	723, // 638: aiserver.v1.ChatEvent.end_of_uninterrupted_generation:type_name -> aiserver.v1.ChatEvent.EndOfUninterruptedGeneration
	44,  // 639: aiserver.v1.AiRequestEvent.request_type:type_name -> aiserver.v1.AiRequestEvent.RequestType
	457, // 640: aiserver.v1.ScrollEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	354, // 641: aiserver.v1.ScrollEvent.visible_ranges:type_name -> aiserver.v1.IRange
	479, // 642: aiserver.v1.TabCloseEvent.point_in_time_model:type_name -> aiserver.v1.MaybeDefinedPointInTimeModel
	456, // 643: aiserver.v1.CppPartialAcceptEvent.cpp_suggestion:type_name -> aiserver.v1.CurrentlyShownCppSuggestion
	481, // 644: aiserver.v1.CppPartialAcceptEvent.edit:type_name -> aiserver.v1.Edit
	457, // 645: aiserver.v1.CppPartialAcceptEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	354, // 646: aiserver.v1.Edit.range:type_name -> aiserver.v1.IRange
	483, // 647: aiserver.v1.AcceptCursorPredictionEvent.cursor_prediction:type_name -> aiserver.v1.CursorPrediction
	457, // 648: aiserver.v1.AcceptCursorPredictionEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	45,  // 649: aiserver.v1.CursorPrediction.source:type_name -> aiserver.v1.CursorPrediction.CursorPredictionSource
	483, // 650: aiserver.v1.RejectCursorPredictionEvent.cursor_prediction:type_name -> aiserver.v1.CursorPrediction
	457, // 651: aiserver.v1.RejectCursorPredictionEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	483, // 652: aiserver.v1.SuggestCursorPredictionEvent.cursor_prediction:type_name -> aiserver.v1.CursorPrediction
	457, // 653: aiserver.v1.SuggestCursorPredictionEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	457, // 654: aiserver.v1.FinishedCppGenerationEvent.point_in_time_model:type_name -> aiserver.v1.PointInTimeModel
	462, // 655: aiserver.v1.FinishedCppGenerationEvent.recoverable_cpp_data:type_name -> aiserver.v1.RecoverableCppData
	724, // 656: aiserver.v1.BackgroundFilesEvent.files:type_name -> aiserver.v1.BackgroundFilesEvent.BackgroundFile
	725, // 657: aiserver.v1.CppTerminalEvent.terminal_input:type_name -> aiserver.v1.CppTerminalEvent.TerminalInput
	726, // 658: aiserver.v1.CppTerminalEvent.command_started:type_name -> aiserver.v1.CppTerminalEvent.CommandStarted
	727, // 659: aiserver.v1.CppTerminalEvent.command_finished:type_name -> aiserver.v1.CppTerminalEvent.CommandFinished
	728, // 660: aiserver.v1.CppGitContextEvent.head:type_name -> aiserver.v1.CppGitContextEvent.Head
	729, // 661: aiserver.v1.CppGitContextEvent.refs:type_name -> aiserver.v1.CppGitContextEvent.Ref
	730, // 662: aiserver.v1.CppGitContextEvent.remotes:type_name -> aiserver.v1.CppGitContextEvent.Remote
	731, // 663: aiserver.v1.CppGitContextEvent.submodules:type_name -> aiserver.v1.CppGitContextEvent.Submodule
	732, // 664: aiserver.v1.CppGitContextEvent.rebase_commit:type_name -> aiserver.v1.CppGitContextEvent.Commit
	733, // 665: aiserver.v1.CppGitContextEvent.merge_changes:type_name -> aiserver.v1.CppGitContextEvent.Change
	733, // 666: aiserver.v1.CppGitContextEvent.index_changes:type_name -> aiserver.v1.CppGitContextEvent.Change
	733, // 667: aiserver.v1.CppGitContextEvent.working_tree_changes:type_name -> aiserver.v1.CppGitContextEvent.Change
	452, // 668: aiserver.v1.CppHistoryAppendEvent.model_change:type_name -> aiserver.v1.ModelChange
	492, // 669: aiserver.v1.CppHistoryAppendEvent.accept_event:type_name -> aiserver.v1.CppAcceptEvent
	495, // 670: aiserver.v1.CppHistoryAppendEvent.reject_event:type_name -> aiserver.v1.CppRejectEvent
	496, // 671: aiserver.v1.CppHistoryAppendEvent.manual_trigger_event:type_name -> aiserver.v1.CppManualTriggerEvent
	493, // 672: aiserver.v1.CppAcceptEvent.cpp_suggestion:type_name -> aiserver.v1.CppSuggestion
	354, // 673: aiserver.v1.CppSuggestion.range:type_name -> aiserver.v1.IRange
	494, // 674: aiserver.v1.CppSuggestion.editor_selection_before_peek:type_name -> aiserver.v1.SelectionWithOrientation
	493, // 675: aiserver.v1.CppRejectEvent.cpp_suggestion:type_name -> aiserver.v1.CppSuggestion
	67,  // 676: aiserver.v1.CppManualTriggerEvent.position:type_name -> aiserver.v1.CursorPosition
	500, // 677: aiserver.v1.DevOnlyGetPastRequestIdsResponse.past_requests:type_name -> aiserver.v1.DevOnlyPastRequest
	71,  // 678: aiserver.v1.GetFilesForComposerRequest.conversation:type_name -> aiserver.v1.ConversationMessage
	64,  // 679: aiserver.v1.GetFilesForComposerRequest.files:type_name -> aiserver.v1.CurrentFileInfo
	115, // 680: aiserver.v1.GetFilesForComposerRequest.file_search_results:type_name -> aiserver.v1.FullFileSearchResult
	118, // 681: aiserver.v1.GetFilesForComposerRequest.code_search_results:type_name -> aiserver.v1.CodeSearchResult
	88,  // 682: aiserver.v1.GetFilesForComposerRequest.model_details:type_name -> aiserver.v1.ModelDetails
	71,  // 683: aiserver.v1.NameTabRequest.messages:type_name -> aiserver.v1.ConversationMessage
	86,  // 684: aiserver.v1.FastRepoInitHandshakeRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	46,  // 685: aiserver.v1.FastRepoInitHandshakeResponse.status:type_name -> aiserver.v1.FastRepoInitHandshakeResponse.Status
	86,  // 686: aiserver.v1.SyncMerkleSubtreeRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	512, // 687: aiserver.v1.SyncMerkleSubtreeRequest.local_partial_path:type_name -> aiserver.v1.PartialPathItem
	736, // 688: aiserver.v1.SyncMerkleSubtreeResponse.mismatch:type_name -> aiserver.v1.SyncMerkleSubtreeResponse.Mismatch
	86,  // 689: aiserver.v1.FastUpdateFileRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	512, // 690: aiserver.v1.FastUpdateFileRequest.directory:type_name -> aiserver.v1.PartialPathItem
	737, // 691: aiserver.v1.FastUpdateFileRequest.local_file:type_name -> aiserver.v1.FastUpdateFileRequest.LocalFile
	512, // 692: aiserver.v1.FastUpdateFileRequest.ancestor_spline:type_name -> aiserver.v1.PartialPathItem
	47,  // 693: aiserver.v1.FastUpdateFileRequest.update_type:type_name -> aiserver.v1.FastUpdateFileRequest.UpdateType
	48,  // 694: aiserver.v1.FastUpdateFileResponse.status:type_name -> aiserver.v1.FastUpdateFileResponse.Status
	86,  // 695: aiserver.v1.SearchRepositoryRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	88,  // 696: aiserver.v1.SearchRepositoryRequest.model_details:type_name -> aiserver.v1.ModelDetails
	114, // 697: aiserver.v1.SearchRepositoryResponse.code_results:type_name -> aiserver.v1.CodeResult
	86,  // 698: aiserver.v1.RemoveRepositoryRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	49,  // 699: aiserver.v1.RemoveRepositoryResponse.status:type_name -> aiserver.v1.RemoveRepositoryResponse.Status
	86,  // 700: aiserver.v1.EnsureIndexCreatedRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	738, // 701: aiserver.v1.GetHighLevelFolderDescriptionRequest.readmes:type_name -> aiserver.v1.GetHighLevelFolderDescriptionRequest.Readme
	739, // 702: aiserver.v1.GetEmbeddingsResponse.embeddings:type_name -> aiserver.v1.GetEmbeddingsResponse.Embedding
	86,  // 703: aiserver.v1.RepositoryStatusRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	740, // 704: aiserver.v1.RepositoryStatusResponse.not_found:type_name -> aiserver.v1.RepositoryStatusResponse.NotFound
	741, // 705: aiserver.v1.RepositoryStatusResponse.uploading:type_name -> aiserver.v1.RepositoryStatusResponse.Uploading
	742, // 706: aiserver.v1.RepositoryStatusResponse.syncing:type_name -> aiserver.v1.RepositoryStatusResponse.Syncing
	743, // 707: aiserver.v1.RepositoryStatusResponse.synced:type_name -> aiserver.v1.RepositoryStatusResponse.Synced
	744, // 708: aiserver.v1.RepositoryStatusResponse.not_subscribed:type_name -> aiserver.v1.RepositoryStatusResponse.NotSubscribed
	745, // 709: aiserver.v1.RepositoryStatusResponse.too_big:type_name -> aiserver.v1.RepositoryStatusResponse.TooBig
	746, // 710: aiserver.v1.RepositoryStatusResponse.auth_token_not_found:type_name -> aiserver.v1.RepositoryStatusResponse.AuthTokenNotFound
	747, // 711: aiserver.v1.RepositoryStatusResponse.auth_token_not_authorized:type_name -> aiserver.v1.RepositoryStatusResponse.AuthTokenNotAuthorized
	748, // 712: aiserver.v1.RepositoryStatusResponse.error_uploading:type_name -> aiserver.v1.RepositoryStatusResponse.EmptyMessage
	748, // 713: aiserver.v1.RepositoryStatusResponse.error_syncing:type_name -> aiserver.v1.RepositoryStatusResponse.EmptyMessage
	527, // 714: aiserver.v1.BatchRepositoryStatusRequest.requests:type_name -> aiserver.v1.RepositoryStatusRequest
	528, // 715: aiserver.v1.BatchRepositoryStatusResponse.responses:type_name -> aiserver.v1.RepositoryStatusResponse
	86,  // 716: aiserver.v1.GetUploadLimitsRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	86,  // 717: aiserver.v1.GetNumFilesToSendRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	86,  // 718: aiserver.v1.GetAvailableChunkingStrategiesRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	8,   // 719: aiserver.v1.GetAvailableChunkingStrategiesResponse.chunking_strategies:type_name -> aiserver.v1.ChunkingStrategy
	86,  // 720: aiserver.v1.RepositoriesResponse.repositories:type_name -> aiserver.v1.RepositoryInfo
	50,  // 721: aiserver.v1.LogoutResponse.status:type_name -> aiserver.v1.LogoutResponse.Status
	51,  // 722: aiserver.v1.PollLoginResponse.status:type_name -> aiserver.v1.PollLoginResponse.Status
	52,  // 723: aiserver.v1.UpgradeScopeResponse.status:type_name -> aiserver.v1.UpgradeScopeResponse.Status
	86,  // 724: aiserver.v1.UploadRepositoryRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	53,  // 725: aiserver.v1.UploadRepositoryResponse.status:type_name -> aiserver.v1.UploadRepositoryResponse.Status
	86,  // 726: aiserver.v1.SubscribeRepositoryRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	54,  // 727: aiserver.v1.SubscribeRepositoryResponse.status:type_name -> aiserver.v1.SubscribeRepositoryResponse.Status
	86,  // 728: aiserver.v1.UnsubscribeRepositoryRequest.repository:type_name -> aiserver.v1.RepositoryInfo
	55,  // 729: aiserver.v1.UnsubscribeRepositoryResponse.status:type_name -> aiserver.v1.UnsubscribeRepositoryResponse.Status
	69,  // 730: aiserver.v1.Diagnostic.RelatedInformation.range:type_name -> aiserver.v1.CursorRange
	13,  // 731: aiserver.v1.ConversationMessage.CodeChunk.summarization_strategy:type_name -> aiserver.v1.ConversationMessage.CodeChunk.SummarizationStrategy
	14,  // 732: aiserver.v1.ConversationMessage.CodeChunk.intent:type_name -> aiserver.v1.ConversationMessage.CodeChunk.Intent
	84,  // 733: aiserver.v1.ConversationMessage.Lints.lints:type_name -> aiserver.v1.GetLintsForChangeResponse
	567, // 734: aiserver.v1.ConversationMessage.ToolResult.attached_code_chunks:type_name -> aiserver.v1.ConversationMessage.ToolResult.CodeChunk
	15,  // 735: aiserver.v1.ConversationMessage.ToolResult.CodeChunk.summarization_strategy:type_name -> aiserver.v1.ConversationMessage.ToolResult.CodeChunk.SummarizationStrategy
	16,  // 736: aiserver.v1.ConversationMessage.ToolResult.CodeChunk.intent:type_name -> aiserver.v1.ConversationMessage.ToolResult.CodeChunk.Intent
	69,  // 737: aiserver.v1.CodeBlock.Signatures.ranges:type_name -> aiserver.v1.CursorRange
	79,  // 738: aiserver.v1.SimpleFileDiff.Chunk.old_range:type_name -> aiserver.v1.LineRange
	79,  // 739: aiserver.v1.SimpleFileDiff.Chunk.new_range:type_name -> aiserver.v1.LineRange
	573, // 740: aiserver.v1.GetLintsForChangeResponse.Lint.quick_fixes:type_name -> aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix
	574, // 741: aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.edits:type_name -> aiserver.v1.GetLintsForChangeResponse.Lint.QuickFix.Edit
	69,  // 742: aiserver.v1.LinterError.RelatedInformation.range:type_name -> aiserver.v1.CursorRange
	578, // 743: aiserver.v1.DebugInfo.CallStackFrame.scopes:type_name -> aiserver.v1.DebugInfo.CallStackFrame.Scope
	579, // 744: aiserver.v1.DebugInfo.CallStackFrame.Scope.variables:type_name -> aiserver.v1.DebugInfo.CallStackFrame.Scope.Variable
	98,  // 745: aiserver.v1.ContainerTreeNode.Container.children:type_name -> aiserver.v1.ContainerTreeNode
	583, // 746: aiserver.v1.ContainerTreeNode.Container.references:type_name -> aiserver.v1.ContainerTreeNode.Container.Reference
	584, // 747: aiserver.v1.ContainerTreeNode.Symbol.references:type_name -> aiserver.v1.ContainerTreeNode.Symbol.Reference
	0,   // 748: aiserver.v1.StreamChatResponse.ChunkIdentity.chunk_type:type_name -> aiserver.v1.ChunkType
	66,  // 749: aiserver.v1.GetComposerChatRequest.RedDiff.red_ranges:type_name -> aiserver.v1.SimplestRange
	66,  // 750: aiserver.v1.GetComposerChatRequest.RedDiff.red_ranges_reversed:type_name -> aiserver.v1.SimplestRange
	72,  // 751: aiserver.v1.StreamChatContextRequest.CodeContext.chunks:type_name -> aiserver.v1.CodeBlock
	114, // 752: aiserver.v1.StreamChatContextRequest.CodeContext.scored_chunks:type_name -> aiserver.v1.CodeResult
	114, // 753: aiserver.v1.StreamChatContextResponse.UsedCode.code_results:type_name -> aiserver.v1.CodeResult
	0,   // 754: aiserver.v1.StreamChatContextResponse.ChunkIdentity.chunk_type:type_name -> aiserver.v1.ChunkType
	592, // 755: aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem.start_position:type_name -> aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem.TreeSitterPosition
	592, // 756: aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem.end_position:type_name -> aiserver.v1.IsolatedTreesitterResponse.TreesitterSymbolNameItem.TreeSitterPosition
	597, // 757: aiserver.v1.StreamBranchGeminiRequest.BranchDiff.file_diffs:type_name -> aiserver.v1.StreamBranchGeminiRequest.BranchDiff.FileDiff
	74,  // 758: aiserver.v1.StreamBranchGeminiRequest.BranchDiff.commits:type_name -> aiserver.v1.Commit
	22,  // 759: aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock.context_type:type_name -> aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock.ContextType
	72,  // 760: aiserver.v1.StreamInlineLongCompletionRequest.ContextBlock.blocks:type_name -> aiserver.v1.CodeBlock
	164, // 761: aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse.EditsToUpdate.previous_edits:type_name -> aiserver.v1.SlashEditPreviousEdit
	192, // 762: aiserver.v1.StreamChatToolformerResponse.ToolAction.tool_call:type_name -> aiserver.v1.ToolCall
	632, // 763: aiserver.v1.EditResult.Feedback.related_information:type_name -> aiserver.v1.EditResult.Feedback.RelatedInformation
	634, // 764: aiserver.v1.AddTestResult.Feedback.related_information:type_name -> aiserver.v1.AddTestResult.Feedback.RelatedInformation
	233, // 765: aiserver.v1.SemanticSearchResult.Item.range:type_name -> aiserver.v1.SimpleRange
	73,  // 766: aiserver.v1.SemanticSearchResult.Item.detailed_lines:type_name -> aiserver.v1.DetailedLine
	639, // 767: aiserver.v1.PushAiThoughtRequest.Metadata.accepted_hallucinated_function_event:type_name -> aiserver.v1.PushAiThoughtRequest.Metadata.AcceptedHallucinatedFunctionEvent
	3,   // 768: aiserver.v1.TaskStreamLogResponse.InfoUpdate.task_status:type_name -> aiserver.v1.TaskStatus
	284, // 769: aiserver.v1.ListenExperimentalIndexResponse.ReadyItem.request:type_name -> aiserver.v1.ListenExperimentalIndexRequest
	286, // 770: aiserver.v1.ListenExperimentalIndexResponse.RegisterItem.response:type_name -> aiserver.v1.RegisterFileToIndexResponse
	289, // 771: aiserver.v1.ListenExperimentalIndexResponse.RegisterItem.request:type_name -> aiserver.v1.RegisterFileToIndexRequest
	293, // 772: aiserver.v1.ListenExperimentalIndexResponse.ChooseItem.response:type_name -> aiserver.v1.ChooseCodeReferencesResponse
	294, // 773: aiserver.v1.ListenExperimentalIndexResponse.ChooseItem.request:type_name -> aiserver.v1.ChooseCodeReferencesRequest
	295, // 774: aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem.response:type_name -> aiserver.v1.SummarizeWithReferencesResponse
	296, // 775: aiserver.v1.ListenExperimentalIndexResponse.SummarizeItem.request:type_name -> aiserver.v1.SummarizeWithReferencesRequest
	289, // 776: aiserver.v1.ListenExperimentalIndexResponse.ErrorItem.register:type_name -> aiserver.v1.RegisterFileToIndexRequest
	294, // 777: aiserver.v1.ListenExperimentalIndexResponse.ErrorItem.choose:type_name -> aiserver.v1.ChooseCodeReferencesRequest
	296, // 778: aiserver.v1.ListenExperimentalIndexResponse.ErrorItem.summarize:type_name -> aiserver.v1.SummarizeWithReferencesRequest
	651, // 779: aiserver.v1.ChooseCodeReferencesResponse.FileResponse.node_responses:type_name -> aiserver.v1.ChooseCodeReferencesResponse.FileResponse.NodeResponse
	288, // 780: aiserver.v1.ChooseCodeReferencesResponse.NodeResponse.actions:type_name -> aiserver.v1.CodeSymbolWithAction
	288, // 781: aiserver.v1.ChooseCodeReferencesResponse.FileResponse.NodeResponse.actions:type_name -> aiserver.v1.CodeSymbolWithAction
	233, // 782: aiserver.v1.TaskStreamChatContextResponse.GatheringFile.range:type_name -> aiserver.v1.SimpleRange
	233, // 783: aiserver.v1.TaskStreamChatContextResponse.RerankingFile.range:type_name -> aiserver.v1.SimpleRange
	670, // 784: aiserver.v1.ContextOptions.AllDocumentation.available_docs:type_name -> aiserver.v1.ContextOptions.AllDocumentation.Documentation
	67,  // 785: aiserver.v1.ContextOptions.CurrentFileContents.cursor_position:type_name -> aiserver.v1.CursorPosition
	68,  // 786: aiserver.v1.ContextOptions.CurrentFileContents.dataframes:type_name -> aiserver.v1.DataframeInfo
	69,  // 787: aiserver.v1.ContextOptions.CurrentFileContents.selection:type_name -> aiserver.v1.CursorRange
	671, // 788: aiserver.v1.ContextOptions.LinterDiagnostics.diagnostics:type_name -> aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic
	69,  // 789: aiserver.v1.ContextOptions.LinterDiagnostics.Diagnostic.range:type_name -> aiserver.v1.CursorRange
	354, // 790: aiserver.v1.BlockDiffPatch.Change.range:type_name -> aiserver.v1.IRange
	682, // 791: aiserver.v1.StreamAiLintBugRequest.CodeChunkList.chunks:type_name -> aiserver.v1.StreamAiLintBugRequest.CodeChunkList.CodeChunk
	684, // 792: aiserver.v1.FixMarkersRequest.Marker.related_information:type_name -> aiserver.v1.FixMarkersRequest.Marker.RelatedInformation
	685, // 793: aiserver.v1.FixMarkersRequest.Marker.context_ranges:type_name -> aiserver.v1.FixMarkersRequest.Marker.ContextRange
	686, // 794: aiserver.v1.FixMarkersRequest.Marker.ancestor_type_definitions:type_name -> aiserver.v1.FixMarkersRequest.Marker.AncestorTypeDefinition
	687, // 795: aiserver.v1.FixMarkersRequest.Marker.inserted_symbol_types:type_name -> aiserver.v1.FixMarkersRequest.Marker.InsertedSymbolType
	688, // 796: aiserver.v1.FixMarkersRequest.Marker.quick_fixes:type_name -> aiserver.v1.FixMarkersRequest.Marker.QuickFix
	689, // 797: aiserver.v1.FixMarkersRequest.Marker.class_information:type_name -> aiserver.v1.FixMarkersRequest.Marker.ClassInformation
	690, // 798: aiserver.v1.FixMarkersRequest.Marker.function_signatures:type_name -> aiserver.v1.FixMarkersRequest.Marker.FunctionSignature
	691, // 799: aiserver.v1.FixMarkersRequest.Marker.QuickFix.edits:type_name -> aiserver.v1.FixMarkersRequest.Marker.QuickFix.Edit
	692, // 800: aiserver.v1.FixMarkersRequest.Marker.ClassInformation.constructors:type_name -> aiserver.v1.FixMarkersRequest.Marker.ClassInformation.Constructor
	693, // 801: aiserver.v1.FixMarkersRequest.Marker.FunctionSignature.parameters:type_name -> aiserver.v1.FixMarkersRequest.Marker.FunctionSignature.FunctionParameter
	417, // 802: aiserver.v1.GetCppEditClassificationResponse.ScoredEdit.edit:type_name -> aiserver.v1.SuggestedEdit
	696, // 803: aiserver.v1.GetCppEditClassificationResponse.ScoredEdit.log_probs:type_name -> aiserver.v1.GetCppEditClassificationResponse.ScoredEdit.LogProbs
	698, // 804: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.linter_errors:type_name -> aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint
	699, // 805: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint.quick_fixes:type_name -> aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint.QuickFix
	700, // 806: aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint.QuickFix.edits:type_name -> aiserver.v1.BackgroundCmdKEvalRequest.ProposedChange.Lint.QuickFix.Edit
	706, // 807: aiserver.v1.BackgroundCmdKRequest.ProposedChange.linter_errors:type_name -> aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint
	709, // 808: aiserver.v1.BackgroundCmdKRequest.Lint.quick_fixes:type_name -> aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix
	711, // 809: aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile.visible_ranges:type_name -> aiserver.v1.BackgroundCmdKRequest.RecentlyViewedFile.VisibleRange
	707, // 810: aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint.quick_fixes:type_name -> aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint.QuickFix
	708, // 811: aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint.QuickFix.edits:type_name -> aiserver.v1.BackgroundCmdKRequest.ProposedChange.Lint.QuickFix.Edit
	710, // 812: aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix.edits:type_name -> aiserver.v1.BackgroundCmdKRequest.Lint.QuickFix.Edit
	354, // 813: aiserver.v1.CppQuickAction.Edit.range:type_name -> aiserver.v1.IRange
	354, // 814: aiserver.v1.CmdKEvent.SubmitPrompt.original_range:type_name -> aiserver.v1.IRange
	354, // 815: aiserver.v1.CmdKEvent.RejectPartialDiff.green_range:type_name -> aiserver.v1.IRange
	354, // 816: aiserver.v1.CmdKEvent.AcceptPartialDiff.green_range:type_name -> aiserver.v1.IRange
	734, // 817: aiserver.v1.CppGitContextEvent.Head.upstream_ref:type_name -> aiserver.v1.CppGitContextEvent.Head.UpstreamRef
	735, // 818: aiserver.v1.CppGitContextEvent.Commit.short_stat:type_name -> aiserver.v1.CppGitContextEvent.Commit.CommitShortStat
	512, // 819: aiserver.v1.SyncMerkleSubtreeResponse.Mismatch.children:type_name -> aiserver.v1.PartialPathItem
	117, // 820: aiserver.v1.FastUpdateFileRequest.LocalFile.file:type_name -> aiserver.v1.File
	56,  // 821: aiserver.v1.AiService.HealthCheck:input_type -> aiserver.v1.HealthCheckRequest
	56,  // 822: aiserver.v1.AiService.TimeLeftHealthCheck:input_type -> aiserver.v1.HealthCheckRequest
	59,  // 823: aiserver.v1.AiService.ThrowErrorCheck:input_type -> aiserver.v1.ThrowErrorCheckRequest
	61,  // 824: aiserver.v1.AiService.AvailableModels:input_type -> aiserver.v1.AvailableModelsRequest
	63,  // 825: aiserver.v1.AiService.StreamChatTryReallyHard:input_type -> aiserver.v1.GetChatRequest
	107, // 826: aiserver.v1.AiService.RerankDocuments:input_type -> aiserver.v1.RerankDocumentsRequest
	111, // 827: aiserver.v1.AiService.StreamComposer:input_type -> aiserver.v1.GetComposerChatRequest
	113, // 828: aiserver.v1.AiService.StreamComposerContext:input_type -> aiserver.v1.StreamChatContextRequest
	111, // 829: aiserver.v1.AiService.WarmComposerCache:input_type -> aiserver.v1.GetComposerChatRequest
	121, // 830: aiserver.v1.AiService.GetChatTitle:input_type -> aiserver.v1.GetChatTitleRequest
	123, // 831: aiserver.v1.AiService.GetCompletion:input_type -> aiserver.v1.GetCompletionRequest
	127, // 832: aiserver.v1.AiService.GetSearch:input_type -> aiserver.v1.GetSearchRequest
	130, // 833: aiserver.v1.AiService.StreamInlineEdits:input_type -> aiserver.v1.StreamInlineEditsRequest
	63,  // 834: aiserver.v1.AiService.SummarizeConversation:input_type -> aiserver.v1.GetChatRequest
	133, // 835: aiserver.v1.AiService.IsolatedTreesitter:input_type -> aiserver.v1.IsolatedTreesitterRequest
	135, // 836: aiserver.v1.AiService.GetSimplePrompt:input_type -> aiserver.v1.GetSimplePromptRequest
	63,  // 837: aiserver.v1.AiService.CheckLongFilesFit:input_type -> aiserver.v1.GetChatRequest
	138, // 838: aiserver.v1.AiService.GetEvaluationPrompt:input_type -> aiserver.v1.GetEvaluationPromptRequest
	140, // 839: aiserver.v1.AiService.GetUserInfo:input_type -> aiserver.v1.GetUserInfoRequest
	143, // 840: aiserver.v1.AiService.ClearAndRedoEntireBucket:input_type -> aiserver.v1.ClearAndRedoEntireBucketRequest
	145, // 841: aiserver.v1.AiService.StreamBranchGemini:input_type -> aiserver.v1.StreamBranchGeminiRequest
	147, // 842: aiserver.v1.AiService.StreamBranchFileSelections:input_type -> aiserver.v1.StreamBranchFileSelectionsRequest
	149, // 843: aiserver.v1.AiService.StreamBackgroundEdit:input_type -> aiserver.v1.StreamBackgroundEditRequest
	150, // 844: aiserver.v1.AiService.StreamGPTFourEdit:input_type -> aiserver.v1.StreamGPTFourEditRequest
	63,  // 845: aiserver.v1.AiService.StreamChat:input_type -> aiserver.v1.GetChatRequest
	63,  // 846: aiserver.v1.AiService.StreamChatWeb:input_type -> aiserver.v1.GetChatRequest
	151, // 847: aiserver.v1.AiService.StreamEdit:input_type -> aiserver.v1.StreamEditRequest
	154, // 848: aiserver.v1.AiService.PreloadEdit:input_type -> aiserver.v1.PreloadEditRequest
	156, // 849: aiserver.v1.AiService.StreamFastEdit:input_type -> aiserver.v1.StreamFastEditRequest
	158, // 850: aiserver.v1.AiService.StreamGenerate:input_type -> aiserver.v1.StreamGenerateRequest
	159, // 851: aiserver.v1.AiService.StreamInlineLongCompletion:input_type -> aiserver.v1.StreamInlineLongCompletionRequest
	160, // 852: aiserver.v1.AiService.SlashEdit:input_type -> aiserver.v1.SlashEditRequest
	163, // 853: aiserver.v1.AiService.SlashEditFollowUpWithPreviousEdits:input_type -> aiserver.v1.SlashEditFollowUpWithPreviousEditsRequest
	166, // 854: aiserver.v1.AiService.StreamAiPreviews:input_type -> aiserver.v1.StreamAiPreviewsRequest
	173, // 855: aiserver.v1.AiService.ShouldTurnOnCppOnboarding:input_type -> aiserver.v1.ShouldTurnOnCppOnboardingRequest
	175, // 856: aiserver.v1.AiService.StreamReview:input_type -> aiserver.v1.ReviewRequest
	178, // 857: aiserver.v1.AiService.StreamReviewChat:input_type -> aiserver.v1.ReviewChatRequest
	181, // 858: aiserver.v1.AiService.CheckQueuePosition:input_type -> aiserver.v1.CheckQueuePositionRequest
	184, // 859: aiserver.v1.AiService.CheckUsageBasedPrice:input_type -> aiserver.v1.CheckUsageBasedPriceRequest
	186, // 860: aiserver.v1.AiService.DoThisForMeCheck:input_type -> aiserver.v1.DoThisForMeCheckRequest
	188, // 861: aiserver.v1.AiService.StreamDoThisForMe:input_type -> aiserver.v1.DoThisForMeRequest
	63,  // 862: aiserver.v1.AiService.StreamChatToolformer:input_type -> aiserver.v1.GetChatRequest
	214, // 863: aiserver.v1.AiService.StreamChatToolformerContinue:input_type -> aiserver.v1.StreamChatToolformerContinueRequest
	241, // 864: aiserver.v1.AiService.PushAiThought:input_type -> aiserver.v1.PushAiThoughtRequest
	243, // 865: aiserver.v1.AiService.CheckDoableAsTask:input_type -> aiserver.v1.CheckDoableAsTaskRequest
	245, // 866: aiserver.v1.AiService.ReportGroundTruthCandidate:input_type -> aiserver.v1.ReportGroundTruthCandidateRequest
	247, // 867: aiserver.v1.AiService.ReportCmdKFate:input_type -> aiserver.v1.ReportCmdKFateRequest
	249, // 868: aiserver.v1.AiService.ShowWelcomeScreen:input_type -> aiserver.v1.ShowWelcomeScreenRequest
	251, // 869: aiserver.v1.AiService.InterfaceAgentInit:input_type -> aiserver.v1.InterfaceAgentInitRequest
	254, // 870: aiserver.v1.AiService.StreamInterfaceAgentStatus:input_type -> aiserver.v1.StreamInterfaceAgentStatusRequest
	257, // 871: aiserver.v1.AiService.TaskGetInterfaceAgentStatus:input_type -> aiserver.v1.TaskGetInterfaceAgentStatusRequest
	260, // 872: aiserver.v1.AiService.TaskInit:input_type -> aiserver.v1.TaskInitRequest
	263, // 873: aiserver.v1.AiService.TaskPause:input_type -> aiserver.v1.TaskPauseRequest
	265, // 874: aiserver.v1.AiService.TaskInfo:input_type -> aiserver.v1.TaskInfoRequest
	267, // 875: aiserver.v1.AiService.TaskStreamLog:input_type -> aiserver.v1.TaskStreamLogRequest
	275, // 876: aiserver.v1.AiService.TaskSendMessage:input_type -> aiserver.v1.TaskSendMessageRequest
	277, // 877: aiserver.v1.AiService.TaskProvideResult:input_type -> aiserver.v1.TaskProvideResultRequest
	279, // 878: aiserver.v1.AiService.CreateExperimentalIndex:input_type -> aiserver.v1.CreateExperimentalIndexRequest
	281, // 879: aiserver.v1.AiService.ListExperimentalIndexFiles:input_type -> aiserver.v1.ListExperimentalIndexFilesRequest
	284, // 880: aiserver.v1.AiService.ListenExperimentalIndex:input_type -> aiserver.v1.ListenExperimentalIndexRequest
	289, // 881: aiserver.v1.AiService.RegisterFileToIndex:input_type -> aiserver.v1.RegisterFileToIndexRequest
	298, // 882: aiserver.v1.AiService.SetupIndexDependencies:input_type -> aiserver.v1.SetupIndexDependenciesRequest
	301, // 883: aiserver.v1.AiService.ComputeIndexTopoSort:input_type -> aiserver.v1.ComputeIndexTopoSortRequest
	303, // 884: aiserver.v1.AiService.StreamChatDeepContext:input_type -> aiserver.v1.StreamChatDeepContextRequest
	294, // 885: aiserver.v1.AiService.ChooseCodeReferences:input_type -> aiserver.v1.ChooseCodeReferencesRequest
	309, // 886: aiserver.v1.AiService.RegisterCodeReferences:input_type -> aiserver.v1.RegisterCodeReferencesRequest
	313, // 887: aiserver.v1.AiService.ExtractPaths:input_type -> aiserver.v1.ExtractPathsRequest
	296, // 888: aiserver.v1.AiService.SummarizeWithReferences:input_type -> aiserver.v1.SummarizeWithReferencesRequest
	315, // 889: aiserver.v1.AiService.DocumentationQuery:input_type -> aiserver.v1.DocumentationQueryRequest
	317, // 890: aiserver.v1.AiService.AvailableDocs:input_type -> aiserver.v1.AvailableDocsRequest
	321, // 891: aiserver.v1.AiService.ReportFeedback:input_type -> aiserver.v1.ReportFeedbackRequest
	323, // 892: aiserver.v1.AiService.ReportBug:input_type -> aiserver.v1.ReportBugRequest
	113, // 893: aiserver.v1.AiService.StreamChatContext:input_type -> aiserver.v1.StreamChatContextRequest
	327, // 894: aiserver.v1.AiService.GenerateTldr:input_type -> aiserver.v1.GenerateTldrRequest
	329, // 895: aiserver.v1.AiService.TaskStreamChatContext:input_type -> aiserver.v1.TaskStreamChatContextRequest
	333, // 896: aiserver.v1.AiService.RerankResults:input_type -> aiserver.v1.RerankerRequest
	336, // 897: aiserver.v1.AiService.ModelQuery:input_type -> aiserver.v1.ModelQueryRequest
	336, // 898: aiserver.v1.AiService.ModelQueryV2:input_type -> aiserver.v1.ModelQueryRequest
	339, // 899: aiserver.v1.AiService.IntentPrediction:input_type -> aiserver.v1.IntentPredictionRequest
	342, // 900: aiserver.v1.AiService.StreamCursorTutor:input_type -> aiserver.v1.StreamCursorTutorRequest
	344, // 901: aiserver.v1.AiService.CheckFeatureStatus:input_type -> aiserver.v1.CheckFeatureStatusRequest
	346, // 902: aiserver.v1.AiService.GetEffectiveTokenLimit:input_type -> aiserver.v1.GetEffectiveTokenLimitRequest
	348, // 903: aiserver.v1.AiService.GetContextScores:input_type -> aiserver.v1.ContextScoresRequest
	350, // 904: aiserver.v1.AiService.StreamCpp:input_type -> aiserver.v1.StreamCppRequest
	365, // 905: aiserver.v1.AiService.CppConfig:input_type -> aiserver.v1.CppConfigRequest
	367, // 906: aiserver.v1.AiService.CppEditHistoryStatus:input_type -> aiserver.v1.CppEditHistoryStatusRequest
	369, // 907: aiserver.v1.AiService.CppAppend:input_type -> aiserver.v1.CppAppendRequest
	371, // 908: aiserver.v1.AiService.CheckNumberConfig:input_type -> aiserver.v1.CheckNumberConfigRequest
	373, // 909: aiserver.v1.AiService.StreamTerminalAutocomplete:input_type -> aiserver.v1.StreamTerminalAutocompleteRequest
	375, // 910: aiserver.v1.AiService.StreamPseudocodeGenerator:input_type -> aiserver.v1.StreamPseudocodeGeneratorRequest
	378, // 911: aiserver.v1.AiService.StreamPseudocodeMapper:input_type -> aiserver.v1.StreamPseudocodeMapperRequest
	380, // 912: aiserver.v1.AiService.StreamAiLintBug:input_type -> aiserver.v1.StreamAiLintBugRequest
	386, // 913: aiserver.v1.AiService.StreamAiCursorHelp:input_type -> aiserver.v1.StreamAiCursorHelpRequest
	389, // 914: aiserver.v1.AiService.LogUserLintReply:input_type -> aiserver.v1.LogUserLintReplyRequest
	391, // 915: aiserver.v1.AiService.LogLinterExplicitUserFeedback:input_type -> aiserver.v1.LogLinterExplicitUserFeedbackRequest
	393, // 916: aiserver.v1.AiService.StreamFixMarkers:input_type -> aiserver.v1.FixMarkersRequest
	395, // 917: aiserver.v1.AiService.ReportInlineAction:input_type -> aiserver.v1.ReportInlineActionRequest
	397, // 918: aiserver.v1.AiService.StreamPriomptPrompt:input_type -> aiserver.v1.StreamPriomptPromptRequest
	399, // 919: aiserver.v1.AiService.StreamLint:input_type -> aiserver.v1.StreamLintRequest
	400, // 920: aiserver.v1.AiService.StreamNewLintRule:input_type -> aiserver.v1.StreamNewRuleRequest
	401, // 921: aiserver.v1.AiService.AiProject:input_type -> aiserver.v1.AiProjectRequest
	403, // 922: aiserver.v1.AiService.ToCamelCase:input_type -> aiserver.v1.ToCamelCaseRequest
	405, // 923: aiserver.v1.AiService.ReportGenerationFeedback:input_type -> aiserver.v1.ReportGenerationFeedbackRequest
	407, // 924: aiserver.v1.AiService.GetThoughtAnnotation:input_type -> aiserver.v1.GetThoughtAnnotationRequest
	410, // 925: aiserver.v1.AiService.StreamWebCmdKV1:input_type -> aiserver.v1.StreamWebCmdKV1Request
	412, // 926: aiserver.v1.AiService.StreamNextCursorPrediction:input_type -> aiserver.v1.StreamNextCursorPredictionRequest
	414, // 927: aiserver.v1.AiService.IsCursorPredictionEnabled:input_type -> aiserver.v1.IsCursorPredictionEnabledRequest
	416, // 928: aiserver.v1.AiService.GetCppEditClassification:input_type -> aiserver.v1.GetCppEditClassificationRequest
	419, // 929: aiserver.v1.AiService.GetTerminalCompletion:input_type -> aiserver.v1.GetTerminalCompletionRequest
	422, // 930: aiserver.v1.AiService.TakeNotesOnCommitDiff:input_type -> aiserver.v1.TakeNotesOnCommitDiffRequest
	426, // 931: aiserver.v1.AiService.BulkEmbed:input_type -> aiserver.v1.BulkEmbedRequest
	429, // 932: aiserver.v1.AiService.ContinueChatRequestWithCommits:input_type -> aiserver.v1.ContinueChatRequestWithCommitsRequest
	432, // 933: aiserver.v1.AiService.BackgroundCmdKEval:input_type -> aiserver.v1.BackgroundCmdKEvalRequest
	434, // 934: aiserver.v1.AiService.BackgroundCmdK:input_type -> aiserver.v1.BackgroundCmdKRequest
	436, // 935: aiserver.v1.AiService.StreamCursorMotion:input_type -> aiserver.v1.StreamCursorMotionRequest
	438, // 936: aiserver.v1.AiService.CalculateAutoSelection:input_type -> aiserver.v1.CalculateAutoSelectionRequest
	443, // 937: aiserver.v1.AiService.GetAtSymbolSuggestions:input_type -> aiserver.v1.GetAtSymbolSuggestionsRequest
	63,  // 938: aiserver.v1.AiService.GetCodebaseQuestions:input_type -> aiserver.v1.GetChatRequest
	448, // 939: aiserver.v1.AiService.GetRankedContextFromContextBank:input_type -> aiserver.v1.GetRankedContextFromContextBankRequest
	451, // 940: aiserver.v1.AiService.CppEditHistoryAppend:input_type -> aiserver.v1.EditHistoryAppendChangesRequest
	498, // 941: aiserver.v1.AiService.DevOnlyGetPastRequestIds:input_type -> aiserver.v1.DevOnlyGetPastRequestIdsRequest
	501, // 942: aiserver.v1.AiService.GetFilesForComposer:input_type -> aiserver.v1.GetFilesForComposerRequest
	503, // 943: aiserver.v1.AiService.TryParseTypeScriptTreeSitter:input_type -> aiserver.v1.TryParseTypeScriptTreeSitterRequest
	505, // 944: aiserver.v1.AiService.NameTab:input_type -> aiserver.v1.NameTabRequest
	507, // 945: aiserver.v1.AiService.TestModelStatus:input_type -> aiserver.v1.TestModelStatusRequest
	509, // 946: aiserver.v1.RepositoryService.FastRepoInitHandshake:input_type -> aiserver.v1.FastRepoInitHandshakeRequest
	511, // 947: aiserver.v1.RepositoryService.SyncMerkleSubtree:input_type -> aiserver.v1.SyncMerkleSubtreeRequest
	514, // 948: aiserver.v1.RepositoryService.FastUpdateFile:input_type -> aiserver.v1.FastUpdateFileRequest
	516, // 949: aiserver.v1.RepositoryService.SearchRepositoryV2:input_type -> aiserver.v1.SearchRepositoryRequest
	518, // 950: aiserver.v1.RepositoryService.RemoveRepositoryV2:input_type -> aiserver.v1.RemoveRepositoryRequest
	520, // 951: aiserver.v1.RepositoryService.EnsureIndexCreated:input_type -> aiserver.v1.EnsureIndexCreatedRequest
	522, // 952: aiserver.v1.RepositoryService.GetHighLevelFolderDescription:input_type -> aiserver.v1.GetHighLevelFolderDescriptionRequest
	524, // 953: aiserver.v1.RepositoryService.GetEmbeddings:input_type -> aiserver.v1.GetEmbeddingsRequest
	526, // 954: aiserver.v1.RepositoryService.SearchRepositoryDeepContext:input_type -> aiserver.v1.SearchRepositoryDeepContextRequest
	527, // 955: aiserver.v1.RepositoryService.RepositoryStatus:input_type -> aiserver.v1.RepositoryStatusRequest
	529, // 956: aiserver.v1.RepositoryService.BatchRepositoryStatus:input_type -> aiserver.v1.BatchRepositoryStatusRequest
	516, // 957: aiserver.v1.RepositoryService.SearchRepository:input_type -> aiserver.v1.SearchRepositoryRequest
	518, // 958: aiserver.v1.RepositoryService.RemoveRepository:input_type -> aiserver.v1.RemoveRepositoryRequest
	531, // 959: aiserver.v1.RepositoryService.GetUploadLimits:input_type -> aiserver.v1.GetUploadLimitsRequest
	533, // 960: aiserver.v1.RepositoryService.GetNumFilesToSend:input_type -> aiserver.v1.GetNumFilesToSendRequest
	535, // 961: aiserver.v1.RepositoryService.GetAvailableChunkingStrategies:input_type -> aiserver.v1.GetAvailableChunkingStrategiesRequest
	537, // 962: aiserver.v1.RepositoryService.AdminRemoveRepository:input_type -> aiserver.v1.AdminRemoveRepositoryRequest
	539, // 963: aiserver.v1.RepositoryService.GetRepositories:input_type -> aiserver.v1.RepositoriesRequest
	541, // 964: aiserver.v1.RepositoryService.LoginUser:input_type -> aiserver.v1.LoginRequest
	543, // 965: aiserver.v1.RepositoryService.LogoutUser:input_type -> aiserver.v1.LogoutRequest
	545, // 966: aiserver.v1.RepositoryService.IsLoggedIn:input_type -> aiserver.v1.IsLoggedInRequest
	547, // 967: aiserver.v1.RepositoryService.PollLoggedIn:input_type -> aiserver.v1.PollLoginRequest
	549, // 968: aiserver.v1.RepositoryService.UpgradeScope:input_type -> aiserver.v1.UpgradeScopeRequest
	551, // 969: aiserver.v1.RepositoryService.SyncRepository:input_type -> aiserver.v1.SyncRepositoryRequest
	553, // 970: aiserver.v1.RepositoryService.UploadRepository:input_type -> aiserver.v1.UploadRepositoryRequest
	555, // 971: aiserver.v1.RepositoryService.SubscribeRepository:input_type -> aiserver.v1.SubscribeRepositoryRequest
	557, // 972: aiserver.v1.RepositoryService.UnsubscribeRepository:input_type -> aiserver.v1.UnsubscribeRepositoryRequest
	57,  // 973: aiserver.v1.AiService.HealthCheck:output_type -> aiserver.v1.HealthCheckResponse
	58,  // 974: aiserver.v1.AiService.TimeLeftHealthCheck:output_type -> aiserver.v1.TimeLeftHealthCheckResponse
	60,  // 975: aiserver.v1.AiService.ThrowErrorCheck:output_type -> aiserver.v1.ThrowErrorCheckResponse
	62,  // 976: aiserver.v1.AiService.AvailableModels:output_type -> aiserver.v1.AvailableModelsResponse
	99,  // 977: aiserver.v1.AiService.StreamChatTryReallyHard:output_type -> aiserver.v1.StreamChatResponse
	109, // 978: aiserver.v1.AiService.RerankDocuments:output_type -> aiserver.v1.RerankDocumentsResponse
	99,  // 979: aiserver.v1.AiService.StreamComposer:output_type -> aiserver.v1.StreamChatResponse
	119, // 980: aiserver.v1.AiService.StreamComposerContext:output_type -> aiserver.v1.StreamChatContextResponse
	120, // 981: aiserver.v1.AiService.WarmComposerCache:output_type -> aiserver.v1.WarmComposerCacheResponse
	122, // 982: aiserver.v1.AiService.GetChatTitle:output_type -> aiserver.v1.GetChatTitleResponse
	126, // 983: aiserver.v1.AiService.GetCompletion:output_type -> aiserver.v1.GetCompletionResponse
	128, // 984: aiserver.v1.AiService.GetSearch:output_type -> aiserver.v1.GetSearchResponse
	131, // 985: aiserver.v1.AiService.StreamInlineEdits:output_type -> aiserver.v1.StreamInlineEditsResponse
	132, // 986: aiserver.v1.AiService.SummarizeConversation:output_type -> aiserver.v1.SummarizeConversationResponse
	134, // 987: aiserver.v1.AiService.IsolatedTreesitter:output_type -> aiserver.v1.IsolatedTreesitterResponse
	136, // 988: aiserver.v1.AiService.GetSimplePrompt:output_type -> aiserver.v1.GetSimplePromptResponse
	137, // 989: aiserver.v1.AiService.CheckLongFilesFit:output_type -> aiserver.v1.CheckLongFilesFitResponse
	139, // 990: aiserver.v1.AiService.GetEvaluationPrompt:output_type -> aiserver.v1.GetEvaluationPromptResponse
	141, // 991: aiserver.v1.AiService.GetUserInfo:output_type -> aiserver.v1.GetUserInfoResponse
	144, // 992: aiserver.v1.AiService.ClearAndRedoEntireBucket:output_type -> aiserver.v1.ClearAndRedoEntireBucketResponse
	146, // 993: aiserver.v1.AiService.StreamBranchGemini:output_type -> aiserver.v1.StreamBranchGeminiResponse
	148, // 994: aiserver.v1.AiService.StreamBranchFileSelections:output_type -> aiserver.v1.StreamBranchFileSelectionsResponse
	99,  // 995: aiserver.v1.AiService.StreamBackgroundEdit:output_type -> aiserver.v1.StreamChatResponse
	99,  // 996: aiserver.v1.AiService.StreamGPTFourEdit:output_type -> aiserver.v1.StreamChatResponse
	99,  // 997: aiserver.v1.AiService.StreamChat:output_type -> aiserver.v1.StreamChatResponse
	99,  // 998: aiserver.v1.AiService.StreamChatWeb:output_type -> aiserver.v1.StreamChatResponse
	99,  // 999: aiserver.v1.AiService.StreamEdit:output_type -> aiserver.v1.StreamChatResponse
	155, // 1000: aiserver.v1.AiService.PreloadEdit:output_type -> aiserver.v1.PreloadEditResponse
	157, // 1001: aiserver.v1.AiService.StreamFastEdit:output_type -> aiserver.v1.StreamFastEditResponse
	99,  // 1002: aiserver.v1.AiService.StreamGenerate:output_type -> aiserver.v1.StreamChatResponse
	99,  // 1003: aiserver.v1.AiService.StreamInlineLongCompletion:output_type -> aiserver.v1.StreamChatResponse
	161, // 1004: aiserver.v1.AiService.SlashEdit:output_type -> aiserver.v1.SlashEditResponse
	165, // 1005: aiserver.v1.AiService.SlashEditFollowUpWithPreviousEdits:output_type -> aiserver.v1.StreamSlashEditFollowUpWithPreviousEditsResponse
	172, // 1006: aiserver.v1.AiService.StreamAiPreviews:output_type -> aiserver.v1.StreamAiPreviewsResponse
	174, // 1007: aiserver.v1.AiService.ShouldTurnOnCppOnboarding:output_type -> aiserver.v1.ShouldTurnOnCppOnboardingResponse
	176, // 1008: aiserver.v1.AiService.StreamReview:output_type -> aiserver.v1.ReviewResponse
	180, // 1009: aiserver.v1.AiService.StreamReviewChat:output_type -> aiserver.v1.ReviewChatResponse
	182, // 1010: aiserver.v1.AiService.CheckQueuePosition:output_type -> aiserver.v1.CheckQueuePositionResponse
	185, // 1011: aiserver.v1.AiService.CheckUsageBasedPrice:output_type -> aiserver.v1.CheckUsageBasedPriceResponse
	187, // 1012: aiserver.v1.AiService.DoThisForMeCheck:output_type -> aiserver.v1.DoThisForMeCheckResponse
	189, // 1013: aiserver.v1.AiService.StreamDoThisForMe:output_type -> aiserver.v1.DoThisForMeResponseWrapped
	191, // 1014: aiserver.v1.AiService.StreamChatToolformer:output_type -> aiserver.v1.StreamChatToolformerResponse
	191, // 1015: aiserver.v1.AiService.StreamChatToolformerContinue:output_type -> aiserver.v1.StreamChatToolformerResponse
	242, // 1016: aiserver.v1.AiService.PushAiThought:output_type -> aiserver.v1.PushAiThoughtResponse
	244, // 1017: aiserver.v1.AiService.CheckDoableAsTask:output_type -> aiserver.v1.CheckDoableAsTaskResponse
	246, // 1018: aiserver.v1.AiService.ReportGroundTruthCandidate:output_type -> aiserver.v1.ReportGroundTruthCandidateResponse
	248, // 1019: aiserver.v1.AiService.ReportCmdKFate:output_type -> aiserver.v1.ReportCmdKFateResponse
	250, // 1020: aiserver.v1.AiService.ShowWelcomeScreen:output_type -> aiserver.v1.ShowWelcomeScreenResponse
	253, // 1021: aiserver.v1.AiService.InterfaceAgentInit:output_type -> aiserver.v1.InterfaceAgentInitResponse
	255, // 1022: aiserver.v1.AiService.StreamInterfaceAgentStatus:output_type -> aiserver.v1.StreamInterfaceAgentStatusResponse
	258, // 1023: aiserver.v1.AiService.TaskGetInterfaceAgentStatus:output_type -> aiserver.v1.TaskGetInterfaceAgentStatusResponseWrapped
	262, // 1024: aiserver.v1.AiService.TaskInit:output_type -> aiserver.v1.TaskInitResponse
	264, // 1025: aiserver.v1.AiService.TaskPause:output_type -> aiserver.v1.TaskPauseResponse
	266, // 1026: aiserver.v1.AiService.TaskInfo:output_type -> aiserver.v1.TaskInfoResponse
	268, // 1027: aiserver.v1.AiService.TaskStreamLog:output_type -> aiserver.v1.TaskStreamLogResponse
	276, // 1028: aiserver.v1.AiService.TaskSendMessage:output_type -> aiserver.v1.TaskSendMessageResponse
	278, // 1029: aiserver.v1.AiService.TaskProvideResult:output_type -> aiserver.v1.TaskProvideResultResponse
	280, // 1030: aiserver.v1.AiService.CreateExperimentalIndex:output_type -> aiserver.v1.CreateExperimentalIndexResponse
	282, // 1031: aiserver.v1.AiService.ListExperimentalIndexFiles:output_type -> aiserver.v1.ListExperimentalIndexFilesResponse
	285, // 1032: aiserver.v1.AiService.ListenExperimentalIndex:output_type -> aiserver.v1.ListenExperimentalIndexResponse
	297, // 1033: aiserver.v1.AiService.RegisterFileToIndex:output_type -> aiserver.v1.RequestReceivedResponse
	300, // 1034: aiserver.v1.AiService.SetupIndexDependencies:output_type -> aiserver.v1.SetupIndexDependenciesResponse
	302, // 1035: aiserver.v1.AiService.ComputeIndexTopoSort:output_type -> aiserver.v1.ComputeIndexTopoSortResponse
	308, // 1036: aiserver.v1.AiService.StreamChatDeepContext:output_type -> aiserver.v1.StreamChatDeepContextResponse
	297, // 1037: aiserver.v1.AiService.ChooseCodeReferences:output_type -> aiserver.v1.RequestReceivedResponse
	312, // 1038: aiserver.v1.AiService.RegisterCodeReferences:output_type -> aiserver.v1.RegisterCodeReferencesResponse
	314, // 1039: aiserver.v1.AiService.ExtractPaths:output_type -> aiserver.v1.ExtractPathsResponse
	297, // 1040: aiserver.v1.AiService.SummarizeWithReferences:output_type -> aiserver.v1.RequestReceivedResponse
	316, // 1041: aiserver.v1.AiService.DocumentationQuery:output_type -> aiserver.v1.DocumentationQueryResponse
	318, // 1042: aiserver.v1.AiService.AvailableDocs:output_type -> aiserver.v1.AvailableDocsResponse
	322, // 1043: aiserver.v1.AiService.ReportFeedback:output_type -> aiserver.v1.ReportFeedbackResponse
	326, // 1044: aiserver.v1.AiService.ReportBug:output_type -> aiserver.v1.ReportBugResponse
	119, // 1045: aiserver.v1.AiService.StreamChatContext:output_type -> aiserver.v1.StreamChatContextResponse
	328, // 1046: aiserver.v1.AiService.GenerateTldr:output_type -> aiserver.v1.GenerateTldrResponse
	331, // 1047: aiserver.v1.AiService.TaskStreamChatContext:output_type -> aiserver.v1.TaskStreamChatContextResponseWrapped
	335, // 1048: aiserver.v1.AiService.RerankResults:output_type -> aiserver.v1.RerankerResponse
	337, // 1049: aiserver.v1.AiService.ModelQuery:output_type -> aiserver.v1.ModelQueryResponse
	338, // 1050: aiserver.v1.AiService.ModelQueryV2:output_type -> aiserver.v1.ModelQueryResponseV2
	341, // 1051: aiserver.v1.AiService.IntentPrediction:output_type -> aiserver.v1.IntentPredictionResponse
	343, // 1052: aiserver.v1.AiService.StreamCursorTutor:output_type -> aiserver.v1.StreamCursorTutorResponse
	345, // 1053: aiserver.v1.AiService.CheckFeatureStatus:output_type -> aiserver.v1.CheckFeatureStatusResponse
	347, // 1054: aiserver.v1.AiService.GetEffectiveTokenLimit:output_type -> aiserver.v1.GetEffectiveTokenLimitResponse
	349, // 1055: aiserver.v1.AiService.GetContextScores:output_type -> aiserver.v1.ContextScoresResponse
	364, // 1056: aiserver.v1.AiService.StreamCpp:output_type -> aiserver.v1.StreamCppResponse
	366, // 1057: aiserver.v1.AiService.CppConfig:output_type -> aiserver.v1.CppConfigResponse
	368, // 1058: aiserver.v1.AiService.CppEditHistoryStatus:output_type -> aiserver.v1.CppEditHistoryStatusResponse
	370, // 1059: aiserver.v1.AiService.CppAppend:output_type -> aiserver.v1.CppAppendResponse
	372, // 1060: aiserver.v1.AiService.CheckNumberConfig:output_type -> aiserver.v1.CheckNumberConfigResponse
	374, // 1061: aiserver.v1.AiService.StreamTerminalAutocomplete:output_type -> aiserver.v1.StreamTerminalAutocompleteResponse
	377, // 1062: aiserver.v1.AiService.StreamPseudocodeGenerator:output_type -> aiserver.v1.StreamPseudocodeGeneratorResponse
	379, // 1063: aiserver.v1.AiService.StreamPseudocodeMapper:output_type -> aiserver.v1.StreamPseudocodeMapperResponse
	385, // 1064: aiserver.v1.AiService.StreamAiLintBug:output_type -> aiserver.v1.StreamAiLintBugResponse
	388, // 1065: aiserver.v1.AiService.StreamAiCursorHelp:output_type -> aiserver.v1.StreamAiCursorHelpResponse
	390, // 1066: aiserver.v1.AiService.LogUserLintReply:output_type -> aiserver.v1.LogUserLintReplyResponse
	392, // 1067: aiserver.v1.AiService.LogLinterExplicitUserFeedback:output_type -> aiserver.v1.LogLinterExplicitUserFeedbackResponse
	394, // 1068: aiserver.v1.AiService.StreamFixMarkers:output_type -> aiserver.v1.FixMarkersResponse
	396, // 1069: aiserver.v1.AiService.ReportInlineAction:output_type -> aiserver.v1.ReportInlineActionResponse
	398, // 1070: aiserver.v1.AiService.StreamPriomptPrompt:output_type -> aiserver.v1.StreamPriomptPromptResponse
	99,  // 1071: aiserver.v1.AiService.StreamLint:output_type -> aiserver.v1.StreamChatResponse
	99,  // 1072: aiserver.v1.AiService.StreamNewLintRule:output_type -> aiserver.v1.StreamChatResponse
	402, // 1073: aiserver.v1.AiService.AiProject:output_type -> aiserver.v1.AiProjectResponse
	404, // 1074: aiserver.v1.AiService.ToCamelCase:output_type -> aiserver.v1.ToCamelCaseResponse
	406, // 1075: aiserver.v1.AiService.ReportGenerationFeedback:output_type -> aiserver.v1.ReportGenerationFeedbackResponse
	408, // 1076: aiserver.v1.AiService.GetThoughtAnnotation:output_type -> aiserver.v1.GetThoughtAnnotationResponse
	411, // 1077: aiserver.v1.AiService.StreamWebCmdKV1:output_type -> aiserver.v1.StreamWebCmdKV1Response
	413, // 1078: aiserver.v1.AiService.StreamNextCursorPrediction:output_type -> aiserver.v1.StreamNextCursorPredictionResponse
	415, // 1079: aiserver.v1.AiService.IsCursorPredictionEnabled:output_type -> aiserver.v1.IsCursorPredictionEnabledResponse
	418, // 1080: aiserver.v1.AiService.GetCppEditClassification:output_type -> aiserver.v1.GetCppEditClassificationResponse
	421, // 1081: aiserver.v1.AiService.GetTerminalCompletion:output_type -> aiserver.v1.GetTerminalCompletionResponse
	424, // 1082: aiserver.v1.AiService.TakeNotesOnCommitDiff:output_type -> aiserver.v1.TakeNotesOnCommitDiffResponse
	427, // 1083: aiserver.v1.AiService.BulkEmbed:output_type -> aiserver.v1.BulkEmbedResponse
	431, // 1084: aiserver.v1.AiService.ContinueChatRequestWithCommits:output_type -> aiserver.v1.EmptyResponse
	433, // 1085: aiserver.v1.AiService.BackgroundCmdKEval:output_type -> aiserver.v1.BackgroundCmdKEvalResponse
	435, // 1086: aiserver.v1.AiService.BackgroundCmdK:output_type -> aiserver.v1.BackgroundCmdKResponse
	437, // 1087: aiserver.v1.AiService.StreamCursorMotion:output_type -> aiserver.v1.StreamCursorMotionResponse
	440, // 1088: aiserver.v1.AiService.CalculateAutoSelection:output_type -> aiserver.v1.CalculateAutoSelectionResponse
	446, // 1089: aiserver.v1.AiService.GetAtSymbolSuggestions:output_type -> aiserver.v1.GetAtSymbolSuggestionsResponse
	447, // 1090: aiserver.v1.AiService.GetCodebaseQuestions:output_type -> aiserver.v1.GetCodebaseQuestionsResponse
	450, // 1091: aiserver.v1.AiService.GetRankedContextFromContextBank:output_type -> aiserver.v1.GetRankedContextFromContextBankResponse
	497, // 1092: aiserver.v1.AiService.CppEditHistoryAppend:output_type -> aiserver.v1.EditHistoryAppendChangesResponse
	499, // 1093: aiserver.v1.AiService.DevOnlyGetPastRequestIds:output_type -> aiserver.v1.DevOnlyGetPastRequestIdsResponse
	502, // 1094: aiserver.v1.AiService.GetFilesForComposer:output_type -> aiserver.v1.GetFilesForComposerResponse
	504, // 1095: aiserver.v1.AiService.TryParseTypeScriptTreeSitter:output_type -> aiserver.v1.TryParseTypeScriptTreeSitterResponse
	506, // 1096: aiserver.v1.AiService.NameTab:output_type -> aiserver.v1.NameTabResponse
	508, // 1097: aiserver.v1.AiService.TestModelStatus:output_type -> aiserver.v1.TestModelStatusResponse
	510, // 1098: aiserver.v1.RepositoryService.FastRepoInitHandshake:output_type -> aiserver.v1.FastRepoInitHandshakeResponse
	513, // 1099: aiserver.v1.RepositoryService.SyncMerkleSubtree:output_type -> aiserver.v1.SyncMerkleSubtreeResponse
	515, // 1100: aiserver.v1.RepositoryService.FastUpdateFile:output_type -> aiserver.v1.FastUpdateFileResponse
	517, // 1101: aiserver.v1.RepositoryService.SearchRepositoryV2:output_type -> aiserver.v1.SearchRepositoryResponse
	519, // 1102: aiserver.v1.RepositoryService.RemoveRepositoryV2:output_type -> aiserver.v1.RemoveRepositoryResponse
	521, // 1103: aiserver.v1.RepositoryService.EnsureIndexCreated:output_type -> aiserver.v1.EnsureIndexCreatedResponse
	523, // 1104: aiserver.v1.RepositoryService.GetHighLevelFolderDescription:output_type -> aiserver.v1.GetHighLevelFolderDescriptionResponse
	525, // 1105: aiserver.v1.RepositoryService.GetEmbeddings:output_type -> aiserver.v1.GetEmbeddingsResponse
	304, // 1106: aiserver.v1.RepositoryService.SearchRepositoryDeepContext:output_type -> aiserver.v1.SearchRepositoryDeepContextResponse
	528, // 1107: aiserver.v1.RepositoryService.RepositoryStatus:output_type -> aiserver.v1.RepositoryStatusResponse
	530, // 1108: aiserver.v1.RepositoryService.BatchRepositoryStatus:output_type -> aiserver.v1.BatchRepositoryStatusResponse
	517, // 1109: aiserver.v1.RepositoryService.SearchRepository:output_type -> aiserver.v1.SearchRepositoryResponse
	519, // 1110: aiserver.v1.RepositoryService.RemoveRepository:output_type -> aiserver.v1.RemoveRepositoryResponse
	532, // 1111: aiserver.v1.RepositoryService.GetUploadLimits:output_type -> aiserver.v1.GetUploadLimitsResponse
	534, // 1112: aiserver.v1.RepositoryService.GetNumFilesToSend:output_type -> aiserver.v1.GetNumFilesToSendResponse
	536, // 1113: aiserver.v1.RepositoryService.GetAvailableChunkingStrategies:output_type -> aiserver.v1.GetAvailableChunkingStrategiesResponse
	538, // 1114: aiserver.v1.RepositoryService.AdminRemoveRepository:output_type -> aiserver.v1.AdminRemoveRepositoryResponse
	540, // 1115: aiserver.v1.RepositoryService.GetRepositories:output_type -> aiserver.v1.RepositoriesResponse
	542, // 1116: aiserver.v1.RepositoryService.LoginUser:output_type -> aiserver.v1.LoginResponse
	544, // 1117: aiserver.v1.RepositoryService.LogoutUser:output_type -> aiserver.v1.LogoutResponse
	546, // 1118: aiserver.v1.RepositoryService.IsLoggedIn:output_type -> aiserver.v1.IsLoggedInResponse
	548, // 1119: aiserver.v1.RepositoryService.PollLoggedIn:output_type -> aiserver.v1.PollLoginResponse
	550, // 1120: aiserver.v1.RepositoryService.UpgradeScope:output_type -> aiserver.v1.UpgradeScopeResponse
	552, // 1121: aiserver.v1.RepositoryService.SyncRepository:output_type -> aiserver.v1.SyncRepositoryResponse
	554, // 1122: aiserver.v1.RepositoryService.UploadRepository:output_type -> aiserver.v1.UploadRepositoryResponse
	556, // 1123: aiserver.v1.RepositoryService.SubscribeRepository:output_type -> aiserver.v1.SubscribeRepositoryResponse
	558, // 1124: aiserver.v1.RepositoryService.UnsubscribeRepository:output_type -> aiserver.v1.UnsubscribeRepositoryResponse
	973, // [973:1125] is the sub-list for method output_type
	821, // [821:973] is the sub-list for method input_type
	821, // [821:821] is the sub-list for extension type_name
	821, // [821:821] is the sub-list for extension extendee
	0,   // [0:821] is the sub-list for field type_name
}

func init() { file_aiserver_v1_aiserver_proto_init() }
func file_aiserver_v1_aiserver_proto_init() {
	if File_aiserver_v1_aiserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aiserver_v1_aiserver_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TimeLeftHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ThrowErrorCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ThrowErrorCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BM25Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SimplestRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DataframeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CursorRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DetailedLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FileDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GitDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleFileDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*LineRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*InterpreterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ImageProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*FolderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*FolderFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetLintsForChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*UserResponseToSuggestedCodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ExplicitContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ModelDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AzureState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*LinterErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*LinterError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*ChatQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ChatExternalLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*CommitNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ContextAST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationCitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*DocsReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*WebCitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*WebReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*StatusUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*RerankDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*RerankDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentIdsWithScores); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*GetComposerChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ComposerExternalLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*FullFileSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*FileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CodeSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*WarmComposerCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*GetChatTitleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*GetChatTitleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GetCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*UniqueFileIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*SurroundingLines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*GetSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*GetSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*FileSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInlineEditsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInlineEditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*SummarizeConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*IsolatedTreesitterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*IsolatedTreesitterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*GetSimplePromptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*GetSimplePromptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*CheckLongFilesFitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*GetEvaluationPromptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*GetEvaluationPromptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*UsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*ClearAndRedoEntireBucketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*ClearAndRedoEntireBucketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchFileSelectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchFileSelectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBackgroundEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*StreamGPTFourEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*StreamEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKDebugInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKExternalLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*PreloadEditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*StreamFastEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*StreamFastEditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*StreamGenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInlineLongCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*SlashEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*SlashEditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCmdKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*SlashEditFollowUpWithPreviousEditsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*SlashEditPreviousEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSlashEditFollowUpWithPreviousEditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiPreviewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiPreviewsIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentSymbolWithText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*UriComponents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[115].Exporter = func(v any, i int) any {
			switch v := v.(*HoverDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[116].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiPreviewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[117].Exporter = func(v any, i int) any {
			switch v := v.(*ShouldTurnOnCppOnboardingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[118].Exporter = func(v any, i int) any {
			switch v := v.(*ShouldTurnOnCppOnboardingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[119].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[120].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[121].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewBug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[122].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[123].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[124].Exporter = func(v any, i int) any {
			switch v := v.(*ReviewChatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[125].Exporter = func(v any, i int) any {
			switch v := v.(*CheckQueuePositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[126].Exporter = func(v any, i int) any {
			switch v := v.(*CheckQueuePositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[127].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[128].Exporter = func(v any, i int) any {
			switch v := v.(*CheckUsageBasedPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[129].Exporter = func(v any, i int) any {
			switch v := v.(*CheckUsageBasedPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[130].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[131].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[132].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[133].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeResponseWrapped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[134].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[135].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatToolformerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[136].Exporter = func(v any, i int) any {
			switch v := v.(*ToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[137].Exporter = func(v any, i int) any {
			switch v := v.(*BuiltinToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[138].Exporter = func(v any, i int) any {
			switch v := v.(*SearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[139].Exporter = func(v any, i int) any {
			switch v := v.(*ReadChunkParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[140].Exporter = func(v any, i int) any {
			switch v := v.(*GotodefParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[141].Exporter = func(v any, i int) any {
			switch v := v.(*EditParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[142].Exporter = func(v any, i int) any {
			switch v := v.(*UndoEditParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[143].Exporter = func(v any, i int) any {
			switch v := v.(*EndParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[144].Exporter = func(v any, i int) any {
			switch v := v.(*NewFileParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[145].Exporter = func(v any, i int) any {
			switch v := v.(*AddTestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[146].Exporter = func(v any, i int) any {
			switch v := v.(*RunTestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[147].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[148].Exporter = func(v any, i int) any {
			switch v := v.(*SaveFileParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[149].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[150].Exporter = func(v any, i int) any {
			switch v := v.(*GetSymbolsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[151].Exporter = func(v any, i int) any {
			switch v := v.(*SemanticSearchParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[152].Exporter = func(v any, i int) any {
			switch v := v.(*GetProjectStructureParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[153].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRmFilesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[154].Exporter = func(v any, i int) any {
			switch v := v.(*RunTerminalCommandsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[155].Exporter = func(v any, i int) any {
			switch v := v.(*NewEditParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[156].Exporter = func(v any, i int) any {
			switch v := v.(*ReadWithLinterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[157].Exporter = func(v any, i int) any {
			switch v := v.(*CustomToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[158].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatToolformerContinueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[159].Exporter = func(v any, i int) any {
			switch v := v.(*ToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[160].Exporter = func(v any, i int) any {
			switch v := v.(*BuiltinToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[161].Exporter = func(v any, i int) any {
			switch v := v.(*SearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[162].Exporter = func(v any, i int) any {
			switch v := v.(*SearchToolFileSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[163].Exporter = func(v any, i int) any {
			switch v := v.(*ReadChunkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[164].Exporter = func(v any, i int) any {
			switch v := v.(*GotodefResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[165].Exporter = func(v any, i int) any {
			switch v := v.(*GotodefToolFileSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[166].Exporter = func(v any, i int) any {
			switch v := v.(*EditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[167].Exporter = func(v any, i int) any {
			switch v := v.(*UndoEditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[168].Exporter = func(v any, i int) any {
			switch v := v.(*EndResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[169].Exporter = func(v any, i int) any {
			switch v := v.(*NewFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[170].Exporter = func(v any, i int) any {
			switch v := v.(*AddTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[171].Exporter = func(v any, i int) any {
			switch v := v.(*RunTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[172].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[173].Exporter = func(v any, i int) any {
			switch v := v.(*SaveFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[174].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[175].Exporter = func(v any, i int) any {
			switch v := v.(*GetSymbolsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[176].Exporter = func(v any, i int) any {
			switch v := v.(*SemanticSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[177].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[178].Exporter = func(v any, i int) any {
			switch v := v.(*GetProjectStructureResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[179].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRmFilesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[180].Exporter = func(v any, i int) any {
			switch v := v.(*RunTerminalCommandsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[181].Exporter = func(v any, i int) any {
			switch v := v.(*NewEditResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[182].Exporter = func(v any, i int) any {
			switch v := v.(*ReadWithLinterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[183].Exporter = func(v any, i int) any {
			switch v := v.(*CustomToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[184].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[185].Exporter = func(v any, i int) any {
			switch v := v.(*PushAiThoughtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[186].Exporter = func(v any, i int) any {
			switch v := v.(*PushAiThoughtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[187].Exporter = func(v any, i int) any {
			switch v := v.(*CheckDoableAsTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[188].Exporter = func(v any, i int) any {
			switch v := v.(*CheckDoableAsTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[189].Exporter = func(v any, i int) any {
			switch v := v.(*ReportGroundTruthCandidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[190].Exporter = func(v any, i int) any {
			switch v := v.(*ReportGroundTruthCandidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[191].Exporter = func(v any, i int) any {
			switch v := v.(*ReportCmdKFateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[192].Exporter = func(v any, i int) any {
			switch v := v.(*ReportCmdKFateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[193].Exporter = func(v any, i int) any {
			switch v := v.(*ShowWelcomeScreenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[194].Exporter = func(v any, i int) any {
			switch v := v.(*ShowWelcomeScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[195].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceAgentInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[196].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceAgentClientState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[197].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceAgentInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[198].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInterfaceAgentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[199].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInterfaceAgentStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[200].Exporter = func(v any, i int) any {
			switch v := v.(*InterfaceAgentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[201].Exporter = func(v any, i int) any {
			switch v := v.(*TaskGetInterfaceAgentStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[202].Exporter = func(v any, i int) any {
			switch v := v.(*TaskGetInterfaceAgentStatusResponseWrapped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[203].Exporter = func(v any, i int) any {
			switch v := v.(*TaskGetInterfaceAgentStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[204].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[205].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[206].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[207].Exporter = func(v any, i int) any {
			switch v := v.(*TaskPauseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[208].Exporter = func(v any, i int) any {
			switch v := v.(*TaskPauseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[209].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[210].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[211].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[212].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[213].Exporter = func(v any, i int) any {
			switch v := v.(*TaskLogItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[214].Exporter = func(v any, i int) any {
			switch v := v.(*TaskLogOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[215].Exporter = func(v any, i int) any {
			switch v := v.(*TaskLogToolAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[216].Exporter = func(v any, i int) any {
			switch v := v.(*TaskLogThought); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[217].Exporter = func(v any, i int) any {
			switch v := v.(*TaskUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[218].Exporter = func(v any, i int) any {
			switch v := v.(*TaskLogToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[219].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[220].Exporter = func(v any, i int) any {
			switch v := v.(*TaskSendMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[221].Exporter = func(v any, i int) any {
			switch v := v.(*TaskProvideResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[222].Exporter = func(v any, i int) any {
			switch v := v.(*TaskProvideResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[223].Exporter = func(v any, i int) any {
			switch v := v.(*CreateExperimentalIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[224].Exporter = func(v any, i int) any {
			switch v := v.(*CreateExperimentalIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[225].Exporter = func(v any, i int) any {
			switch v := v.(*ListExperimentalIndexFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[226].Exporter = func(v any, i int) any {
			switch v := v.(*ListExperimentalIndexFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[227].Exporter = func(v any, i int) any {
			switch v := v.(*IndexFileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[228].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[229].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[230].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterFileToIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[231].Exporter = func(v any, i int) any {
			switch v := v.(*URIResolutionAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[232].Exporter = func(v any, i int) any {
			switch v := v.(*CodeSymbolWithAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[233].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterFileToIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[234].Exporter = func(v any, i int) any {
			switch v := v.(*SerializedContextNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[235].Exporter = func(v any, i int) any {
			switch v := v.(*FileCodeSnippets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[236].Exporter = func(v any, i int) any {
			switch v := v.(*CodeSnippet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[237].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[238].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[239].Exporter = func(v any, i int) any {
			switch v := v.(*SummarizeWithReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[240].Exporter = func(v any, i int) any {
			switch v := v.(*SummarizeWithReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[241].Exporter = func(v any, i int) any {
			switch v := v.(*RequestReceivedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[242].Exporter = func(v any, i int) any {
			switch v := v.(*SetupIndexDependenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[243].Exporter = func(v any, i int) any {
			switch v := v.(*URIResolutionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[244].Exporter = func(v any, i int) any {
			switch v := v.(*SetupIndexDependenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[245].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeIndexTopoSortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[246].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeIndexTopoSortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[247].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatDeepContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[248].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryDeepContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[249].Exporter = func(v any, i int) any {
			switch v := v.(*NodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[250].Exporter = func(v any, i int) any {
			switch v := v.(*ReflectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[251].Exporter = func(v any, i int) any {
			switch v := v.(*ReflectionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[252].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatDeepContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[253].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterCodeReferencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[254].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolActionResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[255].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolActionResultReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[256].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterCodeReferencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[257].Exporter = func(v any, i int) any {
			switch v := v.(*ExtractPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[258].Exporter = func(v any, i int) any {
			switch v := v.(*ExtractPathsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[259].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[260].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[261].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableDocsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[262].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableDocsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[263].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[264].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[265].Exporter = func(v any, i int) any {
			switch v := v.(*ReportFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[266].Exporter = func(v any, i int) any {
			switch v := v.(*ReportFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[267].Exporter = func(v any, i int) any {
			switch v := v.(*ReportBugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[268].Exporter = func(v any, i int) any {
			switch v := v.(*BugContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[269].Exporter = func(v any, i int) any {
			switch v := v.(*LogFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[270].Exporter = func(v any, i int) any {
			switch v := v.(*ReportBugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[271].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateTldrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[272].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateTldrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[273].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[274].Exporter = func(v any, i int) any {
			switch v := v.(*AdvancedCodebaseContextOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[275].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponseWrapped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[276].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[277].Exporter = func(v any, i int) any {
			switch v := v.(*RerankerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[278].Exporter = func(v any, i int) any {
			switch v := v.(*ApiDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[279].Exporter = func(v any, i int) any {
			switch v := v.(*RerankerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[280].Exporter = func(v any, i int) any {
			switch v := v.(*ModelQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[281].Exporter = func(v any, i int) any {
			switch v := v.(*ModelQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[282].Exporter = func(v any, i int) any {
			switch v := v.(*ModelQueryResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[283].Exporter = func(v any, i int) any {
			switch v := v.(*IntentPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[284].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[285].Exporter = func(v any, i int) any {
			switch v := v.(*IntentPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[286].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCursorTutorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[287].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCursorTutorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[288].Exporter = func(v any, i int) any {
			switch v := v.(*CheckFeatureStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[289].Exporter = func(v any, i int) any {
			switch v := v.(*CheckFeatureStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[290].Exporter = func(v any, i int) any {
			switch v := v.(*GetEffectiveTokenLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[291].Exporter = func(v any, i int) any {
			switch v := v.(*GetEffectiveTokenLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[292].Exporter = func(v any, i int) any {
			switch v := v.(*ContextScoresRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[293].Exporter = func(v any, i int) any {
			switch v := v.(*ContextScoresResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[294].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[295].Exporter = func(v any, i int) any {
			switch v := v.(*CppContextItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[296].Exporter = func(v any, i int) any {
			switch v := v.(*CppFileDiffHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[297].Exporter = func(v any, i int) any {
			switch v := v.(*BlockDiffPatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[298].Exporter = func(v any, i int) any {
			switch v := v.(*IRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[299].Exporter = func(v any, i int) any {
			switch v := v.(*CppParameterHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[300].Exporter = func(v any, i int) any {
			switch v := v.(*LspSubgraphFullContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[301].Exporter = func(v any, i int) any {
			switch v := v.(*LspSubgraphPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[302].Exporter = func(v any, i int) any {
			switch v := v.(*LspSubgraphContextItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[303].Exporter = func(v any, i int) any {
			switch v := v.(*LspSubgraphRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[304].Exporter = func(v any, i int) any {
			switch v := v.(*CppIntentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[305].Exporter = func(v any, i int) any {
			switch v := v.(*AdditionalFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[306].Exporter = func(v any, i int) any {
			switch v := v.(*FilesyncUpdateWithModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[307].Exporter = func(v any, i int) any {
			switch v := v.(*SingleUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[308].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[309].Exporter = func(v any, i int) any {
			switch v := v.(*CppConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[310].Exporter = func(v any, i int) any {
			switch v := v.(*CppConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[311].Exporter = func(v any, i int) any {
			switch v := v.(*CppEditHistoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[312].Exporter = func(v any, i int) any {
			switch v := v.(*CppEditHistoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[313].Exporter = func(v any, i int) any {
			switch v := v.(*CppAppendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[314].Exporter = func(v any, i int) any {
			switch v := v.(*CppAppendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[315].Exporter = func(v any, i int) any {
			switch v := v.(*CheckNumberConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[316].Exporter = func(v any, i int) any {
			switch v := v.(*CheckNumberConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[317].Exporter = func(v any, i int) any {
			switch v := v.(*StreamTerminalAutocompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[318].Exporter = func(v any, i int) any {
			switch v := v.(*StreamTerminalAutocompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[319].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPseudocodeGeneratorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[320].Exporter = func(v any, i int) any {
			switch v := v.(*PseudocodeTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[321].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPseudocodeGeneratorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[322].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPseudocodeMapperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[323].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPseudocodeMapperResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[324].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiLintBugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[325].Exporter = func(v any, i int) any {
			switch v := v.(*AiLintBug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[326].Exporter = func(v any, i int) any {
			switch v := v.(*LintDiscriminatorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[327].Exporter = func(v any, i int) any {
			switch v := v.(*LogprobsLintPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[328].Exporter = func(v any, i int) any {
			switch v := v.(*AiLintRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[329].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiLintBugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[330].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiCursorHelpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[331].Exporter = func(v any, i int) any {
			switch v := v.(*CursorHelpConversationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[332].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiCursorHelpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[333].Exporter = func(v any, i int) any {
			switch v := v.(*LogUserLintReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[334].Exporter = func(v any, i int) any {
			switch v := v.(*LogUserLintReplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[335].Exporter = func(v any, i int) any {
			switch v := v.(*LogLinterExplicitUserFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[336].Exporter = func(v any, i int) any {
			switch v := v.(*LogLinterExplicitUserFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[337].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[338].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[339].Exporter = func(v any, i int) any {
			switch v := v.(*ReportInlineActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[340].Exporter = func(v any, i int) any {
			switch v := v.(*ReportInlineActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[341].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPriomptPromptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[342].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPriomptPromptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[343].Exporter = func(v any, i int) any {
			switch v := v.(*StreamLintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[344].Exporter = func(v any, i int) any {
			switch v := v.(*StreamNewRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[345].Exporter = func(v any, i int) any {
			switch v := v.(*AiProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[346].Exporter = func(v any, i int) any {
			switch v := v.(*AiProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[347].Exporter = func(v any, i int) any {
			switch v := v.(*ToCamelCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[348].Exporter = func(v any, i int) any {
			switch v := v.(*ToCamelCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[349].Exporter = func(v any, i int) any {
			switch v := v.(*ReportGenerationFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[350].Exporter = func(v any, i int) any {
			switch v := v.(*ReportGenerationFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[351].Exporter = func(v any, i int) any {
			switch v := v.(*GetThoughtAnnotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[352].Exporter = func(v any, i int) any {
			switch v := v.(*GetThoughtAnnotationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[353].Exporter = func(v any, i int) any {
			switch v := v.(*AiThoughtAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[354].Exporter = func(v any, i int) any {
			switch v := v.(*StreamWebCmdKV1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[355].Exporter = func(v any, i int) any {
			switch v := v.(*StreamWebCmdKV1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[356].Exporter = func(v any, i int) any {
			switch v := v.(*StreamNextCursorPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[357].Exporter = func(v any, i int) any {
			switch v := v.(*StreamNextCursorPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[358].Exporter = func(v any, i int) any {
			switch v := v.(*IsCursorPredictionEnabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[359].Exporter = func(v any, i int) any {
			switch v := v.(*IsCursorPredictionEnabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[360].Exporter = func(v any, i int) any {
			switch v := v.(*GetCppEditClassificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[361].Exporter = func(v any, i int) any {
			switch v := v.(*SuggestedEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[362].Exporter = func(v any, i int) any {
			switch v := v.(*GetCppEditClassificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[363].Exporter = func(v any, i int) any {
			switch v := v.(*GetTerminalCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[364].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentFolderFileOrFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[365].Exporter = func(v any, i int) any {
			switch v := v.(*GetTerminalCompletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[366].Exporter = func(v any, i int) any {
			switch v := v.(*TakeNotesOnCommitDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[367].Exporter = func(v any, i int) any {
			switch v := v.(*CommitDiffString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[368].Exporter = func(v any, i int) any {
			switch v := v.(*TakeNotesOnCommitDiffResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[369].Exporter = func(v any, i int) any {
			switch v := v.(*CommitNoteWithEmbeddings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[370].Exporter = func(v any, i int) any {
			switch v := v.(*BulkEmbedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[371].Exporter = func(v any, i int) any {
			switch v := v.(*BulkEmbedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[372].Exporter = func(v any, i int) any {
			switch v := v.(*EmbeddingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[373].Exporter = func(v any, i int) any {
			switch v := v.(*ContinueChatRequestWithCommitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[374].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleCommitWithDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[375].Exporter = func(v any, i int) any {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[376].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKEvalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[377].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKEvalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[378].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[379].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[380].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCursorMotionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[381].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCursorMotionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[382].Exporter = func(v any, i int) any {
			switch v := v.(*CalculateAutoSelectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[383].Exporter = func(v any, i int) any {
			switch v := v.(*HeuristicsSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[384].Exporter = func(v any, i int) any {
			switch v := v.(*CalculateAutoSelectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[385].Exporter = func(v any, i int) any {
			switch v := v.(*AutoSelectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[386].Exporter = func(v any, i int) any {
			switch v := v.(*AutoSelectionInstructions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[387].Exporter = func(v any, i int) any {
			switch v := v.(*GetAtSymbolSuggestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[388].Exporter = func(v any, i int) any {
			switch v := v.(*AtSymbolDependencyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[389].Exporter = func(v any, i int) any {
			switch v := v.(*AtSymbolOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[390].Exporter = func(v any, i int) any {
			switch v := v.(*GetAtSymbolSuggestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[391].Exporter = func(v any, i int) any {
			switch v := v.(*GetCodebaseQuestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[392].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankedContextFromContextBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[393].Exporter = func(v any, i int) any {
			switch v := v.(*ContextToRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[394].Exporter = func(v any, i int) any {
			switch v := v.(*GetRankedContextFromContextBankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[395].Exporter = func(v any, i int) any {
			switch v := v.(*EditHistoryAppendChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[396].Exporter = func(v any, i int) any {
			switch v := v.(*ModelChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[397].Exporter = func(v any, i int) any {
			switch v := v.(*CursorSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[398].Exporter = func(v any, i int) any {
			switch v := v.(*CppSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[399].Exporter = func(v any, i int) any {
			switch v := v.(*CppAcceptEventNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[400].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentlyShownCppSuggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[401].Exporter = func(v any, i int) any {
			switch v := v.(*PointInTimeModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[402].Exporter = func(v any, i int) any {
			switch v := v.(*CppRejectEventNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[403].Exporter = func(v any, i int) any {
			switch v := v.(*CppManualTriggerEventNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[404].Exporter = func(v any, i int) any {
			switch v := v.(*CppStoppedTrackingModelEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[405].Exporter = func(v any, i int) any {
			switch v := v.(*CppSuggestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[406].Exporter = func(v any, i int) any {
			switch v := v.(*RecoverableCppData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[407].Exporter = func(v any, i int) any {
			switch v := v.(*OneIndexedPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[408].Exporter = func(v any, i int) any {
			switch v := v.(*CppLinterErrorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[409].Exporter = func(v any, i int) any {
			switch v := v.(*CppDebouncedCursorMovementEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[410].Exporter = func(v any, i int) any {
			switch v := v.(*CppEditorChangedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[411].Exporter = func(v any, i int) any {
			switch v := v.(*CppCopyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[412].Exporter = func(v any, i int) any {
			switch v := v.(*CppChangeQuickActionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[413].Exporter = func(v any, i int) any {
			switch v := v.(*CppQuickAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[414].Exporter = func(v any, i int) any {
			switch v := v.(*CppQuickActionCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[415].Exporter = func(v any, i int) any {
			switch v := v.(*CppQuickActionFireEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[416].Exporter = func(v any, i int) any {
			switch v := v.(*ModelOpenedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[417].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[418].Exporter = func(v any, i int) any {
			switch v := v.(*ChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[419].Exporter = func(v any, i int) any {
			switch v := v.(*AiRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[420].Exporter = func(v any, i int) any {
			switch v := v.(*ScrollEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[421].Exporter = func(v any, i int) any {
			switch v := v.(*EditorCloseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[422].Exporter = func(v any, i int) any {
			switch v := v.(*TabCloseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[423].Exporter = func(v any, i int) any {
			switch v := v.(*MaybeDefinedPointInTimeModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[424].Exporter = func(v any, i int) any {
			switch v := v.(*CppPartialAcceptEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[425].Exporter = func(v any, i int) any {
			switch v := v.(*Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[426].Exporter = func(v any, i int) any {
			switch v := v.(*AcceptCursorPredictionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[427].Exporter = func(v any, i int) any {
			switch v := v.(*CursorPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[428].Exporter = func(v any, i int) any {
			switch v := v.(*RejectCursorPredictionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[429].Exporter = func(v any, i int) any {
			switch v := v.(*SuggestCursorPredictionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[430].Exporter = func(v any, i int) any {
			switch v := v.(*CppTriggerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[431].Exporter = func(v any, i int) any {
			switch v := v.(*FinishedCppGenerationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[432].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundFilesEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[433].Exporter = func(v any, i int) any {
			switch v := v.(*CppTerminalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[434].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[435].Exporter = func(v any, i int) any {
			switch v := v.(*CppHistoryAppendEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[436].Exporter = func(v any, i int) any {
			switch v := v.(*CppAcceptEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[437].Exporter = func(v any, i int) any {
			switch v := v.(*CppSuggestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[438].Exporter = func(v any, i int) any {
			switch v := v.(*SelectionWithOrientation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[439].Exporter = func(v any, i int) any {
			switch v := v.(*CppRejectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[440].Exporter = func(v any, i int) any {
			switch v := v.(*CppManualTriggerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[441].Exporter = func(v any, i int) any {
			switch v := v.(*EditHistoryAppendChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[442].Exporter = func(v any, i int) any {
			switch v := v.(*DevOnlyGetPastRequestIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[443].Exporter = func(v any, i int) any {
			switch v := v.(*DevOnlyGetPastRequestIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[444].Exporter = func(v any, i int) any {
			switch v := v.(*DevOnlyPastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[445].Exporter = func(v any, i int) any {
			switch v := v.(*GetFilesForComposerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[446].Exporter = func(v any, i int) any {
			switch v := v.(*GetFilesForComposerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[447].Exporter = func(v any, i int) any {
			switch v := v.(*TryParseTypeScriptTreeSitterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[448].Exporter = func(v any, i int) any {
			switch v := v.(*TryParseTypeScriptTreeSitterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[449].Exporter = func(v any, i int) any {
			switch v := v.(*NameTabRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[450].Exporter = func(v any, i int) any {
			switch v := v.(*NameTabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[451].Exporter = func(v any, i int) any {
			switch v := v.(*TestModelStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[452].Exporter = func(v any, i int) any {
			switch v := v.(*TestModelStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[453].Exporter = func(v any, i int) any {
			switch v := v.(*FastRepoInitHandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[454].Exporter = func(v any, i int) any {
			switch v := v.(*FastRepoInitHandshakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[455].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMerkleSubtreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[456].Exporter = func(v any, i int) any {
			switch v := v.(*PartialPathItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[457].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMerkleSubtreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[458].Exporter = func(v any, i int) any {
			switch v := v.(*FastUpdateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[459].Exporter = func(v any, i int) any {
			switch v := v.(*FastUpdateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[460].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[461].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[462].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[463].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[464].Exporter = func(v any, i int) any {
			switch v := v.(*EnsureIndexCreatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[465].Exporter = func(v any, i int) any {
			switch v := v.(*EnsureIndexCreatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[466].Exporter = func(v any, i int) any {
			switch v := v.(*GetHighLevelFolderDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[467].Exporter = func(v any, i int) any {
			switch v := v.(*GetHighLevelFolderDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[468].Exporter = func(v any, i int) any {
			switch v := v.(*GetEmbeddingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[469].Exporter = func(v any, i int) any {
			switch v := v.(*GetEmbeddingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[470].Exporter = func(v any, i int) any {
			switch v := v.(*SearchRepositoryDeepContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[471].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[472].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[473].Exporter = func(v any, i int) any {
			switch v := v.(*BatchRepositoryStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[474].Exporter = func(v any, i int) any {
			switch v := v.(*BatchRepositoryStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[475].Exporter = func(v any, i int) any {
			switch v := v.(*GetUploadLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[476].Exporter = func(v any, i int) any {
			switch v := v.(*GetUploadLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[477].Exporter = func(v any, i int) any {
			switch v := v.(*GetNumFilesToSendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[478].Exporter = func(v any, i int) any {
			switch v := v.(*GetNumFilesToSendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[479].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableChunkingStrategiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[480].Exporter = func(v any, i int) any {
			switch v := v.(*GetAvailableChunkingStrategiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[481].Exporter = func(v any, i int) any {
			switch v := v.(*AdminRemoveRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[482].Exporter = func(v any, i int) any {
			switch v := v.(*AdminRemoveRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[483].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[484].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[485].Exporter = func(v any, i int) any {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[486].Exporter = func(v any, i int) any {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[487].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[488].Exporter = func(v any, i int) any {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[489].Exporter = func(v any, i int) any {
			switch v := v.(*IsLoggedInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[490].Exporter = func(v any, i int) any {
			switch v := v.(*IsLoggedInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[491].Exporter = func(v any, i int) any {
			switch v := v.(*PollLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[492].Exporter = func(v any, i int) any {
			switch v := v.(*PollLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[493].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeScopeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[494].Exporter = func(v any, i int) any {
			switch v := v.(*UpgradeScopeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[495].Exporter = func(v any, i int) any {
			switch v := v.(*SyncRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[496].Exporter = func(v any, i int) any {
			switch v := v.(*SyncRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[497].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[498].Exporter = func(v any, i int) any {
			switch v := v.(*UploadRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[499].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[500].Exporter = func(v any, i int) any {
			switch v := v.(*SubscribeRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[501].Exporter = func(v any, i int) any {
			switch v := v.(*UnsubscribeRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[502].Exporter = func(v any, i int) any {
			switch v := v.(*UnsubscribeRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[503].Exporter = func(v any, i int) any {
			switch v := v.(*AvailableModelsResponse_AvailableModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[504].Exporter = func(v any, i int) any {
			switch v := v.(*CurrentFileInfo_NotebookCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[505].Exporter = func(v any, i int) any {
			switch v := v.(*DataframeInfo_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[506].Exporter = func(v any, i int) any {
			switch v := v.(*Diagnostic_RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[507].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[508].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_ApproximateLintError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[509].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_Lints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[510].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_ToolResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[511].Exporter = func(v any, i int) any {
			switch v := v.(*ConversationMessage_ToolResult_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[512].Exporter = func(v any, i int) any {
			switch v := v.(*CodeBlock_Signatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[513].Exporter = func(v any, i int) any {
			switch v := v.(*FileDiff_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[514].Exporter = func(v any, i int) any {
			switch v := v.(*SimpleFileDiff_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[515].Exporter = func(v any, i int) any {
			switch v := v.(*ImageProto_Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[516].Exporter = func(v any, i int) any {
			switch v := v.(*GetLintsForChangeResponse_Lint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[517].Exporter = func(v any, i int) any {
			switch v := v.(*GetLintsForChangeResponse_Lint_QuickFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[518].Exporter = func(v any, i int) any {
			switch v := v.(*GetLintsForChangeResponse_Lint_QuickFix_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[519].Exporter = func(v any, i int) any {
			switch v := v.(*LinterError_RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[520].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo_Breakpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[521].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo_CallStackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[522].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo_CallStackFrame_Scope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[523].Exporter = func(v any, i int) any {
			switch v := v.(*DebugInfo_CallStackFrame_Scope_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[524].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[525].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Blob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[526].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[527].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Container_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[528].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerTreeNode_Symbol_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[529].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatResponse_ChunkIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[530].Exporter = func(v any, i int) any {
			switch v := v.(*GetComposerChatRequest_RedDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[531].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatContextRequest_CodeContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[532].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatContextResponse_UsedCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[533].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatContextResponse_CodeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[534].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatContextResponse_ChunkIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[535].Exporter = func(v any, i int) any {
			switch v := v.(*IsolatedTreesitterResponse_TreesitterSymbolNameItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[536].Exporter = func(v any, i int) any {
			switch v := v.(*IsolatedTreesitterResponse_TreesitterSymbolNameItem_TreeSitterPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[537].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiRequest_PastThought); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[538].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiRequest_BranchDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[539].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiRequest_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[540].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiRequest_FileWithPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[541].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchGeminiRequest_BranchDiff_FileDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[542].Exporter = func(v any, i int) any {
			switch v := v.(*StreamBranchFileSelectionsResponse_FileInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[543].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKDebugInfo_UnsavedFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[544].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKDebugInfo_OpenEditor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[545].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKDebugInfo_CppFileDiffHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[546].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKDebugInfo_PastThought); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[547].Exporter = func(v any, i int) any {
			switch v := v.(*StreamInlineLongCompletionRequest_ContextBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[548].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCmdKResponse_EditStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[549].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCmdKResponse_EditStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[550].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCmdKResponse_EditEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[551].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCmdKResponse_Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[552].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCmdKResponse_StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[553].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSlashEditFollowUpWithPreviousEditsResponse_Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[554].Exporter = func(v any, i int) any {
			switch v := v.(*StreamSlashEditFollowUpWithPreviousEditsResponse_EditsToUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[555].Exporter = func(v any, i int) any {
			switch v := v.(*DocumentSymbol_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[556].Exporter = func(v any, i int) any {
			switch v := v.(*CheckQueuePositionResponse_CustomLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[557].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_Chat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[558].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_ContextChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[559].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_CmdK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[560].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_TerminalCmdK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[561].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_AiReviewAcceptedComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[562].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_InterpreterChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[563].Exporter = func(v any, i int) any {
			switch v := v.(*UsageEventDetails_SlashEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[564].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeCheckResponse_SkipAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[565].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeCheckResponse_EditAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[566].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeCheckResponse_CreateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[567].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeCheckResponse_RunAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[568].Exporter = func(v any, i int) any {
			switch v := v.(*DoThisForMeResponse_UpdateStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[569].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatToolformerResponse_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[570].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatToolformerResponse_ToolAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[571].Exporter = func(v any, i int) any {
			switch v := v.(*StreamChatToolformerResponse_Thought); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[572].Exporter = func(v any, i int) any {
			switch v := v.(*GetSymbolsParams_LineRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[573].Exporter = func(v any, i int) any {
			switch v := v.(*SearchToolFileSearchResult_Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[574].Exporter = func(v any, i int) any {
			switch v := v.(*GotodefToolFileSearchResult_Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[575].Exporter = func(v any, i int) any {
			switch v := v.(*EditResult_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[576].Exporter = func(v any, i int) any {
			switch v := v.(*EditResult_Feedback_RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[577].Exporter = func(v any, i int) any {
			switch v := v.(*AddTestResult_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[578].Exporter = func(v any, i int) any {
			switch v := v.(*AddTestResult_Feedback_RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[579].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestsResult_Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[580].Exporter = func(v any, i int) any {
			switch v := v.(*SemanticSearchResult_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[581].Exporter = func(v any, i int) any {
			switch v := v.(*GetProjectStructureResult_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[582].Exporter = func(v any, i int) any {
			switch v := v.(*PushAiThoughtRequest_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[583].Exporter = func(v any, i int) any {
			switch v := v.(*PushAiThoughtRequest_Metadata_AcceptedHallucinatedFunctionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[584].Exporter = func(v any, i int) any {
			switch v := v.(*TaskInstruction_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[585].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamLogResponse_InfoUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[586].Exporter = func(v any, i int) any {
			switch v := v.(*TaskUserMessage_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[587].Exporter = func(v any, i int) any {
			switch v := v.(*IndexFileData_NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[588].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexResponse_ReadyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[589].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexResponse_RegisterItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[590].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexResponse_ChooseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[591].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexResponse_SummarizeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[592].Exporter = func(v any, i int) any {
			switch v := v.(*ListenExperimentalIndexResponse_ErrorItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[593].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesResponse_FileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[594].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesResponse_NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[595].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesResponse_FileResponse_NodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[596].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesRequest_FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[597].Exporter = func(v any, i int) any {
			switch v := v.(*ChooseCodeReferencesRequest_NodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[598].Exporter = func(v any, i int) any {
			switch v := v.(*SummarizeWithReferencesResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[599].Exporter = func(v any, i int) any {
			switch v := v.(*SummarizeWithReferencesResponse_Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[600].Exporter = func(v any, i int) any {
			switch v := v.(*NodeResult_NodeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[601].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[602].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_GatheringStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[603].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_GatheringFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[604].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_RerankingStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[605].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_RerankingFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[606].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_ReasoningStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[607].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStreamChatContextResponse_ReasoningSubstep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[608].Exporter = func(v any, i int) any {
			switch v := v.(*ModelQueryResponse_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[609].Exporter = func(v any, i int) any {
			switch v := v.(*ModelQueryResponseV2_QueryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[610].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions_AllDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[611].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions_CurrentFileContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[612].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions_LinterDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[613].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions_GlobalContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[614].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions_AllDocumentation_Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[615].Exporter = func(v any, i int) any {
			switch v := v.(*ContextOptions_LinterDiagnostics_Diagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[616].Exporter = func(v any, i int) any {
			switch v := v.(*IntentPredictionResponse_ChosenDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[617].Exporter = func(v any, i int) any {
			switch v := v.(*IntentPredictionResponse_ChosenFileContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[618].Exporter = func(v any, i int) any {
			switch v := v.(*IntentPredictionResponse_ChosenLinterDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[619].Exporter = func(v any, i int) any {
			switch v := v.(*BlockDiffPatch_ModelWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[620].Exporter = func(v any, i int) any {
			switch v := v.(*BlockDiffPatch_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[621].Exporter = func(v any, i int) any {
			switch v := v.(*CppConfigResponse_MergeBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[622].Exporter = func(v any, i int) any {
			switch v := v.(*CppConfigResponse_ImportPredictionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[623].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiLintBugRequest_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[624].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiLintBugRequest_CodeChunkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[625].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiLintBugRequest_DiscriminatorOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[626].Exporter = func(v any, i int) any {
			switch v := v.(*StreamAiLintBugRequest_CodeChunkList_CodeChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[627].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[628].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_RelatedInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[629].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_ContextRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[630].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_AncestorTypeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[631].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_InsertedSymbolType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[632].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_QuickFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[633].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_ClassInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[634].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_FunctionSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[635].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_QuickFix_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[636].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_ClassInformation_Constructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[637].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersRequest_Marker_FunctionSignature_FunctionParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[638].Exporter = func(v any, i int) any {
			switch v := v.(*FixMarkersResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[639].Exporter = func(v any, i int) any {
			switch v := v.(*GetCppEditClassificationResponse_ScoredEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[640].Exporter = func(v any, i int) any {
			switch v := v.(*GetCppEditClassificationResponse_ScoredEdit_LogProbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[641].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKEvalRequest_ProposedChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[642].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKEvalRequest_ProposedChange_Lint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[643].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[644].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKEvalRequest_ProposedChange_Lint_QuickFix_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[645].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_ProposedChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[646].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_Lint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[647].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_UsefulType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[648].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_RecentlyViewedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[649].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[650].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_ProposedChange_Lint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[651].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[652].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_ProposedChange_Lint_QuickFix_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[653].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_Lint_QuickFix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[654].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_Lint_QuickFix_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[655].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundCmdKRequest_RecentlyViewedFile_VisibleRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[656].Exporter = func(v any, i int) any {
			switch v := v.(*ContextToRank_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[657].Exporter = func(v any, i int) any {
			switch v := v.(*CppQuickAction_Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[658].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_SubmitPrompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[659].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_EndOfGeneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[660].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_InterruptGeneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[661].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_AcceptDiffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[662].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_RejectDiffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[663].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_RejectPartialDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[664].Exporter = func(v any, i int) any {
			switch v := v.(*CmdKEvent_AcceptPartialDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[665].Exporter = func(v any, i int) any {
			switch v := v.(*ChatEvent_SubmitPrompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[666].Exporter = func(v any, i int) any {
			switch v := v.(*ChatEvent_EndOfAnyGeneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[667].Exporter = func(v any, i int) any {
			switch v := v.(*ChatEvent_EndOfUninterruptedGeneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[668].Exporter = func(v any, i int) any {
			switch v := v.(*BackgroundFilesEvent_BackgroundFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[669].Exporter = func(v any, i int) any {
			switch v := v.(*CppTerminalEvent_TerminalInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[670].Exporter = func(v any, i int) any {
			switch v := v.(*CppTerminalEvent_CommandStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[671].Exporter = func(v any, i int) any {
			switch v := v.(*CppTerminalEvent_CommandFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[672].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[673].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[674].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Remote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[675].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Submodule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[676].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[677].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[678].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Head_UpstreamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[679].Exporter = func(v any, i int) any {
			switch v := v.(*CppGitContextEvent_Commit_CommitShortStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[680].Exporter = func(v any, i int) any {
			switch v := v.(*SyncMerkleSubtreeResponse_Mismatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[681].Exporter = func(v any, i int) any {
			switch v := v.(*FastUpdateFileRequest_LocalFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[682].Exporter = func(v any, i int) any {
			switch v := v.(*GetHighLevelFolderDescriptionRequest_Readme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[683].Exporter = func(v any, i int) any {
			switch v := v.(*GetEmbeddingsResponse_Embedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[684].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_NotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[685].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_Uploading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[686].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_Syncing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[687].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_Synced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[688].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_NotSubscribed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[689].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_TooBig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[690].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_AuthTokenNotFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[691].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_AuthTokenNotAuthorized); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aiserver_v1_aiserver_proto_msgTypes[692].Exporter = func(v any, i int) any {
			switch v := v.(*RepositoryStatusResponse_EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aiserver_v1_aiserver_proto_msgTypes[7].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[8].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[16].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[29].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[30].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[31].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[32].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[35].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[43].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[50].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[55].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[57].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[63].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[68].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[70].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[75].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[87].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[89].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[90].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[91].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[93].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[94].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[95].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[100].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[101].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[102].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[104].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[110].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[114].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[119].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[120].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[121].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[124].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[126].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[135].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[139].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[141].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[146].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[147].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[150].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[151].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[155].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[185].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[196].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[204].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[264].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[273].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[274].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[278].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[280].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[294].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[295].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[299].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[302].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[305].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[308].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[309].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[310].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[317].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[318].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[324].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[343].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[356].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[362].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[363].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[378].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[392].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[395].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[396].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[398].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[400].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[413].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[417].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[423].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[433].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[434].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[435].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[442].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[445].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[460].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[472].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[475].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[503].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[507].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[510].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[511].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[520].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[523].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[525].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[535].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[548].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[549].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[550].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[580].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[585].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[621].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[647].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[655].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[671].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[672].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[673].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[674].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[676].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[677].OneofWrappers = []any{}
	file_aiserver_v1_aiserver_proto_msgTypes[678].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aiserver_v1_aiserver_proto_rawDesc,
			NumEnums:      56,
			NumMessages:   693,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_aiserver_v1_aiserver_proto_goTypes,
		DependencyIndexes: file_aiserver_v1_aiserver_proto_depIdxs,
		EnumInfos:         file_aiserver_v1_aiserver_proto_enumTypes,
		MessageInfos:      file_aiserver_v1_aiserver_proto_msgTypes,
	}.Build()
	File_aiserver_v1_aiserver_proto = out.File
	file_aiserver_v1_aiserver_proto_rawDesc = nil
	file_aiserver_v1_aiserver_proto_goTypes = nil
	file_aiserver_v1_aiserver_proto_depIdxs = nil
}
