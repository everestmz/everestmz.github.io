// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: aiserver/v1/aiserver.proto

package aiserverv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/everestmz/everestmz.github.io/cursor-reversing/client/cursor/gen/aiserver/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AiServiceName is the fully-qualified name of the AiService service.
	AiServiceName = "aiserver.v1.AiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AiServiceStreamChatProcedure is the fully-qualified name of the AiService's StreamChat RPC.
	AiServiceStreamChatProcedure = "/aiserver.v1.AiService/StreamChat"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aiServiceServiceDescriptor          = v1.File_aiserver_v1_aiserver_proto.Services().ByName("AiService")
	aiServiceStreamChatMethodDescriptor = aiServiceServiceDescriptor.Methods().ByName("StreamChat")
)

// AiServiceClient is a client for the aiserver.v1.AiService service.
type AiServiceClient interface {
	StreamChat(context.Context, *connect.Request[v1.GetChatRequest]) (*connect.ServerStreamForClient[v1.StreamChatResponse], error)
}

// NewAiServiceClient constructs a client for the aiserver.v1.AiService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aiServiceClient{
		streamChat: connect.NewClient[v1.GetChatRequest, v1.StreamChatResponse](
			httpClient,
			baseURL+AiServiceStreamChatProcedure,
			connect.WithSchema(aiServiceStreamChatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aiServiceClient implements AiServiceClient.
type aiServiceClient struct {
	streamChat *connect.Client[v1.GetChatRequest, v1.StreamChatResponse]
}

// StreamChat calls aiserver.v1.AiService.StreamChat.
func (c *aiServiceClient) StreamChat(ctx context.Context, req *connect.Request[v1.GetChatRequest]) (*connect.ServerStreamForClient[v1.StreamChatResponse], error) {
	return c.streamChat.CallServerStream(ctx, req)
}

// AiServiceHandler is an implementation of the aiserver.v1.AiService service.
type AiServiceHandler interface {
	StreamChat(context.Context, *connect.Request[v1.GetChatRequest], *connect.ServerStream[v1.StreamChatResponse]) error
}

// NewAiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAiServiceHandler(svc AiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aiServiceStreamChatHandler := connect.NewServerStreamHandler(
		AiServiceStreamChatProcedure,
		svc.StreamChat,
		connect.WithSchema(aiServiceStreamChatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/aiserver.v1.AiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AiServiceStreamChatProcedure:
			aiServiceStreamChatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAiServiceHandler struct{}

func (UnimplementedAiServiceHandler) StreamChat(context.Context, *connect.Request[v1.GetChatRequest], *connect.ServerStream[v1.StreamChatResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("aiserver.v1.AiService.StreamChat is not implemented"))
}
