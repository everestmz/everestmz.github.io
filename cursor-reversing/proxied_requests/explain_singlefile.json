{
  "model": "gpt-3.5-turbo",
  "messages": [
    {
      "role": "system",
      "content": "You are an intelligent programmer, powered by GPT-3.5. You are happy to help answer any questions that the user has (usually they will be about coding).\n\n1. Please keep your response as concise as possible, and avoid being too verbose.\n\n2. When the user is asking for edits to their code, please output a simplified version of the code block that highlights the changes necessary and adds comments to indicate where unchanged code has been skipped. For example:\n```file_path\n// ... existing code ...\n{{ edit_1 }}\n// ... existing code ...\n{{ edit_2 }}\n// ... existing code ...\n```\nThe user can see the entire file, so they prefer to only read the updates to the code. Often this will mean that the start/end of the file will be skipped, but that's okay! Rewrite the entire file only if specifically requested. Always provide a brief explanation of the updates, unless the user specifically requests only the code.\n\n3. Do not lie or make up facts.\n\n4. If a user messages you in a foreign language, please respond in that language.\n\n5. Format your response in markdown.\n\n6. When writing out new code blocks, please specify the language ID after the initial backticks, like so: \n```python\n{{ code }}\n```\n\n7. When writing out code blocks for an existing file, please also specify the file path after the initial backticks and restate the method / class your codeblock belongs to, like so:\n```typescript:app/components/Ref.tsx\nfunction AIChatHistory() {\n    ...\n    {{ code }}\n    ...\n}\n```"
    },
    {
      "role": "user",
      "content": "# Inputs\n\n## Current File\nHere is the file I'm looking at. It might be truncated from above and below and, if so, is centered around my cursor.\n```main.go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n)\n\nfunc main() {\n\tbaseURL := \"https://api.openai.com\"\n\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Log the request\n\t\tlog.Printf(\"Received request: %s %s\", r.Method, r.URL.Path)\n\n\t\t// Pretty-log the request body\n\t\tbodyBytes, err := io.ReadAll(r.Body)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"Error reading request body: %v\", err)\n\t\t\thttp.Error(w, \"Error reading request body\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\t// Restore the body so it can be used in the new request\n\t\tr.Body = io.NopCloser(bytes.NewReader(bodyBytes))\n\t\tlog.Printf(\"Request Body: %s\", string(bodyBytes))\n\n\t\t// Create the URL to forward the request to\n\t\tnewUrl, err := url.Parse(baseURL)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tnewUrl.Path = r.URL.Path\n\n\t\t// Forward the request\n\t\tclient := &http.Client{}\n\t\treq, err := http.NewRequest(r.Method, newUrl.String(), io.NopCloser(bytes.NewReader(bodyBytes)))\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error creating request\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\t// Copy headers\n\t\tfor name, values := range r.Header {\n\t\t\tfor _, value := range values {\n\t\t\t\treq.Header.Add(name, value)\n\t\t\t}\n\t\t}\n\n\t\tresp, err := client.Do(req)\n\t\tif err != nil {\n\t\t\thttp.Error(w, \"Error forwarding request\", http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\t// Copy response headers\n\t\tfor name, values := range resp.Header {\n\t\t\tfor _, value := range values {\n\t\t\t\tw.Header().Add(name, value)\n\t\t\t}\n\t\t}\n\t\tw.WriteHeader(resp.StatusCode)\n\n\t\t// Copy response body\n\t\tio.Copy(w, resp.Body)\n\t})\n\n\tport := os.Getenv(\"port\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\tport = fmt.Sprintf(\":%s\", port)\n\n\tlog.Println(\"Starting server on \" + port)\n\tif err := http.ListenAndServe(port, nil); err != nil {\n\t\tlog.Fatalf(\"Failed to start server: %v\", err)\n\t}\n}\n\n\n```\n\n",
      "name": "potential_context"
    },
    {
      "role": "user",
      "content": "Explain this code"
    }
  ],
  "temperature": 0,
  "user": "ca6f0ddded68ef2b7149807e03f2515f",
  "stream": true
}
